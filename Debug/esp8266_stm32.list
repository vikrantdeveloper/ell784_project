
esp8266_stm32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003a98  080001e0  080001e0  000101e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a4  08003c78  08003c78  00013c78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003d1c  08003d1c  00020138  2**0
                  CONTENTS
  4 .ARM          00000008  08003d1c  08003d1c  00013d1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003d24  08003d24  00020138  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08003d24  08003d24  00013d24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003d2c  08003d2c  00013d2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000138  20000000  08003d30  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000610  20000138  08003e68  00020138  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000748  08003e68  00020748  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020138  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020168  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000c0d5  00000000  00000000  000201ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001d91  00000000  00000000  0002c280  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000868  00000000  00000000  0002e018  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000666  00000000  00000000  0002e880  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021de0  00000000  00000000  0002eee6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000b900  00000000  00000000  00050cc6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d2e18  00000000  00000000  0005c5c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002374  00000000  00000000  0012f3e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  00131754  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000138 	.word	0x20000138
 80001fc:	00000000 	.word	0x00000000
 8000200:	08003c60 	.word	0x08003c60

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000013c 	.word	0x2000013c
 800021c:	08003c60 	.word	0x08003c60

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <__aeabi_uldivmod>:
 8000230:	b953      	cbnz	r3, 8000248 <__aeabi_uldivmod+0x18>
 8000232:	b94a      	cbnz	r2, 8000248 <__aeabi_uldivmod+0x18>
 8000234:	2900      	cmp	r1, #0
 8000236:	bf08      	it	eq
 8000238:	2800      	cmpeq	r0, #0
 800023a:	bf1c      	itt	ne
 800023c:	f04f 31ff 	movne.w	r1, #4294967295
 8000240:	f04f 30ff 	movne.w	r0, #4294967295
 8000244:	f000 b970 	b.w	8000528 <__aeabi_idiv0>
 8000248:	f1ad 0c08 	sub.w	ip, sp, #8
 800024c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000250:	f000 f806 	bl	8000260 <__udivmoddi4>
 8000254:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000258:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800025c:	b004      	add	sp, #16
 800025e:	4770      	bx	lr

08000260 <__udivmoddi4>:
 8000260:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000264:	9e08      	ldr	r6, [sp, #32]
 8000266:	460d      	mov	r5, r1
 8000268:	4604      	mov	r4, r0
 800026a:	460f      	mov	r7, r1
 800026c:	2b00      	cmp	r3, #0
 800026e:	d14a      	bne.n	8000306 <__udivmoddi4+0xa6>
 8000270:	428a      	cmp	r2, r1
 8000272:	4694      	mov	ip, r2
 8000274:	d965      	bls.n	8000342 <__udivmoddi4+0xe2>
 8000276:	fab2 f382 	clz	r3, r2
 800027a:	b143      	cbz	r3, 800028e <__udivmoddi4+0x2e>
 800027c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000280:	f1c3 0220 	rsb	r2, r3, #32
 8000284:	409f      	lsls	r7, r3
 8000286:	fa20 f202 	lsr.w	r2, r0, r2
 800028a:	4317      	orrs	r7, r2
 800028c:	409c      	lsls	r4, r3
 800028e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000292:	fa1f f58c 	uxth.w	r5, ip
 8000296:	fbb7 f1fe 	udiv	r1, r7, lr
 800029a:	0c22      	lsrs	r2, r4, #16
 800029c:	fb0e 7711 	mls	r7, lr, r1, r7
 80002a0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002a4:	fb01 f005 	mul.w	r0, r1, r5
 80002a8:	4290      	cmp	r0, r2
 80002aa:	d90a      	bls.n	80002c2 <__udivmoddi4+0x62>
 80002ac:	eb1c 0202 	adds.w	r2, ip, r2
 80002b0:	f101 37ff 	add.w	r7, r1, #4294967295
 80002b4:	f080 811c 	bcs.w	80004f0 <__udivmoddi4+0x290>
 80002b8:	4290      	cmp	r0, r2
 80002ba:	f240 8119 	bls.w	80004f0 <__udivmoddi4+0x290>
 80002be:	3902      	subs	r1, #2
 80002c0:	4462      	add	r2, ip
 80002c2:	1a12      	subs	r2, r2, r0
 80002c4:	b2a4      	uxth	r4, r4
 80002c6:	fbb2 f0fe 	udiv	r0, r2, lr
 80002ca:	fb0e 2210 	mls	r2, lr, r0, r2
 80002ce:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002d2:	fb00 f505 	mul.w	r5, r0, r5
 80002d6:	42a5      	cmp	r5, r4
 80002d8:	d90a      	bls.n	80002f0 <__udivmoddi4+0x90>
 80002da:	eb1c 0404 	adds.w	r4, ip, r4
 80002de:	f100 32ff 	add.w	r2, r0, #4294967295
 80002e2:	f080 8107 	bcs.w	80004f4 <__udivmoddi4+0x294>
 80002e6:	42a5      	cmp	r5, r4
 80002e8:	f240 8104 	bls.w	80004f4 <__udivmoddi4+0x294>
 80002ec:	4464      	add	r4, ip
 80002ee:	3802      	subs	r0, #2
 80002f0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002f4:	1b64      	subs	r4, r4, r5
 80002f6:	2100      	movs	r1, #0
 80002f8:	b11e      	cbz	r6, 8000302 <__udivmoddi4+0xa2>
 80002fa:	40dc      	lsrs	r4, r3
 80002fc:	2300      	movs	r3, #0
 80002fe:	e9c6 4300 	strd	r4, r3, [r6]
 8000302:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000306:	428b      	cmp	r3, r1
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0xbc>
 800030a:	2e00      	cmp	r6, #0
 800030c:	f000 80ed 	beq.w	80004ea <__udivmoddi4+0x28a>
 8000310:	2100      	movs	r1, #0
 8000312:	e9c6 0500 	strd	r0, r5, [r6]
 8000316:	4608      	mov	r0, r1
 8000318:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800031c:	fab3 f183 	clz	r1, r3
 8000320:	2900      	cmp	r1, #0
 8000322:	d149      	bne.n	80003b8 <__udivmoddi4+0x158>
 8000324:	42ab      	cmp	r3, r5
 8000326:	d302      	bcc.n	800032e <__udivmoddi4+0xce>
 8000328:	4282      	cmp	r2, r0
 800032a:	f200 80f8 	bhi.w	800051e <__udivmoddi4+0x2be>
 800032e:	1a84      	subs	r4, r0, r2
 8000330:	eb65 0203 	sbc.w	r2, r5, r3
 8000334:	2001      	movs	r0, #1
 8000336:	4617      	mov	r7, r2
 8000338:	2e00      	cmp	r6, #0
 800033a:	d0e2      	beq.n	8000302 <__udivmoddi4+0xa2>
 800033c:	e9c6 4700 	strd	r4, r7, [r6]
 8000340:	e7df      	b.n	8000302 <__udivmoddi4+0xa2>
 8000342:	b902      	cbnz	r2, 8000346 <__udivmoddi4+0xe6>
 8000344:	deff      	udf	#255	; 0xff
 8000346:	fab2 f382 	clz	r3, r2
 800034a:	2b00      	cmp	r3, #0
 800034c:	f040 8090 	bne.w	8000470 <__udivmoddi4+0x210>
 8000350:	1a8a      	subs	r2, r1, r2
 8000352:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000356:	fa1f fe8c 	uxth.w	lr, ip
 800035a:	2101      	movs	r1, #1
 800035c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000360:	fb07 2015 	mls	r0, r7, r5, r2
 8000364:	0c22      	lsrs	r2, r4, #16
 8000366:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800036a:	fb0e f005 	mul.w	r0, lr, r5
 800036e:	4290      	cmp	r0, r2
 8000370:	d908      	bls.n	8000384 <__udivmoddi4+0x124>
 8000372:	eb1c 0202 	adds.w	r2, ip, r2
 8000376:	f105 38ff 	add.w	r8, r5, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0x122>
 800037c:	4290      	cmp	r0, r2
 800037e:	f200 80cb 	bhi.w	8000518 <__udivmoddi4+0x2b8>
 8000382:	4645      	mov	r5, r8
 8000384:	1a12      	subs	r2, r2, r0
 8000386:	b2a4      	uxth	r4, r4
 8000388:	fbb2 f0f7 	udiv	r0, r2, r7
 800038c:	fb07 2210 	mls	r2, r7, r0, r2
 8000390:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000394:	fb0e fe00 	mul.w	lr, lr, r0
 8000398:	45a6      	cmp	lr, r4
 800039a:	d908      	bls.n	80003ae <__udivmoddi4+0x14e>
 800039c:	eb1c 0404 	adds.w	r4, ip, r4
 80003a0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003a4:	d202      	bcs.n	80003ac <__udivmoddi4+0x14c>
 80003a6:	45a6      	cmp	lr, r4
 80003a8:	f200 80bb 	bhi.w	8000522 <__udivmoddi4+0x2c2>
 80003ac:	4610      	mov	r0, r2
 80003ae:	eba4 040e 	sub.w	r4, r4, lr
 80003b2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003b6:	e79f      	b.n	80002f8 <__udivmoddi4+0x98>
 80003b8:	f1c1 0720 	rsb	r7, r1, #32
 80003bc:	408b      	lsls	r3, r1
 80003be:	fa22 fc07 	lsr.w	ip, r2, r7
 80003c2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003c6:	fa05 f401 	lsl.w	r4, r5, r1
 80003ca:	fa20 f307 	lsr.w	r3, r0, r7
 80003ce:	40fd      	lsrs	r5, r7
 80003d0:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003d4:	4323      	orrs	r3, r4
 80003d6:	fbb5 f8f9 	udiv	r8, r5, r9
 80003da:	fa1f fe8c 	uxth.w	lr, ip
 80003de:	fb09 5518 	mls	r5, r9, r8, r5
 80003e2:	0c1c      	lsrs	r4, r3, #16
 80003e4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003e8:	fb08 f50e 	mul.w	r5, r8, lr
 80003ec:	42a5      	cmp	r5, r4
 80003ee:	fa02 f201 	lsl.w	r2, r2, r1
 80003f2:	fa00 f001 	lsl.w	r0, r0, r1
 80003f6:	d90b      	bls.n	8000410 <__udivmoddi4+0x1b0>
 80003f8:	eb1c 0404 	adds.w	r4, ip, r4
 80003fc:	f108 3aff 	add.w	sl, r8, #4294967295
 8000400:	f080 8088 	bcs.w	8000514 <__udivmoddi4+0x2b4>
 8000404:	42a5      	cmp	r5, r4
 8000406:	f240 8085 	bls.w	8000514 <__udivmoddi4+0x2b4>
 800040a:	f1a8 0802 	sub.w	r8, r8, #2
 800040e:	4464      	add	r4, ip
 8000410:	1b64      	subs	r4, r4, r5
 8000412:	b29d      	uxth	r5, r3
 8000414:	fbb4 f3f9 	udiv	r3, r4, r9
 8000418:	fb09 4413 	mls	r4, r9, r3, r4
 800041c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000420:	fb03 fe0e 	mul.w	lr, r3, lr
 8000424:	45a6      	cmp	lr, r4
 8000426:	d908      	bls.n	800043a <__udivmoddi4+0x1da>
 8000428:	eb1c 0404 	adds.w	r4, ip, r4
 800042c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000430:	d26c      	bcs.n	800050c <__udivmoddi4+0x2ac>
 8000432:	45a6      	cmp	lr, r4
 8000434:	d96a      	bls.n	800050c <__udivmoddi4+0x2ac>
 8000436:	3b02      	subs	r3, #2
 8000438:	4464      	add	r4, ip
 800043a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800043e:	fba3 9502 	umull	r9, r5, r3, r2
 8000442:	eba4 040e 	sub.w	r4, r4, lr
 8000446:	42ac      	cmp	r4, r5
 8000448:	46c8      	mov	r8, r9
 800044a:	46ae      	mov	lr, r5
 800044c:	d356      	bcc.n	80004fc <__udivmoddi4+0x29c>
 800044e:	d053      	beq.n	80004f8 <__udivmoddi4+0x298>
 8000450:	b156      	cbz	r6, 8000468 <__udivmoddi4+0x208>
 8000452:	ebb0 0208 	subs.w	r2, r0, r8
 8000456:	eb64 040e 	sbc.w	r4, r4, lr
 800045a:	fa04 f707 	lsl.w	r7, r4, r7
 800045e:	40ca      	lsrs	r2, r1
 8000460:	40cc      	lsrs	r4, r1
 8000462:	4317      	orrs	r7, r2
 8000464:	e9c6 7400 	strd	r7, r4, [r6]
 8000468:	4618      	mov	r0, r3
 800046a:	2100      	movs	r1, #0
 800046c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000470:	f1c3 0120 	rsb	r1, r3, #32
 8000474:	fa02 fc03 	lsl.w	ip, r2, r3
 8000478:	fa20 f201 	lsr.w	r2, r0, r1
 800047c:	fa25 f101 	lsr.w	r1, r5, r1
 8000480:	409d      	lsls	r5, r3
 8000482:	432a      	orrs	r2, r5
 8000484:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000488:	fa1f fe8c 	uxth.w	lr, ip
 800048c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000490:	fb07 1510 	mls	r5, r7, r0, r1
 8000494:	0c11      	lsrs	r1, r2, #16
 8000496:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800049a:	fb00 f50e 	mul.w	r5, r0, lr
 800049e:	428d      	cmp	r5, r1
 80004a0:	fa04 f403 	lsl.w	r4, r4, r3
 80004a4:	d908      	bls.n	80004b8 <__udivmoddi4+0x258>
 80004a6:	eb1c 0101 	adds.w	r1, ip, r1
 80004aa:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ae:	d22f      	bcs.n	8000510 <__udivmoddi4+0x2b0>
 80004b0:	428d      	cmp	r5, r1
 80004b2:	d92d      	bls.n	8000510 <__udivmoddi4+0x2b0>
 80004b4:	3802      	subs	r0, #2
 80004b6:	4461      	add	r1, ip
 80004b8:	1b49      	subs	r1, r1, r5
 80004ba:	b292      	uxth	r2, r2
 80004bc:	fbb1 f5f7 	udiv	r5, r1, r7
 80004c0:	fb07 1115 	mls	r1, r7, r5, r1
 80004c4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004c8:	fb05 f10e 	mul.w	r1, r5, lr
 80004cc:	4291      	cmp	r1, r2
 80004ce:	d908      	bls.n	80004e2 <__udivmoddi4+0x282>
 80004d0:	eb1c 0202 	adds.w	r2, ip, r2
 80004d4:	f105 38ff 	add.w	r8, r5, #4294967295
 80004d8:	d216      	bcs.n	8000508 <__udivmoddi4+0x2a8>
 80004da:	4291      	cmp	r1, r2
 80004dc:	d914      	bls.n	8000508 <__udivmoddi4+0x2a8>
 80004de:	3d02      	subs	r5, #2
 80004e0:	4462      	add	r2, ip
 80004e2:	1a52      	subs	r2, r2, r1
 80004e4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004e8:	e738      	b.n	800035c <__udivmoddi4+0xfc>
 80004ea:	4631      	mov	r1, r6
 80004ec:	4630      	mov	r0, r6
 80004ee:	e708      	b.n	8000302 <__udivmoddi4+0xa2>
 80004f0:	4639      	mov	r1, r7
 80004f2:	e6e6      	b.n	80002c2 <__udivmoddi4+0x62>
 80004f4:	4610      	mov	r0, r2
 80004f6:	e6fb      	b.n	80002f0 <__udivmoddi4+0x90>
 80004f8:	4548      	cmp	r0, r9
 80004fa:	d2a9      	bcs.n	8000450 <__udivmoddi4+0x1f0>
 80004fc:	ebb9 0802 	subs.w	r8, r9, r2
 8000500:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000504:	3b01      	subs	r3, #1
 8000506:	e7a3      	b.n	8000450 <__udivmoddi4+0x1f0>
 8000508:	4645      	mov	r5, r8
 800050a:	e7ea      	b.n	80004e2 <__udivmoddi4+0x282>
 800050c:	462b      	mov	r3, r5
 800050e:	e794      	b.n	800043a <__udivmoddi4+0x1da>
 8000510:	4640      	mov	r0, r8
 8000512:	e7d1      	b.n	80004b8 <__udivmoddi4+0x258>
 8000514:	46d0      	mov	r8, sl
 8000516:	e77b      	b.n	8000410 <__udivmoddi4+0x1b0>
 8000518:	3d02      	subs	r5, #2
 800051a:	4462      	add	r2, ip
 800051c:	e732      	b.n	8000384 <__udivmoddi4+0x124>
 800051e:	4608      	mov	r0, r1
 8000520:	e70a      	b.n	8000338 <__udivmoddi4+0xd8>
 8000522:	4464      	add	r4, ip
 8000524:	3802      	subs	r0, #2
 8000526:	e742      	b.n	80003ae <__udivmoddi4+0x14e>

08000528 <__aeabi_idiv0>:
 8000528:	4770      	bx	lr
 800052a:	bf00      	nop

0800052c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000530:	f000 fac3 	bl	8000aba <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000534:	f000 f842 	bl	80005bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000538:	f000 f908 	bl	800074c <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800053c:	f000 f8d6 	bl	80006ec <MX_USART3_UART_Init>

  /* USER CODE BEGIN 2 */
  wifi_init();
 8000540:	f003 fa9c 	bl	8003a7c <wifi_init>
  HAL_Delay(2000);
 8000544:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000548:	f000 fb14 	bl	8000b74 <HAL_Delay>
#if defined WIFI_UART_COM
  wifi_start();
  HAL_Delay(2000);
#endif

  wifi_rst();
 800054c:	f003 fa60 	bl	8003a10 <wifi_rst>
  HAL_Delay(5000);
 8000550:	f241 3088 	movw	r0, #5000	; 0x1388
 8000554:	f000 fb0e 	bl	8000b74 <HAL_Delay>

  Wifi_Uart_t.log_buf(&Wifi_Uart_t.WiFi_Rx[0], &Wifi_Uart_t.WiFi_Rx_len);
 8000558:	4b15      	ldr	r3, [pc, #84]	; (80005b0 <main+0x84>)
 800055a:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800055e:	4915      	ldr	r1, [pc, #84]	; (80005b4 <main+0x88>)
 8000560:	4815      	ldr	r0, [pc, #84]	; (80005b8 <main+0x8c>)
 8000562:	4798      	blx	r3
  Wifi_Uart_t.log_clr(&Wifi_Uart_t.WiFi_Rx[0], &Wifi_Uart_t.WiFi_Rx_len);
 8000564:	4b12      	ldr	r3, [pc, #72]	; (80005b0 <main+0x84>)
 8000566:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800056a:	4912      	ldr	r1, [pc, #72]	; (80005b4 <main+0x88>)
 800056c:	4812      	ldr	r0, [pc, #72]	; (80005b8 <main+0x8c>)
 800056e:	4798      	blx	r3
#if defined WIFI_VERSION
  wifi_version();
  HAL_Delay(2000);
#endif

  wifi_mode();
 8000570:	f003 fa2a 	bl	80039c8 <wifi_mode>
  HAL_Delay(2000);
 8000574:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000578:	f000 fafc 	bl	8000b74 <HAL_Delay>
  wifi_ap_connect();
 800057c:	f003 fa36 	bl	80039ec <wifi_ap_connect>
  HAL_Delay(8000);
 8000580:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 8000584:	f000 faf6 	bl	8000b74 <HAL_Delay>
  wifi_mac_add();
 8000588:	f003 fa54 	bl	8003a34 <wifi_mac_add>
  HAL_Delay(5000);
 800058c:	f241 3088 	movw	r0, #5000	; 0x1388
 8000590:	f000 faf0 	bl	8000b74 <HAL_Delay>
  tcp_server_conn();
 8000594:	f003 fa60 	bl	8003a58 <tcp_server_conn>
  HAL_Delay(5000);
 8000598:	f241 3088 	movw	r0, #5000	; 0x1388
 800059c:	f000 faea 	bl	8000b74 <HAL_Delay>

  Wifi_Uart_t.log_buf(&Wifi_Uart_t.WiFi_Rx[0], &Wifi_Uart_t.WiFi_Rx_len);
 80005a0:	4b03      	ldr	r3, [pc, #12]	; (80005b0 <main+0x84>)
 80005a2:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 80005a6:	4903      	ldr	r1, [pc, #12]	; (80005b4 <main+0x88>)
 80005a8:	4803      	ldr	r0, [pc, #12]	; (80005b8 <main+0x8c>)
 80005aa:	4798      	blx	r3

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005ac:	e7fe      	b.n	80005ac <main+0x80>
 80005ae:	bf00      	nop
 80005b0:	20000260 	.word	0x20000260
 80005b4:	20000468 	.word	0x20000468
 80005b8:	20000265 	.word	0x20000265

080005bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b0b4      	sub	sp, #208	; 0xd0
 80005c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005c2:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80005c6:	2230      	movs	r2, #48	; 0x30
 80005c8:	2100      	movs	r1, #0
 80005ca:	4618      	mov	r0, r3
 80005cc:	f003 fab6 	bl	8003b3c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005d0:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80005d4:	2200      	movs	r2, #0
 80005d6:	601a      	str	r2, [r3, #0]
 80005d8:	605a      	str	r2, [r3, #4]
 80005da:	609a      	str	r2, [r3, #8]
 80005dc:	60da      	str	r2, [r3, #12]
 80005de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80005e0:	f107 030c 	add.w	r3, r7, #12
 80005e4:	2280      	movs	r2, #128	; 0x80
 80005e6:	2100      	movs	r1, #0
 80005e8:	4618      	mov	r0, r3
 80005ea:	f003 faa7 	bl	8003b3c <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80005ee:	f000 fe3f 	bl	8001270 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005f2:	4b3b      	ldr	r3, [pc, #236]	; (80006e0 <SystemClock_Config+0x124>)
 80005f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005f6:	4a3a      	ldr	r2, [pc, #232]	; (80006e0 <SystemClock_Config+0x124>)
 80005f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005fc:	6413      	str	r3, [r2, #64]	; 0x40
 80005fe:	4b38      	ldr	r3, [pc, #224]	; (80006e0 <SystemClock_Config+0x124>)
 8000600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000602:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000606:	60bb      	str	r3, [r7, #8]
 8000608:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800060a:	4b36      	ldr	r3, [pc, #216]	; (80006e4 <SystemClock_Config+0x128>)
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000612:	4a34      	ldr	r2, [pc, #208]	; (80006e4 <SystemClock_Config+0x128>)
 8000614:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000618:	6013      	str	r3, [r2, #0]
 800061a:	4b32      	ldr	r3, [pc, #200]	; (80006e4 <SystemClock_Config+0x128>)
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000622:	607b      	str	r3, [r7, #4]
 8000624:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000626:	2303      	movs	r3, #3
 8000628:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800062c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000630:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000634:	2301      	movs	r3, #1
 8000636:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800063a:	2310      	movs	r3, #16
 800063c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000640:	2302      	movs	r3, #2
 8000642:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000646:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800064a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 4;
 800064e:	2304      	movs	r3, #4
 8000650:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 216;
 8000654:	23d8      	movs	r3, #216	; 0xd8
 8000656:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800065a:	2302      	movs	r3, #2
 800065c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8000660:	2309      	movs	r3, #9
 8000662:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000666:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800066a:	4618      	mov	r0, r3
 800066c:	f000 fe10 	bl	8001290 <HAL_RCC_OscConfig>
 8000670:	4603      	mov	r3, r0
 8000672:	2b00      	cmp	r3, #0
 8000674:	d001      	beq.n	800067a <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8000676:	f000 f90b 	bl	8000890 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800067a:	230f      	movs	r3, #15
 800067c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000680:	2300      	movs	r3, #0
 8000682:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000686:	2300      	movs	r3, #0
 8000688:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800068c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000690:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000694:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000698:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800069c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80006a0:	2100      	movs	r1, #0
 80006a2:	4618      	mov	r0, r3
 80006a4:	f001 f898 	bl	80017d8 <HAL_RCC_ClockConfig>
 80006a8:	4603      	mov	r3, r0
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d001      	beq.n	80006b2 <SystemClock_Config+0xf6>
  {
    Error_Handler();
 80006ae:	f000 f8ef 	bl	8000890 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_USART3
 80006b2:	4b0d      	ldr	r3, [pc, #52]	; (80006e8 <SystemClock_Config+0x12c>)
 80006b4:	60fb      	str	r3, [r7, #12]
                              |RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80006b6:	2300      	movs	r3, #0
 80006b8:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80006ba:	2300      	movs	r3, #0
 80006bc:	653b      	str	r3, [r7, #80]	; 0x50
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 80006be:	2300      	movs	r3, #0
 80006c0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80006c4:	f107 030c 	add.w	r3, r7, #12
 80006c8:	4618      	mov	r0, r3
 80006ca:	f001 faab 	bl	8001c24 <HAL_RCCEx_PeriphCLKConfig>
 80006ce:	4603      	mov	r3, r0
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d001      	beq.n	80006d8 <SystemClock_Config+0x11c>
  {
    Error_Handler();
 80006d4:	f000 f8dc 	bl	8000890 <Error_Handler>
  }
}
 80006d8:	bf00      	nop
 80006da:	37d0      	adds	r7, #208	; 0xd0
 80006dc:	46bd      	mov	sp, r7
 80006de:	bd80      	pop	{r7, pc}
 80006e0:	40023800 	.word	0x40023800
 80006e4:	40007000 	.word	0x40007000
 80006e8:	00200180 	.word	0x00200180

080006ec <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80006f0:	4b14      	ldr	r3, [pc, #80]	; (8000744 <MX_USART3_UART_Init+0x58>)
 80006f2:	4a15      	ldr	r2, [pc, #84]	; (8000748 <MX_USART3_UART_Init+0x5c>)
 80006f4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80006f6:	4b13      	ldr	r3, [pc, #76]	; (8000744 <MX_USART3_UART_Init+0x58>)
 80006f8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006fc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80006fe:	4b11      	ldr	r3, [pc, #68]	; (8000744 <MX_USART3_UART_Init+0x58>)
 8000700:	2200      	movs	r2, #0
 8000702:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000704:	4b0f      	ldr	r3, [pc, #60]	; (8000744 <MX_USART3_UART_Init+0x58>)
 8000706:	2200      	movs	r2, #0
 8000708:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800070a:	4b0e      	ldr	r3, [pc, #56]	; (8000744 <MX_USART3_UART_Init+0x58>)
 800070c:	2200      	movs	r2, #0
 800070e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000710:	4b0c      	ldr	r3, [pc, #48]	; (8000744 <MX_USART3_UART_Init+0x58>)
 8000712:	220c      	movs	r2, #12
 8000714:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000716:	4b0b      	ldr	r3, [pc, #44]	; (8000744 <MX_USART3_UART_Init+0x58>)
 8000718:	2200      	movs	r2, #0
 800071a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800071c:	4b09      	ldr	r3, [pc, #36]	; (8000744 <MX_USART3_UART_Init+0x58>)
 800071e:	2200      	movs	r2, #0
 8000720:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000722:	4b08      	ldr	r3, [pc, #32]	; (8000744 <MX_USART3_UART_Init+0x58>)
 8000724:	2200      	movs	r2, #0
 8000726:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000728:	4b06      	ldr	r3, [pc, #24]	; (8000744 <MX_USART3_UART_Init+0x58>)
 800072a:	2200      	movs	r2, #0
 800072c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800072e:	4805      	ldr	r0, [pc, #20]	; (8000744 <MX_USART3_UART_Init+0x58>)
 8000730:	f001 fdc2 	bl	80022b8 <HAL_UART_Init>
 8000734:	4603      	mov	r3, r0
 8000736:	2b00      	cmp	r3, #0
 8000738:	d001      	beq.n	800073e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800073a:	f000 f8a9 	bl	8000890 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800073e:	bf00      	nop
 8000740:	bd80      	pop	{r7, pc}
 8000742:	bf00      	nop
 8000744:	20000154 	.word	0x20000154
 8000748:	40004800 	.word	0x40004800

0800074c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b08c      	sub	sp, #48	; 0x30
 8000750:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000752:	f107 031c 	add.w	r3, r7, #28
 8000756:	2200      	movs	r2, #0
 8000758:	601a      	str	r2, [r3, #0]
 800075a:	605a      	str	r2, [r3, #4]
 800075c:	609a      	str	r2, [r3, #8]
 800075e:	60da      	str	r2, [r3, #12]
 8000760:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000762:	4b47      	ldr	r3, [pc, #284]	; (8000880 <MX_GPIO_Init+0x134>)
 8000764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000766:	4a46      	ldr	r2, [pc, #280]	; (8000880 <MX_GPIO_Init+0x134>)
 8000768:	f043 0304 	orr.w	r3, r3, #4
 800076c:	6313      	str	r3, [r2, #48]	; 0x30
 800076e:	4b44      	ldr	r3, [pc, #272]	; (8000880 <MX_GPIO_Init+0x134>)
 8000770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000772:	f003 0304 	and.w	r3, r3, #4
 8000776:	61bb      	str	r3, [r7, #24]
 8000778:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800077a:	4b41      	ldr	r3, [pc, #260]	; (8000880 <MX_GPIO_Init+0x134>)
 800077c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077e:	4a40      	ldr	r2, [pc, #256]	; (8000880 <MX_GPIO_Init+0x134>)
 8000780:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000784:	6313      	str	r3, [r2, #48]	; 0x30
 8000786:	4b3e      	ldr	r3, [pc, #248]	; (8000880 <MX_GPIO_Init+0x134>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800078e:	617b      	str	r3, [r7, #20]
 8000790:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000792:	4b3b      	ldr	r3, [pc, #236]	; (8000880 <MX_GPIO_Init+0x134>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000796:	4a3a      	ldr	r2, [pc, #232]	; (8000880 <MX_GPIO_Init+0x134>)
 8000798:	f043 0302 	orr.w	r3, r3, #2
 800079c:	6313      	str	r3, [r2, #48]	; 0x30
 800079e:	4b38      	ldr	r3, [pc, #224]	; (8000880 <MX_GPIO_Init+0x134>)
 80007a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a2:	f003 0302 	and.w	r3, r3, #2
 80007a6:	613b      	str	r3, [r7, #16]
 80007a8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007aa:	4b35      	ldr	r3, [pc, #212]	; (8000880 <MX_GPIO_Init+0x134>)
 80007ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ae:	4a34      	ldr	r2, [pc, #208]	; (8000880 <MX_GPIO_Init+0x134>)
 80007b0:	f043 0308 	orr.w	r3, r3, #8
 80007b4:	6313      	str	r3, [r2, #48]	; 0x30
 80007b6:	4b32      	ldr	r3, [pc, #200]	; (8000880 <MX_GPIO_Init+0x134>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ba:	f003 0308 	and.w	r3, r3, #8
 80007be:	60fb      	str	r3, [r7, #12]
 80007c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80007c2:	4b2f      	ldr	r3, [pc, #188]	; (8000880 <MX_GPIO_Init+0x134>)
 80007c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c6:	4a2e      	ldr	r2, [pc, #184]	; (8000880 <MX_GPIO_Init+0x134>)
 80007c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80007cc:	6313      	str	r3, [r2, #48]	; 0x30
 80007ce:	4b2c      	ldr	r3, [pc, #176]	; (8000880 <MX_GPIO_Init+0x134>)
 80007d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80007d6:	60bb      	str	r3, [r7, #8]
 80007d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007da:	4b29      	ldr	r3, [pc, #164]	; (8000880 <MX_GPIO_Init+0x134>)
 80007dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007de:	4a28      	ldr	r2, [pc, #160]	; (8000880 <MX_GPIO_Init+0x134>)
 80007e0:	f043 0301 	orr.w	r3, r3, #1
 80007e4:	6313      	str	r3, [r2, #48]	; 0x30
 80007e6:	4b26      	ldr	r3, [pc, #152]	; (8000880 <MX_GPIO_Init+0x134>)
 80007e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ea:	f003 0301 	and.w	r3, r3, #1
 80007ee:	607b      	str	r3, [r7, #4]
 80007f0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80007f2:	2200      	movs	r2, #0
 80007f4:	f244 0181 	movw	r1, #16513	; 0x4081
 80007f8:	4822      	ldr	r0, [pc, #136]	; (8000884 <MX_GPIO_Init+0x138>)
 80007fa:	f000 fd1f 	bl	800123c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80007fe:	2200      	movs	r2, #0
 8000800:	2140      	movs	r1, #64	; 0x40
 8000802:	4821      	ldr	r0, [pc, #132]	; (8000888 <MX_GPIO_Init+0x13c>)
 8000804:	f000 fd1a 	bl	800123c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000808:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800080c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800080e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000812:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000814:	2300      	movs	r3, #0
 8000816:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000818:	f107 031c 	add.w	r3, r7, #28
 800081c:	4619      	mov	r1, r3
 800081e:	481b      	ldr	r0, [pc, #108]	; (800088c <MX_GPIO_Init+0x140>)
 8000820:	f000 fb70 	bl	8000f04 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000824:	f244 0381 	movw	r3, #16513	; 0x4081
 8000828:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800082a:	2301      	movs	r3, #1
 800082c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800082e:	2300      	movs	r3, #0
 8000830:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000832:	2300      	movs	r3, #0
 8000834:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000836:	f107 031c 	add.w	r3, r7, #28
 800083a:	4619      	mov	r1, r3
 800083c:	4811      	ldr	r0, [pc, #68]	; (8000884 <MX_GPIO_Init+0x138>)
 800083e:	f000 fb61 	bl	8000f04 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000842:	2340      	movs	r3, #64	; 0x40
 8000844:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000846:	2301      	movs	r3, #1
 8000848:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800084a:	2300      	movs	r3, #0
 800084c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800084e:	2300      	movs	r3, #0
 8000850:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000852:	f107 031c 	add.w	r3, r7, #28
 8000856:	4619      	mov	r1, r3
 8000858:	480b      	ldr	r0, [pc, #44]	; (8000888 <MX_GPIO_Init+0x13c>)
 800085a:	f000 fb53 	bl	8000f04 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800085e:	2380      	movs	r3, #128	; 0x80
 8000860:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000862:	2300      	movs	r3, #0
 8000864:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000866:	2300      	movs	r3, #0
 8000868:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800086a:	f107 031c 	add.w	r3, r7, #28
 800086e:	4619      	mov	r1, r3
 8000870:	4805      	ldr	r0, [pc, #20]	; (8000888 <MX_GPIO_Init+0x13c>)
 8000872:	f000 fb47 	bl	8000f04 <HAL_GPIO_Init>

}
 8000876:	bf00      	nop
 8000878:	3730      	adds	r7, #48	; 0x30
 800087a:	46bd      	mov	sp, r7
 800087c:	bd80      	pop	{r7, pc}
 800087e:	bf00      	nop
 8000880:	40023800 	.word	0x40023800
 8000884:	40020400 	.word	0x40020400
 8000888:	40021800 	.word	0x40021800
 800088c:	40020800 	.word	0x40020800

08000890 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000890:	b480      	push	{r7}
 8000892:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000894:	b672      	cpsid	i
}
 8000896:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000898:	e7fe      	b.n	8000898 <Error_Handler+0x8>
	...

0800089c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800089c:	b480      	push	{r7}
 800089e:	b083      	sub	sp, #12
 80008a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80008a2:	4b0f      	ldr	r3, [pc, #60]	; (80008e0 <HAL_MspInit+0x44>)
 80008a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008a6:	4a0e      	ldr	r2, [pc, #56]	; (80008e0 <HAL_MspInit+0x44>)
 80008a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008ac:	6413      	str	r3, [r2, #64]	; 0x40
 80008ae:	4b0c      	ldr	r3, [pc, #48]	; (80008e0 <HAL_MspInit+0x44>)
 80008b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008b6:	607b      	str	r3, [r7, #4]
 80008b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008ba:	4b09      	ldr	r3, [pc, #36]	; (80008e0 <HAL_MspInit+0x44>)
 80008bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008be:	4a08      	ldr	r2, [pc, #32]	; (80008e0 <HAL_MspInit+0x44>)
 80008c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008c4:	6453      	str	r3, [r2, #68]	; 0x44
 80008c6:	4b06      	ldr	r3, [pc, #24]	; (80008e0 <HAL_MspInit+0x44>)
 80008c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008ce:	603b      	str	r3, [r7, #0]
 80008d0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008d2:	bf00      	nop
 80008d4:	370c      	adds	r7, #12
 80008d6:	46bd      	mov	sp, r7
 80008d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008dc:	4770      	bx	lr
 80008de:	bf00      	nop
 80008e0:	40023800 	.word	0x40023800

080008e4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b08c      	sub	sp, #48	; 0x30
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ec:	f107 031c 	add.w	r3, r7, #28
 80008f0:	2200      	movs	r2, #0
 80008f2:	601a      	str	r2, [r3, #0]
 80008f4:	605a      	str	r2, [r3, #4]
 80008f6:	609a      	str	r2, [r3, #8]
 80008f8:	60da      	str	r2, [r3, #12]
 80008fa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	4a32      	ldr	r2, [pc, #200]	; (80009cc <HAL_UART_MspInit+0xe8>)
 8000902:	4293      	cmp	r3, r2
 8000904:	d130      	bne.n	8000968 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000906:	4b32      	ldr	r3, [pc, #200]	; (80009d0 <HAL_UART_MspInit+0xec>)
 8000908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800090a:	4a31      	ldr	r2, [pc, #196]	; (80009d0 <HAL_UART_MspInit+0xec>)
 800090c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000910:	6413      	str	r3, [r2, #64]	; 0x40
 8000912:	4b2f      	ldr	r3, [pc, #188]	; (80009d0 <HAL_UART_MspInit+0xec>)
 8000914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000916:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800091a:	61bb      	str	r3, [r7, #24]
 800091c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800091e:	4b2c      	ldr	r3, [pc, #176]	; (80009d0 <HAL_UART_MspInit+0xec>)
 8000920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000922:	4a2b      	ldr	r2, [pc, #172]	; (80009d0 <HAL_UART_MspInit+0xec>)
 8000924:	f043 0308 	orr.w	r3, r3, #8
 8000928:	6313      	str	r3, [r2, #48]	; 0x30
 800092a:	4b29      	ldr	r3, [pc, #164]	; (80009d0 <HAL_UART_MspInit+0xec>)
 800092c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092e:	f003 0308 	and.w	r3, r3, #8
 8000932:	617b      	str	r3, [r7, #20]
 8000934:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8000936:	2360      	movs	r3, #96	; 0x60
 8000938:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800093a:	2302      	movs	r3, #2
 800093c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093e:	2300      	movs	r3, #0
 8000940:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000942:	2303      	movs	r3, #3
 8000944:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000946:	2307      	movs	r3, #7
 8000948:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800094a:	f107 031c 	add.w	r3, r7, #28
 800094e:	4619      	mov	r1, r3
 8000950:	4820      	ldr	r0, [pc, #128]	; (80009d4 <HAL_UART_MspInit+0xf0>)
 8000952:	f000 fad7 	bl	8000f04 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000956:	2200      	movs	r2, #0
 8000958:	2100      	movs	r1, #0
 800095a:	2026      	movs	r0, #38	; 0x26
 800095c:	f000 fa09 	bl	8000d72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000960:	2026      	movs	r0, #38	; 0x26
 8000962:	f000 fa22 	bl	8000daa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000966:	e02d      	b.n	80009c4 <HAL_UART_MspInit+0xe0>
  else if(huart->Instance==USART3)
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	4a1a      	ldr	r2, [pc, #104]	; (80009d8 <HAL_UART_MspInit+0xf4>)
 800096e:	4293      	cmp	r3, r2
 8000970:	d128      	bne.n	80009c4 <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000972:	4b17      	ldr	r3, [pc, #92]	; (80009d0 <HAL_UART_MspInit+0xec>)
 8000974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000976:	4a16      	ldr	r2, [pc, #88]	; (80009d0 <HAL_UART_MspInit+0xec>)
 8000978:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800097c:	6413      	str	r3, [r2, #64]	; 0x40
 800097e:	4b14      	ldr	r3, [pc, #80]	; (80009d0 <HAL_UART_MspInit+0xec>)
 8000980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000982:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000986:	613b      	str	r3, [r7, #16]
 8000988:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800098a:	4b11      	ldr	r3, [pc, #68]	; (80009d0 <HAL_UART_MspInit+0xec>)
 800098c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800098e:	4a10      	ldr	r2, [pc, #64]	; (80009d0 <HAL_UART_MspInit+0xec>)
 8000990:	f043 0308 	orr.w	r3, r3, #8
 8000994:	6313      	str	r3, [r2, #48]	; 0x30
 8000996:	4b0e      	ldr	r3, [pc, #56]	; (80009d0 <HAL_UART_MspInit+0xec>)
 8000998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099a:	f003 0308 	and.w	r3, r3, #8
 800099e:	60fb      	str	r3, [r7, #12]
 80009a0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80009a2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80009a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009a8:	2302      	movs	r3, #2
 80009aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ac:	2300      	movs	r3, #0
 80009ae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009b0:	2303      	movs	r3, #3
 80009b2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80009b4:	2307      	movs	r3, #7
 80009b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009b8:	f107 031c 	add.w	r3, r7, #28
 80009bc:	4619      	mov	r1, r3
 80009be:	4805      	ldr	r0, [pc, #20]	; (80009d4 <HAL_UART_MspInit+0xf0>)
 80009c0:	f000 faa0 	bl	8000f04 <HAL_GPIO_Init>
}
 80009c4:	bf00      	nop
 80009c6:	3730      	adds	r7, #48	; 0x30
 80009c8:	46bd      	mov	sp, r7
 80009ca:	bd80      	pop	{r7, pc}
 80009cc:	40004400 	.word	0x40004400
 80009d0:	40023800 	.word	0x40023800
 80009d4:	40020c00 	.word	0x40020c00
 80009d8:	40004800 	.word	0x40004800

080009dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009dc:	b480      	push	{r7}
 80009de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009e0:	e7fe      	b.n	80009e0 <NMI_Handler+0x4>

080009e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009e2:	b480      	push	{r7}
 80009e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009e6:	e7fe      	b.n	80009e6 <HardFault_Handler+0x4>

080009e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009e8:	b480      	push	{r7}
 80009ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009ec:	e7fe      	b.n	80009ec <MemManage_Handler+0x4>

080009ee <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009ee:	b480      	push	{r7}
 80009f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009f2:	e7fe      	b.n	80009f2 <BusFault_Handler+0x4>

080009f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009f4:	b480      	push	{r7}
 80009f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009f8:	e7fe      	b.n	80009f8 <UsageFault_Handler+0x4>

080009fa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009fa:	b480      	push	{r7}
 80009fc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009fe:	bf00      	nop
 8000a00:	46bd      	mov	sp, r7
 8000a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a06:	4770      	bx	lr

08000a08 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a0c:	bf00      	nop
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a14:	4770      	bx	lr

08000a16 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a16:	b480      	push	{r7}
 8000a18:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a1a:	bf00      	nop
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a22:	4770      	bx	lr

08000a24 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a28:	f000 f884 	bl	8000b34 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a2c:	bf00      	nop
 8000a2e:	bd80      	pop	{r7, pc}

08000a30 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&wifi_uart);
 8000a34:	4802      	ldr	r0, [pc, #8]	; (8000a40 <USART2_IRQHandler+0x10>)
 8000a36:	f001 fd6f 	bl	8002518 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000a3a:	bf00      	nop
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	bf00      	nop
 8000a40:	200001dc 	.word	0x200001dc

08000a44 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a44:	b480      	push	{r7}
 8000a46:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a48:	4b06      	ldr	r3, [pc, #24]	; (8000a64 <SystemInit+0x20>)
 8000a4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a4e:	4a05      	ldr	r2, [pc, #20]	; (8000a64 <SystemInit+0x20>)
 8000a50:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a54:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a58:	bf00      	nop
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a60:	4770      	bx	lr
 8000a62:	bf00      	nop
 8000a64:	e000ed00 	.word	0xe000ed00

08000a68 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000a68:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000aa0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000a6c:	480d      	ldr	r0, [pc, #52]	; (8000aa4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000a6e:	490e      	ldr	r1, [pc, #56]	; (8000aa8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000a70:	4a0e      	ldr	r2, [pc, #56]	; (8000aac <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000a72:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a74:	e002      	b.n	8000a7c <LoopCopyDataInit>

08000a76 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a76:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a78:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a7a:	3304      	adds	r3, #4

08000a7c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a7c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a7e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a80:	d3f9      	bcc.n	8000a76 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a82:	4a0b      	ldr	r2, [pc, #44]	; (8000ab0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000a84:	4c0b      	ldr	r4, [pc, #44]	; (8000ab4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000a86:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a88:	e001      	b.n	8000a8e <LoopFillZerobss>

08000a8a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a8a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a8c:	3204      	adds	r2, #4

08000a8e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a8e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a90:	d3fb      	bcc.n	8000a8a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000a92:	f7ff ffd7 	bl	8000a44 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a96:	f003 f859 	bl	8003b4c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a9a:	f7ff fd47 	bl	800052c <main>
  bx  lr    
 8000a9e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000aa0:	20040000 	.word	0x20040000
  ldr r0, =_sdata
 8000aa4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000aa8:	20000138 	.word	0x20000138
  ldr r2, =_sidata
 8000aac:	08003d30 	.word	0x08003d30
  ldr r2, =_sbss
 8000ab0:	20000138 	.word	0x20000138
  ldr r4, =_ebss
 8000ab4:	20000748 	.word	0x20000748

08000ab8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ab8:	e7fe      	b.n	8000ab8 <ADC_IRQHandler>

08000aba <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000aba:	b580      	push	{r7, lr}
 8000abc:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000abe:	2003      	movs	r0, #3
 8000ac0:	f000 f94c 	bl	8000d5c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ac4:	2000      	movs	r0, #0
 8000ac6:	f000 f805 	bl	8000ad4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000aca:	f7ff fee7 	bl	800089c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ace:	2300      	movs	r3, #0
}
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	bd80      	pop	{r7, pc}

08000ad4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b082      	sub	sp, #8
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000adc:	4b12      	ldr	r3, [pc, #72]	; (8000b28 <HAL_InitTick+0x54>)
 8000ade:	681a      	ldr	r2, [r3, #0]
 8000ae0:	4b12      	ldr	r3, [pc, #72]	; (8000b2c <HAL_InitTick+0x58>)
 8000ae2:	781b      	ldrb	r3, [r3, #0]
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000aea:	fbb3 f3f1 	udiv	r3, r3, r1
 8000aee:	fbb2 f3f3 	udiv	r3, r2, r3
 8000af2:	4618      	mov	r0, r3
 8000af4:	f000 f967 	bl	8000dc6 <HAL_SYSTICK_Config>
 8000af8:	4603      	mov	r3, r0
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d001      	beq.n	8000b02 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000afe:	2301      	movs	r3, #1
 8000b00:	e00e      	b.n	8000b20 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	2b0f      	cmp	r3, #15
 8000b06:	d80a      	bhi.n	8000b1e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b08:	2200      	movs	r2, #0
 8000b0a:	6879      	ldr	r1, [r7, #4]
 8000b0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b10:	f000 f92f 	bl	8000d72 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b14:	4a06      	ldr	r2, [pc, #24]	; (8000b30 <HAL_InitTick+0x5c>)
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	e000      	b.n	8000b20 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b1e:	2301      	movs	r3, #1
}
 8000b20:	4618      	mov	r0, r3
 8000b22:	3708      	adds	r7, #8
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bd80      	pop	{r7, pc}
 8000b28:	20000000 	.word	0x20000000
 8000b2c:	20000008 	.word	0x20000008
 8000b30:	20000004 	.word	0x20000004

08000b34 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b34:	b480      	push	{r7}
 8000b36:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b38:	4b06      	ldr	r3, [pc, #24]	; (8000b54 <HAL_IncTick+0x20>)
 8000b3a:	781b      	ldrb	r3, [r3, #0]
 8000b3c:	461a      	mov	r2, r3
 8000b3e:	4b06      	ldr	r3, [pc, #24]	; (8000b58 <HAL_IncTick+0x24>)
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	4413      	add	r3, r2
 8000b44:	4a04      	ldr	r2, [pc, #16]	; (8000b58 <HAL_IncTick+0x24>)
 8000b46:	6013      	str	r3, [r2, #0]
}
 8000b48:	bf00      	nop
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b50:	4770      	bx	lr
 8000b52:	bf00      	nop
 8000b54:	20000008 	.word	0x20000008
 8000b58:	200001d8 	.word	0x200001d8

08000b5c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	af00      	add	r7, sp, #0
  return uwTick;
 8000b60:	4b03      	ldr	r3, [pc, #12]	; (8000b70 <HAL_GetTick+0x14>)
 8000b62:	681b      	ldr	r3, [r3, #0]
}
 8000b64:	4618      	mov	r0, r3
 8000b66:	46bd      	mov	sp, r7
 8000b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6c:	4770      	bx	lr
 8000b6e:	bf00      	nop
 8000b70:	200001d8 	.word	0x200001d8

08000b74 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b084      	sub	sp, #16
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b7c:	f7ff ffee 	bl	8000b5c <HAL_GetTick>
 8000b80:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b86:	68fb      	ldr	r3, [r7, #12]
 8000b88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b8c:	d005      	beq.n	8000b9a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b8e:	4b0a      	ldr	r3, [pc, #40]	; (8000bb8 <HAL_Delay+0x44>)
 8000b90:	781b      	ldrb	r3, [r3, #0]
 8000b92:	461a      	mov	r2, r3
 8000b94:	68fb      	ldr	r3, [r7, #12]
 8000b96:	4413      	add	r3, r2
 8000b98:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000b9a:	bf00      	nop
 8000b9c:	f7ff ffde 	bl	8000b5c <HAL_GetTick>
 8000ba0:	4602      	mov	r2, r0
 8000ba2:	68bb      	ldr	r3, [r7, #8]
 8000ba4:	1ad3      	subs	r3, r2, r3
 8000ba6:	68fa      	ldr	r2, [r7, #12]
 8000ba8:	429a      	cmp	r2, r3
 8000baa:	d8f7      	bhi.n	8000b9c <HAL_Delay+0x28>
  {
  }
}
 8000bac:	bf00      	nop
 8000bae:	bf00      	nop
 8000bb0:	3710      	adds	r7, #16
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	bf00      	nop
 8000bb8:	20000008 	.word	0x20000008

08000bbc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	b085      	sub	sp, #20
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	f003 0307 	and.w	r3, r3, #7
 8000bca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bcc:	4b0b      	ldr	r3, [pc, #44]	; (8000bfc <__NVIC_SetPriorityGrouping+0x40>)
 8000bce:	68db      	ldr	r3, [r3, #12]
 8000bd0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bd2:	68ba      	ldr	r2, [r7, #8]
 8000bd4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000bd8:	4013      	ands	r3, r2
 8000bda:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bdc:	68fb      	ldr	r3, [r7, #12]
 8000bde:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000be0:	68bb      	ldr	r3, [r7, #8]
 8000be2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000be4:	4b06      	ldr	r3, [pc, #24]	; (8000c00 <__NVIC_SetPriorityGrouping+0x44>)
 8000be6:	4313      	orrs	r3, r2
 8000be8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bea:	4a04      	ldr	r2, [pc, #16]	; (8000bfc <__NVIC_SetPriorityGrouping+0x40>)
 8000bec:	68bb      	ldr	r3, [r7, #8]
 8000bee:	60d3      	str	r3, [r2, #12]
}
 8000bf0:	bf00      	nop
 8000bf2:	3714      	adds	r7, #20
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfa:	4770      	bx	lr
 8000bfc:	e000ed00 	.word	0xe000ed00
 8000c00:	05fa0000 	.word	0x05fa0000

08000c04 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c08:	4b04      	ldr	r3, [pc, #16]	; (8000c1c <__NVIC_GetPriorityGrouping+0x18>)
 8000c0a:	68db      	ldr	r3, [r3, #12]
 8000c0c:	0a1b      	lsrs	r3, r3, #8
 8000c0e:	f003 0307 	and.w	r3, r3, #7
}
 8000c12:	4618      	mov	r0, r3
 8000c14:	46bd      	mov	sp, r7
 8000c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1a:	4770      	bx	lr
 8000c1c:	e000ed00 	.word	0xe000ed00

08000c20 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c20:	b480      	push	{r7}
 8000c22:	b083      	sub	sp, #12
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	4603      	mov	r3, r0
 8000c28:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	db0b      	blt.n	8000c4a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c32:	79fb      	ldrb	r3, [r7, #7]
 8000c34:	f003 021f 	and.w	r2, r3, #31
 8000c38:	4907      	ldr	r1, [pc, #28]	; (8000c58 <__NVIC_EnableIRQ+0x38>)
 8000c3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c3e:	095b      	lsrs	r3, r3, #5
 8000c40:	2001      	movs	r0, #1
 8000c42:	fa00 f202 	lsl.w	r2, r0, r2
 8000c46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c4a:	bf00      	nop
 8000c4c:	370c      	adds	r7, #12
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop
 8000c58:	e000e100 	.word	0xe000e100

08000c5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	b083      	sub	sp, #12
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	4603      	mov	r3, r0
 8000c64:	6039      	str	r1, [r7, #0]
 8000c66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	db0a      	blt.n	8000c86 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c70:	683b      	ldr	r3, [r7, #0]
 8000c72:	b2da      	uxtb	r2, r3
 8000c74:	490c      	ldr	r1, [pc, #48]	; (8000ca8 <__NVIC_SetPriority+0x4c>)
 8000c76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c7a:	0112      	lsls	r2, r2, #4
 8000c7c:	b2d2      	uxtb	r2, r2
 8000c7e:	440b      	add	r3, r1
 8000c80:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c84:	e00a      	b.n	8000c9c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c86:	683b      	ldr	r3, [r7, #0]
 8000c88:	b2da      	uxtb	r2, r3
 8000c8a:	4908      	ldr	r1, [pc, #32]	; (8000cac <__NVIC_SetPriority+0x50>)
 8000c8c:	79fb      	ldrb	r3, [r7, #7]
 8000c8e:	f003 030f 	and.w	r3, r3, #15
 8000c92:	3b04      	subs	r3, #4
 8000c94:	0112      	lsls	r2, r2, #4
 8000c96:	b2d2      	uxtb	r2, r2
 8000c98:	440b      	add	r3, r1
 8000c9a:	761a      	strb	r2, [r3, #24]
}
 8000c9c:	bf00      	nop
 8000c9e:	370c      	adds	r7, #12
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca6:	4770      	bx	lr
 8000ca8:	e000e100 	.word	0xe000e100
 8000cac:	e000ed00 	.word	0xe000ed00

08000cb0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	b089      	sub	sp, #36	; 0x24
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	60f8      	str	r0, [r7, #12]
 8000cb8:	60b9      	str	r1, [r7, #8]
 8000cba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cbc:	68fb      	ldr	r3, [r7, #12]
 8000cbe:	f003 0307 	and.w	r3, r3, #7
 8000cc2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cc4:	69fb      	ldr	r3, [r7, #28]
 8000cc6:	f1c3 0307 	rsb	r3, r3, #7
 8000cca:	2b04      	cmp	r3, #4
 8000ccc:	bf28      	it	cs
 8000cce:	2304      	movcs	r3, #4
 8000cd0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cd2:	69fb      	ldr	r3, [r7, #28]
 8000cd4:	3304      	adds	r3, #4
 8000cd6:	2b06      	cmp	r3, #6
 8000cd8:	d902      	bls.n	8000ce0 <NVIC_EncodePriority+0x30>
 8000cda:	69fb      	ldr	r3, [r7, #28]
 8000cdc:	3b03      	subs	r3, #3
 8000cde:	e000      	b.n	8000ce2 <NVIC_EncodePriority+0x32>
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ce4:	f04f 32ff 	mov.w	r2, #4294967295
 8000ce8:	69bb      	ldr	r3, [r7, #24]
 8000cea:	fa02 f303 	lsl.w	r3, r2, r3
 8000cee:	43da      	mvns	r2, r3
 8000cf0:	68bb      	ldr	r3, [r7, #8]
 8000cf2:	401a      	ands	r2, r3
 8000cf4:	697b      	ldr	r3, [r7, #20]
 8000cf6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cf8:	f04f 31ff 	mov.w	r1, #4294967295
 8000cfc:	697b      	ldr	r3, [r7, #20]
 8000cfe:	fa01 f303 	lsl.w	r3, r1, r3
 8000d02:	43d9      	mvns	r1, r3
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d08:	4313      	orrs	r3, r2
         );
}
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	3724      	adds	r7, #36	; 0x24
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d14:	4770      	bx	lr
	...

08000d18 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b082      	sub	sp, #8
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	3b01      	subs	r3, #1
 8000d24:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d28:	d301      	bcc.n	8000d2e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d2a:	2301      	movs	r3, #1
 8000d2c:	e00f      	b.n	8000d4e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d2e:	4a0a      	ldr	r2, [pc, #40]	; (8000d58 <SysTick_Config+0x40>)
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	3b01      	subs	r3, #1
 8000d34:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d36:	210f      	movs	r1, #15
 8000d38:	f04f 30ff 	mov.w	r0, #4294967295
 8000d3c:	f7ff ff8e 	bl	8000c5c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d40:	4b05      	ldr	r3, [pc, #20]	; (8000d58 <SysTick_Config+0x40>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d46:	4b04      	ldr	r3, [pc, #16]	; (8000d58 <SysTick_Config+0x40>)
 8000d48:	2207      	movs	r2, #7
 8000d4a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d4c:	2300      	movs	r3, #0
}
 8000d4e:	4618      	mov	r0, r3
 8000d50:	3708      	adds	r7, #8
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}
 8000d56:	bf00      	nop
 8000d58:	e000e010 	.word	0xe000e010

08000d5c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b082      	sub	sp, #8
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d64:	6878      	ldr	r0, [r7, #4]
 8000d66:	f7ff ff29 	bl	8000bbc <__NVIC_SetPriorityGrouping>
}
 8000d6a:	bf00      	nop
 8000d6c:	3708      	adds	r7, #8
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bd80      	pop	{r7, pc}

08000d72 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d72:	b580      	push	{r7, lr}
 8000d74:	b086      	sub	sp, #24
 8000d76:	af00      	add	r7, sp, #0
 8000d78:	4603      	mov	r3, r0
 8000d7a:	60b9      	str	r1, [r7, #8]
 8000d7c:	607a      	str	r2, [r7, #4]
 8000d7e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000d80:	2300      	movs	r3, #0
 8000d82:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d84:	f7ff ff3e 	bl	8000c04 <__NVIC_GetPriorityGrouping>
 8000d88:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d8a:	687a      	ldr	r2, [r7, #4]
 8000d8c:	68b9      	ldr	r1, [r7, #8]
 8000d8e:	6978      	ldr	r0, [r7, #20]
 8000d90:	f7ff ff8e 	bl	8000cb0 <NVIC_EncodePriority>
 8000d94:	4602      	mov	r2, r0
 8000d96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d9a:	4611      	mov	r1, r2
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	f7ff ff5d 	bl	8000c5c <__NVIC_SetPriority>
}
 8000da2:	bf00      	nop
 8000da4:	3718      	adds	r7, #24
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}

08000daa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000daa:	b580      	push	{r7, lr}
 8000dac:	b082      	sub	sp, #8
 8000dae:	af00      	add	r7, sp, #0
 8000db0:	4603      	mov	r3, r0
 8000db2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000db4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000db8:	4618      	mov	r0, r3
 8000dba:	f7ff ff31 	bl	8000c20 <__NVIC_EnableIRQ>
}
 8000dbe:	bf00      	nop
 8000dc0:	3708      	adds	r7, #8
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bd80      	pop	{r7, pc}

08000dc6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000dc6:	b580      	push	{r7, lr}
 8000dc8:	b082      	sub	sp, #8
 8000dca:	af00      	add	r7, sp, #0
 8000dcc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000dce:	6878      	ldr	r0, [r7, #4]
 8000dd0:	f7ff ffa2 	bl	8000d18 <SysTick_Config>
 8000dd4:	4603      	mov	r3, r0
}
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	3708      	adds	r7, #8
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}

08000dde <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000dde:	b580      	push	{r7, lr}
 8000de0:	b084      	sub	sp, #16
 8000de2:	af00      	add	r7, sp, #0
 8000de4:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dea:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000dec:	f7ff feb6 	bl	8000b5c <HAL_GetTick>
 8000df0:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000df8:	b2db      	uxtb	r3, r3
 8000dfa:	2b02      	cmp	r3, #2
 8000dfc:	d008      	beq.n	8000e10 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	2280      	movs	r2, #128	; 0x80
 8000e02:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	2200      	movs	r2, #0
 8000e08:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8000e0c:	2301      	movs	r3, #1
 8000e0e:	e052      	b.n	8000eb6 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	681a      	ldr	r2, [r3, #0]
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	f022 0216 	bic.w	r2, r2, #22
 8000e1e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	695a      	ldr	r2, [r3, #20]
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000e2e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d103      	bne.n	8000e40 <HAL_DMA_Abort+0x62>
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d007      	beq.n	8000e50 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	681a      	ldr	r2, [r3, #0]
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	f022 0208 	bic.w	r2, r2, #8
 8000e4e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	681a      	ldr	r2, [r3, #0]
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	f022 0201 	bic.w	r2, r2, #1
 8000e5e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000e60:	e013      	b.n	8000e8a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000e62:	f7ff fe7b 	bl	8000b5c <HAL_GetTick>
 8000e66:	4602      	mov	r2, r0
 8000e68:	68bb      	ldr	r3, [r7, #8]
 8000e6a:	1ad3      	subs	r3, r2, r3
 8000e6c:	2b05      	cmp	r3, #5
 8000e6e:	d90c      	bls.n	8000e8a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	2220      	movs	r2, #32
 8000e74:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	2203      	movs	r2, #3
 8000e7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	2200      	movs	r2, #0
 8000e82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8000e86:	2303      	movs	r3, #3
 8000e88:	e015      	b.n	8000eb6 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	f003 0301 	and.w	r3, r3, #1
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d1e4      	bne.n	8000e62 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000e9c:	223f      	movs	r2, #63	; 0x3f
 8000e9e:	409a      	lsls	r2, r3
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	2201      	movs	r2, #1
 8000ea8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	2200      	movs	r2, #0
 8000eb0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8000eb4:	2300      	movs	r3, #0
}
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	3710      	adds	r7, #16
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bd80      	pop	{r7, pc}

08000ebe <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000ebe:	b480      	push	{r7}
 8000ec0:	b083      	sub	sp, #12
 8000ec2:	af00      	add	r7, sp, #0
 8000ec4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000ecc:	b2db      	uxtb	r3, r3
 8000ece:	2b02      	cmp	r3, #2
 8000ed0:	d004      	beq.n	8000edc <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	2280      	movs	r2, #128	; 0x80
 8000ed6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000ed8:	2301      	movs	r3, #1
 8000eda:	e00c      	b.n	8000ef6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	2205      	movs	r2, #5
 8000ee0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	681a      	ldr	r2, [r3, #0]
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	f022 0201 	bic.w	r2, r2, #1
 8000ef2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000ef4:	2300      	movs	r3, #0
}
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	370c      	adds	r7, #12
 8000efa:	46bd      	mov	sp, r7
 8000efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f00:	4770      	bx	lr
	...

08000f04 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f04:	b480      	push	{r7}
 8000f06:	b089      	sub	sp, #36	; 0x24
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
 8000f0c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8000f12:	2300      	movs	r3, #0
 8000f14:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000f16:	2300      	movs	r3, #0
 8000f18:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8000f1e:	2300      	movs	r3, #0
 8000f20:	61fb      	str	r3, [r7, #28]
 8000f22:	e169      	b.n	80011f8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8000f24:	2201      	movs	r2, #1
 8000f26:	69fb      	ldr	r3, [r7, #28]
 8000f28:	fa02 f303 	lsl.w	r3, r2, r3
 8000f2c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f2e:	683b      	ldr	r3, [r7, #0]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	697a      	ldr	r2, [r7, #20]
 8000f34:	4013      	ands	r3, r2
 8000f36:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f38:	693a      	ldr	r2, [r7, #16]
 8000f3a:	697b      	ldr	r3, [r7, #20]
 8000f3c:	429a      	cmp	r2, r3
 8000f3e:	f040 8158 	bne.w	80011f2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000f42:	683b      	ldr	r3, [r7, #0]
 8000f44:	685b      	ldr	r3, [r3, #4]
 8000f46:	f003 0303 	and.w	r3, r3, #3
 8000f4a:	2b01      	cmp	r3, #1
 8000f4c:	d005      	beq.n	8000f5a <HAL_GPIO_Init+0x56>
 8000f4e:	683b      	ldr	r3, [r7, #0]
 8000f50:	685b      	ldr	r3, [r3, #4]
 8000f52:	f003 0303 	and.w	r3, r3, #3
 8000f56:	2b02      	cmp	r3, #2
 8000f58:	d130      	bne.n	8000fbc <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	689b      	ldr	r3, [r3, #8]
 8000f5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000f60:	69fb      	ldr	r3, [r7, #28]
 8000f62:	005b      	lsls	r3, r3, #1
 8000f64:	2203      	movs	r2, #3
 8000f66:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6a:	43db      	mvns	r3, r3
 8000f6c:	69ba      	ldr	r2, [r7, #24]
 8000f6e:	4013      	ands	r3, r2
 8000f70:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8000f72:	683b      	ldr	r3, [r7, #0]
 8000f74:	68da      	ldr	r2, [r3, #12]
 8000f76:	69fb      	ldr	r3, [r7, #28]
 8000f78:	005b      	lsls	r3, r3, #1
 8000f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7e:	69ba      	ldr	r2, [r7, #24]
 8000f80:	4313      	orrs	r3, r2
 8000f82:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	69ba      	ldr	r2, [r7, #24]
 8000f88:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	685b      	ldr	r3, [r3, #4]
 8000f8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f90:	2201      	movs	r2, #1
 8000f92:	69fb      	ldr	r3, [r7, #28]
 8000f94:	fa02 f303 	lsl.w	r3, r2, r3
 8000f98:	43db      	mvns	r3, r3
 8000f9a:	69ba      	ldr	r2, [r7, #24]
 8000f9c:	4013      	ands	r3, r2
 8000f9e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000fa0:	683b      	ldr	r3, [r7, #0]
 8000fa2:	685b      	ldr	r3, [r3, #4]
 8000fa4:	091b      	lsrs	r3, r3, #4
 8000fa6:	f003 0201 	and.w	r2, r3, #1
 8000faa:	69fb      	ldr	r3, [r7, #28]
 8000fac:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb0:	69ba      	ldr	r2, [r7, #24]
 8000fb2:	4313      	orrs	r3, r2
 8000fb4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	69ba      	ldr	r2, [r7, #24]
 8000fba:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	685b      	ldr	r3, [r3, #4]
 8000fc0:	f003 0303 	and.w	r3, r3, #3
 8000fc4:	2b03      	cmp	r3, #3
 8000fc6:	d017      	beq.n	8000ff8 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	68db      	ldr	r3, [r3, #12]
 8000fcc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8000fce:	69fb      	ldr	r3, [r7, #28]
 8000fd0:	005b      	lsls	r3, r3, #1
 8000fd2:	2203      	movs	r2, #3
 8000fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd8:	43db      	mvns	r3, r3
 8000fda:	69ba      	ldr	r2, [r7, #24]
 8000fdc:	4013      	ands	r3, r2
 8000fde:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8000fe0:	683b      	ldr	r3, [r7, #0]
 8000fe2:	689a      	ldr	r2, [r3, #8]
 8000fe4:	69fb      	ldr	r3, [r7, #28]
 8000fe6:	005b      	lsls	r3, r3, #1
 8000fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fec:	69ba      	ldr	r2, [r7, #24]
 8000fee:	4313      	orrs	r3, r2
 8000ff0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	69ba      	ldr	r2, [r7, #24]
 8000ff6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ff8:	683b      	ldr	r3, [r7, #0]
 8000ffa:	685b      	ldr	r3, [r3, #4]
 8000ffc:	f003 0303 	and.w	r3, r3, #3
 8001000:	2b02      	cmp	r3, #2
 8001002:	d123      	bne.n	800104c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001004:	69fb      	ldr	r3, [r7, #28]
 8001006:	08da      	lsrs	r2, r3, #3
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	3208      	adds	r2, #8
 800100c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001010:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001012:	69fb      	ldr	r3, [r7, #28]
 8001014:	f003 0307 	and.w	r3, r3, #7
 8001018:	009b      	lsls	r3, r3, #2
 800101a:	220f      	movs	r2, #15
 800101c:	fa02 f303 	lsl.w	r3, r2, r3
 8001020:	43db      	mvns	r3, r3
 8001022:	69ba      	ldr	r2, [r7, #24]
 8001024:	4013      	ands	r3, r2
 8001026:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	691a      	ldr	r2, [r3, #16]
 800102c:	69fb      	ldr	r3, [r7, #28]
 800102e:	f003 0307 	and.w	r3, r3, #7
 8001032:	009b      	lsls	r3, r3, #2
 8001034:	fa02 f303 	lsl.w	r3, r2, r3
 8001038:	69ba      	ldr	r2, [r7, #24]
 800103a:	4313      	orrs	r3, r2
 800103c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800103e:	69fb      	ldr	r3, [r7, #28]
 8001040:	08da      	lsrs	r2, r3, #3
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	3208      	adds	r2, #8
 8001046:	69b9      	ldr	r1, [r7, #24]
 8001048:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001052:	69fb      	ldr	r3, [r7, #28]
 8001054:	005b      	lsls	r3, r3, #1
 8001056:	2203      	movs	r2, #3
 8001058:	fa02 f303 	lsl.w	r3, r2, r3
 800105c:	43db      	mvns	r3, r3
 800105e:	69ba      	ldr	r2, [r7, #24]
 8001060:	4013      	ands	r3, r2
 8001062:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	685b      	ldr	r3, [r3, #4]
 8001068:	f003 0203 	and.w	r2, r3, #3
 800106c:	69fb      	ldr	r3, [r7, #28]
 800106e:	005b      	lsls	r3, r3, #1
 8001070:	fa02 f303 	lsl.w	r3, r2, r3
 8001074:	69ba      	ldr	r2, [r7, #24]
 8001076:	4313      	orrs	r3, r2
 8001078:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	69ba      	ldr	r2, [r7, #24]
 800107e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	685b      	ldr	r3, [r3, #4]
 8001084:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001088:	2b00      	cmp	r3, #0
 800108a:	f000 80b2 	beq.w	80011f2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800108e:	4b60      	ldr	r3, [pc, #384]	; (8001210 <HAL_GPIO_Init+0x30c>)
 8001090:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001092:	4a5f      	ldr	r2, [pc, #380]	; (8001210 <HAL_GPIO_Init+0x30c>)
 8001094:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001098:	6453      	str	r3, [r2, #68]	; 0x44
 800109a:	4b5d      	ldr	r3, [pc, #372]	; (8001210 <HAL_GPIO_Init+0x30c>)
 800109c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800109e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010a2:	60fb      	str	r3, [r7, #12]
 80010a4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80010a6:	4a5b      	ldr	r2, [pc, #364]	; (8001214 <HAL_GPIO_Init+0x310>)
 80010a8:	69fb      	ldr	r3, [r7, #28]
 80010aa:	089b      	lsrs	r3, r3, #2
 80010ac:	3302      	adds	r3, #2
 80010ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80010b4:	69fb      	ldr	r3, [r7, #28]
 80010b6:	f003 0303 	and.w	r3, r3, #3
 80010ba:	009b      	lsls	r3, r3, #2
 80010bc:	220f      	movs	r2, #15
 80010be:	fa02 f303 	lsl.w	r3, r2, r3
 80010c2:	43db      	mvns	r3, r3
 80010c4:	69ba      	ldr	r2, [r7, #24]
 80010c6:	4013      	ands	r3, r2
 80010c8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	4a52      	ldr	r2, [pc, #328]	; (8001218 <HAL_GPIO_Init+0x314>)
 80010ce:	4293      	cmp	r3, r2
 80010d0:	d02b      	beq.n	800112a <HAL_GPIO_Init+0x226>
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	4a51      	ldr	r2, [pc, #324]	; (800121c <HAL_GPIO_Init+0x318>)
 80010d6:	4293      	cmp	r3, r2
 80010d8:	d025      	beq.n	8001126 <HAL_GPIO_Init+0x222>
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	4a50      	ldr	r2, [pc, #320]	; (8001220 <HAL_GPIO_Init+0x31c>)
 80010de:	4293      	cmp	r3, r2
 80010e0:	d01f      	beq.n	8001122 <HAL_GPIO_Init+0x21e>
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	4a4f      	ldr	r2, [pc, #316]	; (8001224 <HAL_GPIO_Init+0x320>)
 80010e6:	4293      	cmp	r3, r2
 80010e8:	d019      	beq.n	800111e <HAL_GPIO_Init+0x21a>
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	4a4e      	ldr	r2, [pc, #312]	; (8001228 <HAL_GPIO_Init+0x324>)
 80010ee:	4293      	cmp	r3, r2
 80010f0:	d013      	beq.n	800111a <HAL_GPIO_Init+0x216>
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	4a4d      	ldr	r2, [pc, #308]	; (800122c <HAL_GPIO_Init+0x328>)
 80010f6:	4293      	cmp	r3, r2
 80010f8:	d00d      	beq.n	8001116 <HAL_GPIO_Init+0x212>
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	4a4c      	ldr	r2, [pc, #304]	; (8001230 <HAL_GPIO_Init+0x32c>)
 80010fe:	4293      	cmp	r3, r2
 8001100:	d007      	beq.n	8001112 <HAL_GPIO_Init+0x20e>
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	4a4b      	ldr	r2, [pc, #300]	; (8001234 <HAL_GPIO_Init+0x330>)
 8001106:	4293      	cmp	r3, r2
 8001108:	d101      	bne.n	800110e <HAL_GPIO_Init+0x20a>
 800110a:	2307      	movs	r3, #7
 800110c:	e00e      	b.n	800112c <HAL_GPIO_Init+0x228>
 800110e:	2308      	movs	r3, #8
 8001110:	e00c      	b.n	800112c <HAL_GPIO_Init+0x228>
 8001112:	2306      	movs	r3, #6
 8001114:	e00a      	b.n	800112c <HAL_GPIO_Init+0x228>
 8001116:	2305      	movs	r3, #5
 8001118:	e008      	b.n	800112c <HAL_GPIO_Init+0x228>
 800111a:	2304      	movs	r3, #4
 800111c:	e006      	b.n	800112c <HAL_GPIO_Init+0x228>
 800111e:	2303      	movs	r3, #3
 8001120:	e004      	b.n	800112c <HAL_GPIO_Init+0x228>
 8001122:	2302      	movs	r3, #2
 8001124:	e002      	b.n	800112c <HAL_GPIO_Init+0x228>
 8001126:	2301      	movs	r3, #1
 8001128:	e000      	b.n	800112c <HAL_GPIO_Init+0x228>
 800112a:	2300      	movs	r3, #0
 800112c:	69fa      	ldr	r2, [r7, #28]
 800112e:	f002 0203 	and.w	r2, r2, #3
 8001132:	0092      	lsls	r2, r2, #2
 8001134:	4093      	lsls	r3, r2
 8001136:	69ba      	ldr	r2, [r7, #24]
 8001138:	4313      	orrs	r3, r2
 800113a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800113c:	4935      	ldr	r1, [pc, #212]	; (8001214 <HAL_GPIO_Init+0x310>)
 800113e:	69fb      	ldr	r3, [r7, #28]
 8001140:	089b      	lsrs	r3, r3, #2
 8001142:	3302      	adds	r3, #2
 8001144:	69ba      	ldr	r2, [r7, #24]
 8001146:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800114a:	4b3b      	ldr	r3, [pc, #236]	; (8001238 <HAL_GPIO_Init+0x334>)
 800114c:	689b      	ldr	r3, [r3, #8]
 800114e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001150:	693b      	ldr	r3, [r7, #16]
 8001152:	43db      	mvns	r3, r3
 8001154:	69ba      	ldr	r2, [r7, #24]
 8001156:	4013      	ands	r3, r2
 8001158:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800115a:	683b      	ldr	r3, [r7, #0]
 800115c:	685b      	ldr	r3, [r3, #4]
 800115e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001162:	2b00      	cmp	r3, #0
 8001164:	d003      	beq.n	800116e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001166:	69ba      	ldr	r2, [r7, #24]
 8001168:	693b      	ldr	r3, [r7, #16]
 800116a:	4313      	orrs	r3, r2
 800116c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800116e:	4a32      	ldr	r2, [pc, #200]	; (8001238 <HAL_GPIO_Init+0x334>)
 8001170:	69bb      	ldr	r3, [r7, #24]
 8001172:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001174:	4b30      	ldr	r3, [pc, #192]	; (8001238 <HAL_GPIO_Init+0x334>)
 8001176:	68db      	ldr	r3, [r3, #12]
 8001178:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800117a:	693b      	ldr	r3, [r7, #16]
 800117c:	43db      	mvns	r3, r3
 800117e:	69ba      	ldr	r2, [r7, #24]
 8001180:	4013      	ands	r3, r2
 8001182:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	685b      	ldr	r3, [r3, #4]
 8001188:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800118c:	2b00      	cmp	r3, #0
 800118e:	d003      	beq.n	8001198 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001190:	69ba      	ldr	r2, [r7, #24]
 8001192:	693b      	ldr	r3, [r7, #16]
 8001194:	4313      	orrs	r3, r2
 8001196:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001198:	4a27      	ldr	r2, [pc, #156]	; (8001238 <HAL_GPIO_Init+0x334>)
 800119a:	69bb      	ldr	r3, [r7, #24]
 800119c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800119e:	4b26      	ldr	r3, [pc, #152]	; (8001238 <HAL_GPIO_Init+0x334>)
 80011a0:	685b      	ldr	r3, [r3, #4]
 80011a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011a4:	693b      	ldr	r3, [r7, #16]
 80011a6:	43db      	mvns	r3, r3
 80011a8:	69ba      	ldr	r2, [r7, #24]
 80011aa:	4013      	ands	r3, r2
 80011ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	685b      	ldr	r3, [r3, #4]
 80011b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d003      	beq.n	80011c2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80011ba:	69ba      	ldr	r2, [r7, #24]
 80011bc:	693b      	ldr	r3, [r7, #16]
 80011be:	4313      	orrs	r3, r2
 80011c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80011c2:	4a1d      	ldr	r2, [pc, #116]	; (8001238 <HAL_GPIO_Init+0x334>)
 80011c4:	69bb      	ldr	r3, [r7, #24]
 80011c6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80011c8:	4b1b      	ldr	r3, [pc, #108]	; (8001238 <HAL_GPIO_Init+0x334>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011ce:	693b      	ldr	r3, [r7, #16]
 80011d0:	43db      	mvns	r3, r3
 80011d2:	69ba      	ldr	r2, [r7, #24]
 80011d4:	4013      	ands	r3, r2
 80011d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	685b      	ldr	r3, [r3, #4]
 80011dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d003      	beq.n	80011ec <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80011e4:	69ba      	ldr	r2, [r7, #24]
 80011e6:	693b      	ldr	r3, [r7, #16]
 80011e8:	4313      	orrs	r3, r2
 80011ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80011ec:	4a12      	ldr	r2, [pc, #72]	; (8001238 <HAL_GPIO_Init+0x334>)
 80011ee:	69bb      	ldr	r3, [r7, #24]
 80011f0:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80011f2:	69fb      	ldr	r3, [r7, #28]
 80011f4:	3301      	adds	r3, #1
 80011f6:	61fb      	str	r3, [r7, #28]
 80011f8:	69fb      	ldr	r3, [r7, #28]
 80011fa:	2b0f      	cmp	r3, #15
 80011fc:	f67f ae92 	bls.w	8000f24 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001200:	bf00      	nop
 8001202:	bf00      	nop
 8001204:	3724      	adds	r7, #36	; 0x24
 8001206:	46bd      	mov	sp, r7
 8001208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120c:	4770      	bx	lr
 800120e:	bf00      	nop
 8001210:	40023800 	.word	0x40023800
 8001214:	40013800 	.word	0x40013800
 8001218:	40020000 	.word	0x40020000
 800121c:	40020400 	.word	0x40020400
 8001220:	40020800 	.word	0x40020800
 8001224:	40020c00 	.word	0x40020c00
 8001228:	40021000 	.word	0x40021000
 800122c:	40021400 	.word	0x40021400
 8001230:	40021800 	.word	0x40021800
 8001234:	40021c00 	.word	0x40021c00
 8001238:	40013c00 	.word	0x40013c00

0800123c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800123c:	b480      	push	{r7}
 800123e:	b083      	sub	sp, #12
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
 8001244:	460b      	mov	r3, r1
 8001246:	807b      	strh	r3, [r7, #2]
 8001248:	4613      	mov	r3, r2
 800124a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800124c:	787b      	ldrb	r3, [r7, #1]
 800124e:	2b00      	cmp	r3, #0
 8001250:	d003      	beq.n	800125a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001252:	887a      	ldrh	r2, [r7, #2]
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001258:	e003      	b.n	8001262 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800125a:	887b      	ldrh	r3, [r7, #2]
 800125c:	041a      	lsls	r2, r3, #16
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	619a      	str	r2, [r3, #24]
}
 8001262:	bf00      	nop
 8001264:	370c      	adds	r7, #12
 8001266:	46bd      	mov	sp, r7
 8001268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126c:	4770      	bx	lr
	...

08001270 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001270:	b480      	push	{r7}
 8001272:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001274:	4b05      	ldr	r3, [pc, #20]	; (800128c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	4a04      	ldr	r2, [pc, #16]	; (800128c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800127a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800127e:	6013      	str	r3, [r2, #0]
}
 8001280:	bf00      	nop
 8001282:	46bd      	mov	sp, r7
 8001284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001288:	4770      	bx	lr
 800128a:	bf00      	nop
 800128c:	40007000 	.word	0x40007000

08001290 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b086      	sub	sp, #24
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001298:	2300      	movs	r3, #0
 800129a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d101      	bne.n	80012a6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80012a2:	2301      	movs	r3, #1
 80012a4:	e291      	b.n	80017ca <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	f003 0301 	and.w	r3, r3, #1
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	f000 8087 	beq.w	80013c2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80012b4:	4b96      	ldr	r3, [pc, #600]	; (8001510 <HAL_RCC_OscConfig+0x280>)
 80012b6:	689b      	ldr	r3, [r3, #8]
 80012b8:	f003 030c 	and.w	r3, r3, #12
 80012bc:	2b04      	cmp	r3, #4
 80012be:	d00c      	beq.n	80012da <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80012c0:	4b93      	ldr	r3, [pc, #588]	; (8001510 <HAL_RCC_OscConfig+0x280>)
 80012c2:	689b      	ldr	r3, [r3, #8]
 80012c4:	f003 030c 	and.w	r3, r3, #12
 80012c8:	2b08      	cmp	r3, #8
 80012ca:	d112      	bne.n	80012f2 <HAL_RCC_OscConfig+0x62>
 80012cc:	4b90      	ldr	r3, [pc, #576]	; (8001510 <HAL_RCC_OscConfig+0x280>)
 80012ce:	685b      	ldr	r3, [r3, #4]
 80012d0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012d4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80012d8:	d10b      	bne.n	80012f2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012da:	4b8d      	ldr	r3, [pc, #564]	; (8001510 <HAL_RCC_OscConfig+0x280>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d06c      	beq.n	80013c0 <HAL_RCC_OscConfig+0x130>
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	685b      	ldr	r3, [r3, #4]
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d168      	bne.n	80013c0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80012ee:	2301      	movs	r3, #1
 80012f0:	e26b      	b.n	80017ca <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	685b      	ldr	r3, [r3, #4]
 80012f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012fa:	d106      	bne.n	800130a <HAL_RCC_OscConfig+0x7a>
 80012fc:	4b84      	ldr	r3, [pc, #528]	; (8001510 <HAL_RCC_OscConfig+0x280>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	4a83      	ldr	r2, [pc, #524]	; (8001510 <HAL_RCC_OscConfig+0x280>)
 8001302:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001306:	6013      	str	r3, [r2, #0]
 8001308:	e02e      	b.n	8001368 <HAL_RCC_OscConfig+0xd8>
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	685b      	ldr	r3, [r3, #4]
 800130e:	2b00      	cmp	r3, #0
 8001310:	d10c      	bne.n	800132c <HAL_RCC_OscConfig+0x9c>
 8001312:	4b7f      	ldr	r3, [pc, #508]	; (8001510 <HAL_RCC_OscConfig+0x280>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	4a7e      	ldr	r2, [pc, #504]	; (8001510 <HAL_RCC_OscConfig+0x280>)
 8001318:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800131c:	6013      	str	r3, [r2, #0]
 800131e:	4b7c      	ldr	r3, [pc, #496]	; (8001510 <HAL_RCC_OscConfig+0x280>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	4a7b      	ldr	r2, [pc, #492]	; (8001510 <HAL_RCC_OscConfig+0x280>)
 8001324:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001328:	6013      	str	r3, [r2, #0]
 800132a:	e01d      	b.n	8001368 <HAL_RCC_OscConfig+0xd8>
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	685b      	ldr	r3, [r3, #4]
 8001330:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001334:	d10c      	bne.n	8001350 <HAL_RCC_OscConfig+0xc0>
 8001336:	4b76      	ldr	r3, [pc, #472]	; (8001510 <HAL_RCC_OscConfig+0x280>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	4a75      	ldr	r2, [pc, #468]	; (8001510 <HAL_RCC_OscConfig+0x280>)
 800133c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001340:	6013      	str	r3, [r2, #0]
 8001342:	4b73      	ldr	r3, [pc, #460]	; (8001510 <HAL_RCC_OscConfig+0x280>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	4a72      	ldr	r2, [pc, #456]	; (8001510 <HAL_RCC_OscConfig+0x280>)
 8001348:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800134c:	6013      	str	r3, [r2, #0]
 800134e:	e00b      	b.n	8001368 <HAL_RCC_OscConfig+0xd8>
 8001350:	4b6f      	ldr	r3, [pc, #444]	; (8001510 <HAL_RCC_OscConfig+0x280>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	4a6e      	ldr	r2, [pc, #440]	; (8001510 <HAL_RCC_OscConfig+0x280>)
 8001356:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800135a:	6013      	str	r3, [r2, #0]
 800135c:	4b6c      	ldr	r3, [pc, #432]	; (8001510 <HAL_RCC_OscConfig+0x280>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	4a6b      	ldr	r2, [pc, #428]	; (8001510 <HAL_RCC_OscConfig+0x280>)
 8001362:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001366:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	685b      	ldr	r3, [r3, #4]
 800136c:	2b00      	cmp	r3, #0
 800136e:	d013      	beq.n	8001398 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001370:	f7ff fbf4 	bl	8000b5c <HAL_GetTick>
 8001374:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001376:	e008      	b.n	800138a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001378:	f7ff fbf0 	bl	8000b5c <HAL_GetTick>
 800137c:	4602      	mov	r2, r0
 800137e:	693b      	ldr	r3, [r7, #16]
 8001380:	1ad3      	subs	r3, r2, r3
 8001382:	2b64      	cmp	r3, #100	; 0x64
 8001384:	d901      	bls.n	800138a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001386:	2303      	movs	r3, #3
 8001388:	e21f      	b.n	80017ca <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800138a:	4b61      	ldr	r3, [pc, #388]	; (8001510 <HAL_RCC_OscConfig+0x280>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001392:	2b00      	cmp	r3, #0
 8001394:	d0f0      	beq.n	8001378 <HAL_RCC_OscConfig+0xe8>
 8001396:	e014      	b.n	80013c2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001398:	f7ff fbe0 	bl	8000b5c <HAL_GetTick>
 800139c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800139e:	e008      	b.n	80013b2 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013a0:	f7ff fbdc 	bl	8000b5c <HAL_GetTick>
 80013a4:	4602      	mov	r2, r0
 80013a6:	693b      	ldr	r3, [r7, #16]
 80013a8:	1ad3      	subs	r3, r2, r3
 80013aa:	2b64      	cmp	r3, #100	; 0x64
 80013ac:	d901      	bls.n	80013b2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80013ae:	2303      	movs	r3, #3
 80013b0:	e20b      	b.n	80017ca <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013b2:	4b57      	ldr	r3, [pc, #348]	; (8001510 <HAL_RCC_OscConfig+0x280>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d1f0      	bne.n	80013a0 <HAL_RCC_OscConfig+0x110>
 80013be:	e000      	b.n	80013c2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f003 0302 	and.w	r3, r3, #2
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d069      	beq.n	80014a2 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80013ce:	4b50      	ldr	r3, [pc, #320]	; (8001510 <HAL_RCC_OscConfig+0x280>)
 80013d0:	689b      	ldr	r3, [r3, #8]
 80013d2:	f003 030c 	and.w	r3, r3, #12
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d00b      	beq.n	80013f2 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80013da:	4b4d      	ldr	r3, [pc, #308]	; (8001510 <HAL_RCC_OscConfig+0x280>)
 80013dc:	689b      	ldr	r3, [r3, #8]
 80013de:	f003 030c 	and.w	r3, r3, #12
 80013e2:	2b08      	cmp	r3, #8
 80013e4:	d11c      	bne.n	8001420 <HAL_RCC_OscConfig+0x190>
 80013e6:	4b4a      	ldr	r3, [pc, #296]	; (8001510 <HAL_RCC_OscConfig+0x280>)
 80013e8:	685b      	ldr	r3, [r3, #4]
 80013ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d116      	bne.n	8001420 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013f2:	4b47      	ldr	r3, [pc, #284]	; (8001510 <HAL_RCC_OscConfig+0x280>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	f003 0302 	and.w	r3, r3, #2
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d005      	beq.n	800140a <HAL_RCC_OscConfig+0x17a>
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	68db      	ldr	r3, [r3, #12]
 8001402:	2b01      	cmp	r3, #1
 8001404:	d001      	beq.n	800140a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001406:	2301      	movs	r3, #1
 8001408:	e1df      	b.n	80017ca <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800140a:	4b41      	ldr	r3, [pc, #260]	; (8001510 <HAL_RCC_OscConfig+0x280>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	691b      	ldr	r3, [r3, #16]
 8001416:	00db      	lsls	r3, r3, #3
 8001418:	493d      	ldr	r1, [pc, #244]	; (8001510 <HAL_RCC_OscConfig+0x280>)
 800141a:	4313      	orrs	r3, r2
 800141c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800141e:	e040      	b.n	80014a2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	68db      	ldr	r3, [r3, #12]
 8001424:	2b00      	cmp	r3, #0
 8001426:	d023      	beq.n	8001470 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001428:	4b39      	ldr	r3, [pc, #228]	; (8001510 <HAL_RCC_OscConfig+0x280>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	4a38      	ldr	r2, [pc, #224]	; (8001510 <HAL_RCC_OscConfig+0x280>)
 800142e:	f043 0301 	orr.w	r3, r3, #1
 8001432:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001434:	f7ff fb92 	bl	8000b5c <HAL_GetTick>
 8001438:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800143a:	e008      	b.n	800144e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800143c:	f7ff fb8e 	bl	8000b5c <HAL_GetTick>
 8001440:	4602      	mov	r2, r0
 8001442:	693b      	ldr	r3, [r7, #16]
 8001444:	1ad3      	subs	r3, r2, r3
 8001446:	2b02      	cmp	r3, #2
 8001448:	d901      	bls.n	800144e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800144a:	2303      	movs	r3, #3
 800144c:	e1bd      	b.n	80017ca <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800144e:	4b30      	ldr	r3, [pc, #192]	; (8001510 <HAL_RCC_OscConfig+0x280>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f003 0302 	and.w	r3, r3, #2
 8001456:	2b00      	cmp	r3, #0
 8001458:	d0f0      	beq.n	800143c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800145a:	4b2d      	ldr	r3, [pc, #180]	; (8001510 <HAL_RCC_OscConfig+0x280>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	691b      	ldr	r3, [r3, #16]
 8001466:	00db      	lsls	r3, r3, #3
 8001468:	4929      	ldr	r1, [pc, #164]	; (8001510 <HAL_RCC_OscConfig+0x280>)
 800146a:	4313      	orrs	r3, r2
 800146c:	600b      	str	r3, [r1, #0]
 800146e:	e018      	b.n	80014a2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001470:	4b27      	ldr	r3, [pc, #156]	; (8001510 <HAL_RCC_OscConfig+0x280>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	4a26      	ldr	r2, [pc, #152]	; (8001510 <HAL_RCC_OscConfig+0x280>)
 8001476:	f023 0301 	bic.w	r3, r3, #1
 800147a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800147c:	f7ff fb6e 	bl	8000b5c <HAL_GetTick>
 8001480:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001482:	e008      	b.n	8001496 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001484:	f7ff fb6a 	bl	8000b5c <HAL_GetTick>
 8001488:	4602      	mov	r2, r0
 800148a:	693b      	ldr	r3, [r7, #16]
 800148c:	1ad3      	subs	r3, r2, r3
 800148e:	2b02      	cmp	r3, #2
 8001490:	d901      	bls.n	8001496 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001492:	2303      	movs	r3, #3
 8001494:	e199      	b.n	80017ca <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001496:	4b1e      	ldr	r3, [pc, #120]	; (8001510 <HAL_RCC_OscConfig+0x280>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f003 0302 	and.w	r3, r3, #2
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d1f0      	bne.n	8001484 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f003 0308 	and.w	r3, r3, #8
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d038      	beq.n	8001520 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	695b      	ldr	r3, [r3, #20]
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d019      	beq.n	80014ea <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80014b6:	4b16      	ldr	r3, [pc, #88]	; (8001510 <HAL_RCC_OscConfig+0x280>)
 80014b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80014ba:	4a15      	ldr	r2, [pc, #84]	; (8001510 <HAL_RCC_OscConfig+0x280>)
 80014bc:	f043 0301 	orr.w	r3, r3, #1
 80014c0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014c2:	f7ff fb4b 	bl	8000b5c <HAL_GetTick>
 80014c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014c8:	e008      	b.n	80014dc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80014ca:	f7ff fb47 	bl	8000b5c <HAL_GetTick>
 80014ce:	4602      	mov	r2, r0
 80014d0:	693b      	ldr	r3, [r7, #16]
 80014d2:	1ad3      	subs	r3, r2, r3
 80014d4:	2b02      	cmp	r3, #2
 80014d6:	d901      	bls.n	80014dc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80014d8:	2303      	movs	r3, #3
 80014da:	e176      	b.n	80017ca <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014dc:	4b0c      	ldr	r3, [pc, #48]	; (8001510 <HAL_RCC_OscConfig+0x280>)
 80014de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80014e0:	f003 0302 	and.w	r3, r3, #2
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d0f0      	beq.n	80014ca <HAL_RCC_OscConfig+0x23a>
 80014e8:	e01a      	b.n	8001520 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014ea:	4b09      	ldr	r3, [pc, #36]	; (8001510 <HAL_RCC_OscConfig+0x280>)
 80014ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80014ee:	4a08      	ldr	r2, [pc, #32]	; (8001510 <HAL_RCC_OscConfig+0x280>)
 80014f0:	f023 0301 	bic.w	r3, r3, #1
 80014f4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014f6:	f7ff fb31 	bl	8000b5c <HAL_GetTick>
 80014fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014fc:	e00a      	b.n	8001514 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80014fe:	f7ff fb2d 	bl	8000b5c <HAL_GetTick>
 8001502:	4602      	mov	r2, r0
 8001504:	693b      	ldr	r3, [r7, #16]
 8001506:	1ad3      	subs	r3, r2, r3
 8001508:	2b02      	cmp	r3, #2
 800150a:	d903      	bls.n	8001514 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800150c:	2303      	movs	r3, #3
 800150e:	e15c      	b.n	80017ca <HAL_RCC_OscConfig+0x53a>
 8001510:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001514:	4b91      	ldr	r3, [pc, #580]	; (800175c <HAL_RCC_OscConfig+0x4cc>)
 8001516:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001518:	f003 0302 	and.w	r3, r3, #2
 800151c:	2b00      	cmp	r3, #0
 800151e:	d1ee      	bne.n	80014fe <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	f003 0304 	and.w	r3, r3, #4
 8001528:	2b00      	cmp	r3, #0
 800152a:	f000 80a4 	beq.w	8001676 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800152e:	4b8b      	ldr	r3, [pc, #556]	; (800175c <HAL_RCC_OscConfig+0x4cc>)
 8001530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001532:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001536:	2b00      	cmp	r3, #0
 8001538:	d10d      	bne.n	8001556 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800153a:	4b88      	ldr	r3, [pc, #544]	; (800175c <HAL_RCC_OscConfig+0x4cc>)
 800153c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800153e:	4a87      	ldr	r2, [pc, #540]	; (800175c <HAL_RCC_OscConfig+0x4cc>)
 8001540:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001544:	6413      	str	r3, [r2, #64]	; 0x40
 8001546:	4b85      	ldr	r3, [pc, #532]	; (800175c <HAL_RCC_OscConfig+0x4cc>)
 8001548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800154a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800154e:	60bb      	str	r3, [r7, #8]
 8001550:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001552:	2301      	movs	r3, #1
 8001554:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001556:	4b82      	ldr	r3, [pc, #520]	; (8001760 <HAL_RCC_OscConfig+0x4d0>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800155e:	2b00      	cmp	r3, #0
 8001560:	d118      	bne.n	8001594 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001562:	4b7f      	ldr	r3, [pc, #508]	; (8001760 <HAL_RCC_OscConfig+0x4d0>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	4a7e      	ldr	r2, [pc, #504]	; (8001760 <HAL_RCC_OscConfig+0x4d0>)
 8001568:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800156c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800156e:	f7ff faf5 	bl	8000b5c <HAL_GetTick>
 8001572:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001574:	e008      	b.n	8001588 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001576:	f7ff faf1 	bl	8000b5c <HAL_GetTick>
 800157a:	4602      	mov	r2, r0
 800157c:	693b      	ldr	r3, [r7, #16]
 800157e:	1ad3      	subs	r3, r2, r3
 8001580:	2b64      	cmp	r3, #100	; 0x64
 8001582:	d901      	bls.n	8001588 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001584:	2303      	movs	r3, #3
 8001586:	e120      	b.n	80017ca <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001588:	4b75      	ldr	r3, [pc, #468]	; (8001760 <HAL_RCC_OscConfig+0x4d0>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001590:	2b00      	cmp	r3, #0
 8001592:	d0f0      	beq.n	8001576 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	689b      	ldr	r3, [r3, #8]
 8001598:	2b01      	cmp	r3, #1
 800159a:	d106      	bne.n	80015aa <HAL_RCC_OscConfig+0x31a>
 800159c:	4b6f      	ldr	r3, [pc, #444]	; (800175c <HAL_RCC_OscConfig+0x4cc>)
 800159e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015a0:	4a6e      	ldr	r2, [pc, #440]	; (800175c <HAL_RCC_OscConfig+0x4cc>)
 80015a2:	f043 0301 	orr.w	r3, r3, #1
 80015a6:	6713      	str	r3, [r2, #112]	; 0x70
 80015a8:	e02d      	b.n	8001606 <HAL_RCC_OscConfig+0x376>
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	689b      	ldr	r3, [r3, #8]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d10c      	bne.n	80015cc <HAL_RCC_OscConfig+0x33c>
 80015b2:	4b6a      	ldr	r3, [pc, #424]	; (800175c <HAL_RCC_OscConfig+0x4cc>)
 80015b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015b6:	4a69      	ldr	r2, [pc, #420]	; (800175c <HAL_RCC_OscConfig+0x4cc>)
 80015b8:	f023 0301 	bic.w	r3, r3, #1
 80015bc:	6713      	str	r3, [r2, #112]	; 0x70
 80015be:	4b67      	ldr	r3, [pc, #412]	; (800175c <HAL_RCC_OscConfig+0x4cc>)
 80015c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015c2:	4a66      	ldr	r2, [pc, #408]	; (800175c <HAL_RCC_OscConfig+0x4cc>)
 80015c4:	f023 0304 	bic.w	r3, r3, #4
 80015c8:	6713      	str	r3, [r2, #112]	; 0x70
 80015ca:	e01c      	b.n	8001606 <HAL_RCC_OscConfig+0x376>
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	689b      	ldr	r3, [r3, #8]
 80015d0:	2b05      	cmp	r3, #5
 80015d2:	d10c      	bne.n	80015ee <HAL_RCC_OscConfig+0x35e>
 80015d4:	4b61      	ldr	r3, [pc, #388]	; (800175c <HAL_RCC_OscConfig+0x4cc>)
 80015d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015d8:	4a60      	ldr	r2, [pc, #384]	; (800175c <HAL_RCC_OscConfig+0x4cc>)
 80015da:	f043 0304 	orr.w	r3, r3, #4
 80015de:	6713      	str	r3, [r2, #112]	; 0x70
 80015e0:	4b5e      	ldr	r3, [pc, #376]	; (800175c <HAL_RCC_OscConfig+0x4cc>)
 80015e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015e4:	4a5d      	ldr	r2, [pc, #372]	; (800175c <HAL_RCC_OscConfig+0x4cc>)
 80015e6:	f043 0301 	orr.w	r3, r3, #1
 80015ea:	6713      	str	r3, [r2, #112]	; 0x70
 80015ec:	e00b      	b.n	8001606 <HAL_RCC_OscConfig+0x376>
 80015ee:	4b5b      	ldr	r3, [pc, #364]	; (800175c <HAL_RCC_OscConfig+0x4cc>)
 80015f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015f2:	4a5a      	ldr	r2, [pc, #360]	; (800175c <HAL_RCC_OscConfig+0x4cc>)
 80015f4:	f023 0301 	bic.w	r3, r3, #1
 80015f8:	6713      	str	r3, [r2, #112]	; 0x70
 80015fa:	4b58      	ldr	r3, [pc, #352]	; (800175c <HAL_RCC_OscConfig+0x4cc>)
 80015fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015fe:	4a57      	ldr	r2, [pc, #348]	; (800175c <HAL_RCC_OscConfig+0x4cc>)
 8001600:	f023 0304 	bic.w	r3, r3, #4
 8001604:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	689b      	ldr	r3, [r3, #8]
 800160a:	2b00      	cmp	r3, #0
 800160c:	d015      	beq.n	800163a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800160e:	f7ff faa5 	bl	8000b5c <HAL_GetTick>
 8001612:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001614:	e00a      	b.n	800162c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001616:	f7ff faa1 	bl	8000b5c <HAL_GetTick>
 800161a:	4602      	mov	r2, r0
 800161c:	693b      	ldr	r3, [r7, #16]
 800161e:	1ad3      	subs	r3, r2, r3
 8001620:	f241 3288 	movw	r2, #5000	; 0x1388
 8001624:	4293      	cmp	r3, r2
 8001626:	d901      	bls.n	800162c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001628:	2303      	movs	r3, #3
 800162a:	e0ce      	b.n	80017ca <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800162c:	4b4b      	ldr	r3, [pc, #300]	; (800175c <HAL_RCC_OscConfig+0x4cc>)
 800162e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001630:	f003 0302 	and.w	r3, r3, #2
 8001634:	2b00      	cmp	r3, #0
 8001636:	d0ee      	beq.n	8001616 <HAL_RCC_OscConfig+0x386>
 8001638:	e014      	b.n	8001664 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800163a:	f7ff fa8f 	bl	8000b5c <HAL_GetTick>
 800163e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001640:	e00a      	b.n	8001658 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001642:	f7ff fa8b 	bl	8000b5c <HAL_GetTick>
 8001646:	4602      	mov	r2, r0
 8001648:	693b      	ldr	r3, [r7, #16]
 800164a:	1ad3      	subs	r3, r2, r3
 800164c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001650:	4293      	cmp	r3, r2
 8001652:	d901      	bls.n	8001658 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001654:	2303      	movs	r3, #3
 8001656:	e0b8      	b.n	80017ca <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001658:	4b40      	ldr	r3, [pc, #256]	; (800175c <HAL_RCC_OscConfig+0x4cc>)
 800165a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800165c:	f003 0302 	and.w	r3, r3, #2
 8001660:	2b00      	cmp	r3, #0
 8001662:	d1ee      	bne.n	8001642 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001664:	7dfb      	ldrb	r3, [r7, #23]
 8001666:	2b01      	cmp	r3, #1
 8001668:	d105      	bne.n	8001676 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800166a:	4b3c      	ldr	r3, [pc, #240]	; (800175c <HAL_RCC_OscConfig+0x4cc>)
 800166c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800166e:	4a3b      	ldr	r2, [pc, #236]	; (800175c <HAL_RCC_OscConfig+0x4cc>)
 8001670:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001674:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	699b      	ldr	r3, [r3, #24]
 800167a:	2b00      	cmp	r3, #0
 800167c:	f000 80a4 	beq.w	80017c8 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001680:	4b36      	ldr	r3, [pc, #216]	; (800175c <HAL_RCC_OscConfig+0x4cc>)
 8001682:	689b      	ldr	r3, [r3, #8]
 8001684:	f003 030c 	and.w	r3, r3, #12
 8001688:	2b08      	cmp	r3, #8
 800168a:	d06b      	beq.n	8001764 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	699b      	ldr	r3, [r3, #24]
 8001690:	2b02      	cmp	r3, #2
 8001692:	d149      	bne.n	8001728 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001694:	4b31      	ldr	r3, [pc, #196]	; (800175c <HAL_RCC_OscConfig+0x4cc>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	4a30      	ldr	r2, [pc, #192]	; (800175c <HAL_RCC_OscConfig+0x4cc>)
 800169a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800169e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016a0:	f7ff fa5c 	bl	8000b5c <HAL_GetTick>
 80016a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016a6:	e008      	b.n	80016ba <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016a8:	f7ff fa58 	bl	8000b5c <HAL_GetTick>
 80016ac:	4602      	mov	r2, r0
 80016ae:	693b      	ldr	r3, [r7, #16]
 80016b0:	1ad3      	subs	r3, r2, r3
 80016b2:	2b02      	cmp	r3, #2
 80016b4:	d901      	bls.n	80016ba <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80016b6:	2303      	movs	r3, #3
 80016b8:	e087      	b.n	80017ca <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016ba:	4b28      	ldr	r3, [pc, #160]	; (800175c <HAL_RCC_OscConfig+0x4cc>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d1f0      	bne.n	80016a8 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	69da      	ldr	r2, [r3, #28]
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	6a1b      	ldr	r3, [r3, #32]
 80016ce:	431a      	orrs	r2, r3
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016d4:	019b      	lsls	r3, r3, #6
 80016d6:	431a      	orrs	r2, r3
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016dc:	085b      	lsrs	r3, r3, #1
 80016de:	3b01      	subs	r3, #1
 80016e0:	041b      	lsls	r3, r3, #16
 80016e2:	431a      	orrs	r2, r3
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016e8:	061b      	lsls	r3, r3, #24
 80016ea:	4313      	orrs	r3, r2
 80016ec:	4a1b      	ldr	r2, [pc, #108]	; (800175c <HAL_RCC_OscConfig+0x4cc>)
 80016ee:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80016f2:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80016f4:	4b19      	ldr	r3, [pc, #100]	; (800175c <HAL_RCC_OscConfig+0x4cc>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	4a18      	ldr	r2, [pc, #96]	; (800175c <HAL_RCC_OscConfig+0x4cc>)
 80016fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80016fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001700:	f7ff fa2c 	bl	8000b5c <HAL_GetTick>
 8001704:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001706:	e008      	b.n	800171a <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001708:	f7ff fa28 	bl	8000b5c <HAL_GetTick>
 800170c:	4602      	mov	r2, r0
 800170e:	693b      	ldr	r3, [r7, #16]
 8001710:	1ad3      	subs	r3, r2, r3
 8001712:	2b02      	cmp	r3, #2
 8001714:	d901      	bls.n	800171a <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8001716:	2303      	movs	r3, #3
 8001718:	e057      	b.n	80017ca <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800171a:	4b10      	ldr	r3, [pc, #64]	; (800175c <HAL_RCC_OscConfig+0x4cc>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001722:	2b00      	cmp	r3, #0
 8001724:	d0f0      	beq.n	8001708 <HAL_RCC_OscConfig+0x478>
 8001726:	e04f      	b.n	80017c8 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001728:	4b0c      	ldr	r3, [pc, #48]	; (800175c <HAL_RCC_OscConfig+0x4cc>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	4a0b      	ldr	r2, [pc, #44]	; (800175c <HAL_RCC_OscConfig+0x4cc>)
 800172e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001732:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001734:	f7ff fa12 	bl	8000b5c <HAL_GetTick>
 8001738:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800173a:	e008      	b.n	800174e <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800173c:	f7ff fa0e 	bl	8000b5c <HAL_GetTick>
 8001740:	4602      	mov	r2, r0
 8001742:	693b      	ldr	r3, [r7, #16]
 8001744:	1ad3      	subs	r3, r2, r3
 8001746:	2b02      	cmp	r3, #2
 8001748:	d901      	bls.n	800174e <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800174a:	2303      	movs	r3, #3
 800174c:	e03d      	b.n	80017ca <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800174e:	4b03      	ldr	r3, [pc, #12]	; (800175c <HAL_RCC_OscConfig+0x4cc>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001756:	2b00      	cmp	r3, #0
 8001758:	d1f0      	bne.n	800173c <HAL_RCC_OscConfig+0x4ac>
 800175a:	e035      	b.n	80017c8 <HAL_RCC_OscConfig+0x538>
 800175c:	40023800 	.word	0x40023800
 8001760:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8001764:	4b1b      	ldr	r3, [pc, #108]	; (80017d4 <HAL_RCC_OscConfig+0x544>)
 8001766:	685b      	ldr	r3, [r3, #4]
 8001768:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	699b      	ldr	r3, [r3, #24]
 800176e:	2b01      	cmp	r3, #1
 8001770:	d028      	beq.n	80017c4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800177c:	429a      	cmp	r2, r3
 800177e:	d121      	bne.n	80017c4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800178a:	429a      	cmp	r2, r3
 800178c:	d11a      	bne.n	80017c4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800178e:	68fa      	ldr	r2, [r7, #12]
 8001790:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001794:	4013      	ands	r3, r2
 8001796:	687a      	ldr	r2, [r7, #4]
 8001798:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800179a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800179c:	4293      	cmp	r3, r2
 800179e:	d111      	bne.n	80017c4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017aa:	085b      	lsrs	r3, r3, #1
 80017ac:	3b01      	subs	r3, #1
 80017ae:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80017b0:	429a      	cmp	r2, r3
 80017b2:	d107      	bne.n	80017c4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017be:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80017c0:	429a      	cmp	r2, r3
 80017c2:	d001      	beq.n	80017c8 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80017c4:	2301      	movs	r3, #1
 80017c6:	e000      	b.n	80017ca <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80017c8:	2300      	movs	r3, #0
}
 80017ca:	4618      	mov	r0, r3
 80017cc:	3718      	adds	r7, #24
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}
 80017d2:	bf00      	nop
 80017d4:	40023800 	.word	0x40023800

080017d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b084      	sub	sp, #16
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
 80017e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80017e2:	2300      	movs	r3, #0
 80017e4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d101      	bne.n	80017f0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80017ec:	2301      	movs	r3, #1
 80017ee:	e0d0      	b.n	8001992 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80017f0:	4b6a      	ldr	r3, [pc, #424]	; (800199c <HAL_RCC_ClockConfig+0x1c4>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f003 030f 	and.w	r3, r3, #15
 80017f8:	683a      	ldr	r2, [r7, #0]
 80017fa:	429a      	cmp	r2, r3
 80017fc:	d910      	bls.n	8001820 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017fe:	4b67      	ldr	r3, [pc, #412]	; (800199c <HAL_RCC_ClockConfig+0x1c4>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f023 020f 	bic.w	r2, r3, #15
 8001806:	4965      	ldr	r1, [pc, #404]	; (800199c <HAL_RCC_ClockConfig+0x1c4>)
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	4313      	orrs	r3, r2
 800180c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800180e:	4b63      	ldr	r3, [pc, #396]	; (800199c <HAL_RCC_ClockConfig+0x1c4>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f003 030f 	and.w	r3, r3, #15
 8001816:	683a      	ldr	r2, [r7, #0]
 8001818:	429a      	cmp	r2, r3
 800181a:	d001      	beq.n	8001820 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800181c:	2301      	movs	r3, #1
 800181e:	e0b8      	b.n	8001992 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f003 0302 	and.w	r3, r3, #2
 8001828:	2b00      	cmp	r3, #0
 800182a:	d020      	beq.n	800186e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f003 0304 	and.w	r3, r3, #4
 8001834:	2b00      	cmp	r3, #0
 8001836:	d005      	beq.n	8001844 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001838:	4b59      	ldr	r3, [pc, #356]	; (80019a0 <HAL_RCC_ClockConfig+0x1c8>)
 800183a:	689b      	ldr	r3, [r3, #8]
 800183c:	4a58      	ldr	r2, [pc, #352]	; (80019a0 <HAL_RCC_ClockConfig+0x1c8>)
 800183e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001842:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f003 0308 	and.w	r3, r3, #8
 800184c:	2b00      	cmp	r3, #0
 800184e:	d005      	beq.n	800185c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001850:	4b53      	ldr	r3, [pc, #332]	; (80019a0 <HAL_RCC_ClockConfig+0x1c8>)
 8001852:	689b      	ldr	r3, [r3, #8]
 8001854:	4a52      	ldr	r2, [pc, #328]	; (80019a0 <HAL_RCC_ClockConfig+0x1c8>)
 8001856:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800185a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800185c:	4b50      	ldr	r3, [pc, #320]	; (80019a0 <HAL_RCC_ClockConfig+0x1c8>)
 800185e:	689b      	ldr	r3, [r3, #8]
 8001860:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	689b      	ldr	r3, [r3, #8]
 8001868:	494d      	ldr	r1, [pc, #308]	; (80019a0 <HAL_RCC_ClockConfig+0x1c8>)
 800186a:	4313      	orrs	r3, r2
 800186c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f003 0301 	and.w	r3, r3, #1
 8001876:	2b00      	cmp	r3, #0
 8001878:	d040      	beq.n	80018fc <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	685b      	ldr	r3, [r3, #4]
 800187e:	2b01      	cmp	r3, #1
 8001880:	d107      	bne.n	8001892 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001882:	4b47      	ldr	r3, [pc, #284]	; (80019a0 <HAL_RCC_ClockConfig+0x1c8>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800188a:	2b00      	cmp	r3, #0
 800188c:	d115      	bne.n	80018ba <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800188e:	2301      	movs	r3, #1
 8001890:	e07f      	b.n	8001992 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	685b      	ldr	r3, [r3, #4]
 8001896:	2b02      	cmp	r3, #2
 8001898:	d107      	bne.n	80018aa <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800189a:	4b41      	ldr	r3, [pc, #260]	; (80019a0 <HAL_RCC_ClockConfig+0x1c8>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d109      	bne.n	80018ba <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80018a6:	2301      	movs	r3, #1
 80018a8:	e073      	b.n	8001992 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018aa:	4b3d      	ldr	r3, [pc, #244]	; (80019a0 <HAL_RCC_ClockConfig+0x1c8>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f003 0302 	and.w	r3, r3, #2
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d101      	bne.n	80018ba <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80018b6:	2301      	movs	r3, #1
 80018b8:	e06b      	b.n	8001992 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80018ba:	4b39      	ldr	r3, [pc, #228]	; (80019a0 <HAL_RCC_ClockConfig+0x1c8>)
 80018bc:	689b      	ldr	r3, [r3, #8]
 80018be:	f023 0203 	bic.w	r2, r3, #3
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	685b      	ldr	r3, [r3, #4]
 80018c6:	4936      	ldr	r1, [pc, #216]	; (80019a0 <HAL_RCC_ClockConfig+0x1c8>)
 80018c8:	4313      	orrs	r3, r2
 80018ca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80018cc:	f7ff f946 	bl	8000b5c <HAL_GetTick>
 80018d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018d2:	e00a      	b.n	80018ea <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018d4:	f7ff f942 	bl	8000b5c <HAL_GetTick>
 80018d8:	4602      	mov	r2, r0
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	1ad3      	subs	r3, r2, r3
 80018de:	f241 3288 	movw	r2, #5000	; 0x1388
 80018e2:	4293      	cmp	r3, r2
 80018e4:	d901      	bls.n	80018ea <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80018e6:	2303      	movs	r3, #3
 80018e8:	e053      	b.n	8001992 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018ea:	4b2d      	ldr	r3, [pc, #180]	; (80019a0 <HAL_RCC_ClockConfig+0x1c8>)
 80018ec:	689b      	ldr	r3, [r3, #8]
 80018ee:	f003 020c 	and.w	r2, r3, #12
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	685b      	ldr	r3, [r3, #4]
 80018f6:	009b      	lsls	r3, r3, #2
 80018f8:	429a      	cmp	r2, r3
 80018fa:	d1eb      	bne.n	80018d4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80018fc:	4b27      	ldr	r3, [pc, #156]	; (800199c <HAL_RCC_ClockConfig+0x1c4>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f003 030f 	and.w	r3, r3, #15
 8001904:	683a      	ldr	r2, [r7, #0]
 8001906:	429a      	cmp	r2, r3
 8001908:	d210      	bcs.n	800192c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800190a:	4b24      	ldr	r3, [pc, #144]	; (800199c <HAL_RCC_ClockConfig+0x1c4>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f023 020f 	bic.w	r2, r3, #15
 8001912:	4922      	ldr	r1, [pc, #136]	; (800199c <HAL_RCC_ClockConfig+0x1c4>)
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	4313      	orrs	r3, r2
 8001918:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800191a:	4b20      	ldr	r3, [pc, #128]	; (800199c <HAL_RCC_ClockConfig+0x1c4>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f003 030f 	and.w	r3, r3, #15
 8001922:	683a      	ldr	r2, [r7, #0]
 8001924:	429a      	cmp	r2, r3
 8001926:	d001      	beq.n	800192c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001928:	2301      	movs	r3, #1
 800192a:	e032      	b.n	8001992 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f003 0304 	and.w	r3, r3, #4
 8001934:	2b00      	cmp	r3, #0
 8001936:	d008      	beq.n	800194a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001938:	4b19      	ldr	r3, [pc, #100]	; (80019a0 <HAL_RCC_ClockConfig+0x1c8>)
 800193a:	689b      	ldr	r3, [r3, #8]
 800193c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	68db      	ldr	r3, [r3, #12]
 8001944:	4916      	ldr	r1, [pc, #88]	; (80019a0 <HAL_RCC_ClockConfig+0x1c8>)
 8001946:	4313      	orrs	r3, r2
 8001948:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f003 0308 	and.w	r3, r3, #8
 8001952:	2b00      	cmp	r3, #0
 8001954:	d009      	beq.n	800196a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001956:	4b12      	ldr	r3, [pc, #72]	; (80019a0 <HAL_RCC_ClockConfig+0x1c8>)
 8001958:	689b      	ldr	r3, [r3, #8]
 800195a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	691b      	ldr	r3, [r3, #16]
 8001962:	00db      	lsls	r3, r3, #3
 8001964:	490e      	ldr	r1, [pc, #56]	; (80019a0 <HAL_RCC_ClockConfig+0x1c8>)
 8001966:	4313      	orrs	r3, r2
 8001968:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800196a:	f000 f821 	bl	80019b0 <HAL_RCC_GetSysClockFreq>
 800196e:	4602      	mov	r2, r0
 8001970:	4b0b      	ldr	r3, [pc, #44]	; (80019a0 <HAL_RCC_ClockConfig+0x1c8>)
 8001972:	689b      	ldr	r3, [r3, #8]
 8001974:	091b      	lsrs	r3, r3, #4
 8001976:	f003 030f 	and.w	r3, r3, #15
 800197a:	490a      	ldr	r1, [pc, #40]	; (80019a4 <HAL_RCC_ClockConfig+0x1cc>)
 800197c:	5ccb      	ldrb	r3, [r1, r3]
 800197e:	fa22 f303 	lsr.w	r3, r2, r3
 8001982:	4a09      	ldr	r2, [pc, #36]	; (80019a8 <HAL_RCC_ClockConfig+0x1d0>)
 8001984:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001986:	4b09      	ldr	r3, [pc, #36]	; (80019ac <HAL_RCC_ClockConfig+0x1d4>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	4618      	mov	r0, r3
 800198c:	f7ff f8a2 	bl	8000ad4 <HAL_InitTick>

  return HAL_OK;
 8001990:	2300      	movs	r3, #0
}
 8001992:	4618      	mov	r0, r3
 8001994:	3710      	adds	r7, #16
 8001996:	46bd      	mov	sp, r7
 8001998:	bd80      	pop	{r7, pc}
 800199a:	bf00      	nop
 800199c:	40023c00 	.word	0x40023c00
 80019a0:	40023800 	.word	0x40023800
 80019a4:	08003d04 	.word	0x08003d04
 80019a8:	20000000 	.word	0x20000000
 80019ac:	20000004 	.word	0x20000004

080019b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80019b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80019b4:	b094      	sub	sp, #80	; 0x50
 80019b6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80019b8:	2300      	movs	r3, #0
 80019ba:	647b      	str	r3, [r7, #68]	; 0x44
 80019bc:	2300      	movs	r3, #0
 80019be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80019c0:	2300      	movs	r3, #0
 80019c2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 80019c4:	2300      	movs	r3, #0
 80019c6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80019c8:	4b79      	ldr	r3, [pc, #484]	; (8001bb0 <HAL_RCC_GetSysClockFreq+0x200>)
 80019ca:	689b      	ldr	r3, [r3, #8]
 80019cc:	f003 030c 	and.w	r3, r3, #12
 80019d0:	2b08      	cmp	r3, #8
 80019d2:	d00d      	beq.n	80019f0 <HAL_RCC_GetSysClockFreq+0x40>
 80019d4:	2b08      	cmp	r3, #8
 80019d6:	f200 80e1 	bhi.w	8001b9c <HAL_RCC_GetSysClockFreq+0x1ec>
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d002      	beq.n	80019e4 <HAL_RCC_GetSysClockFreq+0x34>
 80019de:	2b04      	cmp	r3, #4
 80019e0:	d003      	beq.n	80019ea <HAL_RCC_GetSysClockFreq+0x3a>
 80019e2:	e0db      	b.n	8001b9c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80019e4:	4b73      	ldr	r3, [pc, #460]	; (8001bb4 <HAL_RCC_GetSysClockFreq+0x204>)
 80019e6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80019e8:	e0db      	b.n	8001ba2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80019ea:	4b73      	ldr	r3, [pc, #460]	; (8001bb8 <HAL_RCC_GetSysClockFreq+0x208>)
 80019ec:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80019ee:	e0d8      	b.n	8001ba2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80019f0:	4b6f      	ldr	r3, [pc, #444]	; (8001bb0 <HAL_RCC_GetSysClockFreq+0x200>)
 80019f2:	685b      	ldr	r3, [r3, #4]
 80019f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80019f8:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80019fa:	4b6d      	ldr	r3, [pc, #436]	; (8001bb0 <HAL_RCC_GetSysClockFreq+0x200>)
 80019fc:	685b      	ldr	r3, [r3, #4]
 80019fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d063      	beq.n	8001ace <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a06:	4b6a      	ldr	r3, [pc, #424]	; (8001bb0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a08:	685b      	ldr	r3, [r3, #4]
 8001a0a:	099b      	lsrs	r3, r3, #6
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	63bb      	str	r3, [r7, #56]	; 0x38
 8001a10:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001a12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001a14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001a18:	633b      	str	r3, [r7, #48]	; 0x30
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	637b      	str	r3, [r7, #52]	; 0x34
 8001a1e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001a22:	4622      	mov	r2, r4
 8001a24:	462b      	mov	r3, r5
 8001a26:	f04f 0000 	mov.w	r0, #0
 8001a2a:	f04f 0100 	mov.w	r1, #0
 8001a2e:	0159      	lsls	r1, r3, #5
 8001a30:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a34:	0150      	lsls	r0, r2, #5
 8001a36:	4602      	mov	r2, r0
 8001a38:	460b      	mov	r3, r1
 8001a3a:	4621      	mov	r1, r4
 8001a3c:	1a51      	subs	r1, r2, r1
 8001a3e:	6139      	str	r1, [r7, #16]
 8001a40:	4629      	mov	r1, r5
 8001a42:	eb63 0301 	sbc.w	r3, r3, r1
 8001a46:	617b      	str	r3, [r7, #20]
 8001a48:	f04f 0200 	mov.w	r2, #0
 8001a4c:	f04f 0300 	mov.w	r3, #0
 8001a50:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001a54:	4659      	mov	r1, fp
 8001a56:	018b      	lsls	r3, r1, #6
 8001a58:	4651      	mov	r1, sl
 8001a5a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001a5e:	4651      	mov	r1, sl
 8001a60:	018a      	lsls	r2, r1, #6
 8001a62:	4651      	mov	r1, sl
 8001a64:	ebb2 0801 	subs.w	r8, r2, r1
 8001a68:	4659      	mov	r1, fp
 8001a6a:	eb63 0901 	sbc.w	r9, r3, r1
 8001a6e:	f04f 0200 	mov.w	r2, #0
 8001a72:	f04f 0300 	mov.w	r3, #0
 8001a76:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001a7a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001a7e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001a82:	4690      	mov	r8, r2
 8001a84:	4699      	mov	r9, r3
 8001a86:	4623      	mov	r3, r4
 8001a88:	eb18 0303 	adds.w	r3, r8, r3
 8001a8c:	60bb      	str	r3, [r7, #8]
 8001a8e:	462b      	mov	r3, r5
 8001a90:	eb49 0303 	adc.w	r3, r9, r3
 8001a94:	60fb      	str	r3, [r7, #12]
 8001a96:	f04f 0200 	mov.w	r2, #0
 8001a9a:	f04f 0300 	mov.w	r3, #0
 8001a9e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001aa2:	4629      	mov	r1, r5
 8001aa4:	024b      	lsls	r3, r1, #9
 8001aa6:	4621      	mov	r1, r4
 8001aa8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001aac:	4621      	mov	r1, r4
 8001aae:	024a      	lsls	r2, r1, #9
 8001ab0:	4610      	mov	r0, r2
 8001ab2:	4619      	mov	r1, r3
 8001ab4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	62bb      	str	r3, [r7, #40]	; 0x28
 8001aba:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001abc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001ac0:	f7fe fbb6 	bl	8000230 <__aeabi_uldivmod>
 8001ac4:	4602      	mov	r2, r0
 8001ac6:	460b      	mov	r3, r1
 8001ac8:	4613      	mov	r3, r2
 8001aca:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001acc:	e058      	b.n	8001b80 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ace:	4b38      	ldr	r3, [pc, #224]	; (8001bb0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001ad0:	685b      	ldr	r3, [r3, #4]
 8001ad2:	099b      	lsrs	r3, r3, #6
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	4611      	mov	r1, r2
 8001ada:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001ade:	623b      	str	r3, [r7, #32]
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	627b      	str	r3, [r7, #36]	; 0x24
 8001ae4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001ae8:	4642      	mov	r2, r8
 8001aea:	464b      	mov	r3, r9
 8001aec:	f04f 0000 	mov.w	r0, #0
 8001af0:	f04f 0100 	mov.w	r1, #0
 8001af4:	0159      	lsls	r1, r3, #5
 8001af6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001afa:	0150      	lsls	r0, r2, #5
 8001afc:	4602      	mov	r2, r0
 8001afe:	460b      	mov	r3, r1
 8001b00:	4641      	mov	r1, r8
 8001b02:	ebb2 0a01 	subs.w	sl, r2, r1
 8001b06:	4649      	mov	r1, r9
 8001b08:	eb63 0b01 	sbc.w	fp, r3, r1
 8001b0c:	f04f 0200 	mov.w	r2, #0
 8001b10:	f04f 0300 	mov.w	r3, #0
 8001b14:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001b18:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001b1c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001b20:	ebb2 040a 	subs.w	r4, r2, sl
 8001b24:	eb63 050b 	sbc.w	r5, r3, fp
 8001b28:	f04f 0200 	mov.w	r2, #0
 8001b2c:	f04f 0300 	mov.w	r3, #0
 8001b30:	00eb      	lsls	r3, r5, #3
 8001b32:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001b36:	00e2      	lsls	r2, r4, #3
 8001b38:	4614      	mov	r4, r2
 8001b3a:	461d      	mov	r5, r3
 8001b3c:	4643      	mov	r3, r8
 8001b3e:	18e3      	adds	r3, r4, r3
 8001b40:	603b      	str	r3, [r7, #0]
 8001b42:	464b      	mov	r3, r9
 8001b44:	eb45 0303 	adc.w	r3, r5, r3
 8001b48:	607b      	str	r3, [r7, #4]
 8001b4a:	f04f 0200 	mov.w	r2, #0
 8001b4e:	f04f 0300 	mov.w	r3, #0
 8001b52:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001b56:	4629      	mov	r1, r5
 8001b58:	028b      	lsls	r3, r1, #10
 8001b5a:	4621      	mov	r1, r4
 8001b5c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001b60:	4621      	mov	r1, r4
 8001b62:	028a      	lsls	r2, r1, #10
 8001b64:	4610      	mov	r0, r2
 8001b66:	4619      	mov	r1, r3
 8001b68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	61bb      	str	r3, [r7, #24]
 8001b6e:	61fa      	str	r2, [r7, #28]
 8001b70:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001b74:	f7fe fb5c 	bl	8000230 <__aeabi_uldivmod>
 8001b78:	4602      	mov	r2, r0
 8001b7a:	460b      	mov	r3, r1
 8001b7c:	4613      	mov	r3, r2
 8001b7e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8001b80:	4b0b      	ldr	r3, [pc, #44]	; (8001bb0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b82:	685b      	ldr	r3, [r3, #4]
 8001b84:	0c1b      	lsrs	r3, r3, #16
 8001b86:	f003 0303 	and.w	r3, r3, #3
 8001b8a:	3301      	adds	r3, #1
 8001b8c:	005b      	lsls	r3, r3, #1
 8001b8e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8001b90:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001b92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001b94:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b98:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001b9a:	e002      	b.n	8001ba2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001b9c:	4b05      	ldr	r3, [pc, #20]	; (8001bb4 <HAL_RCC_GetSysClockFreq+0x204>)
 8001b9e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001ba0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001ba2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	3750      	adds	r7, #80	; 0x50
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001bae:	bf00      	nop
 8001bb0:	40023800 	.word	0x40023800
 8001bb4:	00f42400 	.word	0x00f42400
 8001bb8:	007a1200 	.word	0x007a1200

08001bbc <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001bc0:	4b03      	ldr	r3, [pc, #12]	; (8001bd0 <HAL_RCC_GetHCLKFreq+0x14>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
}
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bcc:	4770      	bx	lr
 8001bce:	bf00      	nop
 8001bd0:	20000000 	.word	0x20000000

08001bd4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001bd8:	f7ff fff0 	bl	8001bbc <HAL_RCC_GetHCLKFreq>
 8001bdc:	4602      	mov	r2, r0
 8001bde:	4b05      	ldr	r3, [pc, #20]	; (8001bf4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001be0:	689b      	ldr	r3, [r3, #8]
 8001be2:	0a9b      	lsrs	r3, r3, #10
 8001be4:	f003 0307 	and.w	r3, r3, #7
 8001be8:	4903      	ldr	r1, [pc, #12]	; (8001bf8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001bea:	5ccb      	ldrb	r3, [r1, r3]
 8001bec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	bd80      	pop	{r7, pc}
 8001bf4:	40023800 	.word	0x40023800
 8001bf8:	08003d14 	.word	0x08003d14

08001bfc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001c00:	f7ff ffdc 	bl	8001bbc <HAL_RCC_GetHCLKFreq>
 8001c04:	4602      	mov	r2, r0
 8001c06:	4b05      	ldr	r3, [pc, #20]	; (8001c1c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001c08:	689b      	ldr	r3, [r3, #8]
 8001c0a:	0b5b      	lsrs	r3, r3, #13
 8001c0c:	f003 0307 	and.w	r3, r3, #7
 8001c10:	4903      	ldr	r1, [pc, #12]	; (8001c20 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001c12:	5ccb      	ldrb	r3, [r1, r3]
 8001c14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c18:	4618      	mov	r0, r3
 8001c1a:	bd80      	pop	{r7, pc}
 8001c1c:	40023800 	.word	0x40023800
 8001c20:	08003d14 	.word	0x08003d14

08001c24 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b088      	sub	sp, #32
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8001c30:	2300      	movs	r3, #0
 8001c32:	613b      	str	r3, [r7, #16]
  uint32_t plli2sused = 0;
 8001c34:	2300      	movs	r3, #0
 8001c36:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f003 0301 	and.w	r3, r3, #1
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d012      	beq.n	8001c6e <HAL_RCCEx_PeriphCLKConfig+0x4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001c48:	4b65      	ldr	r3, [pc, #404]	; (8001de0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001c4a:	689b      	ldr	r3, [r3, #8]
 8001c4c:	4a64      	ldr	r2, [pc, #400]	; (8001de0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001c4e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001c52:	6093      	str	r3, [r2, #8]
 8001c54:	4b62      	ldr	r3, [pc, #392]	; (8001de0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001c56:	689a      	ldr	r2, [r3, #8]
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c5c:	4960      	ldr	r1, [pc, #384]	; (8001de0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001c5e:	4313      	orrs	r3, r2
 8001c60:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d101      	bne.n	8001c6e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      plli2sused = 1;
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d017      	beq.n	8001caa <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001c7a:	4b59      	ldr	r3, [pc, #356]	; (8001de0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001c7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001c80:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c88:	4955      	ldr	r1, [pc, #340]	; (8001de0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001c8a:	4313      	orrs	r3, r2
 8001c8c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c94:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001c98:	d101      	bne.n	8001c9e <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
      plli2sused = 1;
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d101      	bne.n	8001caa <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      pllsaiused = 1;
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d017      	beq.n	8001ce6 <HAL_RCCEx_PeriphCLKConfig+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001cb6:	4b4a      	ldr	r3, [pc, #296]	; (8001de0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001cb8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001cbc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cc4:	4946      	ldr	r1, [pc, #280]	; (8001de0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001cc6:	4313      	orrs	r3, r2
 8001cc8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cd0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001cd4:	d101      	bne.n	8001cda <HAL_RCCEx_PeriphCLKConfig+0xb6>
    {
      plli2sused = 1;
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d101      	bne.n	8001ce6 <HAL_RCCEx_PeriphCLKConfig+0xc2>
    {
      pllsaiused = 1;
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f003 0320 	and.w	r3, r3, #32
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	f000 808b 	beq.w	8001e0a <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001cf4:	4b3a      	ldr	r3, [pc, #232]	; (8001de0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001cf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cf8:	4a39      	ldr	r2, [pc, #228]	; (8001de0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001cfa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cfe:	6413      	str	r3, [r2, #64]	; 0x40
 8001d00:	4b37      	ldr	r3, [pc, #220]	; (8001de0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001d02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d08:	60fb      	str	r3, [r7, #12]
 8001d0a:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001d0c:	4b35      	ldr	r3, [pc, #212]	; (8001de4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	4a34      	ldr	r2, [pc, #208]	; (8001de4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001d12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d16:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001d18:	f7fe ff20 	bl	8000b5c <HAL_GetTick>
 8001d1c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001d1e:	e008      	b.n	8001d32 <HAL_RCCEx_PeriphCLKConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d20:	f7fe ff1c 	bl	8000b5c <HAL_GetTick>
 8001d24:	4602      	mov	r2, r0
 8001d26:	697b      	ldr	r3, [r7, #20]
 8001d28:	1ad3      	subs	r3, r2, r3
 8001d2a:	2b64      	cmp	r3, #100	; 0x64
 8001d2c:	d901      	bls.n	8001d32 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001d2e:	2303      	movs	r3, #3
 8001d30:	e2bc      	b.n	80022ac <HAL_RCCEx_PeriphCLKConfig+0x688>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001d32:	4b2c      	ldr	r3, [pc, #176]	; (8001de4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d0f0      	beq.n	8001d20 <HAL_RCCEx_PeriphCLKConfig+0xfc>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001d3e:	4b28      	ldr	r3, [pc, #160]	; (8001de0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001d40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d46:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001d48:	693b      	ldr	r3, [r7, #16]
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d035      	beq.n	8001dba <HAL_RCCEx_PeriphCLKConfig+0x196>
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d56:	693a      	ldr	r2, [r7, #16]
 8001d58:	429a      	cmp	r2, r3
 8001d5a:	d02e      	beq.n	8001dba <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001d5c:	4b20      	ldr	r3, [pc, #128]	; (8001de0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001d5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d60:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001d64:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001d66:	4b1e      	ldr	r3, [pc, #120]	; (8001de0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001d68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d6a:	4a1d      	ldr	r2, [pc, #116]	; (8001de0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001d6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d70:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001d72:	4b1b      	ldr	r3, [pc, #108]	; (8001de0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001d74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d76:	4a1a      	ldr	r2, [pc, #104]	; (8001de0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001d78:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d7c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8001d7e:	4a18      	ldr	r2, [pc, #96]	; (8001de0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001d80:	693b      	ldr	r3, [r7, #16]
 8001d82:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001d84:	4b16      	ldr	r3, [pc, #88]	; (8001de0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001d86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d88:	f003 0301 	and.w	r3, r3, #1
 8001d8c:	2b01      	cmp	r3, #1
 8001d8e:	d114      	bne.n	8001dba <HAL_RCCEx_PeriphCLKConfig+0x196>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d90:	f7fe fee4 	bl	8000b5c <HAL_GetTick>
 8001d94:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d96:	e00a      	b.n	8001dae <HAL_RCCEx_PeriphCLKConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d98:	f7fe fee0 	bl	8000b5c <HAL_GetTick>
 8001d9c:	4602      	mov	r2, r0
 8001d9e:	697b      	ldr	r3, [r7, #20]
 8001da0:	1ad3      	subs	r3, r2, r3
 8001da2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d901      	bls.n	8001dae <HAL_RCCEx_PeriphCLKConfig+0x18a>
          {
            return HAL_TIMEOUT;
 8001daa:	2303      	movs	r3, #3
 8001dac:	e27e      	b.n	80022ac <HAL_RCCEx_PeriphCLKConfig+0x688>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001dae:	4b0c      	ldr	r3, [pc, #48]	; (8001de0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001db0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001db2:	f003 0302 	and.w	r3, r3, #2
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d0ee      	beq.n	8001d98 <HAL_RCCEx_PeriphCLKConfig+0x174>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dbe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001dc2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001dc6:	d111      	bne.n	8001dec <HAL_RCCEx_PeriphCLKConfig+0x1c8>
 8001dc8:	4b05      	ldr	r3, [pc, #20]	; (8001de0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001dca:	689b      	ldr	r3, [r3, #8]
 8001dcc:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8001dd4:	4b04      	ldr	r3, [pc, #16]	; (8001de8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001dd6:	400b      	ands	r3, r1
 8001dd8:	4901      	ldr	r1, [pc, #4]	; (8001de0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001dda:	4313      	orrs	r3, r2
 8001ddc:	608b      	str	r3, [r1, #8]
 8001dde:	e00b      	b.n	8001df8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8001de0:	40023800 	.word	0x40023800
 8001de4:	40007000 	.word	0x40007000
 8001de8:	0ffffcff 	.word	0x0ffffcff
 8001dec:	4ba4      	ldr	r3, [pc, #656]	; (8002080 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8001dee:	689b      	ldr	r3, [r3, #8]
 8001df0:	4aa3      	ldr	r2, [pc, #652]	; (8002080 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8001df2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8001df6:	6093      	str	r3, [r2, #8]
 8001df8:	4ba1      	ldr	r3, [pc, #644]	; (8002080 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8001dfa:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e00:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e04:	499e      	ldr	r1, [pc, #632]	; (8002080 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8001e06:	4313      	orrs	r3, r2
 8001e08:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f003 0310 	and.w	r3, r3, #16
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d010      	beq.n	8001e38 <HAL_RCCEx_PeriphCLKConfig+0x214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8001e16:	4b9a      	ldr	r3, [pc, #616]	; (8002080 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8001e18:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001e1c:	4a98      	ldr	r2, [pc, #608]	; (8002080 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8001e1e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001e22:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001e26:	4b96      	ldr	r3, [pc, #600]	; (8002080 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8001e28:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e30:	4993      	ldr	r1, [pc, #588]	; (8002080 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8001e32:	4313      	orrs	r3, r2
 8001e34:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d00a      	beq.n	8001e5a <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001e44:	4b8e      	ldr	r3, [pc, #568]	; (8002080 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8001e46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e4a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e52:	498b      	ldr	r1, [pc, #556]	; (8002080 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8001e54:	4313      	orrs	r3, r2
 8001e56:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d00a      	beq.n	8001e7c <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001e66:	4b86      	ldr	r3, [pc, #536]	; (8002080 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8001e68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e6c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e74:	4982      	ldr	r1, [pc, #520]	; (8002080 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8001e76:	4313      	orrs	r3, r2
 8001e78:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d00a      	beq.n	8001e9e <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001e88:	4b7d      	ldr	r3, [pc, #500]	; (8002080 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8001e8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e8e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001e96:	497a      	ldr	r1, [pc, #488]	; (8002080 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8001e98:	4313      	orrs	r3, r2
 8001e9a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d00a      	beq.n	8001ec0 <HAL_RCCEx_PeriphCLKConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001eaa:	4b75      	ldr	r3, [pc, #468]	; (8002080 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8001eac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001eb0:	f023 0203 	bic.w	r2, r3, #3
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001eb8:	4971      	ldr	r1, [pc, #452]	; (8002080 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8001eba:	4313      	orrs	r3, r2
 8001ebc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d00a      	beq.n	8001ee2 <HAL_RCCEx_PeriphCLKConfig+0x2be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001ecc:	4b6c      	ldr	r3, [pc, #432]	; (8002080 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8001ece:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ed2:	f023 020c 	bic.w	r2, r3, #12
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eda:	4969      	ldr	r1, [pc, #420]	; (8002080 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8001edc:	4313      	orrs	r3, r2
 8001ede:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d00a      	beq.n	8001f04 <HAL_RCCEx_PeriphCLKConfig+0x2e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001eee:	4b64      	ldr	r3, [pc, #400]	; (8002080 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8001ef0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ef4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001efc:	4960      	ldr	r1, [pc, #384]	; (8002080 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8001efe:	4313      	orrs	r3, r2
 8001f00:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d00a      	beq.n	8001f26 <HAL_RCCEx_PeriphCLKConfig+0x302>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001f10:	4b5b      	ldr	r3, [pc, #364]	; (8002080 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8001f12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f16:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f1e:	4958      	ldr	r1, [pc, #352]	; (8002080 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8001f20:	4313      	orrs	r3, r2
 8001f22:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d00a      	beq.n	8001f48 <HAL_RCCEx_PeriphCLKConfig+0x324>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8001f32:	4b53      	ldr	r3, [pc, #332]	; (8002080 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8001f34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f38:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f40:	494f      	ldr	r1, [pc, #316]	; (8002080 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8001f42:	4313      	orrs	r3, r2
 8001f44:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d00a      	beq.n	8001f6a <HAL_RCCEx_PeriphCLKConfig+0x346>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8001f54:	4b4a      	ldr	r3, [pc, #296]	; (8002080 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8001f56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f5a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f62:	4947      	ldr	r1, [pc, #284]	; (8002080 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8001f64:	4313      	orrs	r3, r2
 8001f66:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d00a      	beq.n	8001f8c <HAL_RCCEx_PeriphCLKConfig+0x368>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8001f76:	4b42      	ldr	r3, [pc, #264]	; (8002080 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8001f78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f7c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f84:	493e      	ldr	r1, [pc, #248]	; (8002080 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8001f86:	4313      	orrs	r3, r2
 8001f88:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d00a      	beq.n	8001fae <HAL_RCCEx_PeriphCLKConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8001f98:	4b39      	ldr	r3, [pc, #228]	; (8002080 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8001f9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f9e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fa6:	4936      	ldr	r1, [pc, #216]	; (8002080 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8001fa8:	4313      	orrs	r3, r2
 8001faa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d011      	beq.n	8001fde <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8001fba:	4b31      	ldr	r3, [pc, #196]	; (8002080 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8001fbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fc0:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001fc8:	492d      	ldr	r1, [pc, #180]	; (8002080 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8001fca:	4313      	orrs	r3, r2
 8001fcc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001fd4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001fd8:	d101      	bne.n	8001fde <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      pllsaiused = 1;
 8001fda:	2301      	movs	r3, #1
 8001fdc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d00a      	beq.n	8002000 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001fea:	4b25      	ldr	r3, [pc, #148]	; (8002080 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8001fec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ff0:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001ff8:	4921      	ldr	r1, [pc, #132]	; (8002080 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8001ffa:	4313      	orrs	r3, r2
 8001ffc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002008:	2b00      	cmp	r3, #0
 800200a:	d00a      	beq.n	8002022 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800200c:	4b1c      	ldr	r3, [pc, #112]	; (8002080 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800200e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002012:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800201a:	4919      	ldr	r1, [pc, #100]	; (8002080 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800201c:	4313      	orrs	r3, r2
 800201e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800202a:	2b00      	cmp	r3, #0
 800202c:	d00a      	beq.n	8002044 <HAL_RCCEx_PeriphCLKConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800202e:	4b14      	ldr	r3, [pc, #80]	; (8002080 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002030:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002034:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800203c:	4910      	ldr	r1, [pc, #64]	; (8002080 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800203e:	4313      	orrs	r3, r2
 8002040:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2 or I2S */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002044:	69fb      	ldr	r3, [r7, #28]
 8002046:	2b01      	cmp	r3, #1
 8002048:	d006      	beq.n	8002058 <HAL_RCCEx_PeriphCLKConfig+0x434>
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002052:	2b00      	cmp	r3, #0
 8002054:	f000 809d 	beq.w	8002192 <HAL_RCCEx_PeriphCLKConfig+0x56e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002058:	4b09      	ldr	r3, [pc, #36]	; (8002080 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	4a08      	ldr	r2, [pc, #32]	; (8002080 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800205e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002062:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002064:	f7fe fd7a 	bl	8000b5c <HAL_GetTick>
 8002068:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800206a:	e00b      	b.n	8002084 <HAL_RCCEx_PeriphCLKConfig+0x460>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800206c:	f7fe fd76 	bl	8000b5c <HAL_GetTick>
 8002070:	4602      	mov	r2, r0
 8002072:	697b      	ldr	r3, [r7, #20]
 8002074:	1ad3      	subs	r3, r2, r3
 8002076:	2b64      	cmp	r3, #100	; 0x64
 8002078:	d904      	bls.n	8002084 <HAL_RCCEx_PeriphCLKConfig+0x460>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800207a:	2303      	movs	r3, #3
 800207c:	e116      	b.n	80022ac <HAL_RCCEx_PeriphCLKConfig+0x688>
 800207e:	bf00      	nop
 8002080:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002084:	4b8b      	ldr	r3, [pc, #556]	; (80022b4 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800208c:	2b00      	cmp	r3, #0
 800208e:	d1ed      	bne.n	800206c <HAL_RCCEx_PeriphCLKConfig+0x448>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f003 0301 	and.w	r3, r3, #1
 8002098:	2b00      	cmp	r3, #0
 800209a:	d017      	beq.n	80020cc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d113      	bne.n	80020cc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80020a4:	4b83      	ldr	r3, [pc, #524]	; (80022b4 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80020a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80020aa:	0e1b      	lsrs	r3, r3, #24
 80020ac:	f003 030f 	and.w	r3, r3, #15
 80020b0:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, PeriphClkInit->PLLI2S.PLLI2SR);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	685b      	ldr	r3, [r3, #4]
 80020b6:	019a      	lsls	r2, r3, #6
 80020b8:	693b      	ldr	r3, [r7, #16]
 80020ba:	061b      	lsls	r3, r3, #24
 80020bc:	431a      	orrs	r2, r3
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	689b      	ldr	r3, [r3, #8]
 80020c2:	071b      	lsls	r3, r3, #28
 80020c4:	497b      	ldr	r1, [pc, #492]	; (80022b4 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80020c6:	4313      	orrs	r3, r2
 80020c8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d004      	beq.n	80020e2 <HAL_RCCEx_PeriphCLKConfig+0x4be>
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020dc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80020e0:	d00a      	beq.n	80020f8 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d024      	beq.n	8002138 <HAL_RCCEx_PeriphCLKConfig+0x514>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020f2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80020f6:	d11f      	bne.n	8002138 <HAL_RCCEx_PeriphCLKConfig+0x514>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80020f8:	4b6e      	ldr	r3, [pc, #440]	; (80022b4 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80020fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80020fe:	0f1b      	lsrs	r3, r3, #28
 8002100:	f003 0307 	and.w	r3, r3, #7
 8002104:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg0);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	685b      	ldr	r3, [r3, #4]
 800210a:	019a      	lsls	r2, r3, #6
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	68db      	ldr	r3, [r3, #12]
 8002110:	061b      	lsls	r3, r3, #24
 8002112:	431a      	orrs	r2, r3
 8002114:	693b      	ldr	r3, [r7, #16]
 8002116:	071b      	lsls	r3, r3, #28
 8002118:	4966      	ldr	r1, [pc, #408]	; (80022b4 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800211a:	4313      	orrs	r3, r2
 800211c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002120:	4b64      	ldr	r3, [pc, #400]	; (80022b4 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002122:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002126:	f023 021f 	bic.w	r2, r3, #31
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	69db      	ldr	r3, [r3, #28]
 800212e:	3b01      	subs	r3, #1
 8002130:	4960      	ldr	r1, [pc, #384]	; (80022b4 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002132:	4313      	orrs	r3, r2
 8002134:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002140:	2b00      	cmp	r3, #0
 8002142:	d00d      	beq.n	8002160 <HAL_RCCEx_PeriphCLKConfig+0x53c>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	685b      	ldr	r3, [r3, #4]
 8002148:	019a      	lsls	r2, r3, #6
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	68db      	ldr	r3, [r3, #12]
 800214e:	061b      	lsls	r3, r3, #24
 8002150:	431a      	orrs	r2, r3
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	689b      	ldr	r3, [r3, #8]
 8002156:	071b      	lsls	r3, r3, #28
 8002158:	4956      	ldr	r1, [pc, #344]	; (80022b4 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800215a:	4313      	orrs	r3, r2
 800215c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002160:	4b54      	ldr	r3, [pc, #336]	; (80022b4 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	4a53      	ldr	r2, [pc, #332]	; (80022b4 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002166:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800216a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800216c:	f7fe fcf6 	bl	8000b5c <HAL_GetTick>
 8002170:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002172:	e008      	b.n	8002186 <HAL_RCCEx_PeriphCLKConfig+0x562>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002174:	f7fe fcf2 	bl	8000b5c <HAL_GetTick>
 8002178:	4602      	mov	r2, r0
 800217a:	697b      	ldr	r3, [r7, #20]
 800217c:	1ad3      	subs	r3, r2, r3
 800217e:	2b64      	cmp	r3, #100	; 0x64
 8002180:	d901      	bls.n	8002186 <HAL_RCCEx_PeriphCLKConfig+0x562>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002182:	2303      	movs	r3, #3
 8002184:	e092      	b.n	80022ac <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002186:	4b4b      	ldr	r3, [pc, #300]	; (80022b4 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800218e:	2b00      	cmp	r3, #0
 8002190:	d0f0      	beq.n	8002174 <HAL_RCCEx_PeriphCLKConfig+0x550>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002192:	69bb      	ldr	r3, [r7, #24]
 8002194:	2b01      	cmp	r3, #1
 8002196:	f040 8088 	bne.w	80022aa <HAL_RCCEx_PeriphCLKConfig+0x686>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800219a:	4b46      	ldr	r3, [pc, #280]	; (80022b4 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	4a45      	ldr	r2, [pc, #276]	; (80022b4 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80021a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021a4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80021a6:	f7fe fcd9 	bl	8000b5c <HAL_GetTick>
 80021aa:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80021ac:	e008      	b.n	80021c0 <HAL_RCCEx_PeriphCLKConfig+0x59c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80021ae:	f7fe fcd5 	bl	8000b5c <HAL_GetTick>
 80021b2:	4602      	mov	r2, r0
 80021b4:	697b      	ldr	r3, [r7, #20]
 80021b6:	1ad3      	subs	r3, r2, r3
 80021b8:	2b64      	cmp	r3, #100	; 0x64
 80021ba:	d901      	bls.n	80021c0 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80021bc:	2303      	movs	r3, #3
 80021be:	e075      	b.n	80022ac <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80021c0:	4b3c      	ldr	r3, [pc, #240]	; (80022b4 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80021c8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80021cc:	d0ef      	beq.n	80021ae <HAL_RCCEx_PeriphCLKConfig+0x58a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d003      	beq.n	80021e2 <HAL_RCCEx_PeriphCLKConfig+0x5be>
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d009      	beq.n	80021f6 <HAL_RCCEx_PeriphCLKConfig+0x5d2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d024      	beq.n	8002238 <HAL_RCCEx_PeriphCLKConfig+0x614>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d120      	bne.n	8002238 <HAL_RCCEx_PeriphCLKConfig+0x614>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80021f6:	4b2f      	ldr	r3, [pc, #188]	; (80022b4 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80021f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021fc:	0c1b      	lsrs	r3, r3, #16
 80021fe:	f003 0303 	and.w	r3, r3, #3
 8002202:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	691b      	ldr	r3, [r3, #16]
 8002208:	019a      	lsls	r2, r3, #6
 800220a:	693b      	ldr	r3, [r7, #16]
 800220c:	041b      	lsls	r3, r3, #16
 800220e:	431a      	orrs	r2, r3
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	695b      	ldr	r3, [r3, #20]
 8002214:	061b      	lsls	r3, r3, #24
 8002216:	4927      	ldr	r1, [pc, #156]	; (80022b4 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002218:	4313      	orrs	r3, r2
 800221a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800221e:	4b25      	ldr	r3, [pc, #148]	; (80022b4 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002220:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002224:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6a1b      	ldr	r3, [r3, #32]
 800222c:	3b01      	subs	r3, #1
 800222e:	021b      	lsls	r3, r3, #8
 8002230:	4920      	ldr	r1, [pc, #128]	; (80022b4 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002232:	4313      	orrs	r3, r2
 8002234:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002240:	2b00      	cmp	r3, #0
 8002242:	d018      	beq.n	8002276 <HAL_RCCEx_PeriphCLKConfig+0x652>
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002248:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800224c:	d113      	bne.n	8002276 <HAL_RCCEx_PeriphCLKConfig+0x652>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800224e:	4b19      	ldr	r3, [pc, #100]	; (80022b4 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002250:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002254:	0e1b      	lsrs	r3, r3, #24
 8002256:	f003 030f 	and.w	r3, r3, #15
 800225a:	613b      	str	r3, [r7, #16]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	691b      	ldr	r3, [r3, #16]
 8002260:	019a      	lsls	r2, r3, #6
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	699b      	ldr	r3, [r3, #24]
 8002266:	041b      	lsls	r3, r3, #16
 8002268:	431a      	orrs	r2, r3
 800226a:	693b      	ldr	r3, [r7, #16]
 800226c:	061b      	lsls	r3, r3, #24
 800226e:	4911      	ldr	r1, [pc, #68]	; (80022b4 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002270:	4313      	orrs	r3, r2
 8002272:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002276:	4b0f      	ldr	r3, [pc, #60]	; (80022b4 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	4a0e      	ldr	r2, [pc, #56]	; (80022b4 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800227c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002280:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002282:	f7fe fc6b 	bl	8000b5c <HAL_GetTick>
 8002286:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002288:	e008      	b.n	800229c <HAL_RCCEx_PeriphCLKConfig+0x678>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800228a:	f7fe fc67 	bl	8000b5c <HAL_GetTick>
 800228e:	4602      	mov	r2, r0
 8002290:	697b      	ldr	r3, [r7, #20]
 8002292:	1ad3      	subs	r3, r2, r3
 8002294:	2b64      	cmp	r3, #100	; 0x64
 8002296:	d901      	bls.n	800229c <HAL_RCCEx_PeriphCLKConfig+0x678>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002298:	2303      	movs	r3, #3
 800229a:	e007      	b.n	80022ac <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800229c:	4b05      	ldr	r3, [pc, #20]	; (80022b4 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80022a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80022a8:	d1ef      	bne.n	800228a <HAL_RCCEx_PeriphCLKConfig+0x666>
      }
    }
  }
  return HAL_OK;
 80022aa:	2300      	movs	r3, #0
}
 80022ac:	4618      	mov	r0, r3
 80022ae:	3720      	adds	r7, #32
 80022b0:	46bd      	mov	sp, r7
 80022b2:	bd80      	pop	{r7, pc}
 80022b4:	40023800 	.word	0x40023800

080022b8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b082      	sub	sp, #8
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d101      	bne.n	80022ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80022c6:	2301      	movs	r3, #1
 80022c8:	e040      	b.n	800234c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d106      	bne.n	80022e0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	2200      	movs	r2, #0
 80022d6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80022da:	6878      	ldr	r0, [r7, #4]
 80022dc:	f7fe fb02 	bl	80008e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2224      	movs	r2, #36	; 0x24
 80022e4:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	681a      	ldr	r2, [r3, #0]
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f022 0201 	bic.w	r2, r2, #1
 80022f4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80022f6:	6878      	ldr	r0, [r7, #4]
 80022f8:	f000 fbf8 	bl	8002aec <UART_SetConfig>
 80022fc:	4603      	mov	r3, r0
 80022fe:	2b01      	cmp	r3, #1
 8002300:	d101      	bne.n	8002306 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002302:	2301      	movs	r3, #1
 8002304:	e022      	b.n	800234c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800230a:	2b00      	cmp	r3, #0
 800230c:	d002      	beq.n	8002314 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800230e:	6878      	ldr	r0, [r7, #4]
 8002310:	f000 fe50 	bl	8002fb4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	685a      	ldr	r2, [r3, #4]
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002322:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	689a      	ldr	r2, [r3, #8]
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002332:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	681a      	ldr	r2, [r3, #0]
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f042 0201 	orr.w	r2, r2, #1
 8002342:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002344:	6878      	ldr	r0, [r7, #4]
 8002346:	f000 fed7 	bl	80030f8 <UART_CheckIdleState>
 800234a:	4603      	mov	r3, r0
}
 800234c:	4618      	mov	r0, r3
 800234e:	3708      	adds	r7, #8
 8002350:	46bd      	mov	sp, r7
 8002352:	bd80      	pop	{r7, pc}

08002354 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b08a      	sub	sp, #40	; 0x28
 8002358:	af02      	add	r7, sp, #8
 800235a:	60f8      	str	r0, [r7, #12]
 800235c:	60b9      	str	r1, [r7, #8]
 800235e:	603b      	str	r3, [r7, #0]
 8002360:	4613      	mov	r3, r2
 8002362:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002368:	2b20      	cmp	r3, #32
 800236a:	f040 8081 	bne.w	8002470 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 800236e:	68bb      	ldr	r3, [r7, #8]
 8002370:	2b00      	cmp	r3, #0
 8002372:	d002      	beq.n	800237a <HAL_UART_Transmit+0x26>
 8002374:	88fb      	ldrh	r3, [r7, #6]
 8002376:	2b00      	cmp	r3, #0
 8002378:	d101      	bne.n	800237e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800237a:	2301      	movs	r3, #1
 800237c:	e079      	b.n	8002472 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002384:	2b01      	cmp	r3, #1
 8002386:	d101      	bne.n	800238c <HAL_UART_Transmit+0x38>
 8002388:	2302      	movs	r3, #2
 800238a:	e072      	b.n	8002472 <HAL_UART_Transmit+0x11e>
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	2201      	movs	r2, #1
 8002390:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	2200      	movs	r2, #0
 8002398:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	2221      	movs	r2, #33	; 0x21
 80023a0:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80023a2:	f7fe fbdb 	bl	8000b5c <HAL_GetTick>
 80023a6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	88fa      	ldrh	r2, [r7, #6]
 80023ac:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	88fa      	ldrh	r2, [r7, #6]
 80023b4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	689b      	ldr	r3, [r3, #8]
 80023bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80023c0:	d108      	bne.n	80023d4 <HAL_UART_Transmit+0x80>
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	691b      	ldr	r3, [r3, #16]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d104      	bne.n	80023d4 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80023ca:	2300      	movs	r3, #0
 80023cc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80023ce:	68bb      	ldr	r3, [r7, #8]
 80023d0:	61bb      	str	r3, [r7, #24]
 80023d2:	e003      	b.n	80023dc <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80023d4:	68bb      	ldr	r3, [r7, #8]
 80023d6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80023d8:	2300      	movs	r3, #0
 80023da:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	2200      	movs	r2, #0
 80023e0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80023e4:	e02c      	b.n	8002440 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	9300      	str	r3, [sp, #0]
 80023ea:	697b      	ldr	r3, [r7, #20]
 80023ec:	2200      	movs	r2, #0
 80023ee:	2180      	movs	r1, #128	; 0x80
 80023f0:	68f8      	ldr	r0, [r7, #12]
 80023f2:	f000 feb4 	bl	800315e <UART_WaitOnFlagUntilTimeout>
 80023f6:	4603      	mov	r3, r0
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d001      	beq.n	8002400 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80023fc:	2303      	movs	r3, #3
 80023fe:	e038      	b.n	8002472 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8002400:	69fb      	ldr	r3, [r7, #28]
 8002402:	2b00      	cmp	r3, #0
 8002404:	d10b      	bne.n	800241e <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002406:	69bb      	ldr	r3, [r7, #24]
 8002408:	881b      	ldrh	r3, [r3, #0]
 800240a:	461a      	mov	r2, r3
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002414:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002416:	69bb      	ldr	r3, [r7, #24]
 8002418:	3302      	adds	r3, #2
 800241a:	61bb      	str	r3, [r7, #24]
 800241c:	e007      	b.n	800242e <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800241e:	69fb      	ldr	r3, [r7, #28]
 8002420:	781a      	ldrb	r2, [r3, #0]
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002428:	69fb      	ldr	r3, [r7, #28]
 800242a:	3301      	adds	r3, #1
 800242c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002434:	b29b      	uxth	r3, r3
 8002436:	3b01      	subs	r3, #1
 8002438:	b29a      	uxth	r2, r3
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002446:	b29b      	uxth	r3, r3
 8002448:	2b00      	cmp	r3, #0
 800244a:	d1cc      	bne.n	80023e6 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	9300      	str	r3, [sp, #0]
 8002450:	697b      	ldr	r3, [r7, #20]
 8002452:	2200      	movs	r2, #0
 8002454:	2140      	movs	r1, #64	; 0x40
 8002456:	68f8      	ldr	r0, [r7, #12]
 8002458:	f000 fe81 	bl	800315e <UART_WaitOnFlagUntilTimeout>
 800245c:	4603      	mov	r3, r0
 800245e:	2b00      	cmp	r3, #0
 8002460:	d001      	beq.n	8002466 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8002462:	2303      	movs	r3, #3
 8002464:	e005      	b.n	8002472 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	2220      	movs	r2, #32
 800246a:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800246c:	2300      	movs	r3, #0
 800246e:	e000      	b.n	8002472 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8002470:	2302      	movs	r3, #2
  }
}
 8002472:	4618      	mov	r0, r3
 8002474:	3720      	adds	r7, #32
 8002476:	46bd      	mov	sp, r7
 8002478:	bd80      	pop	{r7, pc}

0800247a <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800247a:	b580      	push	{r7, lr}
 800247c:	b08a      	sub	sp, #40	; 0x28
 800247e:	af00      	add	r7, sp, #0
 8002480:	60f8      	str	r0, [r7, #12]
 8002482:	60b9      	str	r1, [r7, #8]
 8002484:	4613      	mov	r3, r2
 8002486:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800248c:	2b20      	cmp	r3, #32
 800248e:	d13d      	bne.n	800250c <HAL_UART_Receive_IT+0x92>
  {
    if ((pData == NULL) || (Size == 0U))
 8002490:	68bb      	ldr	r3, [r7, #8]
 8002492:	2b00      	cmp	r3, #0
 8002494:	d002      	beq.n	800249c <HAL_UART_Receive_IT+0x22>
 8002496:	88fb      	ldrh	r3, [r7, #6]
 8002498:	2b00      	cmp	r3, #0
 800249a:	d101      	bne.n	80024a0 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 800249c:	2301      	movs	r3, #1
 800249e:	e036      	b.n	800250e <HAL_UART_Receive_IT+0x94>
    }

    __HAL_LOCK(huart);
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80024a6:	2b01      	cmp	r3, #1
 80024a8:	d101      	bne.n	80024ae <HAL_UART_Receive_IT+0x34>
 80024aa:	2302      	movs	r3, #2
 80024ac:	e02f      	b.n	800250e <HAL_UART_Receive_IT+0x94>
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	2201      	movs	r2, #1
 80024b2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	2200      	movs	r2, #0
 80024ba:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	685b      	ldr	r3, [r3, #4]
 80024c2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d018      	beq.n	80024fc <HAL_UART_Receive_IT+0x82>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80024d0:	697b      	ldr	r3, [r7, #20]
 80024d2:	e853 3f00 	ldrex	r3, [r3]
 80024d6:	613b      	str	r3, [r7, #16]
   return(result);
 80024d8:	693b      	ldr	r3, [r7, #16]
 80024da:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80024de:	627b      	str	r3, [r7, #36]	; 0x24
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	461a      	mov	r2, r3
 80024e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024e8:	623b      	str	r3, [r7, #32]
 80024ea:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80024ec:	69f9      	ldr	r1, [r7, #28]
 80024ee:	6a3a      	ldr	r2, [r7, #32]
 80024f0:	e841 2300 	strex	r3, r2, [r1]
 80024f4:	61bb      	str	r3, [r7, #24]
   return(result);
 80024f6:	69bb      	ldr	r3, [r7, #24]
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d1e6      	bne.n	80024ca <HAL_UART_Receive_IT+0x50>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80024fc:	88fb      	ldrh	r3, [r7, #6]
 80024fe:	461a      	mov	r2, r3
 8002500:	68b9      	ldr	r1, [r7, #8]
 8002502:	68f8      	ldr	r0, [r7, #12]
 8002504:	f000 fef0 	bl	80032e8 <UART_Start_Receive_IT>
 8002508:	4603      	mov	r3, r0
 800250a:	e000      	b.n	800250e <HAL_UART_Receive_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800250c:	2302      	movs	r3, #2
  }
}
 800250e:	4618      	mov	r0, r3
 8002510:	3728      	adds	r7, #40	; 0x28
 8002512:	46bd      	mov	sp, r7
 8002514:	bd80      	pop	{r7, pc}
	...

08002518 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b0ba      	sub	sp, #232	; 0xe8
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	69db      	ldr	r3, [r3, #28]
 8002526:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	689b      	ldr	r3, [r3, #8]
 800253a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800253e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8002542:	f640 030f 	movw	r3, #2063	; 0x80f
 8002546:	4013      	ands	r3, r2
 8002548:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800254c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002550:	2b00      	cmp	r3, #0
 8002552:	d115      	bne.n	8002580 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002554:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002558:	f003 0320 	and.w	r3, r3, #32
 800255c:	2b00      	cmp	r3, #0
 800255e:	d00f      	beq.n	8002580 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002560:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002564:	f003 0320 	and.w	r3, r3, #32
 8002568:	2b00      	cmp	r3, #0
 800256a:	d009      	beq.n	8002580 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002570:	2b00      	cmp	r3, #0
 8002572:	f000 828f 	beq.w	8002a94 <HAL_UART_IRQHandler+0x57c>
      {
        huart->RxISR(huart);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800257a:	6878      	ldr	r0, [r7, #4]
 800257c:	4798      	blx	r3
      }
      return;
 800257e:	e289      	b.n	8002a94 <HAL_UART_IRQHandler+0x57c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002580:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002584:	2b00      	cmp	r3, #0
 8002586:	f000 8117 	beq.w	80027b8 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800258a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800258e:	f003 0301 	and.w	r3, r3, #1
 8002592:	2b00      	cmp	r3, #0
 8002594:	d106      	bne.n	80025a4 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8002596:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800259a:	4b85      	ldr	r3, [pc, #532]	; (80027b0 <HAL_UART_IRQHandler+0x298>)
 800259c:	4013      	ands	r3, r2
 800259e:	2b00      	cmp	r3, #0
 80025a0:	f000 810a 	beq.w	80027b8 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80025a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80025a8:	f003 0301 	and.w	r3, r3, #1
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d011      	beq.n	80025d4 <HAL_UART_IRQHandler+0xbc>
 80025b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80025b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d00b      	beq.n	80025d4 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	2201      	movs	r2, #1
 80025c2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80025ca:	f043 0201 	orr.w	r2, r3, #1
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80025d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80025d8:	f003 0302 	and.w	r3, r3, #2
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d011      	beq.n	8002604 <HAL_UART_IRQHandler+0xec>
 80025e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80025e4:	f003 0301 	and.w	r3, r3, #1
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d00b      	beq.n	8002604 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	2202      	movs	r2, #2
 80025f2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80025fa:	f043 0204 	orr.w	r2, r3, #4
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002604:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002608:	f003 0304 	and.w	r3, r3, #4
 800260c:	2b00      	cmp	r3, #0
 800260e:	d011      	beq.n	8002634 <HAL_UART_IRQHandler+0x11c>
 8002610:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002614:	f003 0301 	and.w	r3, r3, #1
 8002618:	2b00      	cmp	r3, #0
 800261a:	d00b      	beq.n	8002634 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	2204      	movs	r2, #4
 8002622:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800262a:	f043 0202 	orr.w	r2, r3, #2
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002634:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002638:	f003 0308 	and.w	r3, r3, #8
 800263c:	2b00      	cmp	r3, #0
 800263e:	d017      	beq.n	8002670 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002640:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002644:	f003 0320 	and.w	r3, r3, #32
 8002648:	2b00      	cmp	r3, #0
 800264a:	d105      	bne.n	8002658 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800264c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002650:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002654:	2b00      	cmp	r3, #0
 8002656:	d00b      	beq.n	8002670 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	2208      	movs	r2, #8
 800265e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002666:	f043 0208 	orr.w	r2, r3, #8
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002670:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002674:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002678:	2b00      	cmp	r3, #0
 800267a:	d012      	beq.n	80026a2 <HAL_UART_IRQHandler+0x18a>
 800267c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002680:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002684:	2b00      	cmp	r3, #0
 8002686:	d00c      	beq.n	80026a2 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002690:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002698:	f043 0220 	orr.w	r2, r3, #32
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	f000 81f5 	beq.w	8002a98 <HAL_UART_IRQHandler+0x580>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80026ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80026b2:	f003 0320 	and.w	r3, r3, #32
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d00d      	beq.n	80026d6 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80026ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80026be:	f003 0320 	and.w	r3, r3, #32
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d007      	beq.n	80026d6 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d003      	beq.n	80026d6 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80026d2:	6878      	ldr	r0, [r7, #4]
 80026d4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80026dc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	689b      	ldr	r3, [r3, #8]
 80026e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026ea:	2b40      	cmp	r3, #64	; 0x40
 80026ec:	d005      	beq.n	80026fa <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80026ee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80026f2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d04f      	beq.n	800279a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80026fa:	6878      	ldr	r0, [r7, #4]
 80026fc:	f000 febe 	bl	800347c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	689b      	ldr	r3, [r3, #8]
 8002706:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800270a:	2b40      	cmp	r3, #64	; 0x40
 800270c:	d141      	bne.n	8002792 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	3308      	adds	r3, #8
 8002714:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002718:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800271c:	e853 3f00 	ldrex	r3, [r3]
 8002720:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002724:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002728:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800272c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	3308      	adds	r3, #8
 8002736:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800273a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800273e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002742:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002746:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800274a:	e841 2300 	strex	r3, r2, [r1]
 800274e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002752:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002756:	2b00      	cmp	r3, #0
 8002758:	d1d9      	bne.n	800270e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800275e:	2b00      	cmp	r3, #0
 8002760:	d013      	beq.n	800278a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002766:	4a13      	ldr	r2, [pc, #76]	; (80027b4 <HAL_UART_IRQHandler+0x29c>)
 8002768:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800276e:	4618      	mov	r0, r3
 8002770:	f7fe fba5 	bl	8000ebe <HAL_DMA_Abort_IT>
 8002774:	4603      	mov	r3, r0
 8002776:	2b00      	cmp	r3, #0
 8002778:	d017      	beq.n	80027aa <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800277e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002780:	687a      	ldr	r2, [r7, #4]
 8002782:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8002784:	4610      	mov	r0, r2
 8002786:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002788:	e00f      	b.n	80027aa <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800278a:	6878      	ldr	r0, [r7, #4]
 800278c:	f000 f998 	bl	8002ac0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002790:	e00b      	b.n	80027aa <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002792:	6878      	ldr	r0, [r7, #4]
 8002794:	f000 f994 	bl	8002ac0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002798:	e007      	b.n	80027aa <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800279a:	6878      	ldr	r0, [r7, #4]
 800279c:	f000 f990 	bl	8002ac0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2200      	movs	r2, #0
 80027a4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 80027a8:	e176      	b.n	8002a98 <HAL_UART_IRQHandler+0x580>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80027aa:	bf00      	nop
    return;
 80027ac:	e174      	b.n	8002a98 <HAL_UART_IRQHandler+0x580>
 80027ae:	bf00      	nop
 80027b0:	04000120 	.word	0x04000120
 80027b4:	08003543 	.word	0x08003543

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027bc:	2b01      	cmp	r3, #1
 80027be:	f040 8144 	bne.w	8002a4a <HAL_UART_IRQHandler+0x532>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80027c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80027c6:	f003 0310 	and.w	r3, r3, #16
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	f000 813d 	beq.w	8002a4a <HAL_UART_IRQHandler+0x532>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80027d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80027d4:	f003 0310 	and.w	r3, r3, #16
 80027d8:	2b00      	cmp	r3, #0
 80027da:	f000 8136 	beq.w	8002a4a <HAL_UART_IRQHandler+0x532>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	2210      	movs	r2, #16
 80027e4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	689b      	ldr	r3, [r3, #8]
 80027ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027f0:	2b40      	cmp	r3, #64	; 0x40
 80027f2:	f040 80b2 	bne.w	800295a <HAL_UART_IRQHandler+0x442>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	685b      	ldr	r3, [r3, #4]
 80027fe:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002802:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002806:	2b00      	cmp	r3, #0
 8002808:	f000 8148 	beq.w	8002a9c <HAL_UART_IRQHandler+0x584>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8002812:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002816:	429a      	cmp	r2, r3
 8002818:	f080 8140 	bcs.w	8002a9c <HAL_UART_IRQHandler+0x584>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002822:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800282a:	69db      	ldr	r3, [r3, #28]
 800282c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002830:	f000 8085 	beq.w	800293e <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800283c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002840:	e853 3f00 	ldrex	r3, [r3]
 8002844:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002848:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800284c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002850:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	461a      	mov	r2, r3
 800285a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800285e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002862:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002866:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800286a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800286e:	e841 2300 	strex	r3, r2, [r1]
 8002872:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002876:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800287a:	2b00      	cmp	r3, #0
 800287c:	d1da      	bne.n	8002834 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	3308      	adds	r3, #8
 8002884:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002886:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002888:	e853 3f00 	ldrex	r3, [r3]
 800288c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800288e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002890:	f023 0301 	bic.w	r3, r3, #1
 8002894:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	3308      	adds	r3, #8
 800289e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80028a2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80028a6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028a8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80028aa:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80028ae:	e841 2300 	strex	r3, r2, [r1]
 80028b2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80028b4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d1e1      	bne.n	800287e <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	3308      	adds	r3, #8
 80028c0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028c2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80028c4:	e853 3f00 	ldrex	r3, [r3]
 80028c8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80028ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80028cc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80028d0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	3308      	adds	r3, #8
 80028da:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80028de:	66fa      	str	r2, [r7, #108]	; 0x6c
 80028e0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028e2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80028e4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80028e6:	e841 2300 	strex	r3, r2, [r1]
 80028ea:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80028ec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d1e3      	bne.n	80028ba <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	2220      	movs	r2, #32
 80028f6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2200      	movs	r2, #0
 80028fc:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002904:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002906:	e853 3f00 	ldrex	r3, [r3]
 800290a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800290c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800290e:	f023 0310 	bic.w	r3, r3, #16
 8002912:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	461a      	mov	r2, r3
 800291c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002920:	65bb      	str	r3, [r7, #88]	; 0x58
 8002922:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002924:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002926:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002928:	e841 2300 	strex	r3, r2, [r1]
 800292c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800292e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002930:	2b00      	cmp	r3, #0
 8002932:	d1e4      	bne.n	80028fe <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002938:	4618      	mov	r0, r3
 800293a:	f7fe fa50 	bl	8000dde <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800294a:	b29b      	uxth	r3, r3
 800294c:	1ad3      	subs	r3, r2, r3
 800294e:	b29b      	uxth	r3, r3
 8002950:	4619      	mov	r1, r3
 8002952:	6878      	ldr	r0, [r7, #4]
 8002954:	f000 f8be 	bl	8002ad4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002958:	e0a0      	b.n	8002a9c <HAL_UART_IRQHandler+0x584>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002966:	b29b      	uxth	r3, r3
 8002968:	1ad3      	subs	r3, r2, r3
 800296a:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002974:	b29b      	uxth	r3, r3
 8002976:	2b00      	cmp	r3, #0
 8002978:	f000 8092 	beq.w	8002aa0 <HAL_UART_IRQHandler+0x588>
          && (nb_rx_data > 0U))
 800297c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002980:	2b00      	cmp	r3, #0
 8002982:	f000 808d 	beq.w	8002aa0 <HAL_UART_IRQHandler+0x588>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800298c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800298e:	e853 3f00 	ldrex	r3, [r3]
 8002992:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002994:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002996:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800299a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	461a      	mov	r2, r3
 80029a4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80029a8:	647b      	str	r3, [r7, #68]	; 0x44
 80029aa:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029ac:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80029ae:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80029b0:	e841 2300 	strex	r3, r2, [r1]
 80029b4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80029b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d1e4      	bne.n	8002986 <HAL_UART_IRQHandler+0x46e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	3308      	adds	r3, #8
 80029c2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029c6:	e853 3f00 	ldrex	r3, [r3]
 80029ca:	623b      	str	r3, [r7, #32]
   return(result);
 80029cc:	6a3b      	ldr	r3, [r7, #32]
 80029ce:	f023 0301 	bic.w	r3, r3, #1
 80029d2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	3308      	adds	r3, #8
 80029dc:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80029e0:	633a      	str	r2, [r7, #48]	; 0x30
 80029e2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029e4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80029e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80029e8:	e841 2300 	strex	r3, r2, [r1]
 80029ec:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80029ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d1e3      	bne.n	80029bc <HAL_UART_IRQHandler+0x4a4>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2220      	movs	r2, #32
 80029f8:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2200      	movs	r2, #0
 80029fe:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2200      	movs	r2, #0
 8002a04:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a0c:	693b      	ldr	r3, [r7, #16]
 8002a0e:	e853 3f00 	ldrex	r3, [r3]
 8002a12:	60fb      	str	r3, [r7, #12]
   return(result);
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	f023 0310 	bic.w	r3, r3, #16
 8002a1a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	461a      	mov	r2, r3
 8002a24:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002a28:	61fb      	str	r3, [r7, #28]
 8002a2a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a2c:	69b9      	ldr	r1, [r7, #24]
 8002a2e:	69fa      	ldr	r2, [r7, #28]
 8002a30:	e841 2300 	strex	r3, r2, [r1]
 8002a34:	617b      	str	r3, [r7, #20]
   return(result);
 8002a36:	697b      	ldr	r3, [r7, #20]
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d1e4      	bne.n	8002a06 <HAL_UART_IRQHandler+0x4ee>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002a3c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002a40:	4619      	mov	r1, r3
 8002a42:	6878      	ldr	r0, [r7, #4]
 8002a44:	f000 f846 	bl	8002ad4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002a48:	e02a      	b.n	8002aa0 <HAL_UART_IRQHandler+0x588>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8002a4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d00e      	beq.n	8002a74 <HAL_UART_IRQHandler+0x55c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8002a56:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002a5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d008      	beq.n	8002a74 <HAL_UART_IRQHandler+0x55c>
  {
    if (huart->TxISR != NULL)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d01c      	beq.n	8002aa4 <HAL_UART_IRQHandler+0x58c>
    {
      huart->TxISR(huart);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002a6e:	6878      	ldr	r0, [r7, #4]
 8002a70:	4798      	blx	r3
    }
    return;
 8002a72:	e017      	b.n	8002aa4 <HAL_UART_IRQHandler+0x58c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002a74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d012      	beq.n	8002aa6 <HAL_UART_IRQHandler+0x58e>
 8002a80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002a84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d00c      	beq.n	8002aa6 <HAL_UART_IRQHandler+0x58e>
  {
    UART_EndTransmit_IT(huart);
 8002a8c:	6878      	ldr	r0, [r7, #4]
 8002a8e:	f000 fd6e 	bl	800356e <UART_EndTransmit_IT>
    return;
 8002a92:	e008      	b.n	8002aa6 <HAL_UART_IRQHandler+0x58e>
      return;
 8002a94:	bf00      	nop
 8002a96:	e006      	b.n	8002aa6 <HAL_UART_IRQHandler+0x58e>
    return;
 8002a98:	bf00      	nop
 8002a9a:	e004      	b.n	8002aa6 <HAL_UART_IRQHandler+0x58e>
      return;
 8002a9c:	bf00      	nop
 8002a9e:	e002      	b.n	8002aa6 <HAL_UART_IRQHandler+0x58e>
      return;
 8002aa0:	bf00      	nop
 8002aa2:	e000      	b.n	8002aa6 <HAL_UART_IRQHandler+0x58e>
    return;
 8002aa4:	bf00      	nop
  }

}
 8002aa6:	37e8      	adds	r7, #232	; 0xe8
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	bd80      	pop	{r7, pc}

08002aac <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002aac:	b480      	push	{r7}
 8002aae:	b083      	sub	sp, #12
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002ab4:	bf00      	nop
 8002ab6:	370c      	adds	r7, #12
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002abe:	4770      	bx	lr

08002ac0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002ac0:	b480      	push	{r7}
 8002ac2:	b083      	sub	sp, #12
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002ac8:	bf00      	nop
 8002aca:	370c      	adds	r7, #12
 8002acc:	46bd      	mov	sp, r7
 8002ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad2:	4770      	bx	lr

08002ad4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002ad4:	b480      	push	{r7}
 8002ad6:	b083      	sub	sp, #12
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
 8002adc:	460b      	mov	r3, r1
 8002ade:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002ae0:	bf00      	nop
 8002ae2:	370c      	adds	r7, #12
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aea:	4770      	bx	lr

08002aec <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b088      	sub	sp, #32
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002af4:	2300      	movs	r3, #0
 8002af6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	689a      	ldr	r2, [r3, #8]
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	691b      	ldr	r3, [r3, #16]
 8002b00:	431a      	orrs	r2, r3
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	695b      	ldr	r3, [r3, #20]
 8002b06:	431a      	orrs	r2, r3
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	69db      	ldr	r3, [r3, #28]
 8002b0c:	4313      	orrs	r3, r2
 8002b0e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	681a      	ldr	r2, [r3, #0]
 8002b16:	4ba6      	ldr	r3, [pc, #664]	; (8002db0 <UART_SetConfig+0x2c4>)
 8002b18:	4013      	ands	r3, r2
 8002b1a:	687a      	ldr	r2, [r7, #4]
 8002b1c:	6812      	ldr	r2, [r2, #0]
 8002b1e:	6979      	ldr	r1, [r7, #20]
 8002b20:	430b      	orrs	r3, r1
 8002b22:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	685b      	ldr	r3, [r3, #4]
 8002b2a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	68da      	ldr	r2, [r3, #12]
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	430a      	orrs	r2, r1
 8002b38:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	699b      	ldr	r3, [r3, #24]
 8002b3e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6a1b      	ldr	r3, [r3, #32]
 8002b44:	697a      	ldr	r2, [r7, #20]
 8002b46:	4313      	orrs	r3, r2
 8002b48:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	689b      	ldr	r3, [r3, #8]
 8002b50:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	697a      	ldr	r2, [r7, #20]
 8002b5a:	430a      	orrs	r2, r1
 8002b5c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	4a94      	ldr	r2, [pc, #592]	; (8002db4 <UART_SetConfig+0x2c8>)
 8002b64:	4293      	cmp	r3, r2
 8002b66:	d120      	bne.n	8002baa <UART_SetConfig+0xbe>
 8002b68:	4b93      	ldr	r3, [pc, #588]	; (8002db8 <UART_SetConfig+0x2cc>)
 8002b6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b6e:	f003 0303 	and.w	r3, r3, #3
 8002b72:	2b03      	cmp	r3, #3
 8002b74:	d816      	bhi.n	8002ba4 <UART_SetConfig+0xb8>
 8002b76:	a201      	add	r2, pc, #4	; (adr r2, 8002b7c <UART_SetConfig+0x90>)
 8002b78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b7c:	08002b8d 	.word	0x08002b8d
 8002b80:	08002b99 	.word	0x08002b99
 8002b84:	08002b93 	.word	0x08002b93
 8002b88:	08002b9f 	.word	0x08002b9f
 8002b8c:	2301      	movs	r3, #1
 8002b8e:	77fb      	strb	r3, [r7, #31]
 8002b90:	e150      	b.n	8002e34 <UART_SetConfig+0x348>
 8002b92:	2302      	movs	r3, #2
 8002b94:	77fb      	strb	r3, [r7, #31]
 8002b96:	e14d      	b.n	8002e34 <UART_SetConfig+0x348>
 8002b98:	2304      	movs	r3, #4
 8002b9a:	77fb      	strb	r3, [r7, #31]
 8002b9c:	e14a      	b.n	8002e34 <UART_SetConfig+0x348>
 8002b9e:	2308      	movs	r3, #8
 8002ba0:	77fb      	strb	r3, [r7, #31]
 8002ba2:	e147      	b.n	8002e34 <UART_SetConfig+0x348>
 8002ba4:	2310      	movs	r3, #16
 8002ba6:	77fb      	strb	r3, [r7, #31]
 8002ba8:	e144      	b.n	8002e34 <UART_SetConfig+0x348>
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	4a83      	ldr	r2, [pc, #524]	; (8002dbc <UART_SetConfig+0x2d0>)
 8002bb0:	4293      	cmp	r3, r2
 8002bb2:	d132      	bne.n	8002c1a <UART_SetConfig+0x12e>
 8002bb4:	4b80      	ldr	r3, [pc, #512]	; (8002db8 <UART_SetConfig+0x2cc>)
 8002bb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bba:	f003 030c 	and.w	r3, r3, #12
 8002bbe:	2b0c      	cmp	r3, #12
 8002bc0:	d828      	bhi.n	8002c14 <UART_SetConfig+0x128>
 8002bc2:	a201      	add	r2, pc, #4	; (adr r2, 8002bc8 <UART_SetConfig+0xdc>)
 8002bc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bc8:	08002bfd 	.word	0x08002bfd
 8002bcc:	08002c15 	.word	0x08002c15
 8002bd0:	08002c15 	.word	0x08002c15
 8002bd4:	08002c15 	.word	0x08002c15
 8002bd8:	08002c09 	.word	0x08002c09
 8002bdc:	08002c15 	.word	0x08002c15
 8002be0:	08002c15 	.word	0x08002c15
 8002be4:	08002c15 	.word	0x08002c15
 8002be8:	08002c03 	.word	0x08002c03
 8002bec:	08002c15 	.word	0x08002c15
 8002bf0:	08002c15 	.word	0x08002c15
 8002bf4:	08002c15 	.word	0x08002c15
 8002bf8:	08002c0f 	.word	0x08002c0f
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	77fb      	strb	r3, [r7, #31]
 8002c00:	e118      	b.n	8002e34 <UART_SetConfig+0x348>
 8002c02:	2302      	movs	r3, #2
 8002c04:	77fb      	strb	r3, [r7, #31]
 8002c06:	e115      	b.n	8002e34 <UART_SetConfig+0x348>
 8002c08:	2304      	movs	r3, #4
 8002c0a:	77fb      	strb	r3, [r7, #31]
 8002c0c:	e112      	b.n	8002e34 <UART_SetConfig+0x348>
 8002c0e:	2308      	movs	r3, #8
 8002c10:	77fb      	strb	r3, [r7, #31]
 8002c12:	e10f      	b.n	8002e34 <UART_SetConfig+0x348>
 8002c14:	2310      	movs	r3, #16
 8002c16:	77fb      	strb	r3, [r7, #31]
 8002c18:	e10c      	b.n	8002e34 <UART_SetConfig+0x348>
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	4a68      	ldr	r2, [pc, #416]	; (8002dc0 <UART_SetConfig+0x2d4>)
 8002c20:	4293      	cmp	r3, r2
 8002c22:	d120      	bne.n	8002c66 <UART_SetConfig+0x17a>
 8002c24:	4b64      	ldr	r3, [pc, #400]	; (8002db8 <UART_SetConfig+0x2cc>)
 8002c26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c2a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002c2e:	2b30      	cmp	r3, #48	; 0x30
 8002c30:	d013      	beq.n	8002c5a <UART_SetConfig+0x16e>
 8002c32:	2b30      	cmp	r3, #48	; 0x30
 8002c34:	d814      	bhi.n	8002c60 <UART_SetConfig+0x174>
 8002c36:	2b20      	cmp	r3, #32
 8002c38:	d009      	beq.n	8002c4e <UART_SetConfig+0x162>
 8002c3a:	2b20      	cmp	r3, #32
 8002c3c:	d810      	bhi.n	8002c60 <UART_SetConfig+0x174>
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d002      	beq.n	8002c48 <UART_SetConfig+0x15c>
 8002c42:	2b10      	cmp	r3, #16
 8002c44:	d006      	beq.n	8002c54 <UART_SetConfig+0x168>
 8002c46:	e00b      	b.n	8002c60 <UART_SetConfig+0x174>
 8002c48:	2300      	movs	r3, #0
 8002c4a:	77fb      	strb	r3, [r7, #31]
 8002c4c:	e0f2      	b.n	8002e34 <UART_SetConfig+0x348>
 8002c4e:	2302      	movs	r3, #2
 8002c50:	77fb      	strb	r3, [r7, #31]
 8002c52:	e0ef      	b.n	8002e34 <UART_SetConfig+0x348>
 8002c54:	2304      	movs	r3, #4
 8002c56:	77fb      	strb	r3, [r7, #31]
 8002c58:	e0ec      	b.n	8002e34 <UART_SetConfig+0x348>
 8002c5a:	2308      	movs	r3, #8
 8002c5c:	77fb      	strb	r3, [r7, #31]
 8002c5e:	e0e9      	b.n	8002e34 <UART_SetConfig+0x348>
 8002c60:	2310      	movs	r3, #16
 8002c62:	77fb      	strb	r3, [r7, #31]
 8002c64:	e0e6      	b.n	8002e34 <UART_SetConfig+0x348>
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	4a56      	ldr	r2, [pc, #344]	; (8002dc4 <UART_SetConfig+0x2d8>)
 8002c6c:	4293      	cmp	r3, r2
 8002c6e:	d120      	bne.n	8002cb2 <UART_SetConfig+0x1c6>
 8002c70:	4b51      	ldr	r3, [pc, #324]	; (8002db8 <UART_SetConfig+0x2cc>)
 8002c72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c76:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002c7a:	2bc0      	cmp	r3, #192	; 0xc0
 8002c7c:	d013      	beq.n	8002ca6 <UART_SetConfig+0x1ba>
 8002c7e:	2bc0      	cmp	r3, #192	; 0xc0
 8002c80:	d814      	bhi.n	8002cac <UART_SetConfig+0x1c0>
 8002c82:	2b80      	cmp	r3, #128	; 0x80
 8002c84:	d009      	beq.n	8002c9a <UART_SetConfig+0x1ae>
 8002c86:	2b80      	cmp	r3, #128	; 0x80
 8002c88:	d810      	bhi.n	8002cac <UART_SetConfig+0x1c0>
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d002      	beq.n	8002c94 <UART_SetConfig+0x1a8>
 8002c8e:	2b40      	cmp	r3, #64	; 0x40
 8002c90:	d006      	beq.n	8002ca0 <UART_SetConfig+0x1b4>
 8002c92:	e00b      	b.n	8002cac <UART_SetConfig+0x1c0>
 8002c94:	2300      	movs	r3, #0
 8002c96:	77fb      	strb	r3, [r7, #31]
 8002c98:	e0cc      	b.n	8002e34 <UART_SetConfig+0x348>
 8002c9a:	2302      	movs	r3, #2
 8002c9c:	77fb      	strb	r3, [r7, #31]
 8002c9e:	e0c9      	b.n	8002e34 <UART_SetConfig+0x348>
 8002ca0:	2304      	movs	r3, #4
 8002ca2:	77fb      	strb	r3, [r7, #31]
 8002ca4:	e0c6      	b.n	8002e34 <UART_SetConfig+0x348>
 8002ca6:	2308      	movs	r3, #8
 8002ca8:	77fb      	strb	r3, [r7, #31]
 8002caa:	e0c3      	b.n	8002e34 <UART_SetConfig+0x348>
 8002cac:	2310      	movs	r3, #16
 8002cae:	77fb      	strb	r3, [r7, #31]
 8002cb0:	e0c0      	b.n	8002e34 <UART_SetConfig+0x348>
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	4a44      	ldr	r2, [pc, #272]	; (8002dc8 <UART_SetConfig+0x2dc>)
 8002cb8:	4293      	cmp	r3, r2
 8002cba:	d125      	bne.n	8002d08 <UART_SetConfig+0x21c>
 8002cbc:	4b3e      	ldr	r3, [pc, #248]	; (8002db8 <UART_SetConfig+0x2cc>)
 8002cbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cc2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002cc6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002cca:	d017      	beq.n	8002cfc <UART_SetConfig+0x210>
 8002ccc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002cd0:	d817      	bhi.n	8002d02 <UART_SetConfig+0x216>
 8002cd2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002cd6:	d00b      	beq.n	8002cf0 <UART_SetConfig+0x204>
 8002cd8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002cdc:	d811      	bhi.n	8002d02 <UART_SetConfig+0x216>
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d003      	beq.n	8002cea <UART_SetConfig+0x1fe>
 8002ce2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ce6:	d006      	beq.n	8002cf6 <UART_SetConfig+0x20a>
 8002ce8:	e00b      	b.n	8002d02 <UART_SetConfig+0x216>
 8002cea:	2300      	movs	r3, #0
 8002cec:	77fb      	strb	r3, [r7, #31]
 8002cee:	e0a1      	b.n	8002e34 <UART_SetConfig+0x348>
 8002cf0:	2302      	movs	r3, #2
 8002cf2:	77fb      	strb	r3, [r7, #31]
 8002cf4:	e09e      	b.n	8002e34 <UART_SetConfig+0x348>
 8002cf6:	2304      	movs	r3, #4
 8002cf8:	77fb      	strb	r3, [r7, #31]
 8002cfa:	e09b      	b.n	8002e34 <UART_SetConfig+0x348>
 8002cfc:	2308      	movs	r3, #8
 8002cfe:	77fb      	strb	r3, [r7, #31]
 8002d00:	e098      	b.n	8002e34 <UART_SetConfig+0x348>
 8002d02:	2310      	movs	r3, #16
 8002d04:	77fb      	strb	r3, [r7, #31]
 8002d06:	e095      	b.n	8002e34 <UART_SetConfig+0x348>
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4a2f      	ldr	r2, [pc, #188]	; (8002dcc <UART_SetConfig+0x2e0>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d125      	bne.n	8002d5e <UART_SetConfig+0x272>
 8002d12:	4b29      	ldr	r3, [pc, #164]	; (8002db8 <UART_SetConfig+0x2cc>)
 8002d14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d18:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002d1c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002d20:	d017      	beq.n	8002d52 <UART_SetConfig+0x266>
 8002d22:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002d26:	d817      	bhi.n	8002d58 <UART_SetConfig+0x26c>
 8002d28:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002d2c:	d00b      	beq.n	8002d46 <UART_SetConfig+0x25a>
 8002d2e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002d32:	d811      	bhi.n	8002d58 <UART_SetConfig+0x26c>
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d003      	beq.n	8002d40 <UART_SetConfig+0x254>
 8002d38:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d3c:	d006      	beq.n	8002d4c <UART_SetConfig+0x260>
 8002d3e:	e00b      	b.n	8002d58 <UART_SetConfig+0x26c>
 8002d40:	2301      	movs	r3, #1
 8002d42:	77fb      	strb	r3, [r7, #31]
 8002d44:	e076      	b.n	8002e34 <UART_SetConfig+0x348>
 8002d46:	2302      	movs	r3, #2
 8002d48:	77fb      	strb	r3, [r7, #31]
 8002d4a:	e073      	b.n	8002e34 <UART_SetConfig+0x348>
 8002d4c:	2304      	movs	r3, #4
 8002d4e:	77fb      	strb	r3, [r7, #31]
 8002d50:	e070      	b.n	8002e34 <UART_SetConfig+0x348>
 8002d52:	2308      	movs	r3, #8
 8002d54:	77fb      	strb	r3, [r7, #31]
 8002d56:	e06d      	b.n	8002e34 <UART_SetConfig+0x348>
 8002d58:	2310      	movs	r3, #16
 8002d5a:	77fb      	strb	r3, [r7, #31]
 8002d5c:	e06a      	b.n	8002e34 <UART_SetConfig+0x348>
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	4a1b      	ldr	r2, [pc, #108]	; (8002dd0 <UART_SetConfig+0x2e4>)
 8002d64:	4293      	cmp	r3, r2
 8002d66:	d138      	bne.n	8002dda <UART_SetConfig+0x2ee>
 8002d68:	4b13      	ldr	r3, [pc, #76]	; (8002db8 <UART_SetConfig+0x2cc>)
 8002d6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d6e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8002d72:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002d76:	d017      	beq.n	8002da8 <UART_SetConfig+0x2bc>
 8002d78:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002d7c:	d82a      	bhi.n	8002dd4 <UART_SetConfig+0x2e8>
 8002d7e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d82:	d00b      	beq.n	8002d9c <UART_SetConfig+0x2b0>
 8002d84:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d88:	d824      	bhi.n	8002dd4 <UART_SetConfig+0x2e8>
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d003      	beq.n	8002d96 <UART_SetConfig+0x2aa>
 8002d8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d92:	d006      	beq.n	8002da2 <UART_SetConfig+0x2b6>
 8002d94:	e01e      	b.n	8002dd4 <UART_SetConfig+0x2e8>
 8002d96:	2300      	movs	r3, #0
 8002d98:	77fb      	strb	r3, [r7, #31]
 8002d9a:	e04b      	b.n	8002e34 <UART_SetConfig+0x348>
 8002d9c:	2302      	movs	r3, #2
 8002d9e:	77fb      	strb	r3, [r7, #31]
 8002da0:	e048      	b.n	8002e34 <UART_SetConfig+0x348>
 8002da2:	2304      	movs	r3, #4
 8002da4:	77fb      	strb	r3, [r7, #31]
 8002da6:	e045      	b.n	8002e34 <UART_SetConfig+0x348>
 8002da8:	2308      	movs	r3, #8
 8002daa:	77fb      	strb	r3, [r7, #31]
 8002dac:	e042      	b.n	8002e34 <UART_SetConfig+0x348>
 8002dae:	bf00      	nop
 8002db0:	efff69f3 	.word	0xefff69f3
 8002db4:	40011000 	.word	0x40011000
 8002db8:	40023800 	.word	0x40023800
 8002dbc:	40004400 	.word	0x40004400
 8002dc0:	40004800 	.word	0x40004800
 8002dc4:	40004c00 	.word	0x40004c00
 8002dc8:	40005000 	.word	0x40005000
 8002dcc:	40011400 	.word	0x40011400
 8002dd0:	40007800 	.word	0x40007800
 8002dd4:	2310      	movs	r3, #16
 8002dd6:	77fb      	strb	r3, [r7, #31]
 8002dd8:	e02c      	b.n	8002e34 <UART_SetConfig+0x348>
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	4a72      	ldr	r2, [pc, #456]	; (8002fa8 <UART_SetConfig+0x4bc>)
 8002de0:	4293      	cmp	r3, r2
 8002de2:	d125      	bne.n	8002e30 <UART_SetConfig+0x344>
 8002de4:	4b71      	ldr	r3, [pc, #452]	; (8002fac <UART_SetConfig+0x4c0>)
 8002de6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dea:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002dee:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002df2:	d017      	beq.n	8002e24 <UART_SetConfig+0x338>
 8002df4:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002df8:	d817      	bhi.n	8002e2a <UART_SetConfig+0x33e>
 8002dfa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002dfe:	d00b      	beq.n	8002e18 <UART_SetConfig+0x32c>
 8002e00:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e04:	d811      	bhi.n	8002e2a <UART_SetConfig+0x33e>
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d003      	beq.n	8002e12 <UART_SetConfig+0x326>
 8002e0a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002e0e:	d006      	beq.n	8002e1e <UART_SetConfig+0x332>
 8002e10:	e00b      	b.n	8002e2a <UART_SetConfig+0x33e>
 8002e12:	2300      	movs	r3, #0
 8002e14:	77fb      	strb	r3, [r7, #31]
 8002e16:	e00d      	b.n	8002e34 <UART_SetConfig+0x348>
 8002e18:	2302      	movs	r3, #2
 8002e1a:	77fb      	strb	r3, [r7, #31]
 8002e1c:	e00a      	b.n	8002e34 <UART_SetConfig+0x348>
 8002e1e:	2304      	movs	r3, #4
 8002e20:	77fb      	strb	r3, [r7, #31]
 8002e22:	e007      	b.n	8002e34 <UART_SetConfig+0x348>
 8002e24:	2308      	movs	r3, #8
 8002e26:	77fb      	strb	r3, [r7, #31]
 8002e28:	e004      	b.n	8002e34 <UART_SetConfig+0x348>
 8002e2a:	2310      	movs	r3, #16
 8002e2c:	77fb      	strb	r3, [r7, #31]
 8002e2e:	e001      	b.n	8002e34 <UART_SetConfig+0x348>
 8002e30:	2310      	movs	r3, #16
 8002e32:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	69db      	ldr	r3, [r3, #28]
 8002e38:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e3c:	d15b      	bne.n	8002ef6 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8002e3e:	7ffb      	ldrb	r3, [r7, #31]
 8002e40:	2b08      	cmp	r3, #8
 8002e42:	d828      	bhi.n	8002e96 <UART_SetConfig+0x3aa>
 8002e44:	a201      	add	r2, pc, #4	; (adr r2, 8002e4c <UART_SetConfig+0x360>)
 8002e46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e4a:	bf00      	nop
 8002e4c:	08002e71 	.word	0x08002e71
 8002e50:	08002e79 	.word	0x08002e79
 8002e54:	08002e81 	.word	0x08002e81
 8002e58:	08002e97 	.word	0x08002e97
 8002e5c:	08002e87 	.word	0x08002e87
 8002e60:	08002e97 	.word	0x08002e97
 8002e64:	08002e97 	.word	0x08002e97
 8002e68:	08002e97 	.word	0x08002e97
 8002e6c:	08002e8f 	.word	0x08002e8f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002e70:	f7fe feb0 	bl	8001bd4 <HAL_RCC_GetPCLK1Freq>
 8002e74:	61b8      	str	r0, [r7, #24]
        break;
 8002e76:	e013      	b.n	8002ea0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002e78:	f7fe fec0 	bl	8001bfc <HAL_RCC_GetPCLK2Freq>
 8002e7c:	61b8      	str	r0, [r7, #24]
        break;
 8002e7e:	e00f      	b.n	8002ea0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002e80:	4b4b      	ldr	r3, [pc, #300]	; (8002fb0 <UART_SetConfig+0x4c4>)
 8002e82:	61bb      	str	r3, [r7, #24]
        break;
 8002e84:	e00c      	b.n	8002ea0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002e86:	f7fe fd93 	bl	80019b0 <HAL_RCC_GetSysClockFreq>
 8002e8a:	61b8      	str	r0, [r7, #24]
        break;
 8002e8c:	e008      	b.n	8002ea0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002e8e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002e92:	61bb      	str	r3, [r7, #24]
        break;
 8002e94:	e004      	b.n	8002ea0 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8002e96:	2300      	movs	r3, #0
 8002e98:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	77bb      	strb	r3, [r7, #30]
        break;
 8002e9e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002ea0:	69bb      	ldr	r3, [r7, #24]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d074      	beq.n	8002f90 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002ea6:	69bb      	ldr	r3, [r7, #24]
 8002ea8:	005a      	lsls	r2, r3, #1
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	685b      	ldr	r3, [r3, #4]
 8002eae:	085b      	lsrs	r3, r3, #1
 8002eb0:	441a      	add	r2, r3
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	685b      	ldr	r3, [r3, #4]
 8002eb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002eba:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002ebc:	693b      	ldr	r3, [r7, #16]
 8002ebe:	2b0f      	cmp	r3, #15
 8002ec0:	d916      	bls.n	8002ef0 <UART_SetConfig+0x404>
 8002ec2:	693b      	ldr	r3, [r7, #16]
 8002ec4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ec8:	d212      	bcs.n	8002ef0 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002eca:	693b      	ldr	r3, [r7, #16]
 8002ecc:	b29b      	uxth	r3, r3
 8002ece:	f023 030f 	bic.w	r3, r3, #15
 8002ed2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002ed4:	693b      	ldr	r3, [r7, #16]
 8002ed6:	085b      	lsrs	r3, r3, #1
 8002ed8:	b29b      	uxth	r3, r3
 8002eda:	f003 0307 	and.w	r3, r3, #7
 8002ede:	b29a      	uxth	r2, r3
 8002ee0:	89fb      	ldrh	r3, [r7, #14]
 8002ee2:	4313      	orrs	r3, r2
 8002ee4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	89fa      	ldrh	r2, [r7, #14]
 8002eec:	60da      	str	r2, [r3, #12]
 8002eee:	e04f      	b.n	8002f90 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8002ef0:	2301      	movs	r3, #1
 8002ef2:	77bb      	strb	r3, [r7, #30]
 8002ef4:	e04c      	b.n	8002f90 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002ef6:	7ffb      	ldrb	r3, [r7, #31]
 8002ef8:	2b08      	cmp	r3, #8
 8002efa:	d828      	bhi.n	8002f4e <UART_SetConfig+0x462>
 8002efc:	a201      	add	r2, pc, #4	; (adr r2, 8002f04 <UART_SetConfig+0x418>)
 8002efe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f02:	bf00      	nop
 8002f04:	08002f29 	.word	0x08002f29
 8002f08:	08002f31 	.word	0x08002f31
 8002f0c:	08002f39 	.word	0x08002f39
 8002f10:	08002f4f 	.word	0x08002f4f
 8002f14:	08002f3f 	.word	0x08002f3f
 8002f18:	08002f4f 	.word	0x08002f4f
 8002f1c:	08002f4f 	.word	0x08002f4f
 8002f20:	08002f4f 	.word	0x08002f4f
 8002f24:	08002f47 	.word	0x08002f47
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002f28:	f7fe fe54 	bl	8001bd4 <HAL_RCC_GetPCLK1Freq>
 8002f2c:	61b8      	str	r0, [r7, #24]
        break;
 8002f2e:	e013      	b.n	8002f58 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002f30:	f7fe fe64 	bl	8001bfc <HAL_RCC_GetPCLK2Freq>
 8002f34:	61b8      	str	r0, [r7, #24]
        break;
 8002f36:	e00f      	b.n	8002f58 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002f38:	4b1d      	ldr	r3, [pc, #116]	; (8002fb0 <UART_SetConfig+0x4c4>)
 8002f3a:	61bb      	str	r3, [r7, #24]
        break;
 8002f3c:	e00c      	b.n	8002f58 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002f3e:	f7fe fd37 	bl	80019b0 <HAL_RCC_GetSysClockFreq>
 8002f42:	61b8      	str	r0, [r7, #24]
        break;
 8002f44:	e008      	b.n	8002f58 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002f46:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002f4a:	61bb      	str	r3, [r7, #24]
        break;
 8002f4c:	e004      	b.n	8002f58 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8002f4e:	2300      	movs	r3, #0
 8002f50:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002f52:	2301      	movs	r3, #1
 8002f54:	77bb      	strb	r3, [r7, #30]
        break;
 8002f56:	bf00      	nop
    }

    if (pclk != 0U)
 8002f58:	69bb      	ldr	r3, [r7, #24]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d018      	beq.n	8002f90 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	685b      	ldr	r3, [r3, #4]
 8002f62:	085a      	lsrs	r2, r3, #1
 8002f64:	69bb      	ldr	r3, [r7, #24]
 8002f66:	441a      	add	r2, r3
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	685b      	ldr	r3, [r3, #4]
 8002f6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f70:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002f72:	693b      	ldr	r3, [r7, #16]
 8002f74:	2b0f      	cmp	r3, #15
 8002f76:	d909      	bls.n	8002f8c <UART_SetConfig+0x4a0>
 8002f78:	693b      	ldr	r3, [r7, #16]
 8002f7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f7e:	d205      	bcs.n	8002f8c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002f80:	693b      	ldr	r3, [r7, #16]
 8002f82:	b29a      	uxth	r2, r3
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	60da      	str	r2, [r3, #12]
 8002f8a:	e001      	b.n	8002f90 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8002f8c:	2301      	movs	r3, #1
 8002f8e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2200      	movs	r2, #0
 8002f94:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2200      	movs	r2, #0
 8002f9a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8002f9c:	7fbb      	ldrb	r3, [r7, #30]
}
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	3720      	adds	r7, #32
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	bd80      	pop	{r7, pc}
 8002fa6:	bf00      	nop
 8002fa8:	40007c00 	.word	0x40007c00
 8002fac:	40023800 	.word	0x40023800
 8002fb0:	00f42400 	.word	0x00f42400

08002fb4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	b083      	sub	sp, #12
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fc0:	f003 0301 	and.w	r3, r3, #1
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d00a      	beq.n	8002fde <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	685b      	ldr	r3, [r3, #4]
 8002fce:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	430a      	orrs	r2, r1
 8002fdc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fe2:	f003 0302 	and.w	r3, r3, #2
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d00a      	beq.n	8003000 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	685b      	ldr	r3, [r3, #4]
 8002ff0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	430a      	orrs	r2, r1
 8002ffe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003004:	f003 0304 	and.w	r3, r3, #4
 8003008:	2b00      	cmp	r3, #0
 800300a:	d00a      	beq.n	8003022 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	685b      	ldr	r3, [r3, #4]
 8003012:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	430a      	orrs	r2, r1
 8003020:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003026:	f003 0308 	and.w	r3, r3, #8
 800302a:	2b00      	cmp	r3, #0
 800302c:	d00a      	beq.n	8003044 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	685b      	ldr	r3, [r3, #4]
 8003034:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	430a      	orrs	r2, r1
 8003042:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003048:	f003 0310 	and.w	r3, r3, #16
 800304c:	2b00      	cmp	r3, #0
 800304e:	d00a      	beq.n	8003066 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	689b      	ldr	r3, [r3, #8]
 8003056:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	430a      	orrs	r2, r1
 8003064:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800306a:	f003 0320 	and.w	r3, r3, #32
 800306e:	2b00      	cmp	r3, #0
 8003070:	d00a      	beq.n	8003088 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	689b      	ldr	r3, [r3, #8]
 8003078:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	430a      	orrs	r2, r1
 8003086:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800308c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003090:	2b00      	cmp	r3, #0
 8003092:	d01a      	beq.n	80030ca <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	685b      	ldr	r3, [r3, #4]
 800309a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	430a      	orrs	r2, r1
 80030a8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80030b2:	d10a      	bne.n	80030ca <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	685b      	ldr	r3, [r3, #4]
 80030ba:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	430a      	orrs	r2, r1
 80030c8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d00a      	beq.n	80030ec <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	685b      	ldr	r3, [r3, #4]
 80030dc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	430a      	orrs	r2, r1
 80030ea:	605a      	str	r2, [r3, #4]
  }
}
 80030ec:	bf00      	nop
 80030ee:	370c      	adds	r7, #12
 80030f0:	46bd      	mov	sp, r7
 80030f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f6:	4770      	bx	lr

080030f8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b086      	sub	sp, #24
 80030fc:	af02      	add	r7, sp, #8
 80030fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2200      	movs	r2, #0
 8003104:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003108:	f7fd fd28 	bl	8000b5c <HAL_GetTick>
 800310c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f003 0308 	and.w	r3, r3, #8
 8003118:	2b08      	cmp	r3, #8
 800311a:	d10e      	bne.n	800313a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800311c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003120:	9300      	str	r3, [sp, #0]
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	2200      	movs	r2, #0
 8003126:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800312a:	6878      	ldr	r0, [r7, #4]
 800312c:	f000 f817 	bl	800315e <UART_WaitOnFlagUntilTimeout>
 8003130:	4603      	mov	r3, r0
 8003132:	2b00      	cmp	r3, #0
 8003134:	d001      	beq.n	800313a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003136:	2303      	movs	r3, #3
 8003138:	e00d      	b.n	8003156 <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	2220      	movs	r2, #32
 800313e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2220      	movs	r2, #32
 8003144:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2200      	movs	r2, #0
 800314a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2200      	movs	r2, #0
 8003150:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003154:	2300      	movs	r3, #0
}
 8003156:	4618      	mov	r0, r3
 8003158:	3710      	adds	r7, #16
 800315a:	46bd      	mov	sp, r7
 800315c:	bd80      	pop	{r7, pc}

0800315e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800315e:	b580      	push	{r7, lr}
 8003160:	b09c      	sub	sp, #112	; 0x70
 8003162:	af00      	add	r7, sp, #0
 8003164:	60f8      	str	r0, [r7, #12]
 8003166:	60b9      	str	r1, [r7, #8]
 8003168:	603b      	str	r3, [r7, #0]
 800316a:	4613      	mov	r3, r2
 800316c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800316e:	e0a5      	b.n	80032bc <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003170:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003172:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003176:	f000 80a1 	beq.w	80032bc <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800317a:	f7fd fcef 	bl	8000b5c <HAL_GetTick>
 800317e:	4602      	mov	r2, r0
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	1ad3      	subs	r3, r2, r3
 8003184:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003186:	429a      	cmp	r2, r3
 8003188:	d302      	bcc.n	8003190 <UART_WaitOnFlagUntilTimeout+0x32>
 800318a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800318c:	2b00      	cmp	r3, #0
 800318e:	d13e      	bne.n	800320e <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003196:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003198:	e853 3f00 	ldrex	r3, [r3]
 800319c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800319e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80031a0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80031a4:	667b      	str	r3, [r7, #100]	; 0x64
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	461a      	mov	r2, r3
 80031ac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80031ae:	65fb      	str	r3, [r7, #92]	; 0x5c
 80031b0:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031b2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80031b4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80031b6:	e841 2300 	strex	r3, r2, [r1]
 80031ba:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80031bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d1e6      	bne.n	8003190 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	3308      	adds	r3, #8
 80031c8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031cc:	e853 3f00 	ldrex	r3, [r3]
 80031d0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80031d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031d4:	f023 0301 	bic.w	r3, r3, #1
 80031d8:	663b      	str	r3, [r7, #96]	; 0x60
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	3308      	adds	r3, #8
 80031e0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80031e2:	64ba      	str	r2, [r7, #72]	; 0x48
 80031e4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031e6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80031e8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80031ea:	e841 2300 	strex	r3, r2, [r1]
 80031ee:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80031f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d1e5      	bne.n	80031c2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	2220      	movs	r2, #32
 80031fa:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	2220      	movs	r2, #32
 8003200:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	2200      	movs	r2, #0
 8003206:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800320a:	2303      	movs	r3, #3
 800320c:	e067      	b.n	80032de <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f003 0304 	and.w	r3, r3, #4
 8003218:	2b00      	cmp	r3, #0
 800321a:	d04f      	beq.n	80032bc <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	69db      	ldr	r3, [r3, #28]
 8003222:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003226:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800322a:	d147      	bne.n	80032bc <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003234:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800323c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800323e:	e853 3f00 	ldrex	r3, [r3]
 8003242:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003246:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800324a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	461a      	mov	r2, r3
 8003252:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003254:	637b      	str	r3, [r7, #52]	; 0x34
 8003256:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003258:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800325a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800325c:	e841 2300 	strex	r3, r2, [r1]
 8003260:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003262:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003264:	2b00      	cmp	r3, #0
 8003266:	d1e6      	bne.n	8003236 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	3308      	adds	r3, #8
 800326e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003270:	697b      	ldr	r3, [r7, #20]
 8003272:	e853 3f00 	ldrex	r3, [r3]
 8003276:	613b      	str	r3, [r7, #16]
   return(result);
 8003278:	693b      	ldr	r3, [r7, #16]
 800327a:	f023 0301 	bic.w	r3, r3, #1
 800327e:	66bb      	str	r3, [r7, #104]	; 0x68
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	3308      	adds	r3, #8
 8003286:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003288:	623a      	str	r2, [r7, #32]
 800328a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800328c:	69f9      	ldr	r1, [r7, #28]
 800328e:	6a3a      	ldr	r2, [r7, #32]
 8003290:	e841 2300 	strex	r3, r2, [r1]
 8003294:	61bb      	str	r3, [r7, #24]
   return(result);
 8003296:	69bb      	ldr	r3, [r7, #24]
 8003298:	2b00      	cmp	r3, #0
 800329a:	d1e5      	bne.n	8003268 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	2220      	movs	r2, #32
 80032a0:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	2220      	movs	r2, #32
 80032a6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	2220      	movs	r2, #32
 80032ac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	2200      	movs	r2, #0
 80032b4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80032b8:	2303      	movs	r3, #3
 80032ba:	e010      	b.n	80032de <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	69da      	ldr	r2, [r3, #28]
 80032c2:	68bb      	ldr	r3, [r7, #8]
 80032c4:	4013      	ands	r3, r2
 80032c6:	68ba      	ldr	r2, [r7, #8]
 80032c8:	429a      	cmp	r2, r3
 80032ca:	bf0c      	ite	eq
 80032cc:	2301      	moveq	r3, #1
 80032ce:	2300      	movne	r3, #0
 80032d0:	b2db      	uxtb	r3, r3
 80032d2:	461a      	mov	r2, r3
 80032d4:	79fb      	ldrb	r3, [r7, #7]
 80032d6:	429a      	cmp	r2, r3
 80032d8:	f43f af4a 	beq.w	8003170 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80032dc:	2300      	movs	r3, #0
}
 80032de:	4618      	mov	r0, r3
 80032e0:	3770      	adds	r7, #112	; 0x70
 80032e2:	46bd      	mov	sp, r7
 80032e4:	bd80      	pop	{r7, pc}
	...

080032e8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80032e8:	b480      	push	{r7}
 80032ea:	b097      	sub	sp, #92	; 0x5c
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	60f8      	str	r0, [r7, #12]
 80032f0:	60b9      	str	r1, [r7, #8]
 80032f2:	4613      	mov	r3, r2
 80032f4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	68ba      	ldr	r2, [r7, #8]
 80032fa:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	88fa      	ldrh	r2, [r7, #6]
 8003300:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	88fa      	ldrh	r2, [r7, #6]
 8003308:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	2200      	movs	r2, #0
 8003310:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	689b      	ldr	r3, [r3, #8]
 8003316:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800331a:	d10e      	bne.n	800333a <UART_Start_Receive_IT+0x52>
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	691b      	ldr	r3, [r3, #16]
 8003320:	2b00      	cmp	r3, #0
 8003322:	d105      	bne.n	8003330 <UART_Start_Receive_IT+0x48>
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	f240 12ff 	movw	r2, #511	; 0x1ff
 800332a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800332e:	e02d      	b.n	800338c <UART_Start_Receive_IT+0xa4>
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	22ff      	movs	r2, #255	; 0xff
 8003334:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003338:	e028      	b.n	800338c <UART_Start_Receive_IT+0xa4>
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	689b      	ldr	r3, [r3, #8]
 800333e:	2b00      	cmp	r3, #0
 8003340:	d10d      	bne.n	800335e <UART_Start_Receive_IT+0x76>
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	691b      	ldr	r3, [r3, #16]
 8003346:	2b00      	cmp	r3, #0
 8003348:	d104      	bne.n	8003354 <UART_Start_Receive_IT+0x6c>
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	22ff      	movs	r2, #255	; 0xff
 800334e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003352:	e01b      	b.n	800338c <UART_Start_Receive_IT+0xa4>
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	227f      	movs	r2, #127	; 0x7f
 8003358:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800335c:	e016      	b.n	800338c <UART_Start_Receive_IT+0xa4>
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	689b      	ldr	r3, [r3, #8]
 8003362:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003366:	d10d      	bne.n	8003384 <UART_Start_Receive_IT+0x9c>
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	691b      	ldr	r3, [r3, #16]
 800336c:	2b00      	cmp	r3, #0
 800336e:	d104      	bne.n	800337a <UART_Start_Receive_IT+0x92>
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	227f      	movs	r2, #127	; 0x7f
 8003374:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003378:	e008      	b.n	800338c <UART_Start_Receive_IT+0xa4>
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	223f      	movs	r2, #63	; 0x3f
 800337e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003382:	e003      	b.n	800338c <UART_Start_Receive_IT+0xa4>
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	2200      	movs	r2, #0
 8003388:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	2200      	movs	r2, #0
 8003390:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	2222      	movs	r2, #34	; 0x22
 8003398:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	3308      	adds	r3, #8
 80033a0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80033a4:	e853 3f00 	ldrex	r3, [r3]
 80033a8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80033aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033ac:	f043 0301 	orr.w	r3, r3, #1
 80033b0:	657b      	str	r3, [r7, #84]	; 0x54
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	3308      	adds	r3, #8
 80033b8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80033ba:	64ba      	str	r2, [r7, #72]	; 0x48
 80033bc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033be:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80033c0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80033c2:	e841 2300 	strex	r3, r2, [r1]
 80033c6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80033c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d1e5      	bne.n	800339a <UART_Start_Receive_IT+0xb2>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	689b      	ldr	r3, [r3, #8]
 80033d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033d6:	d107      	bne.n	80033e8 <UART_Start_Receive_IT+0x100>
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	691b      	ldr	r3, [r3, #16]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d103      	bne.n	80033e8 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	4a24      	ldr	r2, [pc, #144]	; (8003474 <UART_Start_Receive_IT+0x18c>)
 80033e4:	665a      	str	r2, [r3, #100]	; 0x64
 80033e6:	e002      	b.n	80033ee <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	4a23      	ldr	r2, [pc, #140]	; (8003478 <UART_Start_Receive_IT+0x190>)
 80033ec:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	2200      	movs	r2, #0
 80033f2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	691b      	ldr	r3, [r3, #16]
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d019      	beq.n	8003432 <UART_Start_Receive_IT+0x14a>
  { 
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003404:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003406:	e853 3f00 	ldrex	r3, [r3]
 800340a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800340c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800340e:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8003412:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	461a      	mov	r2, r3
 800341a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800341c:	637b      	str	r3, [r7, #52]	; 0x34
 800341e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003420:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003422:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003424:	e841 2300 	strex	r3, r2, [r1]
 8003428:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800342a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800342c:	2b00      	cmp	r3, #0
 800342e:	d1e6      	bne.n	80033fe <UART_Start_Receive_IT+0x116>
 8003430:	e018      	b.n	8003464 <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003438:	697b      	ldr	r3, [r7, #20]
 800343a:	e853 3f00 	ldrex	r3, [r3]
 800343e:	613b      	str	r3, [r7, #16]
   return(result);
 8003440:	693b      	ldr	r3, [r7, #16]
 8003442:	f043 0320 	orr.w	r3, r3, #32
 8003446:	653b      	str	r3, [r7, #80]	; 0x50
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	461a      	mov	r2, r3
 800344e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003450:	623b      	str	r3, [r7, #32]
 8003452:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003454:	69f9      	ldr	r1, [r7, #28]
 8003456:	6a3a      	ldr	r2, [r7, #32]
 8003458:	e841 2300 	strex	r3, r2, [r1]
 800345c:	61bb      	str	r3, [r7, #24]
   return(result);
 800345e:	69bb      	ldr	r3, [r7, #24]
 8003460:	2b00      	cmp	r3, #0
 8003462:	d1e6      	bne.n	8003432 <UART_Start_Receive_IT+0x14a>
  }
  return HAL_OK;
 8003464:	2300      	movs	r3, #0
}
 8003466:	4618      	mov	r0, r3
 8003468:	375c      	adds	r7, #92	; 0x5c
 800346a:	46bd      	mov	sp, r7
 800346c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003470:	4770      	bx	lr
 8003472:	bf00      	nop
 8003474:	0800371f 	.word	0x0800371f
 8003478:	080035c3 	.word	0x080035c3

0800347c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800347c:	b480      	push	{r7}
 800347e:	b095      	sub	sp, #84	; 0x54
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800348a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800348c:	e853 3f00 	ldrex	r3, [r3]
 8003490:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003492:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003494:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003498:	64fb      	str	r3, [r7, #76]	; 0x4c
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	461a      	mov	r2, r3
 80034a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80034a2:	643b      	str	r3, [r7, #64]	; 0x40
 80034a4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034a6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80034a8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80034aa:	e841 2300 	strex	r3, r2, [r1]
 80034ae:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80034b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d1e6      	bne.n	8003484 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	3308      	adds	r3, #8
 80034bc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034be:	6a3b      	ldr	r3, [r7, #32]
 80034c0:	e853 3f00 	ldrex	r3, [r3]
 80034c4:	61fb      	str	r3, [r7, #28]
   return(result);
 80034c6:	69fb      	ldr	r3, [r7, #28]
 80034c8:	f023 0301 	bic.w	r3, r3, #1
 80034cc:	64bb      	str	r3, [r7, #72]	; 0x48
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	3308      	adds	r3, #8
 80034d4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80034d6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80034d8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034da:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80034dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80034de:	e841 2300 	strex	r3, r2, [r1]
 80034e2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80034e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d1e5      	bne.n	80034b6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034ee:	2b01      	cmp	r3, #1
 80034f0:	d118      	bne.n	8003524 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	e853 3f00 	ldrex	r3, [r3]
 80034fe:	60bb      	str	r3, [r7, #8]
   return(result);
 8003500:	68bb      	ldr	r3, [r7, #8]
 8003502:	f023 0310 	bic.w	r3, r3, #16
 8003506:	647b      	str	r3, [r7, #68]	; 0x44
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	461a      	mov	r2, r3
 800350e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003510:	61bb      	str	r3, [r7, #24]
 8003512:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003514:	6979      	ldr	r1, [r7, #20]
 8003516:	69ba      	ldr	r2, [r7, #24]
 8003518:	e841 2300 	strex	r3, r2, [r1]
 800351c:	613b      	str	r3, [r7, #16]
   return(result);
 800351e:	693b      	ldr	r3, [r7, #16]
 8003520:	2b00      	cmp	r3, #0
 8003522:	d1e6      	bne.n	80034f2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2220      	movs	r2, #32
 8003528:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	2200      	movs	r2, #0
 800352e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2200      	movs	r2, #0
 8003534:	665a      	str	r2, [r3, #100]	; 0x64
}
 8003536:	bf00      	nop
 8003538:	3754      	adds	r7, #84	; 0x54
 800353a:	46bd      	mov	sp, r7
 800353c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003540:	4770      	bx	lr

08003542 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003542:	b580      	push	{r7, lr}
 8003544:	b084      	sub	sp, #16
 8003546:	af00      	add	r7, sp, #0
 8003548:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800354e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	2200      	movs	r2, #0
 8003554:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	2200      	movs	r2, #0
 800355c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003560:	68f8      	ldr	r0, [r7, #12]
 8003562:	f7ff faad 	bl	8002ac0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003566:	bf00      	nop
 8003568:	3710      	adds	r7, #16
 800356a:	46bd      	mov	sp, r7
 800356c:	bd80      	pop	{r7, pc}

0800356e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800356e:	b580      	push	{r7, lr}
 8003570:	b088      	sub	sp, #32
 8003572:	af00      	add	r7, sp, #0
 8003574:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	e853 3f00 	ldrex	r3, [r3]
 8003582:	60bb      	str	r3, [r7, #8]
   return(result);
 8003584:	68bb      	ldr	r3, [r7, #8]
 8003586:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800358a:	61fb      	str	r3, [r7, #28]
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	461a      	mov	r2, r3
 8003592:	69fb      	ldr	r3, [r7, #28]
 8003594:	61bb      	str	r3, [r7, #24]
 8003596:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003598:	6979      	ldr	r1, [r7, #20]
 800359a:	69ba      	ldr	r2, [r7, #24]
 800359c:	e841 2300 	strex	r3, r2, [r1]
 80035a0:	613b      	str	r3, [r7, #16]
   return(result);
 80035a2:	693b      	ldr	r3, [r7, #16]
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d1e6      	bne.n	8003576 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2220      	movs	r2, #32
 80035ac:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	2200      	movs	r2, #0
 80035b2:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80035b4:	6878      	ldr	r0, [r7, #4]
 80035b6:	f7ff fa79 	bl	8002aac <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80035ba:	bf00      	nop
 80035bc:	3720      	adds	r7, #32
 80035be:	46bd      	mov	sp, r7
 80035c0:	bd80      	pop	{r7, pc}

080035c2 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80035c2:	b580      	push	{r7, lr}
 80035c4:	b096      	sub	sp, #88	; 0x58
 80035c6:	af00      	add	r7, sp, #0
 80035c8:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80035d0:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80035d8:	2b22      	cmp	r3, #34	; 0x22
 80035da:	f040 8094 	bne.w	8003706 <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035e4:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80035e8:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80035ec:	b2d9      	uxtb	r1, r3
 80035ee:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80035f2:	b2da      	uxtb	r2, r3
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035f8:	400a      	ands	r2, r1
 80035fa:	b2d2      	uxtb	r2, r2
 80035fc:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003602:	1c5a      	adds	r2, r3, #1
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800360e:	b29b      	uxth	r3, r3
 8003610:	3b01      	subs	r3, #1
 8003612:	b29a      	uxth	r2, r3
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003620:	b29b      	uxth	r3, r3
 8003622:	2b00      	cmp	r3, #0
 8003624:	d177      	bne.n	8003716 <UART_RxISR_8BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800362c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800362e:	e853 3f00 	ldrex	r3, [r3]
 8003632:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003634:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003636:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800363a:	653b      	str	r3, [r7, #80]	; 0x50
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	461a      	mov	r2, r3
 8003642:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003644:	647b      	str	r3, [r7, #68]	; 0x44
 8003646:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003648:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800364a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800364c:	e841 2300 	strex	r3, r2, [r1]
 8003650:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003652:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003654:	2b00      	cmp	r3, #0
 8003656:	d1e6      	bne.n	8003626 <UART_RxISR_8BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	3308      	adds	r3, #8
 800365e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003662:	e853 3f00 	ldrex	r3, [r3]
 8003666:	623b      	str	r3, [r7, #32]
   return(result);
 8003668:	6a3b      	ldr	r3, [r7, #32]
 800366a:	f023 0301 	bic.w	r3, r3, #1
 800366e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	3308      	adds	r3, #8
 8003676:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003678:	633a      	str	r2, [r7, #48]	; 0x30
 800367a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800367c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800367e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003680:	e841 2300 	strex	r3, r2, [r1]
 8003684:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003686:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003688:	2b00      	cmp	r3, #0
 800368a:	d1e5      	bne.n	8003658 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2220      	movs	r2, #32
 8003690:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	2200      	movs	r2, #0
 8003696:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800369c:	2b01      	cmp	r3, #1
 800369e:	d12e      	bne.n	80036fe <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2200      	movs	r2, #0
 80036a4:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036ac:	693b      	ldr	r3, [r7, #16]
 80036ae:	e853 3f00 	ldrex	r3, [r3]
 80036b2:	60fb      	str	r3, [r7, #12]
   return(result);
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	f023 0310 	bic.w	r3, r3, #16
 80036ba:	64bb      	str	r3, [r7, #72]	; 0x48
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	461a      	mov	r2, r3
 80036c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80036c4:	61fb      	str	r3, [r7, #28]
 80036c6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036c8:	69b9      	ldr	r1, [r7, #24]
 80036ca:	69fa      	ldr	r2, [r7, #28]
 80036cc:	e841 2300 	strex	r3, r2, [r1]
 80036d0:	617b      	str	r3, [r7, #20]
   return(result);
 80036d2:	697b      	ldr	r3, [r7, #20]
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d1e6      	bne.n	80036a6 <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	69db      	ldr	r3, [r3, #28]
 80036de:	f003 0310 	and.w	r3, r3, #16
 80036e2:	2b10      	cmp	r3, #16
 80036e4:	d103      	bne.n	80036ee <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	2210      	movs	r2, #16
 80036ec:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80036f4:	4619      	mov	r1, r3
 80036f6:	6878      	ldr	r0, [r7, #4]
 80036f8:	f7ff f9ec 	bl	8002ad4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80036fc:	e00b      	b.n	8003716 <UART_RxISR_8BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 80036fe:	6878      	ldr	r0, [r7, #4]
 8003700:	f000 f9e8 	bl	8003ad4 <HAL_UART_RxCpltCallback>
}
 8003704:	e007      	b.n	8003716 <UART_RxISR_8BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	699a      	ldr	r2, [r3, #24]
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f042 0208 	orr.w	r2, r2, #8
 8003714:	619a      	str	r2, [r3, #24]
}
 8003716:	bf00      	nop
 8003718:	3758      	adds	r7, #88	; 0x58
 800371a:	46bd      	mov	sp, r7
 800371c:	bd80      	pop	{r7, pc}

0800371e <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800371e:	b580      	push	{r7, lr}
 8003720:	b096      	sub	sp, #88	; 0x58
 8003722:	af00      	add	r7, sp, #0
 8003724:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800372c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003734:	2b22      	cmp	r3, #34	; 0x22
 8003736:	f040 8094 	bne.w	8003862 <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003740:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003748:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800374a:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800374e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8003752:	4013      	ands	r3, r2
 8003754:	b29a      	uxth	r2, r3
 8003756:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003758:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800375e:	1c9a      	adds	r2, r3, #2
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800376a:	b29b      	uxth	r3, r3
 800376c:	3b01      	subs	r3, #1
 800376e:	b29a      	uxth	r2, r3
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800377c:	b29b      	uxth	r3, r3
 800377e:	2b00      	cmp	r3, #0
 8003780:	d177      	bne.n	8003872 <UART_RxISR_16BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003788:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800378a:	e853 3f00 	ldrex	r3, [r3]
 800378e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003790:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003792:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003796:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	461a      	mov	r2, r3
 800379e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80037a0:	643b      	str	r3, [r7, #64]	; 0x40
 80037a2:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037a4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80037a6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80037a8:	e841 2300 	strex	r3, r2, [r1]
 80037ac:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80037ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d1e6      	bne.n	8003782 <UART_RxISR_16BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	3308      	adds	r3, #8
 80037ba:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037bc:	6a3b      	ldr	r3, [r7, #32]
 80037be:	e853 3f00 	ldrex	r3, [r3]
 80037c2:	61fb      	str	r3, [r7, #28]
   return(result);
 80037c4:	69fb      	ldr	r3, [r7, #28]
 80037c6:	f023 0301 	bic.w	r3, r3, #1
 80037ca:	64bb      	str	r3, [r7, #72]	; 0x48
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	3308      	adds	r3, #8
 80037d2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80037d4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80037d6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037d8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80037da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80037dc:	e841 2300 	strex	r3, r2, [r1]
 80037e0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80037e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d1e5      	bne.n	80037b4 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2220      	movs	r2, #32
 80037ec:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	2200      	movs	r2, #0
 80037f2:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037f8:	2b01      	cmp	r3, #1
 80037fa:	d12e      	bne.n	800385a <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2200      	movs	r2, #0
 8003800:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	e853 3f00 	ldrex	r3, [r3]
 800380e:	60bb      	str	r3, [r7, #8]
   return(result);
 8003810:	68bb      	ldr	r3, [r7, #8]
 8003812:	f023 0310 	bic.w	r3, r3, #16
 8003816:	647b      	str	r3, [r7, #68]	; 0x44
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	461a      	mov	r2, r3
 800381e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003820:	61bb      	str	r3, [r7, #24]
 8003822:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003824:	6979      	ldr	r1, [r7, #20]
 8003826:	69ba      	ldr	r2, [r7, #24]
 8003828:	e841 2300 	strex	r3, r2, [r1]
 800382c:	613b      	str	r3, [r7, #16]
   return(result);
 800382e:	693b      	ldr	r3, [r7, #16]
 8003830:	2b00      	cmp	r3, #0
 8003832:	d1e6      	bne.n	8003802 <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	69db      	ldr	r3, [r3, #28]
 800383a:	f003 0310 	and.w	r3, r3, #16
 800383e:	2b10      	cmp	r3, #16
 8003840:	d103      	bne.n	800384a <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	2210      	movs	r2, #16
 8003848:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003850:	4619      	mov	r1, r3
 8003852:	6878      	ldr	r0, [r7, #4]
 8003854:	f7ff f93e 	bl	8002ad4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003858:	e00b      	b.n	8003872 <UART_RxISR_16BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 800385a:	6878      	ldr	r0, [r7, #4]
 800385c:	f000 f93a 	bl	8003ad4 <HAL_UART_RxCpltCallback>
}
 8003860:	e007      	b.n	8003872 <UART_RxISR_16BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	699a      	ldr	r2, [r3, #24]
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f042 0208 	orr.w	r2, r2, #8
 8003870:	619a      	str	r2, [r3, #24]
}
 8003872:	bf00      	nop
 8003874:	3758      	adds	r7, #88	; 0x58
 8003876:	46bd      	mov	sp, r7
 8003878:	bd80      	pop	{r7, pc}
	...

0800387c <MX_UART2_Init>:
Wifi_Uart Wifi_Uart_t;
char rece;


void MX_UART2_Init(void)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_Init 2 */
  wifi_uart.Instance = USART2;
 8003880:	4b14      	ldr	r3, [pc, #80]	; (80038d4 <MX_UART2_Init+0x58>)
 8003882:	4a15      	ldr	r2, [pc, #84]	; (80038d8 <MX_UART2_Init+0x5c>)
 8003884:	601a      	str	r2, [r3, #0]
  wifi_uart.Init.BaudRate = 115200;
 8003886:	4b13      	ldr	r3, [pc, #76]	; (80038d4 <MX_UART2_Init+0x58>)
 8003888:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800388c:	605a      	str	r2, [r3, #4]
  wifi_uart.Init.WordLength = UART_WORDLENGTH_8B;
 800388e:	4b11      	ldr	r3, [pc, #68]	; (80038d4 <MX_UART2_Init+0x58>)
 8003890:	2200      	movs	r2, #0
 8003892:	609a      	str	r2, [r3, #8]
  wifi_uart.Init.StopBits = UART_STOPBITS_1;
 8003894:	4b0f      	ldr	r3, [pc, #60]	; (80038d4 <MX_UART2_Init+0x58>)
 8003896:	2200      	movs	r2, #0
 8003898:	60da      	str	r2, [r3, #12]
  wifi_uart.Init.Parity = UART_PARITY_NONE;
 800389a:	4b0e      	ldr	r3, [pc, #56]	; (80038d4 <MX_UART2_Init+0x58>)
 800389c:	2200      	movs	r2, #0
 800389e:	611a      	str	r2, [r3, #16]
  wifi_uart.Init.Mode = UART_MODE_TX_RX;
 80038a0:	4b0c      	ldr	r3, [pc, #48]	; (80038d4 <MX_UART2_Init+0x58>)
 80038a2:	220c      	movs	r2, #12
 80038a4:	615a      	str	r2, [r3, #20]
  wifi_uart.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80038a6:	4b0b      	ldr	r3, [pc, #44]	; (80038d4 <MX_UART2_Init+0x58>)
 80038a8:	2200      	movs	r2, #0
 80038aa:	619a      	str	r2, [r3, #24]
  wifi_uart.Init.OverSampling = UART_OVERSAMPLING_16;
 80038ac:	4b09      	ldr	r3, [pc, #36]	; (80038d4 <MX_UART2_Init+0x58>)
 80038ae:	2200      	movs	r2, #0
 80038b0:	61da      	str	r2, [r3, #28]
  wifi_uart.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80038b2:	4b08      	ldr	r3, [pc, #32]	; (80038d4 <MX_UART2_Init+0x58>)
 80038b4:	2200      	movs	r2, #0
 80038b6:	621a      	str	r2, [r3, #32]
  wifi_uart.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80038b8:	4b06      	ldr	r3, [pc, #24]	; (80038d4 <MX_UART2_Init+0x58>)
 80038ba:	2200      	movs	r2, #0
 80038bc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&wifi_uart) != HAL_OK)
 80038be:	4805      	ldr	r0, [pc, #20]	; (80038d4 <MX_UART2_Init+0x58>)
 80038c0:	f7fe fcfa 	bl	80022b8 <HAL_UART_Init>
 80038c4:	4603      	mov	r3, r0
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d001      	beq.n	80038ce <MX_UART2_Init+0x52>
  {
    Error_Handler();
 80038ca:	f7fc ffe1 	bl	8000890 <Error_Handler>
  }
  /* USER CODE END UART5_Init 2 */
}
 80038ce:	bf00      	nop
 80038d0:	bd80      	pop	{r7, pc}
 80038d2:	bf00      	nop
 80038d4:	200001dc 	.word	0x200001dc
 80038d8:	40004400 	.word	0x40004400

080038dc <_write>:

int _write(int file, char *ptr, int len)
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	b086      	sub	sp, #24
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	60f8      	str	r0, [r7, #12]
 80038e4:	60b9      	str	r1, [r7, #8]
 80038e6:	607a      	str	r2, [r7, #4]
	HAL_StatusTypeDef ret = HAL_UART_Transmit(&UART_CONSOLE , (uint8_t *)ptr, len , 100);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	b29a      	uxth	r2, r3
 80038ec:	2364      	movs	r3, #100	; 0x64
 80038ee:	68b9      	ldr	r1, [r7, #8]
 80038f0:	4804      	ldr	r0, [pc, #16]	; (8003904 <_write+0x28>)
 80038f2:	f7fe fd2f 	bl	8002354 <HAL_UART_Transmit>
 80038f6:	4603      	mov	r3, r0
 80038f8:	75fb      	strb	r3, [r7, #23]
	UNUSED(ret);
}
 80038fa:	bf00      	nop
 80038fc:	4618      	mov	r0, r3
 80038fe:	3718      	adds	r7, #24
 8003900:	46bd      	mov	sp, r7
 8003902:	bd80      	pop	{r7, pc}
 8003904:	20000154 	.word	0x20000154

08003908 <console_buf_wr>:
static void console_buf_wr(char *console_buf , size_t *console_buf_len)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	b084      	sub	sp, #16
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
 8003910:	6039      	str	r1, [r7, #0]
	size_t len = *console_buf_len;
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	60bb      	str	r3, [r7, #8]
	console_buf[len] ='\0';
 8003918:	687a      	ldr	r2, [r7, #4]
 800391a:	68bb      	ldr	r3, [r7, #8]
 800391c:	4413      	add	r3, r2
 800391e:	2200      	movs	r2, #0
 8003920:	701a      	strb	r2, [r3, #0]
	for(size_t i = 0; i < len; i++)
 8003922:	2300      	movs	r3, #0
 8003924:	60fb      	str	r3, [r7, #12]
 8003926:	e00d      	b.n	8003944 <console_buf_wr+0x3c>
	  {
		 _write(stdout, &console_buf[i], 1);
 8003928:	4b0b      	ldr	r3, [pc, #44]	; (8003958 <console_buf_wr+0x50>)
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	689b      	ldr	r3, [r3, #8]
 800392e:	4618      	mov	r0, r3
 8003930:	687a      	ldr	r2, [r7, #4]
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	4413      	add	r3, r2
 8003936:	2201      	movs	r2, #1
 8003938:	4619      	mov	r1, r3
 800393a:	f7ff ffcf 	bl	80038dc <_write>
	for(size_t i = 0; i < len; i++)
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	3301      	adds	r3, #1
 8003942:	60fb      	str	r3, [r7, #12]
 8003944:	68fa      	ldr	r2, [r7, #12]
 8003946:	68bb      	ldr	r3, [r7, #8]
 8003948:	429a      	cmp	r2, r3
 800394a:	d3ed      	bcc.n	8003928 <console_buf_wr+0x20>
	  }
}
 800394c:	bf00      	nop
 800394e:	bf00      	nop
 8003950:	3710      	adds	r7, #16
 8003952:	46bd      	mov	sp, r7
 8003954:	bd80      	pop	{r7, pc}
 8003956:	bf00      	nop
 8003958:	20000130 	.word	0x20000130

0800395c <console_buf_clr>:
static void console_buf_clr(char *console_buf , size_t *console_buf_len)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	b084      	sub	sp, #16
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
 8003964:	6039      	str	r1, [r7, #0]
	size_t len = *console_buf_len;
 8003966:	683b      	ldr	r3, [r7, #0]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	60fb      	str	r3, [r7, #12]
	memset(console_buf  , 0 , len);
 800396c:	68fa      	ldr	r2, [r7, #12]
 800396e:	2100      	movs	r1, #0
 8003970:	6878      	ldr	r0, [r7, #4]
 8003972:	f000 f8e3 	bl	8003b3c <memset>
	*console_buf_len = 0;
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	2200      	movs	r2, #0
 800397a:	601a      	str	r2, [r3, #0]

}
 800397c:	bf00      	nop
 800397e:	3710      	adds	r7, #16
 8003980:	46bd      	mov	sp, r7
 8003982:	bd80      	pop	{r7, pc}

08003984 <uart_write>:
static uint8_t uart_write(char *buffer)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	b082      	sub	sp, #8
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
	Wifi_Uart_t.WiFi_Tx_len = strlen(buffer);
 800398c:	6878      	ldr	r0, [r7, #4]
 800398e:	f7fc fc47 	bl	8000220 <strlen>
 8003992:	4603      	mov	r3, r0
 8003994:	b2da      	uxtb	r2, r3
 8003996:	4b0a      	ldr	r3, [pc, #40]	; (80039c0 <uart_write+0x3c>)
 8003998:	711a      	strb	r2, [r3, #4]
	if(HAL_UART_Transmit(&wifi_uart, (uint8_t *)buffer, Wifi_Uart_t.WiFi_Tx_len, 1000) == HAL_OK)
 800399a:	4b09      	ldr	r3, [pc, #36]	; (80039c0 <uart_write+0x3c>)
 800399c:	791b      	ldrb	r3, [r3, #4]
 800399e:	b29a      	uxth	r2, r3
 80039a0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80039a4:	6879      	ldr	r1, [r7, #4]
 80039a6:	4807      	ldr	r0, [pc, #28]	; (80039c4 <uart_write+0x40>)
 80039a8:	f7fe fcd4 	bl	8002354 <HAL_UART_Transmit>
 80039ac:	4603      	mov	r3, r0
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d101      	bne.n	80039b6 <uart_write+0x32>
		return true;
 80039b2:	2301      	movs	r3, #1
 80039b4:	e000      	b.n	80039b8 <uart_write+0x34>
	else
		return false;
 80039b6:	2300      	movs	r3, #0
}
 80039b8:	4618      	mov	r0, r3
 80039ba:	3708      	adds	r7, #8
 80039bc:	46bd      	mov	sp, r7
 80039be:	bd80      	pop	{r7, pc}
 80039c0:	20000260 	.word	0x20000260
 80039c4:	200001dc 	.word	0x200001dc

080039c8 <wifi_mode>:
uint8_t wifi_mode()
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	af00      	add	r7, sp, #0

	Wifi_Uart_t.WiFi_Tx = WIFI_MODE_CMD;
 80039cc:	4b05      	ldr	r3, [pc, #20]	; (80039e4 <wifi_mode+0x1c>)
 80039ce:	4a06      	ldr	r2, [pc, #24]	; (80039e8 <wifi_mode+0x20>)
 80039d0:	601a      	str	r2, [r3, #0]
	return uart_write(Wifi_Uart_t.WiFi_Tx);
 80039d2:	4b04      	ldr	r3, [pc, #16]	; (80039e4 <wifi_mode+0x1c>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	4618      	mov	r0, r3
 80039d8:	f7ff ffd4 	bl	8003984 <uart_write>
 80039dc:	4603      	mov	r3, r0
}
 80039de:	4618      	mov	r0, r3
 80039e0:	bd80      	pop	{r7, pc}
 80039e2:	bf00      	nop
 80039e4:	20000260 	.word	0x20000260
 80039e8:	08003c78 	.word	0x08003c78

080039ec <wifi_ap_connect>:
uint8_t wifi_ap_connect()
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	af00      	add	r7, sp, #0

	Wifi_Uart_t.WiFi_Tx = WIFI_CONNECT_AP_CMD;
 80039f0:	4b05      	ldr	r3, [pc, #20]	; (8003a08 <wifi_ap_connect+0x1c>)
 80039f2:	4a06      	ldr	r2, [pc, #24]	; (8003a0c <wifi_ap_connect+0x20>)
 80039f4:	601a      	str	r2, [r3, #0]
	return uart_write(Wifi_Uart_t.WiFi_Tx);
 80039f6:	4b04      	ldr	r3, [pc, #16]	; (8003a08 <wifi_ap_connect+0x1c>)
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	4618      	mov	r0, r3
 80039fc:	f7ff ffc2 	bl	8003984 <uart_write>
 8003a00:	4603      	mov	r3, r0
}
 8003a02:	4618      	mov	r0, r3
 8003a04:	bd80      	pop	{r7, pc}
 8003a06:	bf00      	nop
 8003a08:	20000260 	.word	0x20000260
 8003a0c:	08003c88 	.word	0x08003c88

08003a10 <wifi_rst>:
uint8_t wifi_rst()
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	af00      	add	r7, sp, #0

	Wifi_Uart_t.WiFi_Tx = WIFI_RST_CMD;
 8003a14:	4b05      	ldr	r3, [pc, #20]	; (8003a2c <wifi_rst+0x1c>)
 8003a16:	4a06      	ldr	r2, [pc, #24]	; (8003a30 <wifi_rst+0x20>)
 8003a18:	601a      	str	r2, [r3, #0]
	return uart_write(Wifi_Uart_t.WiFi_Tx);
 8003a1a:	4b04      	ldr	r3, [pc, #16]	; (8003a2c <wifi_rst+0x1c>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	4618      	mov	r0, r3
 8003a20:	f7ff ffb0 	bl	8003984 <uart_write>
 8003a24:	4603      	mov	r3, r0
}
 8003a26:	4618      	mov	r0, r3
 8003a28:	bd80      	pop	{r7, pc}
 8003a2a:	bf00      	nop
 8003a2c:	20000260 	.word	0x20000260
 8003a30:	08003cac 	.word	0x08003cac

08003a34 <wifi_mac_add>:
{
	Wifi_Uart_t.WiFi_Tx = WIFI_START_CMD;
	return uart_write(Wifi_Uart_t.WiFi_Tx);
}
uint8_t wifi_mac_add()
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	af00      	add	r7, sp, #0
	Wifi_Uart_t.WiFi_Tx = WIFI_MAC_CMD;
 8003a38:	4b05      	ldr	r3, [pc, #20]	; (8003a50 <wifi_mac_add+0x1c>)
 8003a3a:	4a06      	ldr	r2, [pc, #24]	; (8003a54 <wifi_mac_add+0x20>)
 8003a3c:	601a      	str	r2, [r3, #0]
	return uart_write(Wifi_Uart_t.WiFi_Tx);
 8003a3e:	4b04      	ldr	r3, [pc, #16]	; (8003a50 <wifi_mac_add+0x1c>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	4618      	mov	r0, r3
 8003a44:	f7ff ff9e 	bl	8003984 <uart_write>
 8003a48:	4603      	mov	r3, r0
}
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	bd80      	pop	{r7, pc}
 8003a4e:	bf00      	nop
 8003a50:	20000260 	.word	0x20000260
 8003a54:	08003ccc 	.word	0x08003ccc

08003a58 <tcp_server_conn>:
uint8_t tcp_server_conn()
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	af00      	add	r7, sp, #0
	Wifi_Uart_t.WiFi_Tx = TCP_LOCAL_HOTSPOT;
 8003a5c:	4b05      	ldr	r3, [pc, #20]	; (8003a74 <tcp_server_conn+0x1c>)
 8003a5e:	4a06      	ldr	r2, [pc, #24]	; (8003a78 <tcp_server_conn+0x20>)
 8003a60:	601a      	str	r2, [r3, #0]
	return uart_write(Wifi_Uart_t.WiFi_Tx);
 8003a62:	4b04      	ldr	r3, [pc, #16]	; (8003a74 <tcp_server_conn+0x1c>)
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	4618      	mov	r0, r3
 8003a68:	f7ff ff8c 	bl	8003984 <uart_write>
 8003a6c:	4603      	mov	r3, r0
}
 8003a6e:	4618      	mov	r0, r3
 8003a70:	bd80      	pop	{r7, pc}
 8003a72:	bf00      	nop
 8003a74:	20000260 	.word	0x20000260
 8003a78:	08003cd8 	.word	0x08003cd8

08003a7c <wifi_init>:
/*
 * initialise the wifi - esp8266 via AT commands initialise the UART
 * initialise the command response handler
 */
void wifi_init()
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	af00      	add	r7, sp, #0
	MX_UART2_Init();
 8003a80:	f7ff fefc 	bl	800387c <MX_UART2_Init>

	Wifi_Uart_t.WiFi_Rx_len = 0;
 8003a84:	4b0d      	ldr	r3, [pc, #52]	; (8003abc <wifi_init+0x40>)
 8003a86:	2200      	movs	r2, #0
 8003a88:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
	Wifi_Uart_t.WiFi_Tx_len = 0;
 8003a8c:	4b0b      	ldr	r3, [pc, #44]	; (8003abc <wifi_init+0x40>)
 8003a8e:	2200      	movs	r2, #0
 8003a90:	711a      	strb	r2, [r3, #4]
	memset(Wifi_Uart_t.WiFi_Rx , 0 , WIFI_RX_LEN);
 8003a92:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003a96:	2100      	movs	r1, #0
 8003a98:	4809      	ldr	r0, [pc, #36]	; (8003ac0 <wifi_init+0x44>)
 8003a9a:	f000 f84f 	bl	8003b3c <memset>
	Wifi_Uart_t.log_buf = &console_buf_wr;
 8003a9e:	4b07      	ldr	r3, [pc, #28]	; (8003abc <wifi_init+0x40>)
 8003aa0:	4a08      	ldr	r2, [pc, #32]	; (8003ac4 <wifi_init+0x48>)
 8003aa2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
	Wifi_Uart_t.log_clr = &console_buf_clr;
 8003aa6:	4b05      	ldr	r3, [pc, #20]	; (8003abc <wifi_init+0x40>)
 8003aa8:	4a07      	ldr	r2, [pc, #28]	; (8003ac8 <wifi_init+0x4c>)
 8003aaa:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

	HAL_UART_Receive_IT(&wifi_uart, (uint8_t *)&rece ,1);
 8003aae:	2201      	movs	r2, #1
 8003ab0:	4906      	ldr	r1, [pc, #24]	; (8003acc <wifi_init+0x50>)
 8003ab2:	4807      	ldr	r0, [pc, #28]	; (8003ad0 <wifi_init+0x54>)
 8003ab4:	f7fe fce1 	bl	800247a <HAL_UART_Receive_IT>
}
 8003ab8:	bf00      	nop
 8003aba:	bd80      	pop	{r7, pc}
 8003abc:	20000260 	.word	0x20000260
 8003ac0:	20000265 	.word	0x20000265
 8003ac4:	08003909 	.word	0x08003909
 8003ac8:	0800395d 	.word	0x0800395d
 8003acc:	20000474 	.word	0x20000474
 8003ad0:	200001dc 	.word	0x200001dc

08003ad4 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b082      	sub	sp, #8
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART2)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	4a12      	ldr	r2, [pc, #72]	; (8003b2c <HAL_UART_RxCpltCallback+0x58>)
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d11e      	bne.n	8003b24 <HAL_UART_RxCpltCallback+0x50>
	{
		if(Wifi_Uart_t.WiFi_Rx_len < WIFI_RX_LEN && rece != '\0')
 8003ae6:	4b12      	ldr	r3, [pc, #72]	; (8003b30 <HAL_UART_RxCpltCallback+0x5c>)
 8003ae8:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8003aec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003af0:	d213      	bcs.n	8003b1a <HAL_UART_RxCpltCallback+0x46>
 8003af2:	4b10      	ldr	r3, [pc, #64]	; (8003b34 <HAL_UART_RxCpltCallback+0x60>)
 8003af4:	781b      	ldrb	r3, [r3, #0]
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d00f      	beq.n	8003b1a <HAL_UART_RxCpltCallback+0x46>
		{
			Wifi_Uart_t.WiFi_Rx[Wifi_Uart_t.WiFi_Rx_len] = rece;
 8003afa:	4b0d      	ldr	r3, [pc, #52]	; (8003b30 <HAL_UART_RxCpltCallback+0x5c>)
 8003afc:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8003b00:	4a0c      	ldr	r2, [pc, #48]	; (8003b34 <HAL_UART_RxCpltCallback+0x60>)
 8003b02:	7811      	ldrb	r1, [r2, #0]
 8003b04:	4a0a      	ldr	r2, [pc, #40]	; (8003b30 <HAL_UART_RxCpltCallback+0x5c>)
 8003b06:	4413      	add	r3, r2
 8003b08:	460a      	mov	r2, r1
 8003b0a:	715a      	strb	r2, [r3, #5]
			Wifi_Uart_t.WiFi_Rx_len++;
 8003b0c:	4b08      	ldr	r3, [pc, #32]	; (8003b30 <HAL_UART_RxCpltCallback+0x5c>)
 8003b0e:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8003b12:	3301      	adds	r3, #1
 8003b14:	4a06      	ldr	r2, [pc, #24]	; (8003b30 <HAL_UART_RxCpltCallback+0x5c>)
 8003b16:	f8c2 3208 	str.w	r3, [r2, #520]	; 0x208
		}
		HAL_UART_Receive_IT(&wifi_uart, (uint8_t *)&rece ,1);
 8003b1a:	2201      	movs	r2, #1
 8003b1c:	4905      	ldr	r1, [pc, #20]	; (8003b34 <HAL_UART_RxCpltCallback+0x60>)
 8003b1e:	4806      	ldr	r0, [pc, #24]	; (8003b38 <HAL_UART_RxCpltCallback+0x64>)
 8003b20:	f7fe fcab 	bl	800247a <HAL_UART_Receive_IT>
	}
}
 8003b24:	bf00      	nop
 8003b26:	3708      	adds	r7, #8
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	bd80      	pop	{r7, pc}
 8003b2c:	40004400 	.word	0x40004400
 8003b30:	20000260 	.word	0x20000260
 8003b34:	20000474 	.word	0x20000474
 8003b38:	200001dc 	.word	0x200001dc

08003b3c <memset>:
 8003b3c:	4402      	add	r2, r0
 8003b3e:	4603      	mov	r3, r0
 8003b40:	4293      	cmp	r3, r2
 8003b42:	d100      	bne.n	8003b46 <memset+0xa>
 8003b44:	4770      	bx	lr
 8003b46:	f803 1b01 	strb.w	r1, [r3], #1
 8003b4a:	e7f9      	b.n	8003b40 <memset+0x4>

08003b4c <__libc_init_array>:
 8003b4c:	b570      	push	{r4, r5, r6, lr}
 8003b4e:	4d0d      	ldr	r5, [pc, #52]	; (8003b84 <__libc_init_array+0x38>)
 8003b50:	4c0d      	ldr	r4, [pc, #52]	; (8003b88 <__libc_init_array+0x3c>)
 8003b52:	1b64      	subs	r4, r4, r5
 8003b54:	10a4      	asrs	r4, r4, #2
 8003b56:	2600      	movs	r6, #0
 8003b58:	42a6      	cmp	r6, r4
 8003b5a:	d109      	bne.n	8003b70 <__libc_init_array+0x24>
 8003b5c:	4d0b      	ldr	r5, [pc, #44]	; (8003b8c <__libc_init_array+0x40>)
 8003b5e:	4c0c      	ldr	r4, [pc, #48]	; (8003b90 <__libc_init_array+0x44>)
 8003b60:	f000 f87e 	bl	8003c60 <_init>
 8003b64:	1b64      	subs	r4, r4, r5
 8003b66:	10a4      	asrs	r4, r4, #2
 8003b68:	2600      	movs	r6, #0
 8003b6a:	42a6      	cmp	r6, r4
 8003b6c:	d105      	bne.n	8003b7a <__libc_init_array+0x2e>
 8003b6e:	bd70      	pop	{r4, r5, r6, pc}
 8003b70:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b74:	4798      	blx	r3
 8003b76:	3601      	adds	r6, #1
 8003b78:	e7ee      	b.n	8003b58 <__libc_init_array+0xc>
 8003b7a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b7e:	4798      	blx	r3
 8003b80:	3601      	adds	r6, #1
 8003b82:	e7f2      	b.n	8003b6a <__libc_init_array+0x1e>
 8003b84:	08003d24 	.word	0x08003d24
 8003b88:	08003d24 	.word	0x08003d24
 8003b8c:	08003d24 	.word	0x08003d24
 8003b90:	08003d2c 	.word	0x08003d2c

08003b94 <__retarget_lock_acquire_recursive>:
 8003b94:	4770      	bx	lr

08003b96 <__retarget_lock_release_recursive>:
 8003b96:	4770      	bx	lr

08003b98 <register_fini>:
 8003b98:	4b02      	ldr	r3, [pc, #8]	; (8003ba4 <register_fini+0xc>)
 8003b9a:	b113      	cbz	r3, 8003ba2 <register_fini+0xa>
 8003b9c:	4802      	ldr	r0, [pc, #8]	; (8003ba8 <register_fini+0x10>)
 8003b9e:	f000 b805 	b.w	8003bac <atexit>
 8003ba2:	4770      	bx	lr
 8003ba4:	00000000 	.word	0x00000000
 8003ba8:	08003bb9 	.word	0x08003bb9

08003bac <atexit>:
 8003bac:	2300      	movs	r3, #0
 8003bae:	4601      	mov	r1, r0
 8003bb0:	461a      	mov	r2, r3
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	f000 b814 	b.w	8003be0 <__register_exitproc>

08003bb8 <__libc_fini_array>:
 8003bb8:	b538      	push	{r3, r4, r5, lr}
 8003bba:	4d07      	ldr	r5, [pc, #28]	; (8003bd8 <__libc_fini_array+0x20>)
 8003bbc:	4c07      	ldr	r4, [pc, #28]	; (8003bdc <__libc_fini_array+0x24>)
 8003bbe:	1b64      	subs	r4, r4, r5
 8003bc0:	10a4      	asrs	r4, r4, #2
 8003bc2:	b91c      	cbnz	r4, 8003bcc <__libc_fini_array+0x14>
 8003bc4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003bc8:	f000 b850 	b.w	8003c6c <_fini>
 8003bcc:	3c01      	subs	r4, #1
 8003bce:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 8003bd2:	4798      	blx	r3
 8003bd4:	e7f5      	b.n	8003bc2 <__libc_fini_array+0xa>
 8003bd6:	bf00      	nop
 8003bd8:	08003d2c 	.word	0x08003d2c
 8003bdc:	08003d30 	.word	0x08003d30

08003be0 <__register_exitproc>:
 8003be0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003be4:	f8df a074 	ldr.w	sl, [pc, #116]	; 8003c5c <__register_exitproc+0x7c>
 8003be8:	4606      	mov	r6, r0
 8003bea:	f8da 0000 	ldr.w	r0, [sl]
 8003bee:	4698      	mov	r8, r3
 8003bf0:	460f      	mov	r7, r1
 8003bf2:	4691      	mov	r9, r2
 8003bf4:	f7ff ffce 	bl	8003b94 <__retarget_lock_acquire_recursive>
 8003bf8:	4b16      	ldr	r3, [pc, #88]	; (8003c54 <__register_exitproc+0x74>)
 8003bfa:	681c      	ldr	r4, [r3, #0]
 8003bfc:	b90c      	cbnz	r4, 8003c02 <__register_exitproc+0x22>
 8003bfe:	4c16      	ldr	r4, [pc, #88]	; (8003c58 <__register_exitproc+0x78>)
 8003c00:	601c      	str	r4, [r3, #0]
 8003c02:	6865      	ldr	r5, [r4, #4]
 8003c04:	f8da 0000 	ldr.w	r0, [sl]
 8003c08:	2d1f      	cmp	r5, #31
 8003c0a:	dd05      	ble.n	8003c18 <__register_exitproc+0x38>
 8003c0c:	f7ff ffc3 	bl	8003b96 <__retarget_lock_release_recursive>
 8003c10:	f04f 30ff 	mov.w	r0, #4294967295
 8003c14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003c18:	b19e      	cbz	r6, 8003c42 <__register_exitproc+0x62>
 8003c1a:	eb04 0185 	add.w	r1, r4, r5, lsl #2
 8003c1e:	2201      	movs	r2, #1
 8003c20:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
 8003c24:	f8d4 3188 	ldr.w	r3, [r4, #392]	; 0x188
 8003c28:	40aa      	lsls	r2, r5
 8003c2a:	4313      	orrs	r3, r2
 8003c2c:	f8c4 3188 	str.w	r3, [r4, #392]	; 0x188
 8003c30:	2e02      	cmp	r6, #2
 8003c32:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
 8003c36:	bf02      	ittt	eq
 8003c38:	f8d4 318c 	ldreq.w	r3, [r4, #396]	; 0x18c
 8003c3c:	4313      	orreq	r3, r2
 8003c3e:	f8c4 318c 	streq.w	r3, [r4, #396]	; 0x18c
 8003c42:	1c6b      	adds	r3, r5, #1
 8003c44:	3502      	adds	r5, #2
 8003c46:	6063      	str	r3, [r4, #4]
 8003c48:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
 8003c4c:	f7ff ffa3 	bl	8003b96 <__retarget_lock_release_recursive>
 8003c50:	2000      	movs	r0, #0
 8003c52:	e7df      	b.n	8003c14 <__register_exitproc+0x34>
 8003c54:	200005b4 	.word	0x200005b4
 8003c58:	200005b8 	.word	0x200005b8
 8003c5c:	20000134 	.word	0x20000134

08003c60 <_init>:
 8003c60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c62:	bf00      	nop
 8003c64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c66:	bc08      	pop	{r3}
 8003c68:	469e      	mov	lr, r3
 8003c6a:	4770      	bx	lr

08003c6c <_fini>:
 8003c6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c6e:	bf00      	nop
 8003c70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c72:	bc08      	pop	{r3}
 8003c74:	469e      	mov	lr, r3
 8003c76:	4770      	bx	lr
