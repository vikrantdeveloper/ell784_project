
ell787_ee.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000097c8  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000434  080099a8  080099a8  000199a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009ddc  08009ddc  000206bc  2**0
                  CONTENTS
  4 .ARM          00000008  08009ddc  08009ddc  00019ddc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009de4  08009de4  000206bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08009de4  08009de4  00019de4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009dec  08009dec  00019dec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000006bc  20000000  08009df0  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000738  200006bc  0800a4ac  000206bc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000df4  0800a4ac  00020df4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000206bc  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000206ec  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012802  00000000  00000000  0002072f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002a98  00000000  00000000  00032f31  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f20  00000000  00000000  000359d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000bb5  00000000  00000000  000368f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002451b  00000000  00000000  000374a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012898  00000000  00000000  0005b9c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000defbb  00000000  00000000  0006e258  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000051c0  00000000  00000000  0014d214  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  001523d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200006bc 	.word	0x200006bc
 80001fc:	00000000 	.word	0x00000000
 8000200:	08009990 	.word	0x08009990

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200006c0 	.word	0x200006c0
 800021c:	08009990 	.word	0x08009990

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_uldivmod>:
 8000bf8:	b953      	cbnz	r3, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfa:	b94a      	cbnz	r2, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfc:	2900      	cmp	r1, #0
 8000bfe:	bf08      	it	eq
 8000c00:	2800      	cmpeq	r0, #0
 8000c02:	bf1c      	itt	ne
 8000c04:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c08:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c0c:	f000 b970 	b.w	8000ef0 <__aeabi_idiv0>
 8000c10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c18:	f000 f806 	bl	8000c28 <__udivmoddi4>
 8000c1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c24:	b004      	add	sp, #16
 8000c26:	4770      	bx	lr

08000c28 <__udivmoddi4>:
 8000c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c2c:	9e08      	ldr	r6, [sp, #32]
 8000c2e:	460d      	mov	r5, r1
 8000c30:	4604      	mov	r4, r0
 8000c32:	460f      	mov	r7, r1
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d14a      	bne.n	8000cce <__udivmoddi4+0xa6>
 8000c38:	428a      	cmp	r2, r1
 8000c3a:	4694      	mov	ip, r2
 8000c3c:	d965      	bls.n	8000d0a <__udivmoddi4+0xe2>
 8000c3e:	fab2 f382 	clz	r3, r2
 8000c42:	b143      	cbz	r3, 8000c56 <__udivmoddi4+0x2e>
 8000c44:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c48:	f1c3 0220 	rsb	r2, r3, #32
 8000c4c:	409f      	lsls	r7, r3
 8000c4e:	fa20 f202 	lsr.w	r2, r0, r2
 8000c52:	4317      	orrs	r7, r2
 8000c54:	409c      	lsls	r4, r3
 8000c56:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c5a:	fa1f f58c 	uxth.w	r5, ip
 8000c5e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c62:	0c22      	lsrs	r2, r4, #16
 8000c64:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c68:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c6c:	fb01 f005 	mul.w	r0, r1, r5
 8000c70:	4290      	cmp	r0, r2
 8000c72:	d90a      	bls.n	8000c8a <__udivmoddi4+0x62>
 8000c74:	eb1c 0202 	adds.w	r2, ip, r2
 8000c78:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000c7c:	f080 811c 	bcs.w	8000eb8 <__udivmoddi4+0x290>
 8000c80:	4290      	cmp	r0, r2
 8000c82:	f240 8119 	bls.w	8000eb8 <__udivmoddi4+0x290>
 8000c86:	3902      	subs	r1, #2
 8000c88:	4462      	add	r2, ip
 8000c8a:	1a12      	subs	r2, r2, r0
 8000c8c:	b2a4      	uxth	r4, r4
 8000c8e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c92:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c96:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c9a:	fb00 f505 	mul.w	r5, r0, r5
 8000c9e:	42a5      	cmp	r5, r4
 8000ca0:	d90a      	bls.n	8000cb8 <__udivmoddi4+0x90>
 8000ca2:	eb1c 0404 	adds.w	r4, ip, r4
 8000ca6:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000caa:	f080 8107 	bcs.w	8000ebc <__udivmoddi4+0x294>
 8000cae:	42a5      	cmp	r5, r4
 8000cb0:	f240 8104 	bls.w	8000ebc <__udivmoddi4+0x294>
 8000cb4:	4464      	add	r4, ip
 8000cb6:	3802      	subs	r0, #2
 8000cb8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000cbc:	1b64      	subs	r4, r4, r5
 8000cbe:	2100      	movs	r1, #0
 8000cc0:	b11e      	cbz	r6, 8000cca <__udivmoddi4+0xa2>
 8000cc2:	40dc      	lsrs	r4, r3
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	e9c6 4300 	strd	r4, r3, [r6]
 8000cca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cce:	428b      	cmp	r3, r1
 8000cd0:	d908      	bls.n	8000ce4 <__udivmoddi4+0xbc>
 8000cd2:	2e00      	cmp	r6, #0
 8000cd4:	f000 80ed 	beq.w	8000eb2 <__udivmoddi4+0x28a>
 8000cd8:	2100      	movs	r1, #0
 8000cda:	e9c6 0500 	strd	r0, r5, [r6]
 8000cde:	4608      	mov	r0, r1
 8000ce0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ce4:	fab3 f183 	clz	r1, r3
 8000ce8:	2900      	cmp	r1, #0
 8000cea:	d149      	bne.n	8000d80 <__udivmoddi4+0x158>
 8000cec:	42ab      	cmp	r3, r5
 8000cee:	d302      	bcc.n	8000cf6 <__udivmoddi4+0xce>
 8000cf0:	4282      	cmp	r2, r0
 8000cf2:	f200 80f8 	bhi.w	8000ee6 <__udivmoddi4+0x2be>
 8000cf6:	1a84      	subs	r4, r0, r2
 8000cf8:	eb65 0203 	sbc.w	r2, r5, r3
 8000cfc:	2001      	movs	r0, #1
 8000cfe:	4617      	mov	r7, r2
 8000d00:	2e00      	cmp	r6, #0
 8000d02:	d0e2      	beq.n	8000cca <__udivmoddi4+0xa2>
 8000d04:	e9c6 4700 	strd	r4, r7, [r6]
 8000d08:	e7df      	b.n	8000cca <__udivmoddi4+0xa2>
 8000d0a:	b902      	cbnz	r2, 8000d0e <__udivmoddi4+0xe6>
 8000d0c:	deff      	udf	#255	; 0xff
 8000d0e:	fab2 f382 	clz	r3, r2
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	f040 8090 	bne.w	8000e38 <__udivmoddi4+0x210>
 8000d18:	1a8a      	subs	r2, r1, r2
 8000d1a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d1e:	fa1f fe8c 	uxth.w	lr, ip
 8000d22:	2101      	movs	r1, #1
 8000d24:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d28:	fb07 2015 	mls	r0, r7, r5, r2
 8000d2c:	0c22      	lsrs	r2, r4, #16
 8000d2e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d32:	fb0e f005 	mul.w	r0, lr, r5
 8000d36:	4290      	cmp	r0, r2
 8000d38:	d908      	bls.n	8000d4c <__udivmoddi4+0x124>
 8000d3a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d3e:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000d42:	d202      	bcs.n	8000d4a <__udivmoddi4+0x122>
 8000d44:	4290      	cmp	r0, r2
 8000d46:	f200 80cb 	bhi.w	8000ee0 <__udivmoddi4+0x2b8>
 8000d4a:	4645      	mov	r5, r8
 8000d4c:	1a12      	subs	r2, r2, r0
 8000d4e:	b2a4      	uxth	r4, r4
 8000d50:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d54:	fb07 2210 	mls	r2, r7, r0, r2
 8000d58:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d5c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d60:	45a6      	cmp	lr, r4
 8000d62:	d908      	bls.n	8000d76 <__udivmoddi4+0x14e>
 8000d64:	eb1c 0404 	adds.w	r4, ip, r4
 8000d68:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000d6c:	d202      	bcs.n	8000d74 <__udivmoddi4+0x14c>
 8000d6e:	45a6      	cmp	lr, r4
 8000d70:	f200 80bb 	bhi.w	8000eea <__udivmoddi4+0x2c2>
 8000d74:	4610      	mov	r0, r2
 8000d76:	eba4 040e 	sub.w	r4, r4, lr
 8000d7a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d7e:	e79f      	b.n	8000cc0 <__udivmoddi4+0x98>
 8000d80:	f1c1 0720 	rsb	r7, r1, #32
 8000d84:	408b      	lsls	r3, r1
 8000d86:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d8a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d8e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d92:	fa20 f307 	lsr.w	r3, r0, r7
 8000d96:	40fd      	lsrs	r5, r7
 8000d98:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d9c:	4323      	orrs	r3, r4
 8000d9e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000da2:	fa1f fe8c 	uxth.w	lr, ip
 8000da6:	fb09 5518 	mls	r5, r9, r8, r5
 8000daa:	0c1c      	lsrs	r4, r3, #16
 8000dac:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000db0:	fb08 f50e 	mul.w	r5, r8, lr
 8000db4:	42a5      	cmp	r5, r4
 8000db6:	fa02 f201 	lsl.w	r2, r2, r1
 8000dba:	fa00 f001 	lsl.w	r0, r0, r1
 8000dbe:	d90b      	bls.n	8000dd8 <__udivmoddi4+0x1b0>
 8000dc0:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000dc8:	f080 8088 	bcs.w	8000edc <__udivmoddi4+0x2b4>
 8000dcc:	42a5      	cmp	r5, r4
 8000dce:	f240 8085 	bls.w	8000edc <__udivmoddi4+0x2b4>
 8000dd2:	f1a8 0802 	sub.w	r8, r8, #2
 8000dd6:	4464      	add	r4, ip
 8000dd8:	1b64      	subs	r4, r4, r5
 8000dda:	b29d      	uxth	r5, r3
 8000ddc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000de0:	fb09 4413 	mls	r4, r9, r3, r4
 8000de4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000de8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000dec:	45a6      	cmp	lr, r4
 8000dee:	d908      	bls.n	8000e02 <__udivmoddi4+0x1da>
 8000df0:	eb1c 0404 	adds.w	r4, ip, r4
 8000df4:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000df8:	d26c      	bcs.n	8000ed4 <__udivmoddi4+0x2ac>
 8000dfa:	45a6      	cmp	lr, r4
 8000dfc:	d96a      	bls.n	8000ed4 <__udivmoddi4+0x2ac>
 8000dfe:	3b02      	subs	r3, #2
 8000e00:	4464      	add	r4, ip
 8000e02:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e06:	fba3 9502 	umull	r9, r5, r3, r2
 8000e0a:	eba4 040e 	sub.w	r4, r4, lr
 8000e0e:	42ac      	cmp	r4, r5
 8000e10:	46c8      	mov	r8, r9
 8000e12:	46ae      	mov	lr, r5
 8000e14:	d356      	bcc.n	8000ec4 <__udivmoddi4+0x29c>
 8000e16:	d053      	beq.n	8000ec0 <__udivmoddi4+0x298>
 8000e18:	b156      	cbz	r6, 8000e30 <__udivmoddi4+0x208>
 8000e1a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e1e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e22:	fa04 f707 	lsl.w	r7, r4, r7
 8000e26:	40ca      	lsrs	r2, r1
 8000e28:	40cc      	lsrs	r4, r1
 8000e2a:	4317      	orrs	r7, r2
 8000e2c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e30:	4618      	mov	r0, r3
 8000e32:	2100      	movs	r1, #0
 8000e34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e38:	f1c3 0120 	rsb	r1, r3, #32
 8000e3c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e40:	fa20 f201 	lsr.w	r2, r0, r1
 8000e44:	fa25 f101 	lsr.w	r1, r5, r1
 8000e48:	409d      	lsls	r5, r3
 8000e4a:	432a      	orrs	r2, r5
 8000e4c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e50:	fa1f fe8c 	uxth.w	lr, ip
 8000e54:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e58:	fb07 1510 	mls	r5, r7, r0, r1
 8000e5c:	0c11      	lsrs	r1, r2, #16
 8000e5e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e62:	fb00 f50e 	mul.w	r5, r0, lr
 8000e66:	428d      	cmp	r5, r1
 8000e68:	fa04 f403 	lsl.w	r4, r4, r3
 8000e6c:	d908      	bls.n	8000e80 <__udivmoddi4+0x258>
 8000e6e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e72:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000e76:	d22f      	bcs.n	8000ed8 <__udivmoddi4+0x2b0>
 8000e78:	428d      	cmp	r5, r1
 8000e7a:	d92d      	bls.n	8000ed8 <__udivmoddi4+0x2b0>
 8000e7c:	3802      	subs	r0, #2
 8000e7e:	4461      	add	r1, ip
 8000e80:	1b49      	subs	r1, r1, r5
 8000e82:	b292      	uxth	r2, r2
 8000e84:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e88:	fb07 1115 	mls	r1, r7, r5, r1
 8000e8c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e90:	fb05 f10e 	mul.w	r1, r5, lr
 8000e94:	4291      	cmp	r1, r2
 8000e96:	d908      	bls.n	8000eaa <__udivmoddi4+0x282>
 8000e98:	eb1c 0202 	adds.w	r2, ip, r2
 8000e9c:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000ea0:	d216      	bcs.n	8000ed0 <__udivmoddi4+0x2a8>
 8000ea2:	4291      	cmp	r1, r2
 8000ea4:	d914      	bls.n	8000ed0 <__udivmoddi4+0x2a8>
 8000ea6:	3d02      	subs	r5, #2
 8000ea8:	4462      	add	r2, ip
 8000eaa:	1a52      	subs	r2, r2, r1
 8000eac:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000eb0:	e738      	b.n	8000d24 <__udivmoddi4+0xfc>
 8000eb2:	4631      	mov	r1, r6
 8000eb4:	4630      	mov	r0, r6
 8000eb6:	e708      	b.n	8000cca <__udivmoddi4+0xa2>
 8000eb8:	4639      	mov	r1, r7
 8000eba:	e6e6      	b.n	8000c8a <__udivmoddi4+0x62>
 8000ebc:	4610      	mov	r0, r2
 8000ebe:	e6fb      	b.n	8000cb8 <__udivmoddi4+0x90>
 8000ec0:	4548      	cmp	r0, r9
 8000ec2:	d2a9      	bcs.n	8000e18 <__udivmoddi4+0x1f0>
 8000ec4:	ebb9 0802 	subs.w	r8, r9, r2
 8000ec8:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000ecc:	3b01      	subs	r3, #1
 8000ece:	e7a3      	b.n	8000e18 <__udivmoddi4+0x1f0>
 8000ed0:	4645      	mov	r5, r8
 8000ed2:	e7ea      	b.n	8000eaa <__udivmoddi4+0x282>
 8000ed4:	462b      	mov	r3, r5
 8000ed6:	e794      	b.n	8000e02 <__udivmoddi4+0x1da>
 8000ed8:	4640      	mov	r0, r8
 8000eda:	e7d1      	b.n	8000e80 <__udivmoddi4+0x258>
 8000edc:	46d0      	mov	r8, sl
 8000ede:	e77b      	b.n	8000dd8 <__udivmoddi4+0x1b0>
 8000ee0:	3d02      	subs	r5, #2
 8000ee2:	4462      	add	r2, ip
 8000ee4:	e732      	b.n	8000d4c <__udivmoddi4+0x124>
 8000ee6:	4608      	mov	r0, r1
 8000ee8:	e70a      	b.n	8000d00 <__udivmoddi4+0xd8>
 8000eea:	4464      	add	r4, ip
 8000eec:	3802      	subs	r0, #2
 8000eee:	e742      	b.n	8000d76 <__udivmoddi4+0x14e>

08000ef0 <__aeabi_idiv0>:
 8000ef0:	4770      	bx	lr
 8000ef2:	bf00      	nop

08000ef4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ef8:	f000 fd00 	bl	80018fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000efc:	f000 f85e 	bl	8000fbc <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  MX_GPIO_Init();
 8000f00:	f000 f8f4 	bl	80010ec <MX_GPIO_Init>
  wifi_init();
 8000f04:	f003 ff7a 	bl	8004dfc <wifi_init>
  tim6_init();
 8000f08:	f003 fdf4 	bl	8004af4 <tim6_init>
  dth11_init();
 8000f0c:	f000 fcc8 	bl	80018a0 <dth11_init>

  /* Initialize all configured peripherals */

  /* USER CODE BEGIN 2 */

  if(0xff == dth11_check_resp())
 8000f10:	f000 fbea 	bl	80016e8 <dth11_check_resp>
 8000f14:	4603      	mov	r3, r0
 8000f16:	2bff      	cmp	r3, #255	; 0xff
 8000f18:	d106      	bne.n	8000f28 <main+0x34>
  {
	  DTH11_buf_t.temp = -1.0;
 8000f1a:	4b21      	ldr	r3, [pc, #132]	; (8000fa0 <main+0xac>)
 8000f1c:	4a21      	ldr	r2, [pc, #132]	; (8000fa4 <main+0xb0>)
 8000f1e:	601a      	str	r2, [r3, #0]
	  DTH11_buf_t.humditiy = -1.0;
 8000f20:	4b1f      	ldr	r3, [pc, #124]	; (8000fa0 <main+0xac>)
 8000f22:	4a20      	ldr	r2, [pc, #128]	; (8000fa4 <main+0xb0>)
 8000f24:	605a      	str	r2, [r3, #4]
 8000f26:	e003      	b.n	8000f30 <main+0x3c>
  }
  else
  {
	dth11_read_temp_hum();
 8000f28:	f000 fc6e 	bl	8001808 <dth11_read_temp_hum>
	dth11_log();
 8000f2c:	f000 fc3e 	bl	80017ac <dth11_log>
  }

  HAL_Delay(2000);
 8000f30:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000f34:	f000 fd48 	bl	80019c8 <HAL_Delay>
#if defined WIFI_UART_COM
  wifi_start();
  HAL_Delay(2000);
#endif

  wifi_rst();
 8000f38:	f003 ff06 	bl	8004d48 <wifi_rst>
  HAL_Delay(5000);
 8000f3c:	f241 3088 	movw	r0, #5000	; 0x1388
 8000f40:	f000 fd42 	bl	80019c8 <HAL_Delay>

  Wifi_Uart_t.log_buf(&Wifi_Uart_t.WiFi_Rx[0], &Wifi_Uart_t.WiFi_Rx_len);
 8000f44:	4b18      	ldr	r3, [pc, #96]	; (8000fa8 <main+0xb4>)
 8000f46:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8000f4a:	4918      	ldr	r1, [pc, #96]	; (8000fac <main+0xb8>)
 8000f4c:	4818      	ldr	r0, [pc, #96]	; (8000fb0 <main+0xbc>)
 8000f4e:	4798      	blx	r3
  Wifi_Uart_t.log_clr(&Wifi_Uart_t.WiFi_Rx[0], &Wifi_Uart_t.WiFi_Rx_len);
 8000f50:	4b15      	ldr	r3, [pc, #84]	; (8000fa8 <main+0xb4>)
 8000f52:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8000f56:	4915      	ldr	r1, [pc, #84]	; (8000fac <main+0xb8>)
 8000f58:	4815      	ldr	r0, [pc, #84]	; (8000fb0 <main+0xbc>)
 8000f5a:	4798      	blx	r3
#if defined WIFI_VERSION
  wifi_version();
  HAL_Delay(2000);
#endif

  wifi_mode(WIFI_ST_AP_MODE);
 8000f5c:	2002      	movs	r0, #2
 8000f5e:	f003 feaf 	bl	8004cc0 <wifi_mode>
  HAL_Delay(2000);
 8000f62:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000f66:	f000 fd2f 	bl	80019c8 <HAL_Delay>
  wifi_ap_connect("Vikrant", "123456789");
 8000f6a:	4912      	ldr	r1, [pc, #72]	; (8000fb4 <main+0xc0>)
 8000f6c:	4812      	ldr	r0, [pc, #72]	; (8000fb8 <main+0xc4>)
 8000f6e:	f003 fec1 	bl	8004cf4 <wifi_ap_connect>
  HAL_Delay(8000);
 8000f72:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 8000f76:	f000 fd27 	bl	80019c8 <HAL_Delay>
  wifi_mac_add();
 8000f7a:	f003 fefd 	bl	8004d78 <wifi_mac_add>
  HAL_Delay(5000);
 8000f7e:	f241 3088 	movw	r0, #5000	; 0x1388
 8000f82:	f000 fd21 	bl	80019c8 <HAL_Delay>
  tcp_server_conn();
 8000f86:	f003 ff0f 	bl	8004da8 <tcp_server_conn>
  HAL_Delay(5000);
 8000f8a:	f241 3088 	movw	r0, #5000	; 0x1388
 8000f8e:	f000 fd1b 	bl	80019c8 <HAL_Delay>

  Wifi_Uart_t.log_buf(&Wifi_Uart_t.WiFi_Rx[0], &Wifi_Uart_t.WiFi_Rx_len);
 8000f92:	4b05      	ldr	r3, [pc, #20]	; (8000fa8 <main+0xb4>)
 8000f94:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8000f98:	4904      	ldr	r1, [pc, #16]	; (8000fac <main+0xb8>)
 8000f9a:	4805      	ldr	r0, [pc, #20]	; (8000fb0 <main+0xbc>)
 8000f9c:	4798      	blx	r3

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000f9e:	e7fe      	b.n	8000f9e <main+0xaa>
 8000fa0:	200007e4 	.word	0x200007e4
 8000fa4:	bf800000 	.word	0xbf800000
 8000fa8:	200008c8 	.word	0x200008c8
 8000fac:	20000ad8 	.word	0x20000ad8
 8000fb0:	200008d4 	.word	0x200008d4
 8000fb4:	080099a8 	.word	0x080099a8
 8000fb8:	080099b4 	.word	0x080099b4

08000fbc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b0b4      	sub	sp, #208	; 0xd0
 8000fc0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fc2:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000fc6:	2230      	movs	r2, #48	; 0x30
 8000fc8:	2100      	movs	r1, #0
 8000fca:	4618      	mov	r0, r3
 8000fcc:	f004 fadf 	bl	800558e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fd0:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	601a      	str	r2, [r3, #0]
 8000fd8:	605a      	str	r2, [r3, #4]
 8000fda:	609a      	str	r2, [r3, #8]
 8000fdc:	60da      	str	r2, [r3, #12]
 8000fde:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000fe0:	f107 030c 	add.w	r3, r7, #12
 8000fe4:	2280      	movs	r2, #128	; 0x80
 8000fe6:	2100      	movs	r1, #0
 8000fe8:	4618      	mov	r0, r3
 8000fea:	f004 fad0 	bl	800558e <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000fee:	f001 f881 	bl	80020f4 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ff2:	4b3b      	ldr	r3, [pc, #236]	; (80010e0 <SystemClock_Config+0x124>)
 8000ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ff6:	4a3a      	ldr	r2, [pc, #232]	; (80010e0 <SystemClock_Config+0x124>)
 8000ff8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ffc:	6413      	str	r3, [r2, #64]	; 0x40
 8000ffe:	4b38      	ldr	r3, [pc, #224]	; (80010e0 <SystemClock_Config+0x124>)
 8001000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001002:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001006:	60bb      	str	r3, [r7, #8]
 8001008:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800100a:	4b36      	ldr	r3, [pc, #216]	; (80010e4 <SystemClock_Config+0x128>)
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001012:	4a34      	ldr	r2, [pc, #208]	; (80010e4 <SystemClock_Config+0x128>)
 8001014:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001018:	6013      	str	r3, [r2, #0]
 800101a:	4b32      	ldr	r3, [pc, #200]	; (80010e4 <SystemClock_Config+0x128>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001022:	607b      	str	r3, [r7, #4]
 8001024:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8001026:	2303      	movs	r3, #3
 8001028:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800102c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001030:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001034:	2301      	movs	r3, #1
 8001036:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800103a:	2310      	movs	r3, #16
 800103c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001040:	2302      	movs	r3, #2
 8001042:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001046:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800104a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 4;
 800104e:	2304      	movs	r3, #4
 8001050:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 216;
 8001054:	23d8      	movs	r3, #216	; 0xd8
 8001056:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800105a:	2302      	movs	r3, #2
 800105c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8001060:	2309      	movs	r3, #9
 8001062:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001066:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800106a:	4618      	mov	r0, r3
 800106c:	f001 f852 	bl	8002114 <HAL_RCC_OscConfig>
 8001070:	4603      	mov	r3, r0
 8001072:	2b00      	cmp	r3, #0
 8001074:	d001      	beq.n	800107a <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8001076:	f000 f8db 	bl	8001230 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800107a:	230f      	movs	r3, #15
 800107c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001080:	2300      	movs	r3, #0
 8001082:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001086:	2300      	movs	r3, #0
 8001088:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800108c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001090:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001094:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001098:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800109c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80010a0:	2100      	movs	r1, #0
 80010a2:	4618      	mov	r0, r3
 80010a4:	f001 fada 	bl	800265c <HAL_RCC_ClockConfig>
 80010a8:	4603      	mov	r3, r0
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d001      	beq.n	80010b2 <SystemClock_Config+0xf6>
  {
    Error_Handler();
 80010ae:	f000 f8bf 	bl	8001230 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_USART3
 80010b2:	4b0d      	ldr	r3, [pc, #52]	; (80010e8 <SystemClock_Config+0x12c>)
 80010b4:	60fb      	str	r3, [r7, #12]
                              |RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80010b6:	2300      	movs	r3, #0
 80010b8:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80010ba:	2300      	movs	r3, #0
 80010bc:	653b      	str	r3, [r7, #80]	; 0x50
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 80010be:	2300      	movs	r3, #0
 80010c0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010c4:	f107 030c 	add.w	r3, r7, #12
 80010c8:	4618      	mov	r0, r3
 80010ca:	f001 fced 	bl	8002aa8 <HAL_RCCEx_PeriphCLKConfig>
 80010ce:	4603      	mov	r3, r0
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d001      	beq.n	80010d8 <SystemClock_Config+0x11c>
  {
    Error_Handler();
 80010d4:	f000 f8ac 	bl	8001230 <Error_Handler>
  }
}
 80010d8:	bf00      	nop
 80010da:	37d0      	adds	r7, #208	; 0xd0
 80010dc:	46bd      	mov	sp, r7
 80010de:	bd80      	pop	{r7, pc}
 80010e0:	40023800 	.word	0x40023800
 80010e4:	40007000 	.word	0x40007000
 80010e8:	00200180 	.word	0x00200180

080010ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b08c      	sub	sp, #48	; 0x30
 80010f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010f2:	f107 031c 	add.w	r3, r7, #28
 80010f6:	2200      	movs	r2, #0
 80010f8:	601a      	str	r2, [r3, #0]
 80010fa:	605a      	str	r2, [r3, #4]
 80010fc:	609a      	str	r2, [r3, #8]
 80010fe:	60da      	str	r2, [r3, #12]
 8001100:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001102:	4b47      	ldr	r3, [pc, #284]	; (8001220 <MX_GPIO_Init+0x134>)
 8001104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001106:	4a46      	ldr	r2, [pc, #280]	; (8001220 <MX_GPIO_Init+0x134>)
 8001108:	f043 0304 	orr.w	r3, r3, #4
 800110c:	6313      	str	r3, [r2, #48]	; 0x30
 800110e:	4b44      	ldr	r3, [pc, #272]	; (8001220 <MX_GPIO_Init+0x134>)
 8001110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001112:	f003 0304 	and.w	r3, r3, #4
 8001116:	61bb      	str	r3, [r7, #24]
 8001118:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800111a:	4b41      	ldr	r3, [pc, #260]	; (8001220 <MX_GPIO_Init+0x134>)
 800111c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800111e:	4a40      	ldr	r2, [pc, #256]	; (8001220 <MX_GPIO_Init+0x134>)
 8001120:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001124:	6313      	str	r3, [r2, #48]	; 0x30
 8001126:	4b3e      	ldr	r3, [pc, #248]	; (8001220 <MX_GPIO_Init+0x134>)
 8001128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800112a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800112e:	617b      	str	r3, [r7, #20]
 8001130:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001132:	4b3b      	ldr	r3, [pc, #236]	; (8001220 <MX_GPIO_Init+0x134>)
 8001134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001136:	4a3a      	ldr	r2, [pc, #232]	; (8001220 <MX_GPIO_Init+0x134>)
 8001138:	f043 0302 	orr.w	r3, r3, #2
 800113c:	6313      	str	r3, [r2, #48]	; 0x30
 800113e:	4b38      	ldr	r3, [pc, #224]	; (8001220 <MX_GPIO_Init+0x134>)
 8001140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001142:	f003 0302 	and.w	r3, r3, #2
 8001146:	613b      	str	r3, [r7, #16]
 8001148:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800114a:	4b35      	ldr	r3, [pc, #212]	; (8001220 <MX_GPIO_Init+0x134>)
 800114c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800114e:	4a34      	ldr	r2, [pc, #208]	; (8001220 <MX_GPIO_Init+0x134>)
 8001150:	f043 0308 	orr.w	r3, r3, #8
 8001154:	6313      	str	r3, [r2, #48]	; 0x30
 8001156:	4b32      	ldr	r3, [pc, #200]	; (8001220 <MX_GPIO_Init+0x134>)
 8001158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800115a:	f003 0308 	and.w	r3, r3, #8
 800115e:	60fb      	str	r3, [r7, #12]
 8001160:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001162:	4b2f      	ldr	r3, [pc, #188]	; (8001220 <MX_GPIO_Init+0x134>)
 8001164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001166:	4a2e      	ldr	r2, [pc, #184]	; (8001220 <MX_GPIO_Init+0x134>)
 8001168:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800116c:	6313      	str	r3, [r2, #48]	; 0x30
 800116e:	4b2c      	ldr	r3, [pc, #176]	; (8001220 <MX_GPIO_Init+0x134>)
 8001170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001172:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001176:	60bb      	str	r3, [r7, #8]
 8001178:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800117a:	4b29      	ldr	r3, [pc, #164]	; (8001220 <MX_GPIO_Init+0x134>)
 800117c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800117e:	4a28      	ldr	r2, [pc, #160]	; (8001220 <MX_GPIO_Init+0x134>)
 8001180:	f043 0301 	orr.w	r3, r3, #1
 8001184:	6313      	str	r3, [r2, #48]	; 0x30
 8001186:	4b26      	ldr	r3, [pc, #152]	; (8001220 <MX_GPIO_Init+0x134>)
 8001188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800118a:	f003 0301 	and.w	r3, r3, #1
 800118e:	607b      	str	r3, [r7, #4]
 8001190:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001192:	2200      	movs	r2, #0
 8001194:	f244 0181 	movw	r1, #16513	; 0x4081
 8001198:	4822      	ldr	r0, [pc, #136]	; (8001224 <MX_GPIO_Init+0x138>)
 800119a:	f000 ff91 	bl	80020c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800119e:	2200      	movs	r2, #0
 80011a0:	2140      	movs	r1, #64	; 0x40
 80011a2:	4821      	ldr	r0, [pc, #132]	; (8001228 <MX_GPIO_Init+0x13c>)
 80011a4:	f000 ff8c 	bl	80020c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80011a8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80011ae:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80011b2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b4:	2300      	movs	r3, #0
 80011b6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80011b8:	f107 031c 	add.w	r3, r7, #28
 80011bc:	4619      	mov	r1, r3
 80011be:	481b      	ldr	r0, [pc, #108]	; (800122c <MX_GPIO_Init+0x140>)
 80011c0:	f000 fdca 	bl	8001d58 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80011c4:	f244 0381 	movw	r3, #16513	; 0x4081
 80011c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011ca:	2301      	movs	r3, #1
 80011cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ce:	2300      	movs	r3, #0
 80011d0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011d2:	2300      	movs	r3, #0
 80011d4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011d6:	f107 031c 	add.w	r3, r7, #28
 80011da:	4619      	mov	r1, r3
 80011dc:	4811      	ldr	r0, [pc, #68]	; (8001224 <MX_GPIO_Init+0x138>)
 80011de:	f000 fdbb 	bl	8001d58 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80011e2:	2340      	movs	r3, #64	; 0x40
 80011e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011e6:	2301      	movs	r3, #1
 80011e8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ea:	2300      	movs	r3, #0
 80011ec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ee:	2300      	movs	r3, #0
 80011f0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80011f2:	f107 031c 	add.w	r3, r7, #28
 80011f6:	4619      	mov	r1, r3
 80011f8:	480b      	ldr	r0, [pc, #44]	; (8001228 <MX_GPIO_Init+0x13c>)
 80011fa:	f000 fdad 	bl	8001d58 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80011fe:	2380      	movs	r3, #128	; 0x80
 8001200:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001202:	2300      	movs	r3, #0
 8001204:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001206:	2300      	movs	r3, #0
 8001208:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800120a:	f107 031c 	add.w	r3, r7, #28
 800120e:	4619      	mov	r1, r3
 8001210:	4805      	ldr	r0, [pc, #20]	; (8001228 <MX_GPIO_Init+0x13c>)
 8001212:	f000 fda1 	bl	8001d58 <HAL_GPIO_Init>

}
 8001216:	bf00      	nop
 8001218:	3730      	adds	r7, #48	; 0x30
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	40023800 	.word	0x40023800
 8001224:	40020400 	.word	0x40020400
 8001228:	40021800 	.word	0x40021800
 800122c:	40020800 	.word	0x40020800

08001230 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001230:	b480      	push	{r7}
 8001232:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001234:	b672      	cpsid	i
}
 8001236:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001238:	e7fe      	b.n	8001238 <Error_Handler+0x8>
	...

0800123c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800123c:	b480      	push	{r7}
 800123e:	b083      	sub	sp, #12
 8001240:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001242:	4b0f      	ldr	r3, [pc, #60]	; (8001280 <HAL_MspInit+0x44>)
 8001244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001246:	4a0e      	ldr	r2, [pc, #56]	; (8001280 <HAL_MspInit+0x44>)
 8001248:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800124c:	6413      	str	r3, [r2, #64]	; 0x40
 800124e:	4b0c      	ldr	r3, [pc, #48]	; (8001280 <HAL_MspInit+0x44>)
 8001250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001252:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001256:	607b      	str	r3, [r7, #4]
 8001258:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800125a:	4b09      	ldr	r3, [pc, #36]	; (8001280 <HAL_MspInit+0x44>)
 800125c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800125e:	4a08      	ldr	r2, [pc, #32]	; (8001280 <HAL_MspInit+0x44>)
 8001260:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001264:	6453      	str	r3, [r2, #68]	; 0x44
 8001266:	4b06      	ldr	r3, [pc, #24]	; (8001280 <HAL_MspInit+0x44>)
 8001268:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800126a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800126e:	603b      	str	r3, [r7, #0]
 8001270:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001272:	bf00      	nop
 8001274:	370c      	adds	r7, #12
 8001276:	46bd      	mov	sp, r7
 8001278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127c:	4770      	bx	lr
 800127e:	bf00      	nop
 8001280:	40023800 	.word	0x40023800

08001284 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001284:	b480      	push	{r7}
 8001286:	b085      	sub	sp, #20
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	4a13      	ldr	r2, [pc, #76]	; (80012e0 <HAL_TIM_Base_MspInit+0x5c>)
 8001292:	4293      	cmp	r3, r2
 8001294:	d10c      	bne.n	80012b0 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001296:	4b13      	ldr	r3, [pc, #76]	; (80012e4 <HAL_TIM_Base_MspInit+0x60>)
 8001298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800129a:	4a12      	ldr	r2, [pc, #72]	; (80012e4 <HAL_TIM_Base_MspInit+0x60>)
 800129c:	f043 0310 	orr.w	r3, r3, #16
 80012a0:	6413      	str	r3, [r2, #64]	; 0x40
 80012a2:	4b10      	ldr	r3, [pc, #64]	; (80012e4 <HAL_TIM_Base_MspInit+0x60>)
 80012a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012a6:	f003 0310 	and.w	r3, r3, #16
 80012aa:	60fb      	str	r3, [r7, #12]
 80012ac:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 80012ae:	e010      	b.n	80012d2 <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM7)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	4a0c      	ldr	r2, [pc, #48]	; (80012e8 <HAL_TIM_Base_MspInit+0x64>)
 80012b6:	4293      	cmp	r3, r2
 80012b8:	d10b      	bne.n	80012d2 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80012ba:	4b0a      	ldr	r3, [pc, #40]	; (80012e4 <HAL_TIM_Base_MspInit+0x60>)
 80012bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012be:	4a09      	ldr	r2, [pc, #36]	; (80012e4 <HAL_TIM_Base_MspInit+0x60>)
 80012c0:	f043 0320 	orr.w	r3, r3, #32
 80012c4:	6413      	str	r3, [r2, #64]	; 0x40
 80012c6:	4b07      	ldr	r3, [pc, #28]	; (80012e4 <HAL_TIM_Base_MspInit+0x60>)
 80012c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ca:	f003 0320 	and.w	r3, r3, #32
 80012ce:	60bb      	str	r3, [r7, #8]
 80012d0:	68bb      	ldr	r3, [r7, #8]
}
 80012d2:	bf00      	nop
 80012d4:	3714      	adds	r7, #20
 80012d6:	46bd      	mov	sp, r7
 80012d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012dc:	4770      	bx	lr
 80012de:	bf00      	nop
 80012e0:	40001000 	.word	0x40001000
 80012e4:	40023800 	.word	0x40023800
 80012e8:	40001400 	.word	0x40001400

080012ec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b08c      	sub	sp, #48	; 0x30
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012f4:	f107 031c 	add.w	r3, r7, #28
 80012f8:	2200      	movs	r2, #0
 80012fa:	601a      	str	r2, [r3, #0]
 80012fc:	605a      	str	r2, [r3, #4]
 80012fe:	609a      	str	r2, [r3, #8]
 8001300:	60da      	str	r2, [r3, #12]
 8001302:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	4a32      	ldr	r2, [pc, #200]	; (80013d4 <HAL_UART_MspInit+0xe8>)
 800130a:	4293      	cmp	r3, r2
 800130c:	d130      	bne.n	8001370 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800130e:	4b32      	ldr	r3, [pc, #200]	; (80013d8 <HAL_UART_MspInit+0xec>)
 8001310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001312:	4a31      	ldr	r2, [pc, #196]	; (80013d8 <HAL_UART_MspInit+0xec>)
 8001314:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001318:	6413      	str	r3, [r2, #64]	; 0x40
 800131a:	4b2f      	ldr	r3, [pc, #188]	; (80013d8 <HAL_UART_MspInit+0xec>)
 800131c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800131e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001322:	61bb      	str	r3, [r7, #24]
 8001324:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001326:	4b2c      	ldr	r3, [pc, #176]	; (80013d8 <HAL_UART_MspInit+0xec>)
 8001328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800132a:	4a2b      	ldr	r2, [pc, #172]	; (80013d8 <HAL_UART_MspInit+0xec>)
 800132c:	f043 0308 	orr.w	r3, r3, #8
 8001330:	6313      	str	r3, [r2, #48]	; 0x30
 8001332:	4b29      	ldr	r3, [pc, #164]	; (80013d8 <HAL_UART_MspInit+0xec>)
 8001334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001336:	f003 0308 	and.w	r3, r3, #8
 800133a:	617b      	str	r3, [r7, #20]
 800133c:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800133e:	2360      	movs	r3, #96	; 0x60
 8001340:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001342:	2302      	movs	r3, #2
 8001344:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001346:	2300      	movs	r3, #0
 8001348:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800134a:	2303      	movs	r3, #3
 800134c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800134e:	2307      	movs	r3, #7
 8001350:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001352:	f107 031c 	add.w	r3, r7, #28
 8001356:	4619      	mov	r1, r3
 8001358:	4820      	ldr	r0, [pc, #128]	; (80013dc <HAL_UART_MspInit+0xf0>)
 800135a:	f000 fcfd 	bl	8001d58 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800135e:	2200      	movs	r2, #0
 8001360:	2100      	movs	r1, #0
 8001362:	2026      	movs	r0, #38	; 0x26
 8001364:	f000 fc2f 	bl	8001bc6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001368:	2026      	movs	r0, #38	; 0x26
 800136a:	f000 fc48 	bl	8001bfe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800136e:	e02d      	b.n	80013cc <HAL_UART_MspInit+0xe0>
  else if(huart->Instance==USART3)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	4a1a      	ldr	r2, [pc, #104]	; (80013e0 <HAL_UART_MspInit+0xf4>)
 8001376:	4293      	cmp	r3, r2
 8001378:	d128      	bne.n	80013cc <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART3_CLK_ENABLE();
 800137a:	4b17      	ldr	r3, [pc, #92]	; (80013d8 <HAL_UART_MspInit+0xec>)
 800137c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800137e:	4a16      	ldr	r2, [pc, #88]	; (80013d8 <HAL_UART_MspInit+0xec>)
 8001380:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001384:	6413      	str	r3, [r2, #64]	; 0x40
 8001386:	4b14      	ldr	r3, [pc, #80]	; (80013d8 <HAL_UART_MspInit+0xec>)
 8001388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800138a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800138e:	613b      	str	r3, [r7, #16]
 8001390:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001392:	4b11      	ldr	r3, [pc, #68]	; (80013d8 <HAL_UART_MspInit+0xec>)
 8001394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001396:	4a10      	ldr	r2, [pc, #64]	; (80013d8 <HAL_UART_MspInit+0xec>)
 8001398:	f043 0308 	orr.w	r3, r3, #8
 800139c:	6313      	str	r3, [r2, #48]	; 0x30
 800139e:	4b0e      	ldr	r3, [pc, #56]	; (80013d8 <HAL_UART_MspInit+0xec>)
 80013a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013a2:	f003 0308 	and.w	r3, r3, #8
 80013a6:	60fb      	str	r3, [r7, #12]
 80013a8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80013aa:	f44f 7340 	mov.w	r3, #768	; 0x300
 80013ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013b0:	2302      	movs	r3, #2
 80013b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b4:	2300      	movs	r3, #0
 80013b6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013b8:	2303      	movs	r3, #3
 80013ba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80013bc:	2307      	movs	r3, #7
 80013be:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013c0:	f107 031c 	add.w	r3, r7, #28
 80013c4:	4619      	mov	r1, r3
 80013c6:	4805      	ldr	r0, [pc, #20]	; (80013dc <HAL_UART_MspInit+0xf0>)
 80013c8:	f000 fcc6 	bl	8001d58 <HAL_GPIO_Init>
}
 80013cc:	bf00      	nop
 80013ce:	3730      	adds	r7, #48	; 0x30
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bd80      	pop	{r7, pc}
 80013d4:	40004400 	.word	0x40004400
 80013d8:	40023800 	.word	0x40023800
 80013dc:	40020c00 	.word	0x40020c00
 80013e0:	40004800 	.word	0x40004800

080013e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013e4:	b480      	push	{r7}
 80013e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80013e8:	e7fe      	b.n	80013e8 <NMI_Handler+0x4>

080013ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013ea:	b480      	push	{r7}
 80013ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013ee:	e7fe      	b.n	80013ee <HardFault_Handler+0x4>

080013f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013f0:	b480      	push	{r7}
 80013f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013f4:	e7fe      	b.n	80013f4 <MemManage_Handler+0x4>

080013f6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013f6:	b480      	push	{r7}
 80013f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013fa:	e7fe      	b.n	80013fa <BusFault_Handler+0x4>

080013fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013fc:	b480      	push	{r7}
 80013fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001400:	e7fe      	b.n	8001400 <UsageFault_Handler+0x4>

08001402 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001402:	b480      	push	{r7}
 8001404:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001406:	bf00      	nop
 8001408:	46bd      	mov	sp, r7
 800140a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140e:	4770      	bx	lr

08001410 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001410:	b480      	push	{r7}
 8001412:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001414:	bf00      	nop
 8001416:	46bd      	mov	sp, r7
 8001418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141c:	4770      	bx	lr

0800141e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800141e:	b480      	push	{r7}
 8001420:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001422:	bf00      	nop
 8001424:	46bd      	mov	sp, r7
 8001426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142a:	4770      	bx	lr

0800142c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001430:	f000 faaa 	bl	8001988 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001434:	bf00      	nop
 8001436:	bd80      	pop	{r7, pc}

08001438 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800143c:	4802      	ldr	r0, [pc, #8]	; (8001448 <USART2_IRQHandler+0x10>)
 800143e:	f002 f9a3 	bl	8003788 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001442:	bf00      	nop
 8001444:	bd80      	pop	{r7, pc}
 8001446:	bf00      	nop
 8001448:	200006d8 	.word	0x200006d8

0800144c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800144c:	b480      	push	{r7}
 800144e:	af00      	add	r7, sp, #0
	return 1;
 8001450:	2301      	movs	r3, #1
}
 8001452:	4618      	mov	r0, r3
 8001454:	46bd      	mov	sp, r7
 8001456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145a:	4770      	bx	lr

0800145c <_kill>:

int _kill(int pid, int sig)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b082      	sub	sp, #8
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
 8001464:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001466:	f004 f8f1 	bl	800564c <__errno>
 800146a:	4603      	mov	r3, r0
 800146c:	2216      	movs	r2, #22
 800146e:	601a      	str	r2, [r3, #0]
	return -1;
 8001470:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001474:	4618      	mov	r0, r3
 8001476:	3708      	adds	r7, #8
 8001478:	46bd      	mov	sp, r7
 800147a:	bd80      	pop	{r7, pc}

0800147c <_exit>:

void _exit (int status)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b082      	sub	sp, #8
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001484:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001488:	6878      	ldr	r0, [r7, #4]
 800148a:	f7ff ffe7 	bl	800145c <_kill>
	while (1) {}		/* Make sure we hang here */
 800148e:	e7fe      	b.n	800148e <_exit+0x12>

08001490 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b086      	sub	sp, #24
 8001494:	af00      	add	r7, sp, #0
 8001496:	60f8      	str	r0, [r7, #12]
 8001498:	60b9      	str	r1, [r7, #8]
 800149a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800149c:	2300      	movs	r3, #0
 800149e:	617b      	str	r3, [r7, #20]
 80014a0:	e00a      	b.n	80014b8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80014a2:	f3af 8000 	nop.w
 80014a6:	4601      	mov	r1, r0
 80014a8:	68bb      	ldr	r3, [r7, #8]
 80014aa:	1c5a      	adds	r2, r3, #1
 80014ac:	60ba      	str	r2, [r7, #8]
 80014ae:	b2ca      	uxtb	r2, r1
 80014b0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014b2:	697b      	ldr	r3, [r7, #20]
 80014b4:	3301      	adds	r3, #1
 80014b6:	617b      	str	r3, [r7, #20]
 80014b8:	697a      	ldr	r2, [r7, #20]
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	429a      	cmp	r2, r3
 80014be:	dbf0      	blt.n	80014a2 <_read+0x12>
	}

return len;
 80014c0:	687b      	ldr	r3, [r7, #4]
}
 80014c2:	4618      	mov	r0, r3
 80014c4:	3718      	adds	r7, #24
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}

080014ca <_close>:
	}
	return len;
}

int _close(int file)
{
 80014ca:	b480      	push	{r7}
 80014cc:	b083      	sub	sp, #12
 80014ce:	af00      	add	r7, sp, #0
 80014d0:	6078      	str	r0, [r7, #4]
	return -1;
 80014d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80014d6:	4618      	mov	r0, r3
 80014d8:	370c      	adds	r7, #12
 80014da:	46bd      	mov	sp, r7
 80014dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e0:	4770      	bx	lr

080014e2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80014e2:	b480      	push	{r7}
 80014e4:	b083      	sub	sp, #12
 80014e6:	af00      	add	r7, sp, #0
 80014e8:	6078      	str	r0, [r7, #4]
 80014ea:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80014f2:	605a      	str	r2, [r3, #4]
	return 0;
 80014f4:	2300      	movs	r3, #0
}
 80014f6:	4618      	mov	r0, r3
 80014f8:	370c      	adds	r7, #12
 80014fa:	46bd      	mov	sp, r7
 80014fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001500:	4770      	bx	lr

08001502 <_isatty>:

int _isatty(int file)
{
 8001502:	b480      	push	{r7}
 8001504:	b083      	sub	sp, #12
 8001506:	af00      	add	r7, sp, #0
 8001508:	6078      	str	r0, [r7, #4]
	return 1;
 800150a:	2301      	movs	r3, #1
}
 800150c:	4618      	mov	r0, r3
 800150e:	370c      	adds	r7, #12
 8001510:	46bd      	mov	sp, r7
 8001512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001516:	4770      	bx	lr

08001518 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001518:	b480      	push	{r7}
 800151a:	b085      	sub	sp, #20
 800151c:	af00      	add	r7, sp, #0
 800151e:	60f8      	str	r0, [r7, #12]
 8001520:	60b9      	str	r1, [r7, #8]
 8001522:	607a      	str	r2, [r7, #4]
	return 0;
 8001524:	2300      	movs	r3, #0
}
 8001526:	4618      	mov	r0, r3
 8001528:	3714      	adds	r7, #20
 800152a:	46bd      	mov	sp, r7
 800152c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001530:	4770      	bx	lr
	...

08001534 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b086      	sub	sp, #24
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800153c:	4a14      	ldr	r2, [pc, #80]	; (8001590 <_sbrk+0x5c>)
 800153e:	4b15      	ldr	r3, [pc, #84]	; (8001594 <_sbrk+0x60>)
 8001540:	1ad3      	subs	r3, r2, r3
 8001542:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001544:	697b      	ldr	r3, [r7, #20]
 8001546:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001548:	4b13      	ldr	r3, [pc, #76]	; (8001598 <_sbrk+0x64>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	2b00      	cmp	r3, #0
 800154e:	d102      	bne.n	8001556 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001550:	4b11      	ldr	r3, [pc, #68]	; (8001598 <_sbrk+0x64>)
 8001552:	4a12      	ldr	r2, [pc, #72]	; (800159c <_sbrk+0x68>)
 8001554:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001556:	4b10      	ldr	r3, [pc, #64]	; (8001598 <_sbrk+0x64>)
 8001558:	681a      	ldr	r2, [r3, #0]
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	4413      	add	r3, r2
 800155e:	693a      	ldr	r2, [r7, #16]
 8001560:	429a      	cmp	r2, r3
 8001562:	d207      	bcs.n	8001574 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001564:	f004 f872 	bl	800564c <__errno>
 8001568:	4603      	mov	r3, r0
 800156a:	220c      	movs	r2, #12
 800156c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800156e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001572:	e009      	b.n	8001588 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001574:	4b08      	ldr	r3, [pc, #32]	; (8001598 <_sbrk+0x64>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800157a:	4b07      	ldr	r3, [pc, #28]	; (8001598 <_sbrk+0x64>)
 800157c:	681a      	ldr	r2, [r3, #0]
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	4413      	add	r3, r2
 8001582:	4a05      	ldr	r2, [pc, #20]	; (8001598 <_sbrk+0x64>)
 8001584:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001586:	68fb      	ldr	r3, [r7, #12]
}
 8001588:	4618      	mov	r0, r3
 800158a:	3718      	adds	r7, #24
 800158c:	46bd      	mov	sp, r7
 800158e:	bd80      	pop	{r7, pc}
 8001590:	20040000 	.word	0x20040000
 8001594:	00000400 	.word	0x00000400
 8001598:	200007e0 	.word	0x200007e0
 800159c:	20000df8 	.word	0x20000df8

080015a0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80015a0:	b480      	push	{r7}
 80015a2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80015a4:	4b06      	ldr	r3, [pc, #24]	; (80015c0 <SystemInit+0x20>)
 80015a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80015aa:	4a05      	ldr	r2, [pc, #20]	; (80015c0 <SystemInit+0x20>)
 80015ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80015b0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015b4:	bf00      	nop
 80015b6:	46bd      	mov	sp, r7
 80015b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015bc:	4770      	bx	lr
 80015be:	bf00      	nop
 80015c0:	e000ed00 	.word	0xe000ed00

080015c4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80015c4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80015fc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80015c8:	480d      	ldr	r0, [pc, #52]	; (8001600 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80015ca:	490e      	ldr	r1, [pc, #56]	; (8001604 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80015cc:	4a0e      	ldr	r2, [pc, #56]	; (8001608 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80015ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015d0:	e002      	b.n	80015d8 <LoopCopyDataInit>

080015d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015d6:	3304      	adds	r3, #4

080015d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015dc:	d3f9      	bcc.n	80015d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015de:	4a0b      	ldr	r2, [pc, #44]	; (800160c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80015e0:	4c0b      	ldr	r4, [pc, #44]	; (8001610 <LoopFillZerobss+0x26>)
  movs r3, #0
 80015e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015e4:	e001      	b.n	80015ea <LoopFillZerobss>

080015e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015e8:	3204      	adds	r2, #4

080015ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015ec:	d3fb      	bcc.n	80015e6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80015ee:	f7ff ffd7 	bl	80015a0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80015f2:	f004 f831 	bl	8005658 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80015f6:	f7ff fc7d 	bl	8000ef4 <main>
  bx  lr    
 80015fa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80015fc:	20040000 	.word	0x20040000
  ldr r0, =_sdata
 8001600:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001604:	200006bc 	.word	0x200006bc
  ldr r2, =_sidata
 8001608:	08009df0 	.word	0x08009df0
  ldr r2, =_sbss
 800160c:	200006bc 	.word	0x200006bc
  ldr r4, =_ebss
 8001610:	20000df4 	.word	0x20000df4

08001614 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001614:	e7fe      	b.n	8001614 <ADC_IRQHandler>
	...

08001618 <micro_delay>:

DTH11_buf DTH11_buf_t;
extern TIM_HandleTypeDef htim16;

static void micro_delay(uint32_t delay_cnt)
{
 8001618:	b480      	push	{r7}
 800161a:	b083      	sub	sp, #12
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COUNTER(&htim16, 0);
 8001620:	4b08      	ldr	r3, [pc, #32]	; (8001644 <micro_delay+0x2c>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	2200      	movs	r2, #0
 8001626:	625a      	str	r2, [r3, #36]	; 0x24
	while ( __HAL_TIM_GET_COUNTER(&htim16) < delay_cnt);
 8001628:	bf00      	nop
 800162a:	4b06      	ldr	r3, [pc, #24]	; (8001644 <micro_delay+0x2c>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001630:	687a      	ldr	r2, [r7, #4]
 8001632:	429a      	cmp	r2, r3
 8001634:	d8f9      	bhi.n	800162a <micro_delay+0x12>
}
 8001636:	bf00      	nop
 8001638:	bf00      	nop
 800163a:	370c      	adds	r7, #12
 800163c:	46bd      	mov	sp, r7
 800163e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001642:	4770      	bx	lr
 8001644:	200007f8 	.word	0x200007f8

08001648 <set_pin_direction>:

static void set_pin_direction(DTH11_PIN_DIR cnt , GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b088      	sub	sp, #32
 800164c:	af00      	add	r7, sp, #0
 800164e:	4603      	mov	r3, r0
 8001650:	6039      	str	r1, [r7, #0]
 8001652:	71fb      	strb	r3, [r7, #7]
 8001654:	4613      	mov	r3, r2
 8001656:	80bb      	strh	r3, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001658:	f107 030c 	add.w	r3, r7, #12
 800165c:	2200      	movs	r2, #0
 800165e:	601a      	str	r2, [r3, #0]
 8001660:	605a      	str	r2, [r3, #4]
 8001662:	609a      	str	r2, [r3, #8]
 8001664:	60da      	str	r2, [r3, #12]
 8001666:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8001668:	88bb      	ldrh	r3, [r7, #4]
 800166a:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800166c:	2300      	movs	r3, #0
 800166e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001670:	2300      	movs	r3, #0
 8001672:	61bb      	str	r3, [r7, #24]
	switch(cnt)   /*Configure the mode of operation*/
 8001674:	79fb      	ldrb	r3, [r7, #7]
 8001676:	2b00      	cmp	r3, #0
 8001678:	d002      	beq.n	8001680 <set_pin_direction+0x38>
 800167a:	2b01      	cmp	r3, #1
 800167c:	d002      	beq.n	8001684 <set_pin_direction+0x3c>
 800167e:	e003      	b.n	8001688 <set_pin_direction+0x40>
	{
		case DTH11_PIN_DIR_IN:
		{
			GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001680:	2300      	movs	r3, #0
 8001682:	613b      	str	r3, [r7, #16]
		}

		case DTH11_PIN_DIR_OUT:
		{
			GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001684:	2301      	movs	r3, #1
 8001686:	613b      	str	r3, [r7, #16]
		}
	}
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8001688:	f107 030c 	add.w	r3, r7, #12
 800168c:	4619      	mov	r1, r3
 800168e:	6838      	ldr	r0, [r7, #0]
 8001690:	f000 fb62 	bl	8001d58 <HAL_GPIO_Init>
}
 8001694:	bf00      	nop
 8001696:	3720      	adds	r7, #32
 8001698:	46bd      	mov	sp, r7
 800169a:	bd80      	pop	{r7, pc}

0800169c <caltimepulse>:
static uint32_t caltimepulse(GPIO_PinState level, uint32_t maxcount)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b084      	sub	sp, #16
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	4603      	mov	r3, r0
 80016a4:	6039      	str	r1, [r7, #0]
 80016a6:	71fb      	strb	r3, [r7, #7]
	uint32_t count = 0;
 80016a8:	2300      	movs	r3, #0
 80016aa:	60fb      	str	r3, [r7, #12]
	while (level == HAL_GPIO_ReadPin(DTH11_PORT, DTH11_PIN))
 80016ac:	e00c      	b.n	80016c8 <caltimepulse+0x2c>
	{
		micro_delay(1);
 80016ae:	2001      	movs	r0, #1
 80016b0:	f7ff ffb2 	bl	8001618 <micro_delay>
		if (count++ >= maxcount + 10)
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	1c5a      	adds	r2, r3, #1
 80016b8:	60fa      	str	r2, [r7, #12]
 80016ba:	683a      	ldr	r2, [r7, #0]
 80016bc:	320a      	adds	r2, #10
 80016be:	4293      	cmp	r3, r2
 80016c0:	d302      	bcc.n	80016c8 <caltimepulse+0x2c>
			return TIMEOUT;
 80016c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80016c6:	e009      	b.n	80016dc <caltimepulse+0x40>
	while (level == HAL_GPIO_ReadPin(DTH11_PORT, DTH11_PIN))
 80016c8:	2102      	movs	r1, #2
 80016ca:	4806      	ldr	r0, [pc, #24]	; (80016e4 <caltimepulse+0x48>)
 80016cc:	f000 fce0 	bl	8002090 <HAL_GPIO_ReadPin>
 80016d0:	4603      	mov	r3, r0
 80016d2:	461a      	mov	r2, r3
 80016d4:	79fb      	ldrb	r3, [r7, #7]
 80016d6:	4293      	cmp	r3, r2
 80016d8:	d0e9      	beq.n	80016ae <caltimepulse+0x12>
	}
	return count;
 80016da:	68fb      	ldr	r3, [r7, #12]
}
 80016dc:	4618      	mov	r0, r3
 80016de:	3710      	adds	r7, #16
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bd80      	pop	{r7, pc}
 80016e4:	40020400 	.word	0x40020400

080016e8 <dth11_check_resp>:

uint8_t dth11_check_resp(void)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	af00      	add	r7, sp, #0
	// Wait 20-40us for DHT to pull the line LOW
	// delay (40);
	if(TIMEOUT == caltimepulse(GPIO_PIN_SET, 40))
 80016ec:	2128      	movs	r1, #40	; 0x28
 80016ee:	2001      	movs	r0, #1
 80016f0:	f7ff ffd4 	bl	800169c <caltimepulse>
 80016f4:	4603      	mov	r3, r0
 80016f6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80016fa:	d101      	bne.n	8001700 <dth11_check_resp+0x18>
		return 0xff;
 80016fc:	23ff      	movs	r3, #255	; 0xff
 80016fe:	e014      	b.n	800172a <dth11_check_resp+0x42>

	// Wait 80us while line has been pulled LOW by DHT
	if(TIMEOUT == caltimepulse(GPIO_PIN_RESET, 80))
 8001700:	2150      	movs	r1, #80	; 0x50
 8001702:	2000      	movs	r0, #0
 8001704:	f7ff ffca 	bl	800169c <caltimepulse>
 8001708:	4603      	mov	r3, r0
 800170a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800170e:	d101      	bne.n	8001714 <dth11_check_resp+0x2c>
		return 0xff;
 8001710:	23ff      	movs	r3, #255	; 0xff
 8001712:	e00a      	b.n	800172a <dth11_check_resp+0x42>

	// Wait 80us while line has been pulled LOW by DHT
	if(TIMEOUT == caltimepulse(GPIO_PIN_SET, 80))
 8001714:	2150      	movs	r1, #80	; 0x50
 8001716:	2001      	movs	r0, #1
 8001718:	f7ff ffc0 	bl	800169c <caltimepulse>
 800171c:	4603      	mov	r3, r0
 800171e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001722:	d101      	bne.n	8001728 <dth11_check_resp+0x40>
		return 0xff;
 8001724:	23ff      	movs	r3, #255	; 0xff
 8001726:	e000      	b.n	800172a <dth11_check_resp+0x42>

	// Ready to read
	return 1U;
 8001728:	2301      	movs	r3, #1
}
 800172a:	4618      	mov	r0, r3
 800172c:	bd80      	pop	{r7, pc}

0800172e <dth11_read>:
uint8_t dth11_read()
{
 800172e:	b580      	push	{r7, lr}
 8001730:	b084      	sub	sp, #16
 8001732:	af00      	add	r7, sp, #0
	uint8_t result = 0U;
 8001734:	2300      	movs	r3, #0
 8001736:	73fb      	strb	r3, [r7, #15]
	uint8_t mask = 0xff;
 8001738:	23ff      	movs	r3, #255	; 0xff
 800173a:	73bb      	strb	r3, [r7, #14]
		for (uint8_t j=0;j<8;j++)
 800173c:	2300      	movs	r3, #0
 800173e:	737b      	strb	r3, [r7, #13]
 8001740:	e022      	b.n	8001788 <dth11_read+0x5a>
		{
			result <<= 1;
 8001742:	7bfb      	ldrb	r3, [r7, #15]
 8001744:	005b      	lsls	r3, r3, #1
 8001746:	73fb      	strb	r3, [r7, #15]
			uint32_t zerocnt = caltimepulse(GPIO_PIN_RESET, 50);
 8001748:	2132      	movs	r1, #50	; 0x32
 800174a:	2000      	movs	r0, #0
 800174c:	f7ff ffa6 	bl	800169c <caltimepulse>
 8001750:	60b8      	str	r0, [r7, #8]
			uint32_t onecnt = caltimepulse(GPIO_PIN_SET, 70);
 8001752:	2146      	movs	r1, #70	; 0x46
 8001754:	2001      	movs	r0, #1
 8001756:	f7ff ffa1 	bl	800169c <caltimepulse>
 800175a:	6078      	str	r0, [r7, #4]
			if(zerocnt == TIMEOUT || onecnt == TIMEOUT)
 800175c:	68bb      	ldr	r3, [r7, #8]
 800175e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001762:	d003      	beq.n	800176c <dth11_read+0x3e>
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800176a:	d102      	bne.n	8001772 <dth11_read+0x44>
			{
				mask = 0U;
 800176c:	2300      	movs	r3, #0
 800176e:	73bb      	strb	r3, [r7, #14]
 8001770:	e007      	b.n	8001782 <dth11_read+0x54>
			}
			else if(onecnt > zerocnt)
 8001772:	687a      	ldr	r2, [r7, #4]
 8001774:	68bb      	ldr	r3, [r7, #8]
 8001776:	429a      	cmp	r2, r3
 8001778:	d903      	bls.n	8001782 <dth11_read+0x54>
			{
				result |= 1;
 800177a:	7bfb      	ldrb	r3, [r7, #15]
 800177c:	f043 0301 	orr.w	r3, r3, #1
 8001780:	73fb      	strb	r3, [r7, #15]
		for (uint8_t j=0;j<8;j++)
 8001782:	7b7b      	ldrb	r3, [r7, #13]
 8001784:	3301      	adds	r3, #1
 8001786:	737b      	strb	r3, [r7, #13]
 8001788:	7b7b      	ldrb	r3, [r7, #13]
 800178a:	2b07      	cmp	r3, #7
 800178c:	d9d9      	bls.n	8001742 <dth11_read+0x14>
			}
		}
		if(!mask)
 800178e:	7bbb      	ldrb	r3, [r7, #14]
 8001790:	2b00      	cmp	r3, #0
 8001792:	d102      	bne.n	800179a <dth11_read+0x6c>
			HAL_Delay(10);
 8001794:	200a      	movs	r0, #10
 8001796:	f000 f917 	bl	80019c8 <HAL_Delay>
		return result & mask;
 800179a:	7bfa      	ldrb	r2, [r7, #15]
 800179c:	7bbb      	ldrb	r3, [r7, #14]
 800179e:	4013      	ands	r3, r2
 80017a0:	b2db      	uxtb	r3, r3
}
 80017a2:	4618      	mov	r0, r3
 80017a4:	3710      	adds	r7, #16
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}
	...

080017ac <dth11_log>:
void dth11_log(void)
{
 80017ac:	b5b0      	push	{r4, r5, r7, lr}
 80017ae:	b090      	sub	sp, #64	; 0x40
 80017b0:	af02      	add	r7, sp, #8
	char buf[50];
	sprintf(buf , "temp & hum is %f %f\r\n",  DTH11_buf_t.temp , DTH11_buf_t.humditiy);
 80017b2:	4b13      	ldr	r3, [pc, #76]	; (8001800 <dth11_log+0x54>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	4618      	mov	r0, r3
 80017b8:	f7fe feee 	bl	8000598 <__aeabi_f2d>
 80017bc:	4604      	mov	r4, r0
 80017be:	460d      	mov	r5, r1
 80017c0:	4b0f      	ldr	r3, [pc, #60]	; (8001800 <dth11_log+0x54>)
 80017c2:	685b      	ldr	r3, [r3, #4]
 80017c4:	4618      	mov	r0, r3
 80017c6:	f7fe fee7 	bl	8000598 <__aeabi_f2d>
 80017ca:	4602      	mov	r2, r0
 80017cc:	460b      	mov	r3, r1
 80017ce:	1d38      	adds	r0, r7, #4
 80017d0:	e9cd 2300 	strd	r2, r3, [sp]
 80017d4:	4622      	mov	r2, r4
 80017d6:	462b      	mov	r3, r5
 80017d8:	490a      	ldr	r1, [pc, #40]	; (8001804 <dth11_log+0x58>)
 80017da:	f003 fe75 	bl	80054c8 <sprintf>
	size_t buf_len = strlen(buf) - 1;
 80017de:	1d3b      	adds	r3, r7, #4
 80017e0:	4618      	mov	r0, r3
 80017e2:	f7fe fd1d 	bl	8000220 <strlen>
 80017e6:	4603      	mov	r3, r0
 80017e8:	3b01      	subs	r3, #1
 80017ea:	603b      	str	r3, [r7, #0]
	DTH11_buf_t.log_buf(&buf[0] , &buf_len);
 80017ec:	4b04      	ldr	r3, [pc, #16]	; (8001800 <dth11_log+0x54>)
 80017ee:	689b      	ldr	r3, [r3, #8]
 80017f0:	4639      	mov	r1, r7
 80017f2:	1d3a      	adds	r2, r7, #4
 80017f4:	4610      	mov	r0, r2
 80017f6:	4798      	blx	r3

}
 80017f8:	bf00      	nop
 80017fa:	3738      	adds	r7, #56	; 0x38
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bdb0      	pop	{r4, r5, r7, pc}
 8001800:	200007e4 	.word	0x200007e4
 8001804:	080099bc 	.word	0x080099bc

08001808 <dth11_read_temp_hum>:
void dth11_read_temp_hum(void)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b084      	sub	sp, #16
 800180c:	af00      	add	r7, sp, #0
	 uint8_t Rh_byte1 = dth11_read();
 800180e:	f7ff ff8e 	bl	800172e <dth11_read>
 8001812:	4603      	mov	r3, r0
 8001814:	73fb      	strb	r3, [r7, #15]
	 uint8_t Rh_byte2 = dth11_read();
 8001816:	f7ff ff8a 	bl	800172e <dth11_read>
 800181a:	4603      	mov	r3, r0
 800181c:	73bb      	strb	r3, [r7, #14]
	 uint16_t hum = Rh_byte2;
 800181e:	7bbb      	ldrb	r3, [r7, #14]
 8001820:	81bb      	strh	r3, [r7, #12]
	 hum = hum | (Rh_byte1 << 8);
 8001822:	7bfb      	ldrb	r3, [r7, #15]
 8001824:	021b      	lsls	r3, r3, #8
 8001826:	b21a      	sxth	r2, r3
 8001828:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800182c:	4313      	orrs	r3, r2
 800182e:	b21b      	sxth	r3, r3
 8001830:	81bb      	strh	r3, [r7, #12]
	 DTH11_buf_t.humditiy = (float)hum / (1 << 8);
 8001832:	89bb      	ldrh	r3, [r7, #12]
 8001834:	ee07 3a90 	vmov	s15, r3
 8001838:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800183c:	eddf 6a16 	vldr	s13, [pc, #88]	; 8001898 <dth11_read_temp_hum+0x90>
 8001840:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001844:	4b15      	ldr	r3, [pc, #84]	; (800189c <dth11_read_temp_hum+0x94>)
 8001846:	edc3 7a01 	vstr	s15, [r3, #4]

	 uint8_t Temp_byte1 = dth11_read();
 800184a:	f7ff ff70 	bl	800172e <dth11_read>
 800184e:	4603      	mov	r3, r0
 8001850:	72fb      	strb	r3, [r7, #11]
	 uint8_t Temp_byte2 = dth11_read();
 8001852:	f7ff ff6c 	bl	800172e <dth11_read>
 8001856:	4603      	mov	r3, r0
 8001858:	72bb      	strb	r3, [r7, #10]
	 uint16_t temp = Temp_byte2;
 800185a:	7abb      	ldrb	r3, [r7, #10]
 800185c:	813b      	strh	r3, [r7, #8]
	 temp = temp | (Temp_byte1 << 8);
 800185e:	7afb      	ldrb	r3, [r7, #11]
 8001860:	021b      	lsls	r3, r3, #8
 8001862:	b21a      	sxth	r2, r3
 8001864:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001868:	4313      	orrs	r3, r2
 800186a:	b21b      	sxth	r3, r3
 800186c:	813b      	strh	r3, [r7, #8]
	 DTH11_buf_t.temp = (float)temp / (1 << 8);
 800186e:	893b      	ldrh	r3, [r7, #8]
 8001870:	ee07 3a90 	vmov	s15, r3
 8001874:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001878:	eddf 6a07 	vldr	s13, [pc, #28]	; 8001898 <dth11_read_temp_hum+0x90>
 800187c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001880:	4b06      	ldr	r3, [pc, #24]	; (800189c <dth11_read_temp_hum+0x94>)
 8001882:	edc3 7a00 	vstr	s15, [r3]
	 uint8_t P_byte = dth11_read();
 8001886:	f7ff ff52 	bl	800172e <dth11_read>
 800188a:	4603      	mov	r3, r0
 800188c:	71fb      	strb	r3, [r7, #7]


}
 800188e:	bf00      	nop
 8001890:	3710      	adds	r7, #16
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}
 8001896:	bf00      	nop
 8001898:	43800000 	.word	0x43800000
 800189c:	200007e4 	.word	0x200007e4

080018a0 <dth11_init>:
void dth11_init()
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	af00      	add	r7, sp, #0
	DTH11_buf_t.log_buf = &console_buf_wr;
 80018a4:	4b11      	ldr	r3, [pc, #68]	; (80018ec <dth11_init+0x4c>)
 80018a6:	4a12      	ldr	r2, [pc, #72]	; (80018f0 <dth11_init+0x50>)
 80018a8:	609a      	str	r2, [r3, #8]
	DTH11_buf_t.log_clr = &console_buf_clr;
 80018aa:	4b10      	ldr	r3, [pc, #64]	; (80018ec <dth11_init+0x4c>)
 80018ac:	4a11      	ldr	r2, [pc, #68]	; (80018f4 <dth11_init+0x54>)
 80018ae:	60da      	str	r2, [r3, #12]

    set_pin_direction(DTH11_PIN_DIR_OUT , DTH11_PORT, DTH11_PIN); /*configure the input pin as O/P*/
 80018b0:	2202      	movs	r2, #2
 80018b2:	4911      	ldr	r1, [pc, #68]	; (80018f8 <dth11_init+0x58>)
 80018b4:	2001      	movs	r0, #1
 80018b6:	f7ff fec7 	bl	8001648 <set_pin_direction>
    HAL_GPIO_WritePin(DTH11_PORT, DTH11_PIN, 1);
 80018ba:	2201      	movs	r2, #1
 80018bc:	2102      	movs	r1, #2
 80018be:	480e      	ldr	r0, [pc, #56]	; (80018f8 <dth11_init+0x58>)
 80018c0:	f000 fbfe 	bl	80020c0 <HAL_GPIO_WritePin>
    HAL_Delay(1500);
 80018c4:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80018c8:	f000 f87e 	bl	80019c8 <HAL_Delay>
    HAL_GPIO_WritePin(DTH11_PORT, DTH11_PIN, 0);   /*Wait for 18 Ms*/ /*Host sends a start signal*/
 80018cc:	2200      	movs	r2, #0
 80018ce:	2102      	movs	r1, #2
 80018d0:	4809      	ldr	r0, [pc, #36]	; (80018f8 <dth11_init+0x58>)
 80018d2:	f000 fbf5 	bl	80020c0 <HAL_GPIO_WritePin>
    HAL_Delay(20000);
 80018d6:	f644 6020 	movw	r0, #20000	; 0x4e20
 80018da:	f000 f875 	bl	80019c8 <HAL_Delay>

    set_pin_direction(DTH11_PIN_DIR_IN , DTH11_PORT, DTH11_PIN); /*configure the input pin as I/P , Host will receive response*/
 80018de:	2202      	movs	r2, #2
 80018e0:	4905      	ldr	r1, [pc, #20]	; (80018f8 <dth11_init+0x58>)
 80018e2:	2000      	movs	r0, #0
 80018e4:	f7ff feb0 	bl	8001648 <set_pin_direction>

}
 80018e8:	bf00      	nop
 80018ea:	bd80      	pop	{r7, pc}
 80018ec:	200007e4 	.word	0x200007e4
 80018f0:	08004b75 	.word	0x08004b75
 80018f4:	08004bc9 	.word	0x08004bc9
 80018f8:	40020400 	.word	0x40020400

080018fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	af00      	add	r7, sp, #0
  /* Configure Instruction cache through ART accelerator */ 
#if (ART_ACCLERATOR_ENABLE != 0)
  __HAL_FLASH_ART_ENABLE();
 8001900:	4b08      	ldr	r3, [pc, #32]	; (8001924 <HAL_Init+0x28>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	4a07      	ldr	r2, [pc, #28]	; (8001924 <HAL_Init+0x28>)
 8001906:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800190a:	6013      	str	r3, [r2, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800190c:	2003      	movs	r0, #3
 800190e:	f000 f94f 	bl	8001bb0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001912:	2000      	movs	r0, #0
 8001914:	f000 f808 	bl	8001928 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001918:	f7ff fc90 	bl	800123c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800191c:	2300      	movs	r3, #0
}
 800191e:	4618      	mov	r0, r3
 8001920:	bd80      	pop	{r7, pc}
 8001922:	bf00      	nop
 8001924:	40023c00 	.word	0x40023c00

08001928 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b082      	sub	sp, #8
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001930:	4b12      	ldr	r3, [pc, #72]	; (800197c <HAL_InitTick+0x54>)
 8001932:	681a      	ldr	r2, [r3, #0]
 8001934:	4b12      	ldr	r3, [pc, #72]	; (8001980 <HAL_InitTick+0x58>)
 8001936:	781b      	ldrb	r3, [r3, #0]
 8001938:	4619      	mov	r1, r3
 800193a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800193e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001942:	fbb2 f3f3 	udiv	r3, r2, r3
 8001946:	4618      	mov	r0, r3
 8001948:	f000 f967 	bl	8001c1a <HAL_SYSTICK_Config>
 800194c:	4603      	mov	r3, r0
 800194e:	2b00      	cmp	r3, #0
 8001950:	d001      	beq.n	8001956 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001952:	2301      	movs	r3, #1
 8001954:	e00e      	b.n	8001974 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	2b0f      	cmp	r3, #15
 800195a:	d80a      	bhi.n	8001972 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800195c:	2200      	movs	r2, #0
 800195e:	6879      	ldr	r1, [r7, #4]
 8001960:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001964:	f000 f92f 	bl	8001bc6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001968:	4a06      	ldr	r2, [pc, #24]	; (8001984 <HAL_InitTick+0x5c>)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800196e:	2300      	movs	r3, #0
 8001970:	e000      	b.n	8001974 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001972:	2301      	movs	r3, #1
}
 8001974:	4618      	mov	r0, r3
 8001976:	3708      	adds	r7, #8
 8001978:	46bd      	mov	sp, r7
 800197a:	bd80      	pop	{r7, pc}
 800197c:	20000000 	.word	0x20000000
 8001980:	20000008 	.word	0x20000008
 8001984:	20000004 	.word	0x20000004

08001988 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001988:	b480      	push	{r7}
 800198a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800198c:	4b06      	ldr	r3, [pc, #24]	; (80019a8 <HAL_IncTick+0x20>)
 800198e:	781b      	ldrb	r3, [r3, #0]
 8001990:	461a      	mov	r2, r3
 8001992:	4b06      	ldr	r3, [pc, #24]	; (80019ac <HAL_IncTick+0x24>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	4413      	add	r3, r2
 8001998:	4a04      	ldr	r2, [pc, #16]	; (80019ac <HAL_IncTick+0x24>)
 800199a:	6013      	str	r3, [r2, #0]
}
 800199c:	bf00      	nop
 800199e:	46bd      	mov	sp, r7
 80019a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a4:	4770      	bx	lr
 80019a6:	bf00      	nop
 80019a8:	20000008 	.word	0x20000008
 80019ac:	200007f4 	.word	0x200007f4

080019b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019b0:	b480      	push	{r7}
 80019b2:	af00      	add	r7, sp, #0
  return uwTick;
 80019b4:	4b03      	ldr	r3, [pc, #12]	; (80019c4 <HAL_GetTick+0x14>)
 80019b6:	681b      	ldr	r3, [r3, #0]
}
 80019b8:	4618      	mov	r0, r3
 80019ba:	46bd      	mov	sp, r7
 80019bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c0:	4770      	bx	lr
 80019c2:	bf00      	nop
 80019c4:	200007f4 	.word	0x200007f4

080019c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b084      	sub	sp, #16
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80019d0:	f7ff ffee 	bl	80019b0 <HAL_GetTick>
 80019d4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80019e0:	d005      	beq.n	80019ee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80019e2:	4b0a      	ldr	r3, [pc, #40]	; (8001a0c <HAL_Delay+0x44>)
 80019e4:	781b      	ldrb	r3, [r3, #0]
 80019e6:	461a      	mov	r2, r3
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	4413      	add	r3, r2
 80019ec:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80019ee:	bf00      	nop
 80019f0:	f7ff ffde 	bl	80019b0 <HAL_GetTick>
 80019f4:	4602      	mov	r2, r0
 80019f6:	68bb      	ldr	r3, [r7, #8]
 80019f8:	1ad3      	subs	r3, r2, r3
 80019fa:	68fa      	ldr	r2, [r7, #12]
 80019fc:	429a      	cmp	r2, r3
 80019fe:	d8f7      	bhi.n	80019f0 <HAL_Delay+0x28>
  {
  }
}
 8001a00:	bf00      	nop
 8001a02:	bf00      	nop
 8001a04:	3710      	adds	r7, #16
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}
 8001a0a:	bf00      	nop
 8001a0c:	20000008 	.word	0x20000008

08001a10 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a10:	b480      	push	{r7}
 8001a12:	b085      	sub	sp, #20
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	f003 0307 	and.w	r3, r3, #7
 8001a1e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a20:	4b0b      	ldr	r3, [pc, #44]	; (8001a50 <__NVIC_SetPriorityGrouping+0x40>)
 8001a22:	68db      	ldr	r3, [r3, #12]
 8001a24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a26:	68ba      	ldr	r2, [r7, #8]
 8001a28:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a2c:	4013      	ands	r3, r2
 8001a2e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a34:	68bb      	ldr	r3, [r7, #8]
 8001a36:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001a38:	4b06      	ldr	r3, [pc, #24]	; (8001a54 <__NVIC_SetPriorityGrouping+0x44>)
 8001a3a:	4313      	orrs	r3, r2
 8001a3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a3e:	4a04      	ldr	r2, [pc, #16]	; (8001a50 <__NVIC_SetPriorityGrouping+0x40>)
 8001a40:	68bb      	ldr	r3, [r7, #8]
 8001a42:	60d3      	str	r3, [r2, #12]
}
 8001a44:	bf00      	nop
 8001a46:	3714      	adds	r7, #20
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4e:	4770      	bx	lr
 8001a50:	e000ed00 	.word	0xe000ed00
 8001a54:	05fa0000 	.word	0x05fa0000

08001a58 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a5c:	4b04      	ldr	r3, [pc, #16]	; (8001a70 <__NVIC_GetPriorityGrouping+0x18>)
 8001a5e:	68db      	ldr	r3, [r3, #12]
 8001a60:	0a1b      	lsrs	r3, r3, #8
 8001a62:	f003 0307 	and.w	r3, r3, #7
}
 8001a66:	4618      	mov	r0, r3
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6e:	4770      	bx	lr
 8001a70:	e000ed00 	.word	0xe000ed00

08001a74 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a74:	b480      	push	{r7}
 8001a76:	b083      	sub	sp, #12
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	db0b      	blt.n	8001a9e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a86:	79fb      	ldrb	r3, [r7, #7]
 8001a88:	f003 021f 	and.w	r2, r3, #31
 8001a8c:	4907      	ldr	r1, [pc, #28]	; (8001aac <__NVIC_EnableIRQ+0x38>)
 8001a8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a92:	095b      	lsrs	r3, r3, #5
 8001a94:	2001      	movs	r0, #1
 8001a96:	fa00 f202 	lsl.w	r2, r0, r2
 8001a9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001a9e:	bf00      	nop
 8001aa0:	370c      	adds	r7, #12
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa8:	4770      	bx	lr
 8001aaa:	bf00      	nop
 8001aac:	e000e100 	.word	0xe000e100

08001ab0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	b083      	sub	sp, #12
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	6039      	str	r1, [r7, #0]
 8001aba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001abc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	db0a      	blt.n	8001ada <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	b2da      	uxtb	r2, r3
 8001ac8:	490c      	ldr	r1, [pc, #48]	; (8001afc <__NVIC_SetPriority+0x4c>)
 8001aca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ace:	0112      	lsls	r2, r2, #4
 8001ad0:	b2d2      	uxtb	r2, r2
 8001ad2:	440b      	add	r3, r1
 8001ad4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ad8:	e00a      	b.n	8001af0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	b2da      	uxtb	r2, r3
 8001ade:	4908      	ldr	r1, [pc, #32]	; (8001b00 <__NVIC_SetPriority+0x50>)
 8001ae0:	79fb      	ldrb	r3, [r7, #7]
 8001ae2:	f003 030f 	and.w	r3, r3, #15
 8001ae6:	3b04      	subs	r3, #4
 8001ae8:	0112      	lsls	r2, r2, #4
 8001aea:	b2d2      	uxtb	r2, r2
 8001aec:	440b      	add	r3, r1
 8001aee:	761a      	strb	r2, [r3, #24]
}
 8001af0:	bf00      	nop
 8001af2:	370c      	adds	r7, #12
 8001af4:	46bd      	mov	sp, r7
 8001af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afa:	4770      	bx	lr
 8001afc:	e000e100 	.word	0xe000e100
 8001b00:	e000ed00 	.word	0xe000ed00

08001b04 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b04:	b480      	push	{r7}
 8001b06:	b089      	sub	sp, #36	; 0x24
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	60f8      	str	r0, [r7, #12]
 8001b0c:	60b9      	str	r1, [r7, #8]
 8001b0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	f003 0307 	and.w	r3, r3, #7
 8001b16:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b18:	69fb      	ldr	r3, [r7, #28]
 8001b1a:	f1c3 0307 	rsb	r3, r3, #7
 8001b1e:	2b04      	cmp	r3, #4
 8001b20:	bf28      	it	cs
 8001b22:	2304      	movcs	r3, #4
 8001b24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b26:	69fb      	ldr	r3, [r7, #28]
 8001b28:	3304      	adds	r3, #4
 8001b2a:	2b06      	cmp	r3, #6
 8001b2c:	d902      	bls.n	8001b34 <NVIC_EncodePriority+0x30>
 8001b2e:	69fb      	ldr	r3, [r7, #28]
 8001b30:	3b03      	subs	r3, #3
 8001b32:	e000      	b.n	8001b36 <NVIC_EncodePriority+0x32>
 8001b34:	2300      	movs	r3, #0
 8001b36:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b38:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001b3c:	69bb      	ldr	r3, [r7, #24]
 8001b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b42:	43da      	mvns	r2, r3
 8001b44:	68bb      	ldr	r3, [r7, #8]
 8001b46:	401a      	ands	r2, r3
 8001b48:	697b      	ldr	r3, [r7, #20]
 8001b4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b4c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001b50:	697b      	ldr	r3, [r7, #20]
 8001b52:	fa01 f303 	lsl.w	r3, r1, r3
 8001b56:	43d9      	mvns	r1, r3
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b5c:	4313      	orrs	r3, r2
         );
}
 8001b5e:	4618      	mov	r0, r3
 8001b60:	3724      	adds	r7, #36	; 0x24
 8001b62:	46bd      	mov	sp, r7
 8001b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b68:	4770      	bx	lr
	...

08001b6c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b082      	sub	sp, #8
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	3b01      	subs	r3, #1
 8001b78:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b7c:	d301      	bcc.n	8001b82 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b7e:	2301      	movs	r3, #1
 8001b80:	e00f      	b.n	8001ba2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b82:	4a0a      	ldr	r2, [pc, #40]	; (8001bac <SysTick_Config+0x40>)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	3b01      	subs	r3, #1
 8001b88:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b8a:	210f      	movs	r1, #15
 8001b8c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001b90:	f7ff ff8e 	bl	8001ab0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b94:	4b05      	ldr	r3, [pc, #20]	; (8001bac <SysTick_Config+0x40>)
 8001b96:	2200      	movs	r2, #0
 8001b98:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b9a:	4b04      	ldr	r3, [pc, #16]	; (8001bac <SysTick_Config+0x40>)
 8001b9c:	2207      	movs	r2, #7
 8001b9e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ba0:	2300      	movs	r3, #0
}
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	3708      	adds	r7, #8
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}
 8001baa:	bf00      	nop
 8001bac:	e000e010 	.word	0xe000e010

08001bb0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b082      	sub	sp, #8
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001bb8:	6878      	ldr	r0, [r7, #4]
 8001bba:	f7ff ff29 	bl	8001a10 <__NVIC_SetPriorityGrouping>
}
 8001bbe:	bf00      	nop
 8001bc0:	3708      	adds	r7, #8
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}

08001bc6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001bc6:	b580      	push	{r7, lr}
 8001bc8:	b086      	sub	sp, #24
 8001bca:	af00      	add	r7, sp, #0
 8001bcc:	4603      	mov	r3, r0
 8001bce:	60b9      	str	r1, [r7, #8]
 8001bd0:	607a      	str	r2, [r7, #4]
 8001bd2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001bd8:	f7ff ff3e 	bl	8001a58 <__NVIC_GetPriorityGrouping>
 8001bdc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001bde:	687a      	ldr	r2, [r7, #4]
 8001be0:	68b9      	ldr	r1, [r7, #8]
 8001be2:	6978      	ldr	r0, [r7, #20]
 8001be4:	f7ff ff8e 	bl	8001b04 <NVIC_EncodePriority>
 8001be8:	4602      	mov	r2, r0
 8001bea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bee:	4611      	mov	r1, r2
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	f7ff ff5d 	bl	8001ab0 <__NVIC_SetPriority>
}
 8001bf6:	bf00      	nop
 8001bf8:	3718      	adds	r7, #24
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bd80      	pop	{r7, pc}

08001bfe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bfe:	b580      	push	{r7, lr}
 8001c00:	b082      	sub	sp, #8
 8001c02:	af00      	add	r7, sp, #0
 8001c04:	4603      	mov	r3, r0
 8001c06:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	f7ff ff31 	bl	8001a74 <__NVIC_EnableIRQ>
}
 8001c12:	bf00      	nop
 8001c14:	3708      	adds	r7, #8
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bd80      	pop	{r7, pc}

08001c1a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c1a:	b580      	push	{r7, lr}
 8001c1c:	b082      	sub	sp, #8
 8001c1e:	af00      	add	r7, sp, #0
 8001c20:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c22:	6878      	ldr	r0, [r7, #4]
 8001c24:	f7ff ffa2 	bl	8001b6c <SysTick_Config>
 8001c28:	4603      	mov	r3, r0
}
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	3708      	adds	r7, #8
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bd80      	pop	{r7, pc}

08001c32 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001c32:	b580      	push	{r7, lr}
 8001c34:	b084      	sub	sp, #16
 8001c36:	af00      	add	r7, sp, #0
 8001c38:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c3e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001c40:	f7ff feb6 	bl	80019b0 <HAL_GetTick>
 8001c44:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001c4c:	b2db      	uxtb	r3, r3
 8001c4e:	2b02      	cmp	r3, #2
 8001c50:	d008      	beq.n	8001c64 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	2280      	movs	r2, #128	; 0x80
 8001c56:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001c60:	2301      	movs	r3, #1
 8001c62:	e052      	b.n	8001d0a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	681a      	ldr	r2, [r3, #0]
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f022 0216 	bic.w	r2, r2, #22
 8001c72:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	695a      	ldr	r2, [r3, #20]
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001c82:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d103      	bne.n	8001c94 <HAL_DMA_Abort+0x62>
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d007      	beq.n	8001ca4 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	681a      	ldr	r2, [r3, #0]
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f022 0208 	bic.w	r2, r2, #8
 8001ca2:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	681a      	ldr	r2, [r3, #0]
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f022 0201 	bic.w	r2, r2, #1
 8001cb2:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001cb4:	e013      	b.n	8001cde <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001cb6:	f7ff fe7b 	bl	80019b0 <HAL_GetTick>
 8001cba:	4602      	mov	r2, r0
 8001cbc:	68bb      	ldr	r3, [r7, #8]
 8001cbe:	1ad3      	subs	r3, r2, r3
 8001cc0:	2b05      	cmp	r3, #5
 8001cc2:	d90c      	bls.n	8001cde <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	2220      	movs	r2, #32
 8001cc8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	2203      	movs	r2, #3
 8001cce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8001cda:	2303      	movs	r3, #3
 8001cdc:	e015      	b.n	8001d0a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f003 0301 	and.w	r3, r3, #1
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d1e4      	bne.n	8001cb6 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cf0:	223f      	movs	r2, #63	; 0x3f
 8001cf2:	409a      	lsls	r2, r3
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	2201      	movs	r2, #1
 8001cfc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	2200      	movs	r2, #0
 8001d04:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8001d08:	2300      	movs	r3, #0
}
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	3710      	adds	r7, #16
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bd80      	pop	{r7, pc}

08001d12 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001d12:	b480      	push	{r7}
 8001d14:	b083      	sub	sp, #12
 8001d16:	af00      	add	r7, sp, #0
 8001d18:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001d20:	b2db      	uxtb	r3, r3
 8001d22:	2b02      	cmp	r3, #2
 8001d24:	d004      	beq.n	8001d30 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	2280      	movs	r2, #128	; 0x80
 8001d2a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001d2c:	2301      	movs	r3, #1
 8001d2e:	e00c      	b.n	8001d4a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	2205      	movs	r2, #5
 8001d34:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	681a      	ldr	r2, [r3, #0]
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f022 0201 	bic.w	r2, r2, #1
 8001d46:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001d48:	2300      	movs	r3, #0
}
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	370c      	adds	r7, #12
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d54:	4770      	bx	lr
	...

08001d58 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	b089      	sub	sp, #36	; 0x24
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
 8001d60:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001d62:	2300      	movs	r3, #0
 8001d64:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001d66:	2300      	movs	r3, #0
 8001d68:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001d72:	2300      	movs	r3, #0
 8001d74:	61fb      	str	r3, [r7, #28]
 8001d76:	e169      	b.n	800204c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001d78:	2201      	movs	r2, #1
 8001d7a:	69fb      	ldr	r3, [r7, #28]
 8001d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d80:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	697a      	ldr	r2, [r7, #20]
 8001d88:	4013      	ands	r3, r2
 8001d8a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001d8c:	693a      	ldr	r2, [r7, #16]
 8001d8e:	697b      	ldr	r3, [r7, #20]
 8001d90:	429a      	cmp	r2, r3
 8001d92:	f040 8158 	bne.w	8002046 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	685b      	ldr	r3, [r3, #4]
 8001d9a:	f003 0303 	and.w	r3, r3, #3
 8001d9e:	2b01      	cmp	r3, #1
 8001da0:	d005      	beq.n	8001dae <HAL_GPIO_Init+0x56>
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	685b      	ldr	r3, [r3, #4]
 8001da6:	f003 0303 	and.w	r3, r3, #3
 8001daa:	2b02      	cmp	r3, #2
 8001dac:	d130      	bne.n	8001e10 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	689b      	ldr	r3, [r3, #8]
 8001db2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001db4:	69fb      	ldr	r3, [r7, #28]
 8001db6:	005b      	lsls	r3, r3, #1
 8001db8:	2203      	movs	r2, #3
 8001dba:	fa02 f303 	lsl.w	r3, r2, r3
 8001dbe:	43db      	mvns	r3, r3
 8001dc0:	69ba      	ldr	r2, [r7, #24]
 8001dc2:	4013      	ands	r3, r2
 8001dc4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	68da      	ldr	r2, [r3, #12]
 8001dca:	69fb      	ldr	r3, [r7, #28]
 8001dcc:	005b      	lsls	r3, r3, #1
 8001dce:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd2:	69ba      	ldr	r2, [r7, #24]
 8001dd4:	4313      	orrs	r3, r2
 8001dd6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	69ba      	ldr	r2, [r7, #24]
 8001ddc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	685b      	ldr	r3, [r3, #4]
 8001de2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001de4:	2201      	movs	r2, #1
 8001de6:	69fb      	ldr	r3, [r7, #28]
 8001de8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dec:	43db      	mvns	r3, r3
 8001dee:	69ba      	ldr	r2, [r7, #24]
 8001df0:	4013      	ands	r3, r2
 8001df2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	091b      	lsrs	r3, r3, #4
 8001dfa:	f003 0201 	and.w	r2, r3, #1
 8001dfe:	69fb      	ldr	r3, [r7, #28]
 8001e00:	fa02 f303 	lsl.w	r3, r2, r3
 8001e04:	69ba      	ldr	r2, [r7, #24]
 8001e06:	4313      	orrs	r3, r2
 8001e08:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	69ba      	ldr	r2, [r7, #24]
 8001e0e:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	685b      	ldr	r3, [r3, #4]
 8001e14:	f003 0303 	and.w	r3, r3, #3
 8001e18:	2b03      	cmp	r3, #3
 8001e1a:	d017      	beq.n	8001e4c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	68db      	ldr	r3, [r3, #12]
 8001e20:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001e22:	69fb      	ldr	r3, [r7, #28]
 8001e24:	005b      	lsls	r3, r3, #1
 8001e26:	2203      	movs	r2, #3
 8001e28:	fa02 f303 	lsl.w	r3, r2, r3
 8001e2c:	43db      	mvns	r3, r3
 8001e2e:	69ba      	ldr	r2, [r7, #24]
 8001e30:	4013      	ands	r3, r2
 8001e32:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	689a      	ldr	r2, [r3, #8]
 8001e38:	69fb      	ldr	r3, [r7, #28]
 8001e3a:	005b      	lsls	r3, r3, #1
 8001e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e40:	69ba      	ldr	r2, [r7, #24]
 8001e42:	4313      	orrs	r3, r2
 8001e44:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	69ba      	ldr	r2, [r7, #24]
 8001e4a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	f003 0303 	and.w	r3, r3, #3
 8001e54:	2b02      	cmp	r3, #2
 8001e56:	d123      	bne.n	8001ea0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001e58:	69fb      	ldr	r3, [r7, #28]
 8001e5a:	08da      	lsrs	r2, r3, #3
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	3208      	adds	r2, #8
 8001e60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e64:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001e66:	69fb      	ldr	r3, [r7, #28]
 8001e68:	f003 0307 	and.w	r3, r3, #7
 8001e6c:	009b      	lsls	r3, r3, #2
 8001e6e:	220f      	movs	r2, #15
 8001e70:	fa02 f303 	lsl.w	r3, r2, r3
 8001e74:	43db      	mvns	r3, r3
 8001e76:	69ba      	ldr	r2, [r7, #24]
 8001e78:	4013      	ands	r3, r2
 8001e7a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	691a      	ldr	r2, [r3, #16]
 8001e80:	69fb      	ldr	r3, [r7, #28]
 8001e82:	f003 0307 	and.w	r3, r3, #7
 8001e86:	009b      	lsls	r3, r3, #2
 8001e88:	fa02 f303 	lsl.w	r3, r2, r3
 8001e8c:	69ba      	ldr	r2, [r7, #24]
 8001e8e:	4313      	orrs	r3, r2
 8001e90:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001e92:	69fb      	ldr	r3, [r7, #28]
 8001e94:	08da      	lsrs	r2, r3, #3
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	3208      	adds	r2, #8
 8001e9a:	69b9      	ldr	r1, [r7, #24]
 8001e9c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001ea6:	69fb      	ldr	r3, [r7, #28]
 8001ea8:	005b      	lsls	r3, r3, #1
 8001eaa:	2203      	movs	r2, #3
 8001eac:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb0:	43db      	mvns	r3, r3
 8001eb2:	69ba      	ldr	r2, [r7, #24]
 8001eb4:	4013      	ands	r3, r2
 8001eb6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	685b      	ldr	r3, [r3, #4]
 8001ebc:	f003 0203 	and.w	r2, r3, #3
 8001ec0:	69fb      	ldr	r3, [r7, #28]
 8001ec2:	005b      	lsls	r3, r3, #1
 8001ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec8:	69ba      	ldr	r2, [r7, #24]
 8001eca:	4313      	orrs	r3, r2
 8001ecc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	69ba      	ldr	r2, [r7, #24]
 8001ed2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	f000 80b2 	beq.w	8002046 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ee2:	4b60      	ldr	r3, [pc, #384]	; (8002064 <HAL_GPIO_Init+0x30c>)
 8001ee4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ee6:	4a5f      	ldr	r2, [pc, #380]	; (8002064 <HAL_GPIO_Init+0x30c>)
 8001ee8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001eec:	6453      	str	r3, [r2, #68]	; 0x44
 8001eee:	4b5d      	ldr	r3, [pc, #372]	; (8002064 <HAL_GPIO_Init+0x30c>)
 8001ef0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ef2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ef6:	60fb      	str	r3, [r7, #12]
 8001ef8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001efa:	4a5b      	ldr	r2, [pc, #364]	; (8002068 <HAL_GPIO_Init+0x310>)
 8001efc:	69fb      	ldr	r3, [r7, #28]
 8001efe:	089b      	lsrs	r3, r3, #2
 8001f00:	3302      	adds	r3, #2
 8001f02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f06:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001f08:	69fb      	ldr	r3, [r7, #28]
 8001f0a:	f003 0303 	and.w	r3, r3, #3
 8001f0e:	009b      	lsls	r3, r3, #2
 8001f10:	220f      	movs	r2, #15
 8001f12:	fa02 f303 	lsl.w	r3, r2, r3
 8001f16:	43db      	mvns	r3, r3
 8001f18:	69ba      	ldr	r2, [r7, #24]
 8001f1a:	4013      	ands	r3, r2
 8001f1c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	4a52      	ldr	r2, [pc, #328]	; (800206c <HAL_GPIO_Init+0x314>)
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d02b      	beq.n	8001f7e <HAL_GPIO_Init+0x226>
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	4a51      	ldr	r2, [pc, #324]	; (8002070 <HAL_GPIO_Init+0x318>)
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	d025      	beq.n	8001f7a <HAL_GPIO_Init+0x222>
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	4a50      	ldr	r2, [pc, #320]	; (8002074 <HAL_GPIO_Init+0x31c>)
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d01f      	beq.n	8001f76 <HAL_GPIO_Init+0x21e>
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	4a4f      	ldr	r2, [pc, #316]	; (8002078 <HAL_GPIO_Init+0x320>)
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d019      	beq.n	8001f72 <HAL_GPIO_Init+0x21a>
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	4a4e      	ldr	r2, [pc, #312]	; (800207c <HAL_GPIO_Init+0x324>)
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d013      	beq.n	8001f6e <HAL_GPIO_Init+0x216>
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	4a4d      	ldr	r2, [pc, #308]	; (8002080 <HAL_GPIO_Init+0x328>)
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d00d      	beq.n	8001f6a <HAL_GPIO_Init+0x212>
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	4a4c      	ldr	r2, [pc, #304]	; (8002084 <HAL_GPIO_Init+0x32c>)
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d007      	beq.n	8001f66 <HAL_GPIO_Init+0x20e>
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	4a4b      	ldr	r2, [pc, #300]	; (8002088 <HAL_GPIO_Init+0x330>)
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d101      	bne.n	8001f62 <HAL_GPIO_Init+0x20a>
 8001f5e:	2307      	movs	r3, #7
 8001f60:	e00e      	b.n	8001f80 <HAL_GPIO_Init+0x228>
 8001f62:	2308      	movs	r3, #8
 8001f64:	e00c      	b.n	8001f80 <HAL_GPIO_Init+0x228>
 8001f66:	2306      	movs	r3, #6
 8001f68:	e00a      	b.n	8001f80 <HAL_GPIO_Init+0x228>
 8001f6a:	2305      	movs	r3, #5
 8001f6c:	e008      	b.n	8001f80 <HAL_GPIO_Init+0x228>
 8001f6e:	2304      	movs	r3, #4
 8001f70:	e006      	b.n	8001f80 <HAL_GPIO_Init+0x228>
 8001f72:	2303      	movs	r3, #3
 8001f74:	e004      	b.n	8001f80 <HAL_GPIO_Init+0x228>
 8001f76:	2302      	movs	r3, #2
 8001f78:	e002      	b.n	8001f80 <HAL_GPIO_Init+0x228>
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	e000      	b.n	8001f80 <HAL_GPIO_Init+0x228>
 8001f7e:	2300      	movs	r3, #0
 8001f80:	69fa      	ldr	r2, [r7, #28]
 8001f82:	f002 0203 	and.w	r2, r2, #3
 8001f86:	0092      	lsls	r2, r2, #2
 8001f88:	4093      	lsls	r3, r2
 8001f8a:	69ba      	ldr	r2, [r7, #24]
 8001f8c:	4313      	orrs	r3, r2
 8001f8e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001f90:	4935      	ldr	r1, [pc, #212]	; (8002068 <HAL_GPIO_Init+0x310>)
 8001f92:	69fb      	ldr	r3, [r7, #28]
 8001f94:	089b      	lsrs	r3, r3, #2
 8001f96:	3302      	adds	r3, #2
 8001f98:	69ba      	ldr	r2, [r7, #24]
 8001f9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f9e:	4b3b      	ldr	r3, [pc, #236]	; (800208c <HAL_GPIO_Init+0x334>)
 8001fa0:	689b      	ldr	r3, [r3, #8]
 8001fa2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fa4:	693b      	ldr	r3, [r7, #16]
 8001fa6:	43db      	mvns	r3, r3
 8001fa8:	69ba      	ldr	r2, [r7, #24]
 8001faa:	4013      	ands	r3, r2
 8001fac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	685b      	ldr	r3, [r3, #4]
 8001fb2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d003      	beq.n	8001fc2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001fba:	69ba      	ldr	r2, [r7, #24]
 8001fbc:	693b      	ldr	r3, [r7, #16]
 8001fbe:	4313      	orrs	r3, r2
 8001fc0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001fc2:	4a32      	ldr	r2, [pc, #200]	; (800208c <HAL_GPIO_Init+0x334>)
 8001fc4:	69bb      	ldr	r3, [r7, #24]
 8001fc6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001fc8:	4b30      	ldr	r3, [pc, #192]	; (800208c <HAL_GPIO_Init+0x334>)
 8001fca:	68db      	ldr	r3, [r3, #12]
 8001fcc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fce:	693b      	ldr	r3, [r7, #16]
 8001fd0:	43db      	mvns	r3, r3
 8001fd2:	69ba      	ldr	r2, [r7, #24]
 8001fd4:	4013      	ands	r3, r2
 8001fd6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d003      	beq.n	8001fec <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001fe4:	69ba      	ldr	r2, [r7, #24]
 8001fe6:	693b      	ldr	r3, [r7, #16]
 8001fe8:	4313      	orrs	r3, r2
 8001fea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001fec:	4a27      	ldr	r2, [pc, #156]	; (800208c <HAL_GPIO_Init+0x334>)
 8001fee:	69bb      	ldr	r3, [r7, #24]
 8001ff0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001ff2:	4b26      	ldr	r3, [pc, #152]	; (800208c <HAL_GPIO_Init+0x334>)
 8001ff4:	685b      	ldr	r3, [r3, #4]
 8001ff6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ff8:	693b      	ldr	r3, [r7, #16]
 8001ffa:	43db      	mvns	r3, r3
 8001ffc:	69ba      	ldr	r2, [r7, #24]
 8001ffe:	4013      	ands	r3, r2
 8002000:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	685b      	ldr	r3, [r3, #4]
 8002006:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800200a:	2b00      	cmp	r3, #0
 800200c:	d003      	beq.n	8002016 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800200e:	69ba      	ldr	r2, [r7, #24]
 8002010:	693b      	ldr	r3, [r7, #16]
 8002012:	4313      	orrs	r3, r2
 8002014:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002016:	4a1d      	ldr	r2, [pc, #116]	; (800208c <HAL_GPIO_Init+0x334>)
 8002018:	69bb      	ldr	r3, [r7, #24]
 800201a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800201c:	4b1b      	ldr	r3, [pc, #108]	; (800208c <HAL_GPIO_Init+0x334>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002022:	693b      	ldr	r3, [r7, #16]
 8002024:	43db      	mvns	r3, r3
 8002026:	69ba      	ldr	r2, [r7, #24]
 8002028:	4013      	ands	r3, r2
 800202a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002034:	2b00      	cmp	r3, #0
 8002036:	d003      	beq.n	8002040 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002038:	69ba      	ldr	r2, [r7, #24]
 800203a:	693b      	ldr	r3, [r7, #16]
 800203c:	4313      	orrs	r3, r2
 800203e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002040:	4a12      	ldr	r2, [pc, #72]	; (800208c <HAL_GPIO_Init+0x334>)
 8002042:	69bb      	ldr	r3, [r7, #24]
 8002044:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002046:	69fb      	ldr	r3, [r7, #28]
 8002048:	3301      	adds	r3, #1
 800204a:	61fb      	str	r3, [r7, #28]
 800204c:	69fb      	ldr	r3, [r7, #28]
 800204e:	2b0f      	cmp	r3, #15
 8002050:	f67f ae92 	bls.w	8001d78 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002054:	bf00      	nop
 8002056:	bf00      	nop
 8002058:	3724      	adds	r7, #36	; 0x24
 800205a:	46bd      	mov	sp, r7
 800205c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002060:	4770      	bx	lr
 8002062:	bf00      	nop
 8002064:	40023800 	.word	0x40023800
 8002068:	40013800 	.word	0x40013800
 800206c:	40020000 	.word	0x40020000
 8002070:	40020400 	.word	0x40020400
 8002074:	40020800 	.word	0x40020800
 8002078:	40020c00 	.word	0x40020c00
 800207c:	40021000 	.word	0x40021000
 8002080:	40021400 	.word	0x40021400
 8002084:	40021800 	.word	0x40021800
 8002088:	40021c00 	.word	0x40021c00
 800208c:	40013c00 	.word	0x40013c00

08002090 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002090:	b480      	push	{r7}
 8002092:	b085      	sub	sp, #20
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
 8002098:	460b      	mov	r3, r1
 800209a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	691a      	ldr	r2, [r3, #16]
 80020a0:	887b      	ldrh	r3, [r7, #2]
 80020a2:	4013      	ands	r3, r2
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d002      	beq.n	80020ae <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80020a8:	2301      	movs	r3, #1
 80020aa:	73fb      	strb	r3, [r7, #15]
 80020ac:	e001      	b.n	80020b2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80020ae:	2300      	movs	r3, #0
 80020b0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80020b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80020b4:	4618      	mov	r0, r3
 80020b6:	3714      	adds	r7, #20
 80020b8:	46bd      	mov	sp, r7
 80020ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020be:	4770      	bx	lr

080020c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80020c0:	b480      	push	{r7}
 80020c2:	b083      	sub	sp, #12
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
 80020c8:	460b      	mov	r3, r1
 80020ca:	807b      	strh	r3, [r7, #2]
 80020cc:	4613      	mov	r3, r2
 80020ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80020d0:	787b      	ldrb	r3, [r7, #1]
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d003      	beq.n	80020de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80020d6:	887a      	ldrh	r2, [r7, #2]
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80020dc:	e003      	b.n	80020e6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80020de:	887b      	ldrh	r3, [r7, #2]
 80020e0:	041a      	lsls	r2, r3, #16
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	619a      	str	r2, [r3, #24]
}
 80020e6:	bf00      	nop
 80020e8:	370c      	adds	r7, #12
 80020ea:	46bd      	mov	sp, r7
 80020ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f0:	4770      	bx	lr
	...

080020f4 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80020f4:	b480      	push	{r7}
 80020f6:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80020f8:	4b05      	ldr	r3, [pc, #20]	; (8002110 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4a04      	ldr	r2, [pc, #16]	; (8002110 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80020fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002102:	6013      	str	r3, [r2, #0]
}
 8002104:	bf00      	nop
 8002106:	46bd      	mov	sp, r7
 8002108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210c:	4770      	bx	lr
 800210e:	bf00      	nop
 8002110:	40007000 	.word	0x40007000

08002114 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b086      	sub	sp, #24
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800211c:	2300      	movs	r3, #0
 800211e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	2b00      	cmp	r3, #0
 8002124:	d101      	bne.n	800212a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002126:	2301      	movs	r3, #1
 8002128:	e291      	b.n	800264e <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f003 0301 	and.w	r3, r3, #1
 8002132:	2b00      	cmp	r3, #0
 8002134:	f000 8087 	beq.w	8002246 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002138:	4b96      	ldr	r3, [pc, #600]	; (8002394 <HAL_RCC_OscConfig+0x280>)
 800213a:	689b      	ldr	r3, [r3, #8]
 800213c:	f003 030c 	and.w	r3, r3, #12
 8002140:	2b04      	cmp	r3, #4
 8002142:	d00c      	beq.n	800215e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002144:	4b93      	ldr	r3, [pc, #588]	; (8002394 <HAL_RCC_OscConfig+0x280>)
 8002146:	689b      	ldr	r3, [r3, #8]
 8002148:	f003 030c 	and.w	r3, r3, #12
 800214c:	2b08      	cmp	r3, #8
 800214e:	d112      	bne.n	8002176 <HAL_RCC_OscConfig+0x62>
 8002150:	4b90      	ldr	r3, [pc, #576]	; (8002394 <HAL_RCC_OscConfig+0x280>)
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002158:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800215c:	d10b      	bne.n	8002176 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800215e:	4b8d      	ldr	r3, [pc, #564]	; (8002394 <HAL_RCC_OscConfig+0x280>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002166:	2b00      	cmp	r3, #0
 8002168:	d06c      	beq.n	8002244 <HAL_RCC_OscConfig+0x130>
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	685b      	ldr	r3, [r3, #4]
 800216e:	2b00      	cmp	r3, #0
 8002170:	d168      	bne.n	8002244 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002172:	2301      	movs	r3, #1
 8002174:	e26b      	b.n	800264e <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	685b      	ldr	r3, [r3, #4]
 800217a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800217e:	d106      	bne.n	800218e <HAL_RCC_OscConfig+0x7a>
 8002180:	4b84      	ldr	r3, [pc, #528]	; (8002394 <HAL_RCC_OscConfig+0x280>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4a83      	ldr	r2, [pc, #524]	; (8002394 <HAL_RCC_OscConfig+0x280>)
 8002186:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800218a:	6013      	str	r3, [r2, #0]
 800218c:	e02e      	b.n	80021ec <HAL_RCC_OscConfig+0xd8>
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	685b      	ldr	r3, [r3, #4]
 8002192:	2b00      	cmp	r3, #0
 8002194:	d10c      	bne.n	80021b0 <HAL_RCC_OscConfig+0x9c>
 8002196:	4b7f      	ldr	r3, [pc, #508]	; (8002394 <HAL_RCC_OscConfig+0x280>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	4a7e      	ldr	r2, [pc, #504]	; (8002394 <HAL_RCC_OscConfig+0x280>)
 800219c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021a0:	6013      	str	r3, [r2, #0]
 80021a2:	4b7c      	ldr	r3, [pc, #496]	; (8002394 <HAL_RCC_OscConfig+0x280>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	4a7b      	ldr	r2, [pc, #492]	; (8002394 <HAL_RCC_OscConfig+0x280>)
 80021a8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021ac:	6013      	str	r3, [r2, #0]
 80021ae:	e01d      	b.n	80021ec <HAL_RCC_OscConfig+0xd8>
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80021b8:	d10c      	bne.n	80021d4 <HAL_RCC_OscConfig+0xc0>
 80021ba:	4b76      	ldr	r3, [pc, #472]	; (8002394 <HAL_RCC_OscConfig+0x280>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	4a75      	ldr	r2, [pc, #468]	; (8002394 <HAL_RCC_OscConfig+0x280>)
 80021c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80021c4:	6013      	str	r3, [r2, #0]
 80021c6:	4b73      	ldr	r3, [pc, #460]	; (8002394 <HAL_RCC_OscConfig+0x280>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	4a72      	ldr	r2, [pc, #456]	; (8002394 <HAL_RCC_OscConfig+0x280>)
 80021cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021d0:	6013      	str	r3, [r2, #0]
 80021d2:	e00b      	b.n	80021ec <HAL_RCC_OscConfig+0xd8>
 80021d4:	4b6f      	ldr	r3, [pc, #444]	; (8002394 <HAL_RCC_OscConfig+0x280>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4a6e      	ldr	r2, [pc, #440]	; (8002394 <HAL_RCC_OscConfig+0x280>)
 80021da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021de:	6013      	str	r3, [r2, #0]
 80021e0:	4b6c      	ldr	r3, [pc, #432]	; (8002394 <HAL_RCC_OscConfig+0x280>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	4a6b      	ldr	r2, [pc, #428]	; (8002394 <HAL_RCC_OscConfig+0x280>)
 80021e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d013      	beq.n	800221c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021f4:	f7ff fbdc 	bl	80019b0 <HAL_GetTick>
 80021f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021fa:	e008      	b.n	800220e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021fc:	f7ff fbd8 	bl	80019b0 <HAL_GetTick>
 8002200:	4602      	mov	r2, r0
 8002202:	693b      	ldr	r3, [r7, #16]
 8002204:	1ad3      	subs	r3, r2, r3
 8002206:	2b64      	cmp	r3, #100	; 0x64
 8002208:	d901      	bls.n	800220e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800220a:	2303      	movs	r3, #3
 800220c:	e21f      	b.n	800264e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800220e:	4b61      	ldr	r3, [pc, #388]	; (8002394 <HAL_RCC_OscConfig+0x280>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002216:	2b00      	cmp	r3, #0
 8002218:	d0f0      	beq.n	80021fc <HAL_RCC_OscConfig+0xe8>
 800221a:	e014      	b.n	8002246 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800221c:	f7ff fbc8 	bl	80019b0 <HAL_GetTick>
 8002220:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002222:	e008      	b.n	8002236 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002224:	f7ff fbc4 	bl	80019b0 <HAL_GetTick>
 8002228:	4602      	mov	r2, r0
 800222a:	693b      	ldr	r3, [r7, #16]
 800222c:	1ad3      	subs	r3, r2, r3
 800222e:	2b64      	cmp	r3, #100	; 0x64
 8002230:	d901      	bls.n	8002236 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002232:	2303      	movs	r3, #3
 8002234:	e20b      	b.n	800264e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002236:	4b57      	ldr	r3, [pc, #348]	; (8002394 <HAL_RCC_OscConfig+0x280>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800223e:	2b00      	cmp	r3, #0
 8002240:	d1f0      	bne.n	8002224 <HAL_RCC_OscConfig+0x110>
 8002242:	e000      	b.n	8002246 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002244:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f003 0302 	and.w	r3, r3, #2
 800224e:	2b00      	cmp	r3, #0
 8002250:	d069      	beq.n	8002326 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002252:	4b50      	ldr	r3, [pc, #320]	; (8002394 <HAL_RCC_OscConfig+0x280>)
 8002254:	689b      	ldr	r3, [r3, #8]
 8002256:	f003 030c 	and.w	r3, r3, #12
 800225a:	2b00      	cmp	r3, #0
 800225c:	d00b      	beq.n	8002276 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800225e:	4b4d      	ldr	r3, [pc, #308]	; (8002394 <HAL_RCC_OscConfig+0x280>)
 8002260:	689b      	ldr	r3, [r3, #8]
 8002262:	f003 030c 	and.w	r3, r3, #12
 8002266:	2b08      	cmp	r3, #8
 8002268:	d11c      	bne.n	80022a4 <HAL_RCC_OscConfig+0x190>
 800226a:	4b4a      	ldr	r3, [pc, #296]	; (8002394 <HAL_RCC_OscConfig+0x280>)
 800226c:	685b      	ldr	r3, [r3, #4]
 800226e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002272:	2b00      	cmp	r3, #0
 8002274:	d116      	bne.n	80022a4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002276:	4b47      	ldr	r3, [pc, #284]	; (8002394 <HAL_RCC_OscConfig+0x280>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f003 0302 	and.w	r3, r3, #2
 800227e:	2b00      	cmp	r3, #0
 8002280:	d005      	beq.n	800228e <HAL_RCC_OscConfig+0x17a>
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	68db      	ldr	r3, [r3, #12]
 8002286:	2b01      	cmp	r3, #1
 8002288:	d001      	beq.n	800228e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800228a:	2301      	movs	r3, #1
 800228c:	e1df      	b.n	800264e <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800228e:	4b41      	ldr	r3, [pc, #260]	; (8002394 <HAL_RCC_OscConfig+0x280>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	691b      	ldr	r3, [r3, #16]
 800229a:	00db      	lsls	r3, r3, #3
 800229c:	493d      	ldr	r1, [pc, #244]	; (8002394 <HAL_RCC_OscConfig+0x280>)
 800229e:	4313      	orrs	r3, r2
 80022a0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022a2:	e040      	b.n	8002326 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	68db      	ldr	r3, [r3, #12]
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d023      	beq.n	80022f4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80022ac:	4b39      	ldr	r3, [pc, #228]	; (8002394 <HAL_RCC_OscConfig+0x280>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4a38      	ldr	r2, [pc, #224]	; (8002394 <HAL_RCC_OscConfig+0x280>)
 80022b2:	f043 0301 	orr.w	r3, r3, #1
 80022b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022b8:	f7ff fb7a 	bl	80019b0 <HAL_GetTick>
 80022bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022be:	e008      	b.n	80022d2 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022c0:	f7ff fb76 	bl	80019b0 <HAL_GetTick>
 80022c4:	4602      	mov	r2, r0
 80022c6:	693b      	ldr	r3, [r7, #16]
 80022c8:	1ad3      	subs	r3, r2, r3
 80022ca:	2b02      	cmp	r3, #2
 80022cc:	d901      	bls.n	80022d2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80022ce:	2303      	movs	r3, #3
 80022d0:	e1bd      	b.n	800264e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022d2:	4b30      	ldr	r3, [pc, #192]	; (8002394 <HAL_RCC_OscConfig+0x280>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f003 0302 	and.w	r3, r3, #2
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d0f0      	beq.n	80022c0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022de:	4b2d      	ldr	r3, [pc, #180]	; (8002394 <HAL_RCC_OscConfig+0x280>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	691b      	ldr	r3, [r3, #16]
 80022ea:	00db      	lsls	r3, r3, #3
 80022ec:	4929      	ldr	r1, [pc, #164]	; (8002394 <HAL_RCC_OscConfig+0x280>)
 80022ee:	4313      	orrs	r3, r2
 80022f0:	600b      	str	r3, [r1, #0]
 80022f2:	e018      	b.n	8002326 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80022f4:	4b27      	ldr	r3, [pc, #156]	; (8002394 <HAL_RCC_OscConfig+0x280>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	4a26      	ldr	r2, [pc, #152]	; (8002394 <HAL_RCC_OscConfig+0x280>)
 80022fa:	f023 0301 	bic.w	r3, r3, #1
 80022fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002300:	f7ff fb56 	bl	80019b0 <HAL_GetTick>
 8002304:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002306:	e008      	b.n	800231a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002308:	f7ff fb52 	bl	80019b0 <HAL_GetTick>
 800230c:	4602      	mov	r2, r0
 800230e:	693b      	ldr	r3, [r7, #16]
 8002310:	1ad3      	subs	r3, r2, r3
 8002312:	2b02      	cmp	r3, #2
 8002314:	d901      	bls.n	800231a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002316:	2303      	movs	r3, #3
 8002318:	e199      	b.n	800264e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800231a:	4b1e      	ldr	r3, [pc, #120]	; (8002394 <HAL_RCC_OscConfig+0x280>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f003 0302 	and.w	r3, r3, #2
 8002322:	2b00      	cmp	r3, #0
 8002324:	d1f0      	bne.n	8002308 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f003 0308 	and.w	r3, r3, #8
 800232e:	2b00      	cmp	r3, #0
 8002330:	d038      	beq.n	80023a4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	695b      	ldr	r3, [r3, #20]
 8002336:	2b00      	cmp	r3, #0
 8002338:	d019      	beq.n	800236e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800233a:	4b16      	ldr	r3, [pc, #88]	; (8002394 <HAL_RCC_OscConfig+0x280>)
 800233c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800233e:	4a15      	ldr	r2, [pc, #84]	; (8002394 <HAL_RCC_OscConfig+0x280>)
 8002340:	f043 0301 	orr.w	r3, r3, #1
 8002344:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002346:	f7ff fb33 	bl	80019b0 <HAL_GetTick>
 800234a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800234c:	e008      	b.n	8002360 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800234e:	f7ff fb2f 	bl	80019b0 <HAL_GetTick>
 8002352:	4602      	mov	r2, r0
 8002354:	693b      	ldr	r3, [r7, #16]
 8002356:	1ad3      	subs	r3, r2, r3
 8002358:	2b02      	cmp	r3, #2
 800235a:	d901      	bls.n	8002360 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800235c:	2303      	movs	r3, #3
 800235e:	e176      	b.n	800264e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002360:	4b0c      	ldr	r3, [pc, #48]	; (8002394 <HAL_RCC_OscConfig+0x280>)
 8002362:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002364:	f003 0302 	and.w	r3, r3, #2
 8002368:	2b00      	cmp	r3, #0
 800236a:	d0f0      	beq.n	800234e <HAL_RCC_OscConfig+0x23a>
 800236c:	e01a      	b.n	80023a4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800236e:	4b09      	ldr	r3, [pc, #36]	; (8002394 <HAL_RCC_OscConfig+0x280>)
 8002370:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002372:	4a08      	ldr	r2, [pc, #32]	; (8002394 <HAL_RCC_OscConfig+0x280>)
 8002374:	f023 0301 	bic.w	r3, r3, #1
 8002378:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800237a:	f7ff fb19 	bl	80019b0 <HAL_GetTick>
 800237e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002380:	e00a      	b.n	8002398 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002382:	f7ff fb15 	bl	80019b0 <HAL_GetTick>
 8002386:	4602      	mov	r2, r0
 8002388:	693b      	ldr	r3, [r7, #16]
 800238a:	1ad3      	subs	r3, r2, r3
 800238c:	2b02      	cmp	r3, #2
 800238e:	d903      	bls.n	8002398 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002390:	2303      	movs	r3, #3
 8002392:	e15c      	b.n	800264e <HAL_RCC_OscConfig+0x53a>
 8002394:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002398:	4b91      	ldr	r3, [pc, #580]	; (80025e0 <HAL_RCC_OscConfig+0x4cc>)
 800239a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800239c:	f003 0302 	and.w	r3, r3, #2
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d1ee      	bne.n	8002382 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f003 0304 	and.w	r3, r3, #4
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	f000 80a4 	beq.w	80024fa <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023b2:	4b8b      	ldr	r3, [pc, #556]	; (80025e0 <HAL_RCC_OscConfig+0x4cc>)
 80023b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d10d      	bne.n	80023da <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80023be:	4b88      	ldr	r3, [pc, #544]	; (80025e0 <HAL_RCC_OscConfig+0x4cc>)
 80023c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023c2:	4a87      	ldr	r2, [pc, #540]	; (80025e0 <HAL_RCC_OscConfig+0x4cc>)
 80023c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023c8:	6413      	str	r3, [r2, #64]	; 0x40
 80023ca:	4b85      	ldr	r3, [pc, #532]	; (80025e0 <HAL_RCC_OscConfig+0x4cc>)
 80023cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023d2:	60bb      	str	r3, [r7, #8]
 80023d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80023d6:	2301      	movs	r3, #1
 80023d8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80023da:	4b82      	ldr	r3, [pc, #520]	; (80025e4 <HAL_RCC_OscConfig+0x4d0>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d118      	bne.n	8002418 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80023e6:	4b7f      	ldr	r3, [pc, #508]	; (80025e4 <HAL_RCC_OscConfig+0x4d0>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	4a7e      	ldr	r2, [pc, #504]	; (80025e4 <HAL_RCC_OscConfig+0x4d0>)
 80023ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80023f2:	f7ff fadd 	bl	80019b0 <HAL_GetTick>
 80023f6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80023f8:	e008      	b.n	800240c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023fa:	f7ff fad9 	bl	80019b0 <HAL_GetTick>
 80023fe:	4602      	mov	r2, r0
 8002400:	693b      	ldr	r3, [r7, #16]
 8002402:	1ad3      	subs	r3, r2, r3
 8002404:	2b64      	cmp	r3, #100	; 0x64
 8002406:	d901      	bls.n	800240c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002408:	2303      	movs	r3, #3
 800240a:	e120      	b.n	800264e <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800240c:	4b75      	ldr	r3, [pc, #468]	; (80025e4 <HAL_RCC_OscConfig+0x4d0>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002414:	2b00      	cmp	r3, #0
 8002416:	d0f0      	beq.n	80023fa <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	689b      	ldr	r3, [r3, #8]
 800241c:	2b01      	cmp	r3, #1
 800241e:	d106      	bne.n	800242e <HAL_RCC_OscConfig+0x31a>
 8002420:	4b6f      	ldr	r3, [pc, #444]	; (80025e0 <HAL_RCC_OscConfig+0x4cc>)
 8002422:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002424:	4a6e      	ldr	r2, [pc, #440]	; (80025e0 <HAL_RCC_OscConfig+0x4cc>)
 8002426:	f043 0301 	orr.w	r3, r3, #1
 800242a:	6713      	str	r3, [r2, #112]	; 0x70
 800242c:	e02d      	b.n	800248a <HAL_RCC_OscConfig+0x376>
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	689b      	ldr	r3, [r3, #8]
 8002432:	2b00      	cmp	r3, #0
 8002434:	d10c      	bne.n	8002450 <HAL_RCC_OscConfig+0x33c>
 8002436:	4b6a      	ldr	r3, [pc, #424]	; (80025e0 <HAL_RCC_OscConfig+0x4cc>)
 8002438:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800243a:	4a69      	ldr	r2, [pc, #420]	; (80025e0 <HAL_RCC_OscConfig+0x4cc>)
 800243c:	f023 0301 	bic.w	r3, r3, #1
 8002440:	6713      	str	r3, [r2, #112]	; 0x70
 8002442:	4b67      	ldr	r3, [pc, #412]	; (80025e0 <HAL_RCC_OscConfig+0x4cc>)
 8002444:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002446:	4a66      	ldr	r2, [pc, #408]	; (80025e0 <HAL_RCC_OscConfig+0x4cc>)
 8002448:	f023 0304 	bic.w	r3, r3, #4
 800244c:	6713      	str	r3, [r2, #112]	; 0x70
 800244e:	e01c      	b.n	800248a <HAL_RCC_OscConfig+0x376>
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	689b      	ldr	r3, [r3, #8]
 8002454:	2b05      	cmp	r3, #5
 8002456:	d10c      	bne.n	8002472 <HAL_RCC_OscConfig+0x35e>
 8002458:	4b61      	ldr	r3, [pc, #388]	; (80025e0 <HAL_RCC_OscConfig+0x4cc>)
 800245a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800245c:	4a60      	ldr	r2, [pc, #384]	; (80025e0 <HAL_RCC_OscConfig+0x4cc>)
 800245e:	f043 0304 	orr.w	r3, r3, #4
 8002462:	6713      	str	r3, [r2, #112]	; 0x70
 8002464:	4b5e      	ldr	r3, [pc, #376]	; (80025e0 <HAL_RCC_OscConfig+0x4cc>)
 8002466:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002468:	4a5d      	ldr	r2, [pc, #372]	; (80025e0 <HAL_RCC_OscConfig+0x4cc>)
 800246a:	f043 0301 	orr.w	r3, r3, #1
 800246e:	6713      	str	r3, [r2, #112]	; 0x70
 8002470:	e00b      	b.n	800248a <HAL_RCC_OscConfig+0x376>
 8002472:	4b5b      	ldr	r3, [pc, #364]	; (80025e0 <HAL_RCC_OscConfig+0x4cc>)
 8002474:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002476:	4a5a      	ldr	r2, [pc, #360]	; (80025e0 <HAL_RCC_OscConfig+0x4cc>)
 8002478:	f023 0301 	bic.w	r3, r3, #1
 800247c:	6713      	str	r3, [r2, #112]	; 0x70
 800247e:	4b58      	ldr	r3, [pc, #352]	; (80025e0 <HAL_RCC_OscConfig+0x4cc>)
 8002480:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002482:	4a57      	ldr	r2, [pc, #348]	; (80025e0 <HAL_RCC_OscConfig+0x4cc>)
 8002484:	f023 0304 	bic.w	r3, r3, #4
 8002488:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	689b      	ldr	r3, [r3, #8]
 800248e:	2b00      	cmp	r3, #0
 8002490:	d015      	beq.n	80024be <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002492:	f7ff fa8d 	bl	80019b0 <HAL_GetTick>
 8002496:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002498:	e00a      	b.n	80024b0 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800249a:	f7ff fa89 	bl	80019b0 <HAL_GetTick>
 800249e:	4602      	mov	r2, r0
 80024a0:	693b      	ldr	r3, [r7, #16]
 80024a2:	1ad3      	subs	r3, r2, r3
 80024a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80024a8:	4293      	cmp	r3, r2
 80024aa:	d901      	bls.n	80024b0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80024ac:	2303      	movs	r3, #3
 80024ae:	e0ce      	b.n	800264e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024b0:	4b4b      	ldr	r3, [pc, #300]	; (80025e0 <HAL_RCC_OscConfig+0x4cc>)
 80024b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024b4:	f003 0302 	and.w	r3, r3, #2
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d0ee      	beq.n	800249a <HAL_RCC_OscConfig+0x386>
 80024bc:	e014      	b.n	80024e8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024be:	f7ff fa77 	bl	80019b0 <HAL_GetTick>
 80024c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024c4:	e00a      	b.n	80024dc <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024c6:	f7ff fa73 	bl	80019b0 <HAL_GetTick>
 80024ca:	4602      	mov	r2, r0
 80024cc:	693b      	ldr	r3, [r7, #16]
 80024ce:	1ad3      	subs	r3, r2, r3
 80024d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80024d4:	4293      	cmp	r3, r2
 80024d6:	d901      	bls.n	80024dc <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80024d8:	2303      	movs	r3, #3
 80024da:	e0b8      	b.n	800264e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024dc:	4b40      	ldr	r3, [pc, #256]	; (80025e0 <HAL_RCC_OscConfig+0x4cc>)
 80024de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024e0:	f003 0302 	and.w	r3, r3, #2
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d1ee      	bne.n	80024c6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80024e8:	7dfb      	ldrb	r3, [r7, #23]
 80024ea:	2b01      	cmp	r3, #1
 80024ec:	d105      	bne.n	80024fa <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024ee:	4b3c      	ldr	r3, [pc, #240]	; (80025e0 <HAL_RCC_OscConfig+0x4cc>)
 80024f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024f2:	4a3b      	ldr	r2, [pc, #236]	; (80025e0 <HAL_RCC_OscConfig+0x4cc>)
 80024f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80024f8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	699b      	ldr	r3, [r3, #24]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	f000 80a4 	beq.w	800264c <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002504:	4b36      	ldr	r3, [pc, #216]	; (80025e0 <HAL_RCC_OscConfig+0x4cc>)
 8002506:	689b      	ldr	r3, [r3, #8]
 8002508:	f003 030c 	and.w	r3, r3, #12
 800250c:	2b08      	cmp	r3, #8
 800250e:	d06b      	beq.n	80025e8 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	699b      	ldr	r3, [r3, #24]
 8002514:	2b02      	cmp	r3, #2
 8002516:	d149      	bne.n	80025ac <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002518:	4b31      	ldr	r3, [pc, #196]	; (80025e0 <HAL_RCC_OscConfig+0x4cc>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	4a30      	ldr	r2, [pc, #192]	; (80025e0 <HAL_RCC_OscConfig+0x4cc>)
 800251e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002522:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002524:	f7ff fa44 	bl	80019b0 <HAL_GetTick>
 8002528:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800252a:	e008      	b.n	800253e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800252c:	f7ff fa40 	bl	80019b0 <HAL_GetTick>
 8002530:	4602      	mov	r2, r0
 8002532:	693b      	ldr	r3, [r7, #16]
 8002534:	1ad3      	subs	r3, r2, r3
 8002536:	2b02      	cmp	r3, #2
 8002538:	d901      	bls.n	800253e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800253a:	2303      	movs	r3, #3
 800253c:	e087      	b.n	800264e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800253e:	4b28      	ldr	r3, [pc, #160]	; (80025e0 <HAL_RCC_OscConfig+0x4cc>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002546:	2b00      	cmp	r3, #0
 8002548:	d1f0      	bne.n	800252c <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	69da      	ldr	r2, [r3, #28]
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6a1b      	ldr	r3, [r3, #32]
 8002552:	431a      	orrs	r2, r3
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002558:	019b      	lsls	r3, r3, #6
 800255a:	431a      	orrs	r2, r3
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002560:	085b      	lsrs	r3, r3, #1
 8002562:	3b01      	subs	r3, #1
 8002564:	041b      	lsls	r3, r3, #16
 8002566:	431a      	orrs	r2, r3
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800256c:	061b      	lsls	r3, r3, #24
 800256e:	4313      	orrs	r3, r2
 8002570:	4a1b      	ldr	r2, [pc, #108]	; (80025e0 <HAL_RCC_OscConfig+0x4cc>)
 8002572:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002576:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002578:	4b19      	ldr	r3, [pc, #100]	; (80025e0 <HAL_RCC_OscConfig+0x4cc>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4a18      	ldr	r2, [pc, #96]	; (80025e0 <HAL_RCC_OscConfig+0x4cc>)
 800257e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002582:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002584:	f7ff fa14 	bl	80019b0 <HAL_GetTick>
 8002588:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800258a:	e008      	b.n	800259e <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800258c:	f7ff fa10 	bl	80019b0 <HAL_GetTick>
 8002590:	4602      	mov	r2, r0
 8002592:	693b      	ldr	r3, [r7, #16]
 8002594:	1ad3      	subs	r3, r2, r3
 8002596:	2b02      	cmp	r3, #2
 8002598:	d901      	bls.n	800259e <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800259a:	2303      	movs	r3, #3
 800259c:	e057      	b.n	800264e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800259e:	4b10      	ldr	r3, [pc, #64]	; (80025e0 <HAL_RCC_OscConfig+0x4cc>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d0f0      	beq.n	800258c <HAL_RCC_OscConfig+0x478>
 80025aa:	e04f      	b.n	800264c <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025ac:	4b0c      	ldr	r3, [pc, #48]	; (80025e0 <HAL_RCC_OscConfig+0x4cc>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4a0b      	ldr	r2, [pc, #44]	; (80025e0 <HAL_RCC_OscConfig+0x4cc>)
 80025b2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80025b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025b8:	f7ff f9fa 	bl	80019b0 <HAL_GetTick>
 80025bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025be:	e008      	b.n	80025d2 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025c0:	f7ff f9f6 	bl	80019b0 <HAL_GetTick>
 80025c4:	4602      	mov	r2, r0
 80025c6:	693b      	ldr	r3, [r7, #16]
 80025c8:	1ad3      	subs	r3, r2, r3
 80025ca:	2b02      	cmp	r3, #2
 80025cc:	d901      	bls.n	80025d2 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80025ce:	2303      	movs	r3, #3
 80025d0:	e03d      	b.n	800264e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025d2:	4b03      	ldr	r3, [pc, #12]	; (80025e0 <HAL_RCC_OscConfig+0x4cc>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d1f0      	bne.n	80025c0 <HAL_RCC_OscConfig+0x4ac>
 80025de:	e035      	b.n	800264c <HAL_RCC_OscConfig+0x538>
 80025e0:	40023800 	.word	0x40023800
 80025e4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80025e8:	4b1b      	ldr	r3, [pc, #108]	; (8002658 <HAL_RCC_OscConfig+0x544>)
 80025ea:	685b      	ldr	r3, [r3, #4]
 80025ec:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	699b      	ldr	r3, [r3, #24]
 80025f2:	2b01      	cmp	r3, #1
 80025f4:	d028      	beq.n	8002648 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002600:	429a      	cmp	r2, r3
 8002602:	d121      	bne.n	8002648 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800260e:	429a      	cmp	r2, r3
 8002610:	d11a      	bne.n	8002648 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002612:	68fa      	ldr	r2, [r7, #12]
 8002614:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002618:	4013      	ands	r3, r2
 800261a:	687a      	ldr	r2, [r7, #4]
 800261c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800261e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002620:	4293      	cmp	r3, r2
 8002622:	d111      	bne.n	8002648 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800262e:	085b      	lsrs	r3, r3, #1
 8002630:	3b01      	subs	r3, #1
 8002632:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002634:	429a      	cmp	r2, r3
 8002636:	d107      	bne.n	8002648 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002642:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002644:	429a      	cmp	r2, r3
 8002646:	d001      	beq.n	800264c <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8002648:	2301      	movs	r3, #1
 800264a:	e000      	b.n	800264e <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 800264c:	2300      	movs	r3, #0
}
 800264e:	4618      	mov	r0, r3
 8002650:	3718      	adds	r7, #24
 8002652:	46bd      	mov	sp, r7
 8002654:	bd80      	pop	{r7, pc}
 8002656:	bf00      	nop
 8002658:	40023800 	.word	0x40023800

0800265c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b084      	sub	sp, #16
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
 8002664:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002666:	2300      	movs	r3, #0
 8002668:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	2b00      	cmp	r3, #0
 800266e:	d101      	bne.n	8002674 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002670:	2301      	movs	r3, #1
 8002672:	e0d0      	b.n	8002816 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002674:	4b6a      	ldr	r3, [pc, #424]	; (8002820 <HAL_RCC_ClockConfig+0x1c4>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f003 030f 	and.w	r3, r3, #15
 800267c:	683a      	ldr	r2, [r7, #0]
 800267e:	429a      	cmp	r2, r3
 8002680:	d910      	bls.n	80026a4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002682:	4b67      	ldr	r3, [pc, #412]	; (8002820 <HAL_RCC_ClockConfig+0x1c4>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f023 020f 	bic.w	r2, r3, #15
 800268a:	4965      	ldr	r1, [pc, #404]	; (8002820 <HAL_RCC_ClockConfig+0x1c4>)
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	4313      	orrs	r3, r2
 8002690:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002692:	4b63      	ldr	r3, [pc, #396]	; (8002820 <HAL_RCC_ClockConfig+0x1c4>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f003 030f 	and.w	r3, r3, #15
 800269a:	683a      	ldr	r2, [r7, #0]
 800269c:	429a      	cmp	r2, r3
 800269e:	d001      	beq.n	80026a4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80026a0:	2301      	movs	r3, #1
 80026a2:	e0b8      	b.n	8002816 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f003 0302 	and.w	r3, r3, #2
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d020      	beq.n	80026f2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f003 0304 	and.w	r3, r3, #4
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d005      	beq.n	80026c8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80026bc:	4b59      	ldr	r3, [pc, #356]	; (8002824 <HAL_RCC_ClockConfig+0x1c8>)
 80026be:	689b      	ldr	r3, [r3, #8]
 80026c0:	4a58      	ldr	r2, [pc, #352]	; (8002824 <HAL_RCC_ClockConfig+0x1c8>)
 80026c2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80026c6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f003 0308 	and.w	r3, r3, #8
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d005      	beq.n	80026e0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80026d4:	4b53      	ldr	r3, [pc, #332]	; (8002824 <HAL_RCC_ClockConfig+0x1c8>)
 80026d6:	689b      	ldr	r3, [r3, #8]
 80026d8:	4a52      	ldr	r2, [pc, #328]	; (8002824 <HAL_RCC_ClockConfig+0x1c8>)
 80026da:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80026de:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026e0:	4b50      	ldr	r3, [pc, #320]	; (8002824 <HAL_RCC_ClockConfig+0x1c8>)
 80026e2:	689b      	ldr	r3, [r3, #8]
 80026e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	689b      	ldr	r3, [r3, #8]
 80026ec:	494d      	ldr	r1, [pc, #308]	; (8002824 <HAL_RCC_ClockConfig+0x1c8>)
 80026ee:	4313      	orrs	r3, r2
 80026f0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f003 0301 	and.w	r3, r3, #1
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d040      	beq.n	8002780 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	685b      	ldr	r3, [r3, #4]
 8002702:	2b01      	cmp	r3, #1
 8002704:	d107      	bne.n	8002716 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002706:	4b47      	ldr	r3, [pc, #284]	; (8002824 <HAL_RCC_ClockConfig+0x1c8>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800270e:	2b00      	cmp	r3, #0
 8002710:	d115      	bne.n	800273e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002712:	2301      	movs	r3, #1
 8002714:	e07f      	b.n	8002816 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	685b      	ldr	r3, [r3, #4]
 800271a:	2b02      	cmp	r3, #2
 800271c:	d107      	bne.n	800272e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800271e:	4b41      	ldr	r3, [pc, #260]	; (8002824 <HAL_RCC_ClockConfig+0x1c8>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002726:	2b00      	cmp	r3, #0
 8002728:	d109      	bne.n	800273e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800272a:	2301      	movs	r3, #1
 800272c:	e073      	b.n	8002816 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800272e:	4b3d      	ldr	r3, [pc, #244]	; (8002824 <HAL_RCC_ClockConfig+0x1c8>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f003 0302 	and.w	r3, r3, #2
 8002736:	2b00      	cmp	r3, #0
 8002738:	d101      	bne.n	800273e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800273a:	2301      	movs	r3, #1
 800273c:	e06b      	b.n	8002816 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800273e:	4b39      	ldr	r3, [pc, #228]	; (8002824 <HAL_RCC_ClockConfig+0x1c8>)
 8002740:	689b      	ldr	r3, [r3, #8]
 8002742:	f023 0203 	bic.w	r2, r3, #3
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	685b      	ldr	r3, [r3, #4]
 800274a:	4936      	ldr	r1, [pc, #216]	; (8002824 <HAL_RCC_ClockConfig+0x1c8>)
 800274c:	4313      	orrs	r3, r2
 800274e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002750:	f7ff f92e 	bl	80019b0 <HAL_GetTick>
 8002754:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002756:	e00a      	b.n	800276e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002758:	f7ff f92a 	bl	80019b0 <HAL_GetTick>
 800275c:	4602      	mov	r2, r0
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	1ad3      	subs	r3, r2, r3
 8002762:	f241 3288 	movw	r2, #5000	; 0x1388
 8002766:	4293      	cmp	r3, r2
 8002768:	d901      	bls.n	800276e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800276a:	2303      	movs	r3, #3
 800276c:	e053      	b.n	8002816 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800276e:	4b2d      	ldr	r3, [pc, #180]	; (8002824 <HAL_RCC_ClockConfig+0x1c8>)
 8002770:	689b      	ldr	r3, [r3, #8]
 8002772:	f003 020c 	and.w	r2, r3, #12
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	009b      	lsls	r3, r3, #2
 800277c:	429a      	cmp	r2, r3
 800277e:	d1eb      	bne.n	8002758 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002780:	4b27      	ldr	r3, [pc, #156]	; (8002820 <HAL_RCC_ClockConfig+0x1c4>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f003 030f 	and.w	r3, r3, #15
 8002788:	683a      	ldr	r2, [r7, #0]
 800278a:	429a      	cmp	r2, r3
 800278c:	d210      	bcs.n	80027b0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800278e:	4b24      	ldr	r3, [pc, #144]	; (8002820 <HAL_RCC_ClockConfig+0x1c4>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f023 020f 	bic.w	r2, r3, #15
 8002796:	4922      	ldr	r1, [pc, #136]	; (8002820 <HAL_RCC_ClockConfig+0x1c4>)
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	4313      	orrs	r3, r2
 800279c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800279e:	4b20      	ldr	r3, [pc, #128]	; (8002820 <HAL_RCC_ClockConfig+0x1c4>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f003 030f 	and.w	r3, r3, #15
 80027a6:	683a      	ldr	r2, [r7, #0]
 80027a8:	429a      	cmp	r2, r3
 80027aa:	d001      	beq.n	80027b0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80027ac:	2301      	movs	r3, #1
 80027ae:	e032      	b.n	8002816 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f003 0304 	and.w	r3, r3, #4
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d008      	beq.n	80027ce <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80027bc:	4b19      	ldr	r3, [pc, #100]	; (8002824 <HAL_RCC_ClockConfig+0x1c8>)
 80027be:	689b      	ldr	r3, [r3, #8]
 80027c0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	68db      	ldr	r3, [r3, #12]
 80027c8:	4916      	ldr	r1, [pc, #88]	; (8002824 <HAL_RCC_ClockConfig+0x1c8>)
 80027ca:	4313      	orrs	r3, r2
 80027cc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f003 0308 	and.w	r3, r3, #8
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d009      	beq.n	80027ee <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80027da:	4b12      	ldr	r3, [pc, #72]	; (8002824 <HAL_RCC_ClockConfig+0x1c8>)
 80027dc:	689b      	ldr	r3, [r3, #8]
 80027de:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	691b      	ldr	r3, [r3, #16]
 80027e6:	00db      	lsls	r3, r3, #3
 80027e8:	490e      	ldr	r1, [pc, #56]	; (8002824 <HAL_RCC_ClockConfig+0x1c8>)
 80027ea:	4313      	orrs	r3, r2
 80027ec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80027ee:	f000 f821 	bl	8002834 <HAL_RCC_GetSysClockFreq>
 80027f2:	4602      	mov	r2, r0
 80027f4:	4b0b      	ldr	r3, [pc, #44]	; (8002824 <HAL_RCC_ClockConfig+0x1c8>)
 80027f6:	689b      	ldr	r3, [r3, #8]
 80027f8:	091b      	lsrs	r3, r3, #4
 80027fa:	f003 030f 	and.w	r3, r3, #15
 80027fe:	490a      	ldr	r1, [pc, #40]	; (8002828 <HAL_RCC_ClockConfig+0x1cc>)
 8002800:	5ccb      	ldrb	r3, [r1, r3]
 8002802:	fa22 f303 	lsr.w	r3, r2, r3
 8002806:	4a09      	ldr	r2, [pc, #36]	; (800282c <HAL_RCC_ClockConfig+0x1d0>)
 8002808:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800280a:	4b09      	ldr	r3, [pc, #36]	; (8002830 <HAL_RCC_ClockConfig+0x1d4>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4618      	mov	r0, r3
 8002810:	f7ff f88a 	bl	8001928 <HAL_InitTick>

  return HAL_OK;
 8002814:	2300      	movs	r3, #0
}
 8002816:	4618      	mov	r0, r3
 8002818:	3710      	adds	r7, #16
 800281a:	46bd      	mov	sp, r7
 800281c:	bd80      	pop	{r7, pc}
 800281e:	bf00      	nop
 8002820:	40023c00 	.word	0x40023c00
 8002824:	40023800 	.word	0x40023800
 8002828:	08009a38 	.word	0x08009a38
 800282c:	20000000 	.word	0x20000000
 8002830:	20000004 	.word	0x20000004

08002834 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002834:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002838:	b094      	sub	sp, #80	; 0x50
 800283a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800283c:	2300      	movs	r3, #0
 800283e:	647b      	str	r3, [r7, #68]	; 0x44
 8002840:	2300      	movs	r3, #0
 8002842:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002844:	2300      	movs	r3, #0
 8002846:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8002848:	2300      	movs	r3, #0
 800284a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800284c:	4b79      	ldr	r3, [pc, #484]	; (8002a34 <HAL_RCC_GetSysClockFreq+0x200>)
 800284e:	689b      	ldr	r3, [r3, #8]
 8002850:	f003 030c 	and.w	r3, r3, #12
 8002854:	2b08      	cmp	r3, #8
 8002856:	d00d      	beq.n	8002874 <HAL_RCC_GetSysClockFreq+0x40>
 8002858:	2b08      	cmp	r3, #8
 800285a:	f200 80e1 	bhi.w	8002a20 <HAL_RCC_GetSysClockFreq+0x1ec>
 800285e:	2b00      	cmp	r3, #0
 8002860:	d002      	beq.n	8002868 <HAL_RCC_GetSysClockFreq+0x34>
 8002862:	2b04      	cmp	r3, #4
 8002864:	d003      	beq.n	800286e <HAL_RCC_GetSysClockFreq+0x3a>
 8002866:	e0db      	b.n	8002a20 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002868:	4b73      	ldr	r3, [pc, #460]	; (8002a38 <HAL_RCC_GetSysClockFreq+0x204>)
 800286a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800286c:	e0db      	b.n	8002a26 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800286e:	4b73      	ldr	r3, [pc, #460]	; (8002a3c <HAL_RCC_GetSysClockFreq+0x208>)
 8002870:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002872:	e0d8      	b.n	8002a26 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002874:	4b6f      	ldr	r3, [pc, #444]	; (8002a34 <HAL_RCC_GetSysClockFreq+0x200>)
 8002876:	685b      	ldr	r3, [r3, #4]
 8002878:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800287c:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800287e:	4b6d      	ldr	r3, [pc, #436]	; (8002a34 <HAL_RCC_GetSysClockFreq+0x200>)
 8002880:	685b      	ldr	r3, [r3, #4]
 8002882:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002886:	2b00      	cmp	r3, #0
 8002888:	d063      	beq.n	8002952 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800288a:	4b6a      	ldr	r3, [pc, #424]	; (8002a34 <HAL_RCC_GetSysClockFreq+0x200>)
 800288c:	685b      	ldr	r3, [r3, #4]
 800288e:	099b      	lsrs	r3, r3, #6
 8002890:	2200      	movs	r2, #0
 8002892:	63bb      	str	r3, [r7, #56]	; 0x38
 8002894:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002896:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002898:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800289c:	633b      	str	r3, [r7, #48]	; 0x30
 800289e:	2300      	movs	r3, #0
 80028a0:	637b      	str	r3, [r7, #52]	; 0x34
 80028a2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80028a6:	4622      	mov	r2, r4
 80028a8:	462b      	mov	r3, r5
 80028aa:	f04f 0000 	mov.w	r0, #0
 80028ae:	f04f 0100 	mov.w	r1, #0
 80028b2:	0159      	lsls	r1, r3, #5
 80028b4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80028b8:	0150      	lsls	r0, r2, #5
 80028ba:	4602      	mov	r2, r0
 80028bc:	460b      	mov	r3, r1
 80028be:	4621      	mov	r1, r4
 80028c0:	1a51      	subs	r1, r2, r1
 80028c2:	6139      	str	r1, [r7, #16]
 80028c4:	4629      	mov	r1, r5
 80028c6:	eb63 0301 	sbc.w	r3, r3, r1
 80028ca:	617b      	str	r3, [r7, #20]
 80028cc:	f04f 0200 	mov.w	r2, #0
 80028d0:	f04f 0300 	mov.w	r3, #0
 80028d4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80028d8:	4659      	mov	r1, fp
 80028da:	018b      	lsls	r3, r1, #6
 80028dc:	4651      	mov	r1, sl
 80028de:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80028e2:	4651      	mov	r1, sl
 80028e4:	018a      	lsls	r2, r1, #6
 80028e6:	4651      	mov	r1, sl
 80028e8:	ebb2 0801 	subs.w	r8, r2, r1
 80028ec:	4659      	mov	r1, fp
 80028ee:	eb63 0901 	sbc.w	r9, r3, r1
 80028f2:	f04f 0200 	mov.w	r2, #0
 80028f6:	f04f 0300 	mov.w	r3, #0
 80028fa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80028fe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002902:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002906:	4690      	mov	r8, r2
 8002908:	4699      	mov	r9, r3
 800290a:	4623      	mov	r3, r4
 800290c:	eb18 0303 	adds.w	r3, r8, r3
 8002910:	60bb      	str	r3, [r7, #8]
 8002912:	462b      	mov	r3, r5
 8002914:	eb49 0303 	adc.w	r3, r9, r3
 8002918:	60fb      	str	r3, [r7, #12]
 800291a:	f04f 0200 	mov.w	r2, #0
 800291e:	f04f 0300 	mov.w	r3, #0
 8002922:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002926:	4629      	mov	r1, r5
 8002928:	024b      	lsls	r3, r1, #9
 800292a:	4621      	mov	r1, r4
 800292c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002930:	4621      	mov	r1, r4
 8002932:	024a      	lsls	r2, r1, #9
 8002934:	4610      	mov	r0, r2
 8002936:	4619      	mov	r1, r3
 8002938:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800293a:	2200      	movs	r2, #0
 800293c:	62bb      	str	r3, [r7, #40]	; 0x28
 800293e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002940:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002944:	f7fe f958 	bl	8000bf8 <__aeabi_uldivmod>
 8002948:	4602      	mov	r2, r0
 800294a:	460b      	mov	r3, r1
 800294c:	4613      	mov	r3, r2
 800294e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002950:	e058      	b.n	8002a04 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002952:	4b38      	ldr	r3, [pc, #224]	; (8002a34 <HAL_RCC_GetSysClockFreq+0x200>)
 8002954:	685b      	ldr	r3, [r3, #4]
 8002956:	099b      	lsrs	r3, r3, #6
 8002958:	2200      	movs	r2, #0
 800295a:	4618      	mov	r0, r3
 800295c:	4611      	mov	r1, r2
 800295e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002962:	623b      	str	r3, [r7, #32]
 8002964:	2300      	movs	r3, #0
 8002966:	627b      	str	r3, [r7, #36]	; 0x24
 8002968:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800296c:	4642      	mov	r2, r8
 800296e:	464b      	mov	r3, r9
 8002970:	f04f 0000 	mov.w	r0, #0
 8002974:	f04f 0100 	mov.w	r1, #0
 8002978:	0159      	lsls	r1, r3, #5
 800297a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800297e:	0150      	lsls	r0, r2, #5
 8002980:	4602      	mov	r2, r0
 8002982:	460b      	mov	r3, r1
 8002984:	4641      	mov	r1, r8
 8002986:	ebb2 0a01 	subs.w	sl, r2, r1
 800298a:	4649      	mov	r1, r9
 800298c:	eb63 0b01 	sbc.w	fp, r3, r1
 8002990:	f04f 0200 	mov.w	r2, #0
 8002994:	f04f 0300 	mov.w	r3, #0
 8002998:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800299c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80029a0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80029a4:	ebb2 040a 	subs.w	r4, r2, sl
 80029a8:	eb63 050b 	sbc.w	r5, r3, fp
 80029ac:	f04f 0200 	mov.w	r2, #0
 80029b0:	f04f 0300 	mov.w	r3, #0
 80029b4:	00eb      	lsls	r3, r5, #3
 80029b6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80029ba:	00e2      	lsls	r2, r4, #3
 80029bc:	4614      	mov	r4, r2
 80029be:	461d      	mov	r5, r3
 80029c0:	4643      	mov	r3, r8
 80029c2:	18e3      	adds	r3, r4, r3
 80029c4:	603b      	str	r3, [r7, #0]
 80029c6:	464b      	mov	r3, r9
 80029c8:	eb45 0303 	adc.w	r3, r5, r3
 80029cc:	607b      	str	r3, [r7, #4]
 80029ce:	f04f 0200 	mov.w	r2, #0
 80029d2:	f04f 0300 	mov.w	r3, #0
 80029d6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80029da:	4629      	mov	r1, r5
 80029dc:	028b      	lsls	r3, r1, #10
 80029de:	4621      	mov	r1, r4
 80029e0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80029e4:	4621      	mov	r1, r4
 80029e6:	028a      	lsls	r2, r1, #10
 80029e8:	4610      	mov	r0, r2
 80029ea:	4619      	mov	r1, r3
 80029ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80029ee:	2200      	movs	r2, #0
 80029f0:	61bb      	str	r3, [r7, #24]
 80029f2:	61fa      	str	r2, [r7, #28]
 80029f4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80029f8:	f7fe f8fe 	bl	8000bf8 <__aeabi_uldivmod>
 80029fc:	4602      	mov	r2, r0
 80029fe:	460b      	mov	r3, r1
 8002a00:	4613      	mov	r3, r2
 8002a02:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002a04:	4b0b      	ldr	r3, [pc, #44]	; (8002a34 <HAL_RCC_GetSysClockFreq+0x200>)
 8002a06:	685b      	ldr	r3, [r3, #4]
 8002a08:	0c1b      	lsrs	r3, r3, #16
 8002a0a:	f003 0303 	and.w	r3, r3, #3
 8002a0e:	3301      	adds	r3, #1
 8002a10:	005b      	lsls	r3, r3, #1
 8002a12:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8002a14:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002a16:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a18:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a1c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002a1e:	e002      	b.n	8002a26 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002a20:	4b05      	ldr	r3, [pc, #20]	; (8002a38 <HAL_RCC_GetSysClockFreq+0x204>)
 8002a22:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002a24:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a26:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002a28:	4618      	mov	r0, r3
 8002a2a:	3750      	adds	r7, #80	; 0x50
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002a32:	bf00      	nop
 8002a34:	40023800 	.word	0x40023800
 8002a38:	00f42400 	.word	0x00f42400
 8002a3c:	007a1200 	.word	0x007a1200

08002a40 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a40:	b480      	push	{r7}
 8002a42:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a44:	4b03      	ldr	r3, [pc, #12]	; (8002a54 <HAL_RCC_GetHCLKFreq+0x14>)
 8002a46:	681b      	ldr	r3, [r3, #0]
}
 8002a48:	4618      	mov	r0, r3
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a50:	4770      	bx	lr
 8002a52:	bf00      	nop
 8002a54:	20000000 	.word	0x20000000

08002a58 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002a5c:	f7ff fff0 	bl	8002a40 <HAL_RCC_GetHCLKFreq>
 8002a60:	4602      	mov	r2, r0
 8002a62:	4b05      	ldr	r3, [pc, #20]	; (8002a78 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002a64:	689b      	ldr	r3, [r3, #8]
 8002a66:	0a9b      	lsrs	r3, r3, #10
 8002a68:	f003 0307 	and.w	r3, r3, #7
 8002a6c:	4903      	ldr	r1, [pc, #12]	; (8002a7c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002a6e:	5ccb      	ldrb	r3, [r1, r3]
 8002a70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a74:	4618      	mov	r0, r3
 8002a76:	bd80      	pop	{r7, pc}
 8002a78:	40023800 	.word	0x40023800
 8002a7c:	08009a48 	.word	0x08009a48

08002a80 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002a84:	f7ff ffdc 	bl	8002a40 <HAL_RCC_GetHCLKFreq>
 8002a88:	4602      	mov	r2, r0
 8002a8a:	4b05      	ldr	r3, [pc, #20]	; (8002aa0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002a8c:	689b      	ldr	r3, [r3, #8]
 8002a8e:	0b5b      	lsrs	r3, r3, #13
 8002a90:	f003 0307 	and.w	r3, r3, #7
 8002a94:	4903      	ldr	r1, [pc, #12]	; (8002aa4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002a96:	5ccb      	ldrb	r3, [r1, r3]
 8002a98:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	bd80      	pop	{r7, pc}
 8002aa0:	40023800 	.word	0x40023800
 8002aa4:	08009a48 	.word	0x08009a48

08002aa8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b088      	sub	sp, #32
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	613b      	str	r3, [r7, #16]
  uint32_t plli2sused = 0;
 8002ab8:	2300      	movs	r3, #0
 8002aba:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002abc:	2300      	movs	r3, #0
 8002abe:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f003 0301 	and.w	r3, r3, #1
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d012      	beq.n	8002af2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002acc:	4b65      	ldr	r3, [pc, #404]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002ace:	689b      	ldr	r3, [r3, #8]
 8002ad0:	4a64      	ldr	r2, [pc, #400]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002ad2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002ad6:	6093      	str	r3, [r2, #8]
 8002ad8:	4b62      	ldr	r3, [pc, #392]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002ada:	689a      	ldr	r2, [r3, #8]
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ae0:	4960      	ldr	r1, [pc, #384]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002ae2:	4313      	orrs	r3, r2
 8002ae4:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d101      	bne.n	8002af2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      plli2sused = 1;
 8002aee:	2301      	movs	r3, #1
 8002af0:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d017      	beq.n	8002b2e <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002afe:	4b59      	ldr	r3, [pc, #356]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002b00:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002b04:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b0c:	4955      	ldr	r1, [pc, #340]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002b0e:	4313      	orrs	r3, r2
 8002b10:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b18:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002b1c:	d101      	bne.n	8002b22 <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
      plli2sused = 1;
 8002b1e:	2301      	movs	r3, #1
 8002b20:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d101      	bne.n	8002b2e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      pllsaiused = 1;
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d017      	beq.n	8002b6a <HAL_RCCEx_PeriphCLKConfig+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002b3a:	4b4a      	ldr	r3, [pc, #296]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002b3c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002b40:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b48:	4946      	ldr	r1, [pc, #280]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002b4a:	4313      	orrs	r3, r2
 8002b4c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b54:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002b58:	d101      	bne.n	8002b5e <HAL_RCCEx_PeriphCLKConfig+0xb6>
    {
      plli2sused = 1;
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d101      	bne.n	8002b6a <HAL_RCCEx_PeriphCLKConfig+0xc2>
    {
      pllsaiused = 1;
 8002b66:	2301      	movs	r3, #1
 8002b68:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f003 0320 	and.w	r3, r3, #32
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	f000 808b 	beq.w	8002c8e <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002b78:	4b3a      	ldr	r3, [pc, #232]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002b7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b7c:	4a39      	ldr	r2, [pc, #228]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002b7e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b82:	6413      	str	r3, [r2, #64]	; 0x40
 8002b84:	4b37      	ldr	r3, [pc, #220]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002b86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b8c:	60fb      	str	r3, [r7, #12]
 8002b8e:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002b90:	4b35      	ldr	r3, [pc, #212]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	4a34      	ldr	r2, [pc, #208]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002b96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b9a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b9c:	f7fe ff08 	bl	80019b0 <HAL_GetTick>
 8002ba0:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002ba2:	e008      	b.n	8002bb6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ba4:	f7fe ff04 	bl	80019b0 <HAL_GetTick>
 8002ba8:	4602      	mov	r2, r0
 8002baa:	697b      	ldr	r3, [r7, #20]
 8002bac:	1ad3      	subs	r3, r2, r3
 8002bae:	2b64      	cmp	r3, #100	; 0x64
 8002bb0:	d901      	bls.n	8002bb6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002bb2:	2303      	movs	r3, #3
 8002bb4:	e2bc      	b.n	8003130 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002bb6:	4b2c      	ldr	r3, [pc, #176]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d0f0      	beq.n	8002ba4 <HAL_RCCEx_PeriphCLKConfig+0xfc>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002bc2:	4b28      	ldr	r3, [pc, #160]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002bc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bc6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002bca:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002bcc:	693b      	ldr	r3, [r7, #16]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d035      	beq.n	8002c3e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bd6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002bda:	693a      	ldr	r2, [r7, #16]
 8002bdc:	429a      	cmp	r2, r3
 8002bde:	d02e      	beq.n	8002c3e <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002be0:	4b20      	ldr	r3, [pc, #128]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002be2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002be4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002be8:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002bea:	4b1e      	ldr	r3, [pc, #120]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002bec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bee:	4a1d      	ldr	r2, [pc, #116]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002bf0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bf4:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002bf6:	4b1b      	ldr	r3, [pc, #108]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002bf8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bfa:	4a1a      	ldr	r2, [pc, #104]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002bfc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c00:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002c02:	4a18      	ldr	r2, [pc, #96]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002c04:	693b      	ldr	r3, [r7, #16]
 8002c06:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002c08:	4b16      	ldr	r3, [pc, #88]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002c0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c0c:	f003 0301 	and.w	r3, r3, #1
 8002c10:	2b01      	cmp	r3, #1
 8002c12:	d114      	bne.n	8002c3e <HAL_RCCEx_PeriphCLKConfig+0x196>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c14:	f7fe fecc 	bl	80019b0 <HAL_GetTick>
 8002c18:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c1a:	e00a      	b.n	8002c32 <HAL_RCCEx_PeriphCLKConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c1c:	f7fe fec8 	bl	80019b0 <HAL_GetTick>
 8002c20:	4602      	mov	r2, r0
 8002c22:	697b      	ldr	r3, [r7, #20]
 8002c24:	1ad3      	subs	r3, r2, r3
 8002c26:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d901      	bls.n	8002c32 <HAL_RCCEx_PeriphCLKConfig+0x18a>
          {
            return HAL_TIMEOUT;
 8002c2e:	2303      	movs	r3, #3
 8002c30:	e27e      	b.n	8003130 <HAL_RCCEx_PeriphCLKConfig+0x688>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c32:	4b0c      	ldr	r3, [pc, #48]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002c34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c36:	f003 0302 	and.w	r3, r3, #2
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d0ee      	beq.n	8002c1c <HAL_RCCEx_PeriphCLKConfig+0x174>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c46:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002c4a:	d111      	bne.n	8002c70 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
 8002c4c:	4b05      	ldr	r3, [pc, #20]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002c4e:	689b      	ldr	r3, [r3, #8]
 8002c50:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8002c58:	4b04      	ldr	r3, [pc, #16]	; (8002c6c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002c5a:	400b      	ands	r3, r1
 8002c5c:	4901      	ldr	r1, [pc, #4]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002c5e:	4313      	orrs	r3, r2
 8002c60:	608b      	str	r3, [r1, #8]
 8002c62:	e00b      	b.n	8002c7c <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8002c64:	40023800 	.word	0x40023800
 8002c68:	40007000 	.word	0x40007000
 8002c6c:	0ffffcff 	.word	0x0ffffcff
 8002c70:	4ba4      	ldr	r3, [pc, #656]	; (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002c72:	689b      	ldr	r3, [r3, #8]
 8002c74:	4aa3      	ldr	r2, [pc, #652]	; (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002c76:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002c7a:	6093      	str	r3, [r2, #8]
 8002c7c:	4ba1      	ldr	r3, [pc, #644]	; (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002c7e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c84:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c88:	499e      	ldr	r1, [pc, #632]	; (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002c8a:	4313      	orrs	r3, r2
 8002c8c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f003 0310 	and.w	r3, r3, #16
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d010      	beq.n	8002cbc <HAL_RCCEx_PeriphCLKConfig+0x214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002c9a:	4b9a      	ldr	r3, [pc, #616]	; (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002c9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002ca0:	4a98      	ldr	r2, [pc, #608]	; (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002ca2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002ca6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002caa:	4b96      	ldr	r3, [pc, #600]	; (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002cac:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cb4:	4993      	ldr	r1, [pc, #588]	; (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002cb6:	4313      	orrs	r3, r2
 8002cb8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d00a      	beq.n	8002cde <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002cc8:	4b8e      	ldr	r3, [pc, #568]	; (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002cca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cce:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cd6:	498b      	ldr	r1, [pc, #556]	; (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002cd8:	4313      	orrs	r3, r2
 8002cda:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d00a      	beq.n	8002d00 <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002cea:	4b86      	ldr	r3, [pc, #536]	; (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002cec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cf0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002cf8:	4982      	ldr	r1, [pc, #520]	; (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002cfa:	4313      	orrs	r3, r2
 8002cfc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d00a      	beq.n	8002d22 <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002d0c:	4b7d      	ldr	r3, [pc, #500]	; (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002d0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d12:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002d1a:	497a      	ldr	r1, [pc, #488]	; (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002d1c:	4313      	orrs	r3, r2
 8002d1e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d00a      	beq.n	8002d44 <HAL_RCCEx_PeriphCLKConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002d2e:	4b75      	ldr	r3, [pc, #468]	; (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002d30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d34:	f023 0203 	bic.w	r2, r3, #3
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d3c:	4971      	ldr	r1, [pc, #452]	; (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002d3e:	4313      	orrs	r3, r2
 8002d40:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d00a      	beq.n	8002d66 <HAL_RCCEx_PeriphCLKConfig+0x2be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002d50:	4b6c      	ldr	r3, [pc, #432]	; (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002d52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d56:	f023 020c 	bic.w	r2, r3, #12
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d5e:	4969      	ldr	r1, [pc, #420]	; (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002d60:	4313      	orrs	r3, r2
 8002d62:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d00a      	beq.n	8002d88 <HAL_RCCEx_PeriphCLKConfig+0x2e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002d72:	4b64      	ldr	r3, [pc, #400]	; (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002d74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d78:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d80:	4960      	ldr	r1, [pc, #384]	; (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002d82:	4313      	orrs	r3, r2
 8002d84:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d00a      	beq.n	8002daa <HAL_RCCEx_PeriphCLKConfig+0x302>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002d94:	4b5b      	ldr	r3, [pc, #364]	; (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002d96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d9a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002da2:	4958      	ldr	r1, [pc, #352]	; (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002da4:	4313      	orrs	r3, r2
 8002da6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d00a      	beq.n	8002dcc <HAL_RCCEx_PeriphCLKConfig+0x324>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002db6:	4b53      	ldr	r3, [pc, #332]	; (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002db8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dbc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002dc4:	494f      	ldr	r1, [pc, #316]	; (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002dc6:	4313      	orrs	r3, r2
 8002dc8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d00a      	beq.n	8002dee <HAL_RCCEx_PeriphCLKConfig+0x346>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002dd8:	4b4a      	ldr	r3, [pc, #296]	; (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002dda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dde:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002de6:	4947      	ldr	r1, [pc, #284]	; (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002de8:	4313      	orrs	r3, r2
 8002dea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d00a      	beq.n	8002e10 <HAL_RCCEx_PeriphCLKConfig+0x368>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002dfa:	4b42      	ldr	r3, [pc, #264]	; (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002dfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e00:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e08:	493e      	ldr	r1, [pc, #248]	; (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002e0a:	4313      	orrs	r3, r2
 8002e0c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d00a      	beq.n	8002e32 <HAL_RCCEx_PeriphCLKConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002e1c:	4b39      	ldr	r3, [pc, #228]	; (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002e1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e22:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e2a:	4936      	ldr	r1, [pc, #216]	; (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002e2c:	4313      	orrs	r3, r2
 8002e2e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d011      	beq.n	8002e62 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002e3e:	4b31      	ldr	r3, [pc, #196]	; (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002e40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e44:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e4c:	492d      	ldr	r1, [pc, #180]	; (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002e4e:	4313      	orrs	r3, r2
 8002e50:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e58:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002e5c:	d101      	bne.n	8002e62 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      pllsaiused = 1;
 8002e5e:	2301      	movs	r3, #1
 8002e60:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d00a      	beq.n	8002e84 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002e6e:	4b25      	ldr	r3, [pc, #148]	; (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002e70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e74:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002e7c:	4921      	ldr	r1, [pc, #132]	; (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002e7e:	4313      	orrs	r3, r2
 8002e80:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d00a      	beq.n	8002ea6 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002e90:	4b1c      	ldr	r3, [pc, #112]	; (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002e92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e96:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002e9e:	4919      	ldr	r1, [pc, #100]	; (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002ea0:	4313      	orrs	r3, r2
 8002ea2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d00a      	beq.n	8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8002eb2:	4b14      	ldr	r3, [pc, #80]	; (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002eb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002eb8:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002ec0:	4910      	ldr	r1, [pc, #64]	; (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002ec2:	4313      	orrs	r3, r2
 8002ec4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2 or I2S */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002ec8:	69fb      	ldr	r3, [r7, #28]
 8002eca:	2b01      	cmp	r3, #1
 8002ecc:	d006      	beq.n	8002edc <HAL_RCCEx_PeriphCLKConfig+0x434>
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	f000 809d 	beq.w	8003016 <HAL_RCCEx_PeriphCLKConfig+0x56e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002edc:	4b09      	ldr	r3, [pc, #36]	; (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	4a08      	ldr	r2, [pc, #32]	; (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002ee2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002ee6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ee8:	f7fe fd62 	bl	80019b0 <HAL_GetTick>
 8002eec:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002eee:	e00b      	b.n	8002f08 <HAL_RCCEx_PeriphCLKConfig+0x460>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002ef0:	f7fe fd5e 	bl	80019b0 <HAL_GetTick>
 8002ef4:	4602      	mov	r2, r0
 8002ef6:	697b      	ldr	r3, [r7, #20]
 8002ef8:	1ad3      	subs	r3, r2, r3
 8002efa:	2b64      	cmp	r3, #100	; 0x64
 8002efc:	d904      	bls.n	8002f08 <HAL_RCCEx_PeriphCLKConfig+0x460>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002efe:	2303      	movs	r3, #3
 8002f00:	e116      	b.n	8003130 <HAL_RCCEx_PeriphCLKConfig+0x688>
 8002f02:	bf00      	nop
 8002f04:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002f08:	4b8b      	ldr	r3, [pc, #556]	; (8003138 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d1ed      	bne.n	8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x448>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f003 0301 	and.w	r3, r3, #1
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d017      	beq.n	8002f50 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d113      	bne.n	8002f50 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002f28:	4b83      	ldr	r3, [pc, #524]	; (8003138 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002f2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f2e:	0e1b      	lsrs	r3, r3, #24
 8002f30:	f003 030f 	and.w	r3, r3, #15
 8002f34:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, PeriphClkInit->PLLI2S.PLLI2SR);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	685b      	ldr	r3, [r3, #4]
 8002f3a:	019a      	lsls	r2, r3, #6
 8002f3c:	693b      	ldr	r3, [r7, #16]
 8002f3e:	061b      	lsls	r3, r3, #24
 8002f40:	431a      	orrs	r2, r3
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	689b      	ldr	r3, [r3, #8]
 8002f46:	071b      	lsls	r3, r3, #28
 8002f48:	497b      	ldr	r1, [pc, #492]	; (8003138 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002f4a:	4313      	orrs	r3, r2
 8002f4c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d004      	beq.n	8002f66 <HAL_RCCEx_PeriphCLKConfig+0x4be>
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f60:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002f64:	d00a      	beq.n	8002f7c <HAL_RCCEx_PeriphCLKConfig+0x4d4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d024      	beq.n	8002fbc <HAL_RCCEx_PeriphCLKConfig+0x514>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f76:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002f7a:	d11f      	bne.n	8002fbc <HAL_RCCEx_PeriphCLKConfig+0x514>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002f7c:	4b6e      	ldr	r3, [pc, #440]	; (8003138 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002f7e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f82:	0f1b      	lsrs	r3, r3, #28
 8002f84:	f003 0307 	and.w	r3, r3, #7
 8002f88:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg0);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	685b      	ldr	r3, [r3, #4]
 8002f8e:	019a      	lsls	r2, r3, #6
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	68db      	ldr	r3, [r3, #12]
 8002f94:	061b      	lsls	r3, r3, #24
 8002f96:	431a      	orrs	r2, r3
 8002f98:	693b      	ldr	r3, [r7, #16]
 8002f9a:	071b      	lsls	r3, r3, #28
 8002f9c:	4966      	ldr	r1, [pc, #408]	; (8003138 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002f9e:	4313      	orrs	r3, r2
 8002fa0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002fa4:	4b64      	ldr	r3, [pc, #400]	; (8003138 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002fa6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002faa:	f023 021f 	bic.w	r2, r3, #31
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	69db      	ldr	r3, [r3, #28]
 8002fb2:	3b01      	subs	r3, #1
 8002fb4:	4960      	ldr	r1, [pc, #384]	; (8003138 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002fb6:	4313      	orrs	r3, r2
 8002fb8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d00d      	beq.n	8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x53c>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	685b      	ldr	r3, [r3, #4]
 8002fcc:	019a      	lsls	r2, r3, #6
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	68db      	ldr	r3, [r3, #12]
 8002fd2:	061b      	lsls	r3, r3, #24
 8002fd4:	431a      	orrs	r2, r3
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	689b      	ldr	r3, [r3, #8]
 8002fda:	071b      	lsls	r3, r3, #28
 8002fdc:	4956      	ldr	r1, [pc, #344]	; (8003138 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002fde:	4313      	orrs	r3, r2
 8002fe0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002fe4:	4b54      	ldr	r3, [pc, #336]	; (8003138 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	4a53      	ldr	r2, [pc, #332]	; (8003138 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002fea:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002fee:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ff0:	f7fe fcde 	bl	80019b0 <HAL_GetTick>
 8002ff4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002ff6:	e008      	b.n	800300a <HAL_RCCEx_PeriphCLKConfig+0x562>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002ff8:	f7fe fcda 	bl	80019b0 <HAL_GetTick>
 8002ffc:	4602      	mov	r2, r0
 8002ffe:	697b      	ldr	r3, [r7, #20]
 8003000:	1ad3      	subs	r3, r2, r3
 8003002:	2b64      	cmp	r3, #100	; 0x64
 8003004:	d901      	bls.n	800300a <HAL_RCCEx_PeriphCLKConfig+0x562>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003006:	2303      	movs	r3, #3
 8003008:	e092      	b.n	8003130 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800300a:	4b4b      	ldr	r3, [pc, #300]	; (8003138 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003012:	2b00      	cmp	r3, #0
 8003014:	d0f0      	beq.n	8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x550>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003016:	69bb      	ldr	r3, [r7, #24]
 8003018:	2b01      	cmp	r3, #1
 800301a:	f040 8088 	bne.w	800312e <HAL_RCCEx_PeriphCLKConfig+0x686>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800301e:	4b46      	ldr	r3, [pc, #280]	; (8003138 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	4a45      	ldr	r2, [pc, #276]	; (8003138 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8003024:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003028:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800302a:	f7fe fcc1 	bl	80019b0 <HAL_GetTick>
 800302e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003030:	e008      	b.n	8003044 <HAL_RCCEx_PeriphCLKConfig+0x59c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003032:	f7fe fcbd 	bl	80019b0 <HAL_GetTick>
 8003036:	4602      	mov	r2, r0
 8003038:	697b      	ldr	r3, [r7, #20]
 800303a:	1ad3      	subs	r3, r2, r3
 800303c:	2b64      	cmp	r3, #100	; 0x64
 800303e:	d901      	bls.n	8003044 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003040:	2303      	movs	r3, #3
 8003042:	e075      	b.n	8003130 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003044:	4b3c      	ldr	r3, [pc, #240]	; (8003138 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800304c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003050:	d0ef      	beq.n	8003032 <HAL_RCCEx_PeriphCLKConfig+0x58a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800305a:	2b00      	cmp	r3, #0
 800305c:	d003      	beq.n	8003066 <HAL_RCCEx_PeriphCLKConfig+0x5be>
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003062:	2b00      	cmp	r3, #0
 8003064:	d009      	beq.n	800307a <HAL_RCCEx_PeriphCLKConfig+0x5d2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800306e:	2b00      	cmp	r3, #0
 8003070:	d024      	beq.n	80030bc <HAL_RCCEx_PeriphCLKConfig+0x614>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003076:	2b00      	cmp	r3, #0
 8003078:	d120      	bne.n	80030bc <HAL_RCCEx_PeriphCLKConfig+0x614>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800307a:	4b2f      	ldr	r3, [pc, #188]	; (8003138 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800307c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003080:	0c1b      	lsrs	r3, r3, #16
 8003082:	f003 0303 	and.w	r3, r3, #3
 8003086:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	691b      	ldr	r3, [r3, #16]
 800308c:	019a      	lsls	r2, r3, #6
 800308e:	693b      	ldr	r3, [r7, #16]
 8003090:	041b      	lsls	r3, r3, #16
 8003092:	431a      	orrs	r2, r3
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	695b      	ldr	r3, [r3, #20]
 8003098:	061b      	lsls	r3, r3, #24
 800309a:	4927      	ldr	r1, [pc, #156]	; (8003138 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800309c:	4313      	orrs	r3, r2
 800309e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80030a2:	4b25      	ldr	r3, [pc, #148]	; (8003138 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80030a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80030a8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6a1b      	ldr	r3, [r3, #32]
 80030b0:	3b01      	subs	r3, #1
 80030b2:	021b      	lsls	r3, r3, #8
 80030b4:	4920      	ldr	r1, [pc, #128]	; (8003138 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80030b6:	4313      	orrs	r3, r2
 80030b8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d018      	beq.n	80030fa <HAL_RCCEx_PeriphCLKConfig+0x652>
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030cc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80030d0:	d113      	bne.n	80030fa <HAL_RCCEx_PeriphCLKConfig+0x652>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80030d2:	4b19      	ldr	r3, [pc, #100]	; (8003138 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80030d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030d8:	0e1b      	lsrs	r3, r3, #24
 80030da:	f003 030f 	and.w	r3, r3, #15
 80030de:	613b      	str	r3, [r7, #16]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	691b      	ldr	r3, [r3, #16]
 80030e4:	019a      	lsls	r2, r3, #6
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	699b      	ldr	r3, [r3, #24]
 80030ea:	041b      	lsls	r3, r3, #16
 80030ec:	431a      	orrs	r2, r3
 80030ee:	693b      	ldr	r3, [r7, #16]
 80030f0:	061b      	lsls	r3, r3, #24
 80030f2:	4911      	ldr	r1, [pc, #68]	; (8003138 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80030f4:	4313      	orrs	r3, r2
 80030f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80030fa:	4b0f      	ldr	r3, [pc, #60]	; (8003138 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	4a0e      	ldr	r2, [pc, #56]	; (8003138 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8003100:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003104:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003106:	f7fe fc53 	bl	80019b0 <HAL_GetTick>
 800310a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800310c:	e008      	b.n	8003120 <HAL_RCCEx_PeriphCLKConfig+0x678>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800310e:	f7fe fc4f 	bl	80019b0 <HAL_GetTick>
 8003112:	4602      	mov	r2, r0
 8003114:	697b      	ldr	r3, [r7, #20]
 8003116:	1ad3      	subs	r3, r2, r3
 8003118:	2b64      	cmp	r3, #100	; 0x64
 800311a:	d901      	bls.n	8003120 <HAL_RCCEx_PeriphCLKConfig+0x678>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800311c:	2303      	movs	r3, #3
 800311e:	e007      	b.n	8003130 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003120:	4b05      	ldr	r3, [pc, #20]	; (8003138 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003128:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800312c:	d1ef      	bne.n	800310e <HAL_RCCEx_PeriphCLKConfig+0x666>
      }
    }
  }
  return HAL_OK;
 800312e:	2300      	movs	r3, #0
}
 8003130:	4618      	mov	r0, r3
 8003132:	3720      	adds	r7, #32
 8003134:	46bd      	mov	sp, r7
 8003136:	bd80      	pop	{r7, pc}
 8003138:	40023800 	.word	0x40023800

0800313c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b082      	sub	sp, #8
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2b00      	cmp	r3, #0
 8003148:	d101      	bne.n	800314e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800314a:	2301      	movs	r3, #1
 800314c:	e049      	b.n	80031e2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003154:	b2db      	uxtb	r3, r3
 8003156:	2b00      	cmp	r3, #0
 8003158:	d106      	bne.n	8003168 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	2200      	movs	r2, #0
 800315e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003162:	6878      	ldr	r0, [r7, #4]
 8003164:	f7fe f88e 	bl	8001284 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2202      	movs	r2, #2
 800316c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681a      	ldr	r2, [r3, #0]
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	3304      	adds	r3, #4
 8003178:	4619      	mov	r1, r3
 800317a:	4610      	mov	r0, r2
 800317c:	f000 f8a6 	bl	80032cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2201      	movs	r2, #1
 8003184:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2201      	movs	r2, #1
 800318c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2201      	movs	r2, #1
 8003194:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2201      	movs	r2, #1
 800319c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2201      	movs	r2, #1
 80031a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2201      	movs	r2, #1
 80031ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2201      	movs	r2, #1
 80031b4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2201      	movs	r2, #1
 80031bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2201      	movs	r2, #1
 80031c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2201      	movs	r2, #1
 80031cc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2201      	movs	r2, #1
 80031d4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2201      	movs	r2, #1
 80031dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80031e0:	2300      	movs	r3, #0
}
 80031e2:	4618      	mov	r0, r3
 80031e4:	3708      	adds	r7, #8
 80031e6:	46bd      	mov	sp, r7
 80031e8:	bd80      	pop	{r7, pc}
	...

080031ec <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80031ec:	b480      	push	{r7}
 80031ee:	b085      	sub	sp, #20
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031fa:	b2db      	uxtb	r3, r3
 80031fc:	2b01      	cmp	r3, #1
 80031fe:	d001      	beq.n	8003204 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003200:	2301      	movs	r3, #1
 8003202:	e04c      	b.n	800329e <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2202      	movs	r2, #2
 8003208:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	4a26      	ldr	r2, [pc, #152]	; (80032ac <HAL_TIM_Base_Start+0xc0>)
 8003212:	4293      	cmp	r3, r2
 8003214:	d022      	beq.n	800325c <HAL_TIM_Base_Start+0x70>
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800321e:	d01d      	beq.n	800325c <HAL_TIM_Base_Start+0x70>
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	4a22      	ldr	r2, [pc, #136]	; (80032b0 <HAL_TIM_Base_Start+0xc4>)
 8003226:	4293      	cmp	r3, r2
 8003228:	d018      	beq.n	800325c <HAL_TIM_Base_Start+0x70>
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4a21      	ldr	r2, [pc, #132]	; (80032b4 <HAL_TIM_Base_Start+0xc8>)
 8003230:	4293      	cmp	r3, r2
 8003232:	d013      	beq.n	800325c <HAL_TIM_Base_Start+0x70>
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	4a1f      	ldr	r2, [pc, #124]	; (80032b8 <HAL_TIM_Base_Start+0xcc>)
 800323a:	4293      	cmp	r3, r2
 800323c:	d00e      	beq.n	800325c <HAL_TIM_Base_Start+0x70>
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	4a1e      	ldr	r2, [pc, #120]	; (80032bc <HAL_TIM_Base_Start+0xd0>)
 8003244:	4293      	cmp	r3, r2
 8003246:	d009      	beq.n	800325c <HAL_TIM_Base_Start+0x70>
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	4a1c      	ldr	r2, [pc, #112]	; (80032c0 <HAL_TIM_Base_Start+0xd4>)
 800324e:	4293      	cmp	r3, r2
 8003250:	d004      	beq.n	800325c <HAL_TIM_Base_Start+0x70>
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4a1b      	ldr	r2, [pc, #108]	; (80032c4 <HAL_TIM_Base_Start+0xd8>)
 8003258:	4293      	cmp	r3, r2
 800325a:	d115      	bne.n	8003288 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	689a      	ldr	r2, [r3, #8]
 8003262:	4b19      	ldr	r3, [pc, #100]	; (80032c8 <HAL_TIM_Base_Start+0xdc>)
 8003264:	4013      	ands	r3, r2
 8003266:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	2b06      	cmp	r3, #6
 800326c:	d015      	beq.n	800329a <HAL_TIM_Base_Start+0xae>
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003274:	d011      	beq.n	800329a <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	681a      	ldr	r2, [r3, #0]
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f042 0201 	orr.w	r2, r2, #1
 8003284:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003286:	e008      	b.n	800329a <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	681a      	ldr	r2, [r3, #0]
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f042 0201 	orr.w	r2, r2, #1
 8003296:	601a      	str	r2, [r3, #0]
 8003298:	e000      	b.n	800329c <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800329a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800329c:	2300      	movs	r3, #0
}
 800329e:	4618      	mov	r0, r3
 80032a0:	3714      	adds	r7, #20
 80032a2:	46bd      	mov	sp, r7
 80032a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a8:	4770      	bx	lr
 80032aa:	bf00      	nop
 80032ac:	40010000 	.word	0x40010000
 80032b0:	40000400 	.word	0x40000400
 80032b4:	40000800 	.word	0x40000800
 80032b8:	40000c00 	.word	0x40000c00
 80032bc:	40010400 	.word	0x40010400
 80032c0:	40014000 	.word	0x40014000
 80032c4:	40001800 	.word	0x40001800
 80032c8:	00010007 	.word	0x00010007

080032cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80032cc:	b480      	push	{r7}
 80032ce:	b085      	sub	sp, #20
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
 80032d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	4a40      	ldr	r2, [pc, #256]	; (80033e0 <TIM_Base_SetConfig+0x114>)
 80032e0:	4293      	cmp	r3, r2
 80032e2:	d013      	beq.n	800330c <TIM_Base_SetConfig+0x40>
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032ea:	d00f      	beq.n	800330c <TIM_Base_SetConfig+0x40>
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	4a3d      	ldr	r2, [pc, #244]	; (80033e4 <TIM_Base_SetConfig+0x118>)
 80032f0:	4293      	cmp	r3, r2
 80032f2:	d00b      	beq.n	800330c <TIM_Base_SetConfig+0x40>
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	4a3c      	ldr	r2, [pc, #240]	; (80033e8 <TIM_Base_SetConfig+0x11c>)
 80032f8:	4293      	cmp	r3, r2
 80032fa:	d007      	beq.n	800330c <TIM_Base_SetConfig+0x40>
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	4a3b      	ldr	r2, [pc, #236]	; (80033ec <TIM_Base_SetConfig+0x120>)
 8003300:	4293      	cmp	r3, r2
 8003302:	d003      	beq.n	800330c <TIM_Base_SetConfig+0x40>
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	4a3a      	ldr	r2, [pc, #232]	; (80033f0 <TIM_Base_SetConfig+0x124>)
 8003308:	4293      	cmp	r3, r2
 800330a:	d108      	bne.n	800331e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003312:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	685b      	ldr	r3, [r3, #4]
 8003318:	68fa      	ldr	r2, [r7, #12]
 800331a:	4313      	orrs	r3, r2
 800331c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	4a2f      	ldr	r2, [pc, #188]	; (80033e0 <TIM_Base_SetConfig+0x114>)
 8003322:	4293      	cmp	r3, r2
 8003324:	d02b      	beq.n	800337e <TIM_Base_SetConfig+0xb2>
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800332c:	d027      	beq.n	800337e <TIM_Base_SetConfig+0xb2>
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	4a2c      	ldr	r2, [pc, #176]	; (80033e4 <TIM_Base_SetConfig+0x118>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d023      	beq.n	800337e <TIM_Base_SetConfig+0xb2>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	4a2b      	ldr	r2, [pc, #172]	; (80033e8 <TIM_Base_SetConfig+0x11c>)
 800333a:	4293      	cmp	r3, r2
 800333c:	d01f      	beq.n	800337e <TIM_Base_SetConfig+0xb2>
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	4a2a      	ldr	r2, [pc, #168]	; (80033ec <TIM_Base_SetConfig+0x120>)
 8003342:	4293      	cmp	r3, r2
 8003344:	d01b      	beq.n	800337e <TIM_Base_SetConfig+0xb2>
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	4a29      	ldr	r2, [pc, #164]	; (80033f0 <TIM_Base_SetConfig+0x124>)
 800334a:	4293      	cmp	r3, r2
 800334c:	d017      	beq.n	800337e <TIM_Base_SetConfig+0xb2>
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	4a28      	ldr	r2, [pc, #160]	; (80033f4 <TIM_Base_SetConfig+0x128>)
 8003352:	4293      	cmp	r3, r2
 8003354:	d013      	beq.n	800337e <TIM_Base_SetConfig+0xb2>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	4a27      	ldr	r2, [pc, #156]	; (80033f8 <TIM_Base_SetConfig+0x12c>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d00f      	beq.n	800337e <TIM_Base_SetConfig+0xb2>
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	4a26      	ldr	r2, [pc, #152]	; (80033fc <TIM_Base_SetConfig+0x130>)
 8003362:	4293      	cmp	r3, r2
 8003364:	d00b      	beq.n	800337e <TIM_Base_SetConfig+0xb2>
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	4a25      	ldr	r2, [pc, #148]	; (8003400 <TIM_Base_SetConfig+0x134>)
 800336a:	4293      	cmp	r3, r2
 800336c:	d007      	beq.n	800337e <TIM_Base_SetConfig+0xb2>
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	4a24      	ldr	r2, [pc, #144]	; (8003404 <TIM_Base_SetConfig+0x138>)
 8003372:	4293      	cmp	r3, r2
 8003374:	d003      	beq.n	800337e <TIM_Base_SetConfig+0xb2>
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	4a23      	ldr	r2, [pc, #140]	; (8003408 <TIM_Base_SetConfig+0x13c>)
 800337a:	4293      	cmp	r3, r2
 800337c:	d108      	bne.n	8003390 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003384:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	68db      	ldr	r3, [r3, #12]
 800338a:	68fa      	ldr	r2, [r7, #12]
 800338c:	4313      	orrs	r3, r2
 800338e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	695b      	ldr	r3, [r3, #20]
 800339a:	4313      	orrs	r3, r2
 800339c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	68fa      	ldr	r2, [r7, #12]
 80033a2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	689a      	ldr	r2, [r3, #8]
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	681a      	ldr	r2, [r3, #0]
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	4a0a      	ldr	r2, [pc, #40]	; (80033e0 <TIM_Base_SetConfig+0x114>)
 80033b8:	4293      	cmp	r3, r2
 80033ba:	d003      	beq.n	80033c4 <TIM_Base_SetConfig+0xf8>
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	4a0c      	ldr	r2, [pc, #48]	; (80033f0 <TIM_Base_SetConfig+0x124>)
 80033c0:	4293      	cmp	r3, r2
 80033c2:	d103      	bne.n	80033cc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	691a      	ldr	r2, [r3, #16]
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2201      	movs	r2, #1
 80033d0:	615a      	str	r2, [r3, #20]
}
 80033d2:	bf00      	nop
 80033d4:	3714      	adds	r7, #20
 80033d6:	46bd      	mov	sp, r7
 80033d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033dc:	4770      	bx	lr
 80033de:	bf00      	nop
 80033e0:	40010000 	.word	0x40010000
 80033e4:	40000400 	.word	0x40000400
 80033e8:	40000800 	.word	0x40000800
 80033ec:	40000c00 	.word	0x40000c00
 80033f0:	40010400 	.word	0x40010400
 80033f4:	40014000 	.word	0x40014000
 80033f8:	40014400 	.word	0x40014400
 80033fc:	40014800 	.word	0x40014800
 8003400:	40001800 	.word	0x40001800
 8003404:	40001c00 	.word	0x40001c00
 8003408:	40002000 	.word	0x40002000

0800340c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800340c:	b480      	push	{r7}
 800340e:	b085      	sub	sp, #20
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
 8003414:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800341c:	2b01      	cmp	r3, #1
 800341e:	d101      	bne.n	8003424 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003420:	2302      	movs	r3, #2
 8003422:	e06d      	b.n	8003500 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2201      	movs	r2, #1
 8003428:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2202      	movs	r2, #2
 8003430:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	685b      	ldr	r3, [r3, #4]
 800343a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	689b      	ldr	r3, [r3, #8]
 8003442:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	4a30      	ldr	r2, [pc, #192]	; (800350c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800344a:	4293      	cmp	r3, r2
 800344c:	d004      	beq.n	8003458 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	4a2f      	ldr	r2, [pc, #188]	; (8003510 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003454:	4293      	cmp	r3, r2
 8003456:	d108      	bne.n	800346a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800345e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	685b      	ldr	r3, [r3, #4]
 8003464:	68fa      	ldr	r2, [r7, #12]
 8003466:	4313      	orrs	r3, r2
 8003468:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003470:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	68fa      	ldr	r2, [r7, #12]
 8003478:	4313      	orrs	r3, r2
 800347a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	68fa      	ldr	r2, [r7, #12]
 8003482:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	4a20      	ldr	r2, [pc, #128]	; (800350c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800348a:	4293      	cmp	r3, r2
 800348c:	d022      	beq.n	80034d4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003496:	d01d      	beq.n	80034d4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	4a1d      	ldr	r2, [pc, #116]	; (8003514 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800349e:	4293      	cmp	r3, r2
 80034a0:	d018      	beq.n	80034d4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	4a1c      	ldr	r2, [pc, #112]	; (8003518 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80034a8:	4293      	cmp	r3, r2
 80034aa:	d013      	beq.n	80034d4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	4a1a      	ldr	r2, [pc, #104]	; (800351c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d00e      	beq.n	80034d4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	4a15      	ldr	r2, [pc, #84]	; (8003510 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80034bc:	4293      	cmp	r3, r2
 80034be:	d009      	beq.n	80034d4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	4a16      	ldr	r2, [pc, #88]	; (8003520 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d004      	beq.n	80034d4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	4a15      	ldr	r2, [pc, #84]	; (8003524 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80034d0:	4293      	cmp	r3, r2
 80034d2:	d10c      	bne.n	80034ee <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80034d4:	68bb      	ldr	r3, [r7, #8]
 80034d6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80034da:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	689b      	ldr	r3, [r3, #8]
 80034e0:	68ba      	ldr	r2, [r7, #8]
 80034e2:	4313      	orrs	r3, r2
 80034e4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	68ba      	ldr	r2, [r7, #8]
 80034ec:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	2201      	movs	r2, #1
 80034f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	2200      	movs	r2, #0
 80034fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80034fe:	2300      	movs	r3, #0
}
 8003500:	4618      	mov	r0, r3
 8003502:	3714      	adds	r7, #20
 8003504:	46bd      	mov	sp, r7
 8003506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350a:	4770      	bx	lr
 800350c:	40010000 	.word	0x40010000
 8003510:	40010400 	.word	0x40010400
 8003514:	40000400 	.word	0x40000400
 8003518:	40000800 	.word	0x40000800
 800351c:	40000c00 	.word	0x40000c00
 8003520:	40014000 	.word	0x40014000
 8003524:	40001800 	.word	0x40001800

08003528 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	b082      	sub	sp, #8
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2b00      	cmp	r3, #0
 8003534:	d101      	bne.n	800353a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003536:	2301      	movs	r3, #1
 8003538:	e040      	b.n	80035bc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800353e:	2b00      	cmp	r3, #0
 8003540:	d106      	bne.n	8003550 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2200      	movs	r2, #0
 8003546:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800354a:	6878      	ldr	r0, [r7, #4]
 800354c:	f7fd fece 	bl	80012ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2224      	movs	r2, #36	; 0x24
 8003554:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	681a      	ldr	r2, [r3, #0]
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f022 0201 	bic.w	r2, r2, #1
 8003564:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003566:	6878      	ldr	r0, [r7, #4]
 8003568:	f000 fbf8 	bl	8003d5c <UART_SetConfig>
 800356c:	4603      	mov	r3, r0
 800356e:	2b01      	cmp	r3, #1
 8003570:	d101      	bne.n	8003576 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003572:	2301      	movs	r3, #1
 8003574:	e022      	b.n	80035bc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800357a:	2b00      	cmp	r3, #0
 800357c:	d002      	beq.n	8003584 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800357e:	6878      	ldr	r0, [r7, #4]
 8003580:	f000 fe50 	bl	8004224 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	685a      	ldr	r2, [r3, #4]
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003592:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	689a      	ldr	r2, [r3, #8]
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80035a2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	681a      	ldr	r2, [r3, #0]
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f042 0201 	orr.w	r2, r2, #1
 80035b2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80035b4:	6878      	ldr	r0, [r7, #4]
 80035b6:	f000 fed7 	bl	8004368 <UART_CheckIdleState>
 80035ba:	4603      	mov	r3, r0
}
 80035bc:	4618      	mov	r0, r3
 80035be:	3708      	adds	r7, #8
 80035c0:	46bd      	mov	sp, r7
 80035c2:	bd80      	pop	{r7, pc}

080035c4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b08a      	sub	sp, #40	; 0x28
 80035c8:	af02      	add	r7, sp, #8
 80035ca:	60f8      	str	r0, [r7, #12]
 80035cc:	60b9      	str	r1, [r7, #8]
 80035ce:	603b      	str	r3, [r7, #0]
 80035d0:	4613      	mov	r3, r2
 80035d2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80035d8:	2b20      	cmp	r3, #32
 80035da:	f040 8081 	bne.w	80036e0 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 80035de:	68bb      	ldr	r3, [r7, #8]
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d002      	beq.n	80035ea <HAL_UART_Transmit+0x26>
 80035e4:	88fb      	ldrh	r3, [r7, #6]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d101      	bne.n	80035ee <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80035ea:	2301      	movs	r3, #1
 80035ec:	e079      	b.n	80036e2 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80035f4:	2b01      	cmp	r3, #1
 80035f6:	d101      	bne.n	80035fc <HAL_UART_Transmit+0x38>
 80035f8:	2302      	movs	r3, #2
 80035fa:	e072      	b.n	80036e2 <HAL_UART_Transmit+0x11e>
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	2201      	movs	r2, #1
 8003600:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	2200      	movs	r2, #0
 8003608:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	2221      	movs	r2, #33	; 0x21
 8003610:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003612:	f7fe f9cd 	bl	80019b0 <HAL_GetTick>
 8003616:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	88fa      	ldrh	r2, [r7, #6]
 800361c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	88fa      	ldrh	r2, [r7, #6]
 8003624:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	689b      	ldr	r3, [r3, #8]
 800362c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003630:	d108      	bne.n	8003644 <HAL_UART_Transmit+0x80>
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	691b      	ldr	r3, [r3, #16]
 8003636:	2b00      	cmp	r3, #0
 8003638:	d104      	bne.n	8003644 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800363a:	2300      	movs	r3, #0
 800363c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800363e:	68bb      	ldr	r3, [r7, #8]
 8003640:	61bb      	str	r3, [r7, #24]
 8003642:	e003      	b.n	800364c <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8003644:	68bb      	ldr	r3, [r7, #8]
 8003646:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003648:	2300      	movs	r3, #0
 800364a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	2200      	movs	r2, #0
 8003650:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8003654:	e02c      	b.n	80036b0 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	9300      	str	r3, [sp, #0]
 800365a:	697b      	ldr	r3, [r7, #20]
 800365c:	2200      	movs	r2, #0
 800365e:	2180      	movs	r1, #128	; 0x80
 8003660:	68f8      	ldr	r0, [r7, #12]
 8003662:	f000 feb4 	bl	80043ce <UART_WaitOnFlagUntilTimeout>
 8003666:	4603      	mov	r3, r0
 8003668:	2b00      	cmp	r3, #0
 800366a:	d001      	beq.n	8003670 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800366c:	2303      	movs	r3, #3
 800366e:	e038      	b.n	80036e2 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8003670:	69fb      	ldr	r3, [r7, #28]
 8003672:	2b00      	cmp	r3, #0
 8003674:	d10b      	bne.n	800368e <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003676:	69bb      	ldr	r3, [r7, #24]
 8003678:	881b      	ldrh	r3, [r3, #0]
 800367a:	461a      	mov	r2, r3
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003684:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003686:	69bb      	ldr	r3, [r7, #24]
 8003688:	3302      	adds	r3, #2
 800368a:	61bb      	str	r3, [r7, #24]
 800368c:	e007      	b.n	800369e <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800368e:	69fb      	ldr	r3, [r7, #28]
 8003690:	781a      	ldrb	r2, [r3, #0]
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003698:	69fb      	ldr	r3, [r7, #28]
 800369a:	3301      	adds	r3, #1
 800369c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80036a4:	b29b      	uxth	r3, r3
 80036a6:	3b01      	subs	r3, #1
 80036a8:	b29a      	uxth	r2, r3
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80036b6:	b29b      	uxth	r3, r3
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d1cc      	bne.n	8003656 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	9300      	str	r3, [sp, #0]
 80036c0:	697b      	ldr	r3, [r7, #20]
 80036c2:	2200      	movs	r2, #0
 80036c4:	2140      	movs	r1, #64	; 0x40
 80036c6:	68f8      	ldr	r0, [r7, #12]
 80036c8:	f000 fe81 	bl	80043ce <UART_WaitOnFlagUntilTimeout>
 80036cc:	4603      	mov	r3, r0
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d001      	beq.n	80036d6 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 80036d2:	2303      	movs	r3, #3
 80036d4:	e005      	b.n	80036e2 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	2220      	movs	r2, #32
 80036da:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80036dc:	2300      	movs	r3, #0
 80036de:	e000      	b.n	80036e2 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 80036e0:	2302      	movs	r3, #2
  }
}
 80036e2:	4618      	mov	r0, r3
 80036e4:	3720      	adds	r7, #32
 80036e6:	46bd      	mov	sp, r7
 80036e8:	bd80      	pop	{r7, pc}

080036ea <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80036ea:	b580      	push	{r7, lr}
 80036ec:	b08a      	sub	sp, #40	; 0x28
 80036ee:	af00      	add	r7, sp, #0
 80036f0:	60f8      	str	r0, [r7, #12]
 80036f2:	60b9      	str	r1, [r7, #8]
 80036f4:	4613      	mov	r3, r2
 80036f6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80036fc:	2b20      	cmp	r3, #32
 80036fe:	d13d      	bne.n	800377c <HAL_UART_Receive_IT+0x92>
  {
    if ((pData == NULL) || (Size == 0U))
 8003700:	68bb      	ldr	r3, [r7, #8]
 8003702:	2b00      	cmp	r3, #0
 8003704:	d002      	beq.n	800370c <HAL_UART_Receive_IT+0x22>
 8003706:	88fb      	ldrh	r3, [r7, #6]
 8003708:	2b00      	cmp	r3, #0
 800370a:	d101      	bne.n	8003710 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 800370c:	2301      	movs	r3, #1
 800370e:	e036      	b.n	800377e <HAL_UART_Receive_IT+0x94>
    }

    __HAL_LOCK(huart);
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003716:	2b01      	cmp	r3, #1
 8003718:	d101      	bne.n	800371e <HAL_UART_Receive_IT+0x34>
 800371a:	2302      	movs	r3, #2
 800371c:	e02f      	b.n	800377e <HAL_UART_Receive_IT+0x94>
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	2201      	movs	r2, #1
 8003722:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	2200      	movs	r2, #0
 800372a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	685b      	ldr	r3, [r3, #4]
 8003732:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003736:	2b00      	cmp	r3, #0
 8003738:	d018      	beq.n	800376c <HAL_UART_Receive_IT+0x82>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003740:	697b      	ldr	r3, [r7, #20]
 8003742:	e853 3f00 	ldrex	r3, [r3]
 8003746:	613b      	str	r3, [r7, #16]
   return(result);
 8003748:	693b      	ldr	r3, [r7, #16]
 800374a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800374e:	627b      	str	r3, [r7, #36]	; 0x24
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	461a      	mov	r2, r3
 8003756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003758:	623b      	str	r3, [r7, #32]
 800375a:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800375c:	69f9      	ldr	r1, [r7, #28]
 800375e:	6a3a      	ldr	r2, [r7, #32]
 8003760:	e841 2300 	strex	r3, r2, [r1]
 8003764:	61bb      	str	r3, [r7, #24]
   return(result);
 8003766:	69bb      	ldr	r3, [r7, #24]
 8003768:	2b00      	cmp	r3, #0
 800376a:	d1e6      	bne.n	800373a <HAL_UART_Receive_IT+0x50>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800376c:	88fb      	ldrh	r3, [r7, #6]
 800376e:	461a      	mov	r2, r3
 8003770:	68b9      	ldr	r1, [r7, #8]
 8003772:	68f8      	ldr	r0, [r7, #12]
 8003774:	f000 fef0 	bl	8004558 <UART_Start_Receive_IT>
 8003778:	4603      	mov	r3, r0
 800377a:	e000      	b.n	800377e <HAL_UART_Receive_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800377c:	2302      	movs	r3, #2
  }
}
 800377e:	4618      	mov	r0, r3
 8003780:	3728      	adds	r7, #40	; 0x28
 8003782:	46bd      	mov	sp, r7
 8003784:	bd80      	pop	{r7, pc}
	...

08003788 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	b0ba      	sub	sp, #232	; 0xe8
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	69db      	ldr	r3, [r3, #28]
 8003796:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	689b      	ldr	r3, [r3, #8]
 80037aa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80037ae:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80037b2:	f640 030f 	movw	r3, #2063	; 0x80f
 80037b6:	4013      	ands	r3, r2
 80037b8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80037bc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d115      	bne.n	80037f0 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80037c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80037c8:	f003 0320 	and.w	r3, r3, #32
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d00f      	beq.n	80037f0 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80037d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80037d4:	f003 0320 	and.w	r3, r3, #32
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d009      	beq.n	80037f0 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	f000 828f 	beq.w	8003d04 <HAL_UART_IRQHandler+0x57c>
      {
        huart->RxISR(huart);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80037ea:	6878      	ldr	r0, [r7, #4]
 80037ec:	4798      	blx	r3
      }
      return;
 80037ee:	e289      	b.n	8003d04 <HAL_UART_IRQHandler+0x57c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80037f0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	f000 8117 	beq.w	8003a28 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80037fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80037fe:	f003 0301 	and.w	r3, r3, #1
 8003802:	2b00      	cmp	r3, #0
 8003804:	d106      	bne.n	8003814 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003806:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800380a:	4b85      	ldr	r3, [pc, #532]	; (8003a20 <HAL_UART_IRQHandler+0x298>)
 800380c:	4013      	ands	r3, r2
 800380e:	2b00      	cmp	r3, #0
 8003810:	f000 810a 	beq.w	8003a28 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003814:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003818:	f003 0301 	and.w	r3, r3, #1
 800381c:	2b00      	cmp	r3, #0
 800381e:	d011      	beq.n	8003844 <HAL_UART_IRQHandler+0xbc>
 8003820:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003824:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003828:	2b00      	cmp	r3, #0
 800382a:	d00b      	beq.n	8003844 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	2201      	movs	r2, #1
 8003832:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800383a:	f043 0201 	orr.w	r2, r3, #1
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003844:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003848:	f003 0302 	and.w	r3, r3, #2
 800384c:	2b00      	cmp	r3, #0
 800384e:	d011      	beq.n	8003874 <HAL_UART_IRQHandler+0xec>
 8003850:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003854:	f003 0301 	and.w	r3, r3, #1
 8003858:	2b00      	cmp	r3, #0
 800385a:	d00b      	beq.n	8003874 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	2202      	movs	r2, #2
 8003862:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800386a:	f043 0204 	orr.w	r2, r3, #4
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003874:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003878:	f003 0304 	and.w	r3, r3, #4
 800387c:	2b00      	cmp	r3, #0
 800387e:	d011      	beq.n	80038a4 <HAL_UART_IRQHandler+0x11c>
 8003880:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003884:	f003 0301 	and.w	r3, r3, #1
 8003888:	2b00      	cmp	r3, #0
 800388a:	d00b      	beq.n	80038a4 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	2204      	movs	r2, #4
 8003892:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800389a:	f043 0202 	orr.w	r2, r3, #2
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80038a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80038a8:	f003 0308 	and.w	r3, r3, #8
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d017      	beq.n	80038e0 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80038b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80038b4:	f003 0320 	and.w	r3, r3, #32
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d105      	bne.n	80038c8 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80038bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80038c0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d00b      	beq.n	80038e0 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	2208      	movs	r2, #8
 80038ce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80038d6:	f043 0208 	orr.w	r2, r3, #8
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80038e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80038e4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d012      	beq.n	8003912 <HAL_UART_IRQHandler+0x18a>
 80038ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80038f0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d00c      	beq.n	8003912 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003900:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003908:	f043 0220 	orr.w	r2, r3, #32
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003918:	2b00      	cmp	r3, #0
 800391a:	f000 81f5 	beq.w	8003d08 <HAL_UART_IRQHandler+0x580>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800391e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003922:	f003 0320 	and.w	r3, r3, #32
 8003926:	2b00      	cmp	r3, #0
 8003928:	d00d      	beq.n	8003946 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800392a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800392e:	f003 0320 	and.w	r3, r3, #32
 8003932:	2b00      	cmp	r3, #0
 8003934:	d007      	beq.n	8003946 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800393a:	2b00      	cmp	r3, #0
 800393c:	d003      	beq.n	8003946 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003942:	6878      	ldr	r0, [r7, #4]
 8003944:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800394c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	689b      	ldr	r3, [r3, #8]
 8003956:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800395a:	2b40      	cmp	r3, #64	; 0x40
 800395c:	d005      	beq.n	800396a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800395e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003962:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003966:	2b00      	cmp	r3, #0
 8003968:	d04f      	beq.n	8003a0a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800396a:	6878      	ldr	r0, [r7, #4]
 800396c:	f000 febe 	bl	80046ec <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	689b      	ldr	r3, [r3, #8]
 8003976:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800397a:	2b40      	cmp	r3, #64	; 0x40
 800397c:	d141      	bne.n	8003a02 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	3308      	adds	r3, #8
 8003984:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003988:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800398c:	e853 3f00 	ldrex	r3, [r3]
 8003990:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003994:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003998:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800399c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	3308      	adds	r3, #8
 80039a6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80039aa:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80039ae:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039b2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80039b6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80039ba:	e841 2300 	strex	r3, r2, [r1]
 80039be:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80039c2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d1d9      	bne.n	800397e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d013      	beq.n	80039fa <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039d6:	4a13      	ldr	r2, [pc, #76]	; (8003a24 <HAL_UART_IRQHandler+0x29c>)
 80039d8:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039de:	4618      	mov	r0, r3
 80039e0:	f7fe f997 	bl	8001d12 <HAL_DMA_Abort_IT>
 80039e4:	4603      	mov	r3, r0
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d017      	beq.n	8003a1a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039f0:	687a      	ldr	r2, [r7, #4]
 80039f2:	6f12      	ldr	r2, [r2, #112]	; 0x70
 80039f4:	4610      	mov	r0, r2
 80039f6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039f8:	e00f      	b.n	8003a1a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80039fa:	6878      	ldr	r0, [r7, #4]
 80039fc:	f000 f998 	bl	8003d30 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a00:	e00b      	b.n	8003a1a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003a02:	6878      	ldr	r0, [r7, #4]
 8003a04:	f000 f994 	bl	8003d30 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a08:	e007      	b.n	8003a1a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003a0a:	6878      	ldr	r0, [r7, #4]
 8003a0c:	f000 f990 	bl	8003d30 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2200      	movs	r2, #0
 8003a14:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8003a18:	e176      	b.n	8003d08 <HAL_UART_IRQHandler+0x580>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a1a:	bf00      	nop
    return;
 8003a1c:	e174      	b.n	8003d08 <HAL_UART_IRQHandler+0x580>
 8003a1e:	bf00      	nop
 8003a20:	04000120 	.word	0x04000120
 8003a24:	080047b3 	.word	0x080047b3

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a2c:	2b01      	cmp	r3, #1
 8003a2e:	f040 8144 	bne.w	8003cba <HAL_UART_IRQHandler+0x532>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003a32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a36:	f003 0310 	and.w	r3, r3, #16
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	f000 813d 	beq.w	8003cba <HAL_UART_IRQHandler+0x532>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003a40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a44:	f003 0310 	and.w	r3, r3, #16
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	f000 8136 	beq.w	8003cba <HAL_UART_IRQHandler+0x532>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	2210      	movs	r2, #16
 8003a54:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	689b      	ldr	r3, [r3, #8]
 8003a5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a60:	2b40      	cmp	r3, #64	; 0x40
 8003a62:	f040 80b2 	bne.w	8003bca <HAL_UART_IRQHandler+0x442>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	685b      	ldr	r3, [r3, #4]
 8003a6e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003a72:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	f000 8148 	beq.w	8003d0c <HAL_UART_IRQHandler+0x584>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003a82:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003a86:	429a      	cmp	r2, r3
 8003a88:	f080 8140 	bcs.w	8003d0c <HAL_UART_IRQHandler+0x584>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003a92:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a9a:	69db      	ldr	r3, [r3, #28]
 8003a9c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003aa0:	f000 8085 	beq.w	8003bae <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003aac:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003ab0:	e853 3f00 	ldrex	r3, [r3]
 8003ab4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003ab8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003abc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003ac0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	461a      	mov	r2, r3
 8003aca:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003ace:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003ad2:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ad6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003ada:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003ade:	e841 2300 	strex	r3, r2, [r1]
 8003ae2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003ae6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d1da      	bne.n	8003aa4 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	3308      	adds	r3, #8
 8003af4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003af6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003af8:	e853 3f00 	ldrex	r3, [r3]
 8003afc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003afe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003b00:	f023 0301 	bic.w	r3, r3, #1
 8003b04:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	3308      	adds	r3, #8
 8003b0e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003b12:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003b16:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b18:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003b1a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003b1e:	e841 2300 	strex	r3, r2, [r1]
 8003b22:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003b24:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d1e1      	bne.n	8003aee <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	3308      	adds	r3, #8
 8003b30:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b32:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003b34:	e853 3f00 	ldrex	r3, [r3]
 8003b38:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003b3a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003b3c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003b40:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	3308      	adds	r3, #8
 8003b4a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003b4e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003b50:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b52:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003b54:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003b56:	e841 2300 	strex	r3, r2, [r1]
 8003b5a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003b5c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d1e3      	bne.n	8003b2a <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	2220      	movs	r2, #32
 8003b66:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b76:	e853 3f00 	ldrex	r3, [r3]
 8003b7a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003b7c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b7e:	f023 0310 	bic.w	r3, r3, #16
 8003b82:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	461a      	mov	r2, r3
 8003b8c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003b90:	65bb      	str	r3, [r7, #88]	; 0x58
 8003b92:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b94:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003b96:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003b98:	e841 2300 	strex	r3, r2, [r1]
 8003b9c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003b9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d1e4      	bne.n	8003b6e <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ba8:	4618      	mov	r0, r3
 8003baa:	f7fe f842 	bl	8001c32 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003bba:	b29b      	uxth	r3, r3
 8003bbc:	1ad3      	subs	r3, r2, r3
 8003bbe:	b29b      	uxth	r3, r3
 8003bc0:	4619      	mov	r1, r3
 8003bc2:	6878      	ldr	r0, [r7, #4]
 8003bc4:	f000 f8be 	bl	8003d44 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003bc8:	e0a0      	b.n	8003d0c <HAL_UART_IRQHandler+0x584>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003bd6:	b29b      	uxth	r3, r3
 8003bd8:	1ad3      	subs	r3, r2, r3
 8003bda:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003be4:	b29b      	uxth	r3, r3
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	f000 8092 	beq.w	8003d10 <HAL_UART_IRQHandler+0x588>
          && (nb_rx_data > 0U))
 8003bec:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	f000 808d 	beq.w	8003d10 <HAL_UART_IRQHandler+0x588>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bfe:	e853 3f00 	ldrex	r3, [r3]
 8003c02:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003c04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c06:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003c0a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	461a      	mov	r2, r3
 8003c14:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003c18:	647b      	str	r3, [r7, #68]	; 0x44
 8003c1a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c1c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003c1e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003c20:	e841 2300 	strex	r3, r2, [r1]
 8003c24:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003c26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d1e4      	bne.n	8003bf6 <HAL_UART_IRQHandler+0x46e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	3308      	adds	r3, #8
 8003c32:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c36:	e853 3f00 	ldrex	r3, [r3]
 8003c3a:	623b      	str	r3, [r7, #32]
   return(result);
 8003c3c:	6a3b      	ldr	r3, [r7, #32]
 8003c3e:	f023 0301 	bic.w	r3, r3, #1
 8003c42:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	3308      	adds	r3, #8
 8003c4c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003c50:	633a      	str	r2, [r7, #48]	; 0x30
 8003c52:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c54:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003c56:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c58:	e841 2300 	strex	r3, r2, [r1]
 8003c5c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003c5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d1e3      	bne.n	8003c2c <HAL_UART_IRQHandler+0x4a4>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2220      	movs	r2, #32
 8003c68:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2200      	movs	r2, #0
 8003c74:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c7c:	693b      	ldr	r3, [r7, #16]
 8003c7e:	e853 3f00 	ldrex	r3, [r3]
 8003c82:	60fb      	str	r3, [r7, #12]
   return(result);
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	f023 0310 	bic.w	r3, r3, #16
 8003c8a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	461a      	mov	r2, r3
 8003c94:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003c98:	61fb      	str	r3, [r7, #28]
 8003c9a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c9c:	69b9      	ldr	r1, [r7, #24]
 8003c9e:	69fa      	ldr	r2, [r7, #28]
 8003ca0:	e841 2300 	strex	r3, r2, [r1]
 8003ca4:	617b      	str	r3, [r7, #20]
   return(result);
 8003ca6:	697b      	ldr	r3, [r7, #20]
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d1e4      	bne.n	8003c76 <HAL_UART_IRQHandler+0x4ee>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003cac:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003cb0:	4619      	mov	r1, r3
 8003cb2:	6878      	ldr	r0, [r7, #4]
 8003cb4:	f000 f846 	bl	8003d44 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003cb8:	e02a      	b.n	8003d10 <HAL_UART_IRQHandler+0x588>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003cba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003cbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d00e      	beq.n	8003ce4 <HAL_UART_IRQHandler+0x55c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003cc6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003cca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d008      	beq.n	8003ce4 <HAL_UART_IRQHandler+0x55c>
  {
    if (huart->TxISR != NULL)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d01c      	beq.n	8003d14 <HAL_UART_IRQHandler+0x58c>
    {
      huart->TxISR(huart);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003cde:	6878      	ldr	r0, [r7, #4]
 8003ce0:	4798      	blx	r3
    }
    return;
 8003ce2:	e017      	b.n	8003d14 <HAL_UART_IRQHandler+0x58c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003ce4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ce8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d012      	beq.n	8003d16 <HAL_UART_IRQHandler+0x58e>
 8003cf0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003cf4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d00c      	beq.n	8003d16 <HAL_UART_IRQHandler+0x58e>
  {
    UART_EndTransmit_IT(huart);
 8003cfc:	6878      	ldr	r0, [r7, #4]
 8003cfe:	f000 fd6e 	bl	80047de <UART_EndTransmit_IT>
    return;
 8003d02:	e008      	b.n	8003d16 <HAL_UART_IRQHandler+0x58e>
      return;
 8003d04:	bf00      	nop
 8003d06:	e006      	b.n	8003d16 <HAL_UART_IRQHandler+0x58e>
    return;
 8003d08:	bf00      	nop
 8003d0a:	e004      	b.n	8003d16 <HAL_UART_IRQHandler+0x58e>
      return;
 8003d0c:	bf00      	nop
 8003d0e:	e002      	b.n	8003d16 <HAL_UART_IRQHandler+0x58e>
      return;
 8003d10:	bf00      	nop
 8003d12:	e000      	b.n	8003d16 <HAL_UART_IRQHandler+0x58e>
    return;
 8003d14:	bf00      	nop
  }

}
 8003d16:	37e8      	adds	r7, #232	; 0xe8
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	bd80      	pop	{r7, pc}

08003d1c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003d1c:	b480      	push	{r7}
 8003d1e:	b083      	sub	sp, #12
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003d24:	bf00      	nop
 8003d26:	370c      	adds	r7, #12
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2e:	4770      	bx	lr

08003d30 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003d30:	b480      	push	{r7}
 8003d32:	b083      	sub	sp, #12
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003d38:	bf00      	nop
 8003d3a:	370c      	adds	r7, #12
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d42:	4770      	bx	lr

08003d44 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003d44:	b480      	push	{r7}
 8003d46:	b083      	sub	sp, #12
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
 8003d4c:	460b      	mov	r3, r1
 8003d4e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003d50:	bf00      	nop
 8003d52:	370c      	adds	r7, #12
 8003d54:	46bd      	mov	sp, r7
 8003d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5a:	4770      	bx	lr

08003d5c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b088      	sub	sp, #32
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003d64:	2300      	movs	r3, #0
 8003d66:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	689a      	ldr	r2, [r3, #8]
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	691b      	ldr	r3, [r3, #16]
 8003d70:	431a      	orrs	r2, r3
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	695b      	ldr	r3, [r3, #20]
 8003d76:	431a      	orrs	r2, r3
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	69db      	ldr	r3, [r3, #28]
 8003d7c:	4313      	orrs	r3, r2
 8003d7e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	681a      	ldr	r2, [r3, #0]
 8003d86:	4ba6      	ldr	r3, [pc, #664]	; (8004020 <UART_SetConfig+0x2c4>)
 8003d88:	4013      	ands	r3, r2
 8003d8a:	687a      	ldr	r2, [r7, #4]
 8003d8c:	6812      	ldr	r2, [r2, #0]
 8003d8e:	6979      	ldr	r1, [r7, #20]
 8003d90:	430b      	orrs	r3, r1
 8003d92:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	685b      	ldr	r3, [r3, #4]
 8003d9a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	68da      	ldr	r2, [r3, #12]
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	430a      	orrs	r2, r1
 8003da8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	699b      	ldr	r3, [r3, #24]
 8003dae:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6a1b      	ldr	r3, [r3, #32]
 8003db4:	697a      	ldr	r2, [r7, #20]
 8003db6:	4313      	orrs	r3, r2
 8003db8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	689b      	ldr	r3, [r3, #8]
 8003dc0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	697a      	ldr	r2, [r7, #20]
 8003dca:	430a      	orrs	r2, r1
 8003dcc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	4a94      	ldr	r2, [pc, #592]	; (8004024 <UART_SetConfig+0x2c8>)
 8003dd4:	4293      	cmp	r3, r2
 8003dd6:	d120      	bne.n	8003e1a <UART_SetConfig+0xbe>
 8003dd8:	4b93      	ldr	r3, [pc, #588]	; (8004028 <UART_SetConfig+0x2cc>)
 8003dda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dde:	f003 0303 	and.w	r3, r3, #3
 8003de2:	2b03      	cmp	r3, #3
 8003de4:	d816      	bhi.n	8003e14 <UART_SetConfig+0xb8>
 8003de6:	a201      	add	r2, pc, #4	; (adr r2, 8003dec <UART_SetConfig+0x90>)
 8003de8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dec:	08003dfd 	.word	0x08003dfd
 8003df0:	08003e09 	.word	0x08003e09
 8003df4:	08003e03 	.word	0x08003e03
 8003df8:	08003e0f 	.word	0x08003e0f
 8003dfc:	2301      	movs	r3, #1
 8003dfe:	77fb      	strb	r3, [r7, #31]
 8003e00:	e150      	b.n	80040a4 <UART_SetConfig+0x348>
 8003e02:	2302      	movs	r3, #2
 8003e04:	77fb      	strb	r3, [r7, #31]
 8003e06:	e14d      	b.n	80040a4 <UART_SetConfig+0x348>
 8003e08:	2304      	movs	r3, #4
 8003e0a:	77fb      	strb	r3, [r7, #31]
 8003e0c:	e14a      	b.n	80040a4 <UART_SetConfig+0x348>
 8003e0e:	2308      	movs	r3, #8
 8003e10:	77fb      	strb	r3, [r7, #31]
 8003e12:	e147      	b.n	80040a4 <UART_SetConfig+0x348>
 8003e14:	2310      	movs	r3, #16
 8003e16:	77fb      	strb	r3, [r7, #31]
 8003e18:	e144      	b.n	80040a4 <UART_SetConfig+0x348>
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	4a83      	ldr	r2, [pc, #524]	; (800402c <UART_SetConfig+0x2d0>)
 8003e20:	4293      	cmp	r3, r2
 8003e22:	d132      	bne.n	8003e8a <UART_SetConfig+0x12e>
 8003e24:	4b80      	ldr	r3, [pc, #512]	; (8004028 <UART_SetConfig+0x2cc>)
 8003e26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e2a:	f003 030c 	and.w	r3, r3, #12
 8003e2e:	2b0c      	cmp	r3, #12
 8003e30:	d828      	bhi.n	8003e84 <UART_SetConfig+0x128>
 8003e32:	a201      	add	r2, pc, #4	; (adr r2, 8003e38 <UART_SetConfig+0xdc>)
 8003e34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e38:	08003e6d 	.word	0x08003e6d
 8003e3c:	08003e85 	.word	0x08003e85
 8003e40:	08003e85 	.word	0x08003e85
 8003e44:	08003e85 	.word	0x08003e85
 8003e48:	08003e79 	.word	0x08003e79
 8003e4c:	08003e85 	.word	0x08003e85
 8003e50:	08003e85 	.word	0x08003e85
 8003e54:	08003e85 	.word	0x08003e85
 8003e58:	08003e73 	.word	0x08003e73
 8003e5c:	08003e85 	.word	0x08003e85
 8003e60:	08003e85 	.word	0x08003e85
 8003e64:	08003e85 	.word	0x08003e85
 8003e68:	08003e7f 	.word	0x08003e7f
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	77fb      	strb	r3, [r7, #31]
 8003e70:	e118      	b.n	80040a4 <UART_SetConfig+0x348>
 8003e72:	2302      	movs	r3, #2
 8003e74:	77fb      	strb	r3, [r7, #31]
 8003e76:	e115      	b.n	80040a4 <UART_SetConfig+0x348>
 8003e78:	2304      	movs	r3, #4
 8003e7a:	77fb      	strb	r3, [r7, #31]
 8003e7c:	e112      	b.n	80040a4 <UART_SetConfig+0x348>
 8003e7e:	2308      	movs	r3, #8
 8003e80:	77fb      	strb	r3, [r7, #31]
 8003e82:	e10f      	b.n	80040a4 <UART_SetConfig+0x348>
 8003e84:	2310      	movs	r3, #16
 8003e86:	77fb      	strb	r3, [r7, #31]
 8003e88:	e10c      	b.n	80040a4 <UART_SetConfig+0x348>
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	4a68      	ldr	r2, [pc, #416]	; (8004030 <UART_SetConfig+0x2d4>)
 8003e90:	4293      	cmp	r3, r2
 8003e92:	d120      	bne.n	8003ed6 <UART_SetConfig+0x17a>
 8003e94:	4b64      	ldr	r3, [pc, #400]	; (8004028 <UART_SetConfig+0x2cc>)
 8003e96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e9a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003e9e:	2b30      	cmp	r3, #48	; 0x30
 8003ea0:	d013      	beq.n	8003eca <UART_SetConfig+0x16e>
 8003ea2:	2b30      	cmp	r3, #48	; 0x30
 8003ea4:	d814      	bhi.n	8003ed0 <UART_SetConfig+0x174>
 8003ea6:	2b20      	cmp	r3, #32
 8003ea8:	d009      	beq.n	8003ebe <UART_SetConfig+0x162>
 8003eaa:	2b20      	cmp	r3, #32
 8003eac:	d810      	bhi.n	8003ed0 <UART_SetConfig+0x174>
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d002      	beq.n	8003eb8 <UART_SetConfig+0x15c>
 8003eb2:	2b10      	cmp	r3, #16
 8003eb4:	d006      	beq.n	8003ec4 <UART_SetConfig+0x168>
 8003eb6:	e00b      	b.n	8003ed0 <UART_SetConfig+0x174>
 8003eb8:	2300      	movs	r3, #0
 8003eba:	77fb      	strb	r3, [r7, #31]
 8003ebc:	e0f2      	b.n	80040a4 <UART_SetConfig+0x348>
 8003ebe:	2302      	movs	r3, #2
 8003ec0:	77fb      	strb	r3, [r7, #31]
 8003ec2:	e0ef      	b.n	80040a4 <UART_SetConfig+0x348>
 8003ec4:	2304      	movs	r3, #4
 8003ec6:	77fb      	strb	r3, [r7, #31]
 8003ec8:	e0ec      	b.n	80040a4 <UART_SetConfig+0x348>
 8003eca:	2308      	movs	r3, #8
 8003ecc:	77fb      	strb	r3, [r7, #31]
 8003ece:	e0e9      	b.n	80040a4 <UART_SetConfig+0x348>
 8003ed0:	2310      	movs	r3, #16
 8003ed2:	77fb      	strb	r3, [r7, #31]
 8003ed4:	e0e6      	b.n	80040a4 <UART_SetConfig+0x348>
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	4a56      	ldr	r2, [pc, #344]	; (8004034 <UART_SetConfig+0x2d8>)
 8003edc:	4293      	cmp	r3, r2
 8003ede:	d120      	bne.n	8003f22 <UART_SetConfig+0x1c6>
 8003ee0:	4b51      	ldr	r3, [pc, #324]	; (8004028 <UART_SetConfig+0x2cc>)
 8003ee2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ee6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003eea:	2bc0      	cmp	r3, #192	; 0xc0
 8003eec:	d013      	beq.n	8003f16 <UART_SetConfig+0x1ba>
 8003eee:	2bc0      	cmp	r3, #192	; 0xc0
 8003ef0:	d814      	bhi.n	8003f1c <UART_SetConfig+0x1c0>
 8003ef2:	2b80      	cmp	r3, #128	; 0x80
 8003ef4:	d009      	beq.n	8003f0a <UART_SetConfig+0x1ae>
 8003ef6:	2b80      	cmp	r3, #128	; 0x80
 8003ef8:	d810      	bhi.n	8003f1c <UART_SetConfig+0x1c0>
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d002      	beq.n	8003f04 <UART_SetConfig+0x1a8>
 8003efe:	2b40      	cmp	r3, #64	; 0x40
 8003f00:	d006      	beq.n	8003f10 <UART_SetConfig+0x1b4>
 8003f02:	e00b      	b.n	8003f1c <UART_SetConfig+0x1c0>
 8003f04:	2300      	movs	r3, #0
 8003f06:	77fb      	strb	r3, [r7, #31]
 8003f08:	e0cc      	b.n	80040a4 <UART_SetConfig+0x348>
 8003f0a:	2302      	movs	r3, #2
 8003f0c:	77fb      	strb	r3, [r7, #31]
 8003f0e:	e0c9      	b.n	80040a4 <UART_SetConfig+0x348>
 8003f10:	2304      	movs	r3, #4
 8003f12:	77fb      	strb	r3, [r7, #31]
 8003f14:	e0c6      	b.n	80040a4 <UART_SetConfig+0x348>
 8003f16:	2308      	movs	r3, #8
 8003f18:	77fb      	strb	r3, [r7, #31]
 8003f1a:	e0c3      	b.n	80040a4 <UART_SetConfig+0x348>
 8003f1c:	2310      	movs	r3, #16
 8003f1e:	77fb      	strb	r3, [r7, #31]
 8003f20:	e0c0      	b.n	80040a4 <UART_SetConfig+0x348>
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	4a44      	ldr	r2, [pc, #272]	; (8004038 <UART_SetConfig+0x2dc>)
 8003f28:	4293      	cmp	r3, r2
 8003f2a:	d125      	bne.n	8003f78 <UART_SetConfig+0x21c>
 8003f2c:	4b3e      	ldr	r3, [pc, #248]	; (8004028 <UART_SetConfig+0x2cc>)
 8003f2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f36:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003f3a:	d017      	beq.n	8003f6c <UART_SetConfig+0x210>
 8003f3c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003f40:	d817      	bhi.n	8003f72 <UART_SetConfig+0x216>
 8003f42:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f46:	d00b      	beq.n	8003f60 <UART_SetConfig+0x204>
 8003f48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f4c:	d811      	bhi.n	8003f72 <UART_SetConfig+0x216>
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d003      	beq.n	8003f5a <UART_SetConfig+0x1fe>
 8003f52:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f56:	d006      	beq.n	8003f66 <UART_SetConfig+0x20a>
 8003f58:	e00b      	b.n	8003f72 <UART_SetConfig+0x216>
 8003f5a:	2300      	movs	r3, #0
 8003f5c:	77fb      	strb	r3, [r7, #31]
 8003f5e:	e0a1      	b.n	80040a4 <UART_SetConfig+0x348>
 8003f60:	2302      	movs	r3, #2
 8003f62:	77fb      	strb	r3, [r7, #31]
 8003f64:	e09e      	b.n	80040a4 <UART_SetConfig+0x348>
 8003f66:	2304      	movs	r3, #4
 8003f68:	77fb      	strb	r3, [r7, #31]
 8003f6a:	e09b      	b.n	80040a4 <UART_SetConfig+0x348>
 8003f6c:	2308      	movs	r3, #8
 8003f6e:	77fb      	strb	r3, [r7, #31]
 8003f70:	e098      	b.n	80040a4 <UART_SetConfig+0x348>
 8003f72:	2310      	movs	r3, #16
 8003f74:	77fb      	strb	r3, [r7, #31]
 8003f76:	e095      	b.n	80040a4 <UART_SetConfig+0x348>
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	4a2f      	ldr	r2, [pc, #188]	; (800403c <UART_SetConfig+0x2e0>)
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d125      	bne.n	8003fce <UART_SetConfig+0x272>
 8003f82:	4b29      	ldr	r3, [pc, #164]	; (8004028 <UART_SetConfig+0x2cc>)
 8003f84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f88:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003f8c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003f90:	d017      	beq.n	8003fc2 <UART_SetConfig+0x266>
 8003f92:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003f96:	d817      	bhi.n	8003fc8 <UART_SetConfig+0x26c>
 8003f98:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f9c:	d00b      	beq.n	8003fb6 <UART_SetConfig+0x25a>
 8003f9e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003fa2:	d811      	bhi.n	8003fc8 <UART_SetConfig+0x26c>
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d003      	beq.n	8003fb0 <UART_SetConfig+0x254>
 8003fa8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003fac:	d006      	beq.n	8003fbc <UART_SetConfig+0x260>
 8003fae:	e00b      	b.n	8003fc8 <UART_SetConfig+0x26c>
 8003fb0:	2301      	movs	r3, #1
 8003fb2:	77fb      	strb	r3, [r7, #31]
 8003fb4:	e076      	b.n	80040a4 <UART_SetConfig+0x348>
 8003fb6:	2302      	movs	r3, #2
 8003fb8:	77fb      	strb	r3, [r7, #31]
 8003fba:	e073      	b.n	80040a4 <UART_SetConfig+0x348>
 8003fbc:	2304      	movs	r3, #4
 8003fbe:	77fb      	strb	r3, [r7, #31]
 8003fc0:	e070      	b.n	80040a4 <UART_SetConfig+0x348>
 8003fc2:	2308      	movs	r3, #8
 8003fc4:	77fb      	strb	r3, [r7, #31]
 8003fc6:	e06d      	b.n	80040a4 <UART_SetConfig+0x348>
 8003fc8:	2310      	movs	r3, #16
 8003fca:	77fb      	strb	r3, [r7, #31]
 8003fcc:	e06a      	b.n	80040a4 <UART_SetConfig+0x348>
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	4a1b      	ldr	r2, [pc, #108]	; (8004040 <UART_SetConfig+0x2e4>)
 8003fd4:	4293      	cmp	r3, r2
 8003fd6:	d138      	bne.n	800404a <UART_SetConfig+0x2ee>
 8003fd8:	4b13      	ldr	r3, [pc, #76]	; (8004028 <UART_SetConfig+0x2cc>)
 8003fda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fde:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8003fe2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003fe6:	d017      	beq.n	8004018 <UART_SetConfig+0x2bc>
 8003fe8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003fec:	d82a      	bhi.n	8004044 <UART_SetConfig+0x2e8>
 8003fee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ff2:	d00b      	beq.n	800400c <UART_SetConfig+0x2b0>
 8003ff4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ff8:	d824      	bhi.n	8004044 <UART_SetConfig+0x2e8>
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d003      	beq.n	8004006 <UART_SetConfig+0x2aa>
 8003ffe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004002:	d006      	beq.n	8004012 <UART_SetConfig+0x2b6>
 8004004:	e01e      	b.n	8004044 <UART_SetConfig+0x2e8>
 8004006:	2300      	movs	r3, #0
 8004008:	77fb      	strb	r3, [r7, #31]
 800400a:	e04b      	b.n	80040a4 <UART_SetConfig+0x348>
 800400c:	2302      	movs	r3, #2
 800400e:	77fb      	strb	r3, [r7, #31]
 8004010:	e048      	b.n	80040a4 <UART_SetConfig+0x348>
 8004012:	2304      	movs	r3, #4
 8004014:	77fb      	strb	r3, [r7, #31]
 8004016:	e045      	b.n	80040a4 <UART_SetConfig+0x348>
 8004018:	2308      	movs	r3, #8
 800401a:	77fb      	strb	r3, [r7, #31]
 800401c:	e042      	b.n	80040a4 <UART_SetConfig+0x348>
 800401e:	bf00      	nop
 8004020:	efff69f3 	.word	0xefff69f3
 8004024:	40011000 	.word	0x40011000
 8004028:	40023800 	.word	0x40023800
 800402c:	40004400 	.word	0x40004400
 8004030:	40004800 	.word	0x40004800
 8004034:	40004c00 	.word	0x40004c00
 8004038:	40005000 	.word	0x40005000
 800403c:	40011400 	.word	0x40011400
 8004040:	40007800 	.word	0x40007800
 8004044:	2310      	movs	r3, #16
 8004046:	77fb      	strb	r3, [r7, #31]
 8004048:	e02c      	b.n	80040a4 <UART_SetConfig+0x348>
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	4a72      	ldr	r2, [pc, #456]	; (8004218 <UART_SetConfig+0x4bc>)
 8004050:	4293      	cmp	r3, r2
 8004052:	d125      	bne.n	80040a0 <UART_SetConfig+0x344>
 8004054:	4b71      	ldr	r3, [pc, #452]	; (800421c <UART_SetConfig+0x4c0>)
 8004056:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800405a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800405e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004062:	d017      	beq.n	8004094 <UART_SetConfig+0x338>
 8004064:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004068:	d817      	bhi.n	800409a <UART_SetConfig+0x33e>
 800406a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800406e:	d00b      	beq.n	8004088 <UART_SetConfig+0x32c>
 8004070:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004074:	d811      	bhi.n	800409a <UART_SetConfig+0x33e>
 8004076:	2b00      	cmp	r3, #0
 8004078:	d003      	beq.n	8004082 <UART_SetConfig+0x326>
 800407a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800407e:	d006      	beq.n	800408e <UART_SetConfig+0x332>
 8004080:	e00b      	b.n	800409a <UART_SetConfig+0x33e>
 8004082:	2300      	movs	r3, #0
 8004084:	77fb      	strb	r3, [r7, #31]
 8004086:	e00d      	b.n	80040a4 <UART_SetConfig+0x348>
 8004088:	2302      	movs	r3, #2
 800408a:	77fb      	strb	r3, [r7, #31]
 800408c:	e00a      	b.n	80040a4 <UART_SetConfig+0x348>
 800408e:	2304      	movs	r3, #4
 8004090:	77fb      	strb	r3, [r7, #31]
 8004092:	e007      	b.n	80040a4 <UART_SetConfig+0x348>
 8004094:	2308      	movs	r3, #8
 8004096:	77fb      	strb	r3, [r7, #31]
 8004098:	e004      	b.n	80040a4 <UART_SetConfig+0x348>
 800409a:	2310      	movs	r3, #16
 800409c:	77fb      	strb	r3, [r7, #31]
 800409e:	e001      	b.n	80040a4 <UART_SetConfig+0x348>
 80040a0:	2310      	movs	r3, #16
 80040a2:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	69db      	ldr	r3, [r3, #28]
 80040a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80040ac:	d15b      	bne.n	8004166 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80040ae:	7ffb      	ldrb	r3, [r7, #31]
 80040b0:	2b08      	cmp	r3, #8
 80040b2:	d828      	bhi.n	8004106 <UART_SetConfig+0x3aa>
 80040b4:	a201      	add	r2, pc, #4	; (adr r2, 80040bc <UART_SetConfig+0x360>)
 80040b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040ba:	bf00      	nop
 80040bc:	080040e1 	.word	0x080040e1
 80040c0:	080040e9 	.word	0x080040e9
 80040c4:	080040f1 	.word	0x080040f1
 80040c8:	08004107 	.word	0x08004107
 80040cc:	080040f7 	.word	0x080040f7
 80040d0:	08004107 	.word	0x08004107
 80040d4:	08004107 	.word	0x08004107
 80040d8:	08004107 	.word	0x08004107
 80040dc:	080040ff 	.word	0x080040ff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80040e0:	f7fe fcba 	bl	8002a58 <HAL_RCC_GetPCLK1Freq>
 80040e4:	61b8      	str	r0, [r7, #24]
        break;
 80040e6:	e013      	b.n	8004110 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80040e8:	f7fe fcca 	bl	8002a80 <HAL_RCC_GetPCLK2Freq>
 80040ec:	61b8      	str	r0, [r7, #24]
        break;
 80040ee:	e00f      	b.n	8004110 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80040f0:	4b4b      	ldr	r3, [pc, #300]	; (8004220 <UART_SetConfig+0x4c4>)
 80040f2:	61bb      	str	r3, [r7, #24]
        break;
 80040f4:	e00c      	b.n	8004110 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80040f6:	f7fe fb9d 	bl	8002834 <HAL_RCC_GetSysClockFreq>
 80040fa:	61b8      	str	r0, [r7, #24]
        break;
 80040fc:	e008      	b.n	8004110 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80040fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004102:	61bb      	str	r3, [r7, #24]
        break;
 8004104:	e004      	b.n	8004110 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8004106:	2300      	movs	r3, #0
 8004108:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800410a:	2301      	movs	r3, #1
 800410c:	77bb      	strb	r3, [r7, #30]
        break;
 800410e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004110:	69bb      	ldr	r3, [r7, #24]
 8004112:	2b00      	cmp	r3, #0
 8004114:	d074      	beq.n	8004200 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004116:	69bb      	ldr	r3, [r7, #24]
 8004118:	005a      	lsls	r2, r3, #1
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	685b      	ldr	r3, [r3, #4]
 800411e:	085b      	lsrs	r3, r3, #1
 8004120:	441a      	add	r2, r3
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	685b      	ldr	r3, [r3, #4]
 8004126:	fbb2 f3f3 	udiv	r3, r2, r3
 800412a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800412c:	693b      	ldr	r3, [r7, #16]
 800412e:	2b0f      	cmp	r3, #15
 8004130:	d916      	bls.n	8004160 <UART_SetConfig+0x404>
 8004132:	693b      	ldr	r3, [r7, #16]
 8004134:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004138:	d212      	bcs.n	8004160 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800413a:	693b      	ldr	r3, [r7, #16]
 800413c:	b29b      	uxth	r3, r3
 800413e:	f023 030f 	bic.w	r3, r3, #15
 8004142:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004144:	693b      	ldr	r3, [r7, #16]
 8004146:	085b      	lsrs	r3, r3, #1
 8004148:	b29b      	uxth	r3, r3
 800414a:	f003 0307 	and.w	r3, r3, #7
 800414e:	b29a      	uxth	r2, r3
 8004150:	89fb      	ldrh	r3, [r7, #14]
 8004152:	4313      	orrs	r3, r2
 8004154:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	89fa      	ldrh	r2, [r7, #14]
 800415c:	60da      	str	r2, [r3, #12]
 800415e:	e04f      	b.n	8004200 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004160:	2301      	movs	r3, #1
 8004162:	77bb      	strb	r3, [r7, #30]
 8004164:	e04c      	b.n	8004200 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004166:	7ffb      	ldrb	r3, [r7, #31]
 8004168:	2b08      	cmp	r3, #8
 800416a:	d828      	bhi.n	80041be <UART_SetConfig+0x462>
 800416c:	a201      	add	r2, pc, #4	; (adr r2, 8004174 <UART_SetConfig+0x418>)
 800416e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004172:	bf00      	nop
 8004174:	08004199 	.word	0x08004199
 8004178:	080041a1 	.word	0x080041a1
 800417c:	080041a9 	.word	0x080041a9
 8004180:	080041bf 	.word	0x080041bf
 8004184:	080041af 	.word	0x080041af
 8004188:	080041bf 	.word	0x080041bf
 800418c:	080041bf 	.word	0x080041bf
 8004190:	080041bf 	.word	0x080041bf
 8004194:	080041b7 	.word	0x080041b7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004198:	f7fe fc5e 	bl	8002a58 <HAL_RCC_GetPCLK1Freq>
 800419c:	61b8      	str	r0, [r7, #24]
        break;
 800419e:	e013      	b.n	80041c8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80041a0:	f7fe fc6e 	bl	8002a80 <HAL_RCC_GetPCLK2Freq>
 80041a4:	61b8      	str	r0, [r7, #24]
        break;
 80041a6:	e00f      	b.n	80041c8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80041a8:	4b1d      	ldr	r3, [pc, #116]	; (8004220 <UART_SetConfig+0x4c4>)
 80041aa:	61bb      	str	r3, [r7, #24]
        break;
 80041ac:	e00c      	b.n	80041c8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80041ae:	f7fe fb41 	bl	8002834 <HAL_RCC_GetSysClockFreq>
 80041b2:	61b8      	str	r0, [r7, #24]
        break;
 80041b4:	e008      	b.n	80041c8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80041b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80041ba:	61bb      	str	r3, [r7, #24]
        break;
 80041bc:	e004      	b.n	80041c8 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80041be:	2300      	movs	r3, #0
 80041c0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80041c2:	2301      	movs	r3, #1
 80041c4:	77bb      	strb	r3, [r7, #30]
        break;
 80041c6:	bf00      	nop
    }

    if (pclk != 0U)
 80041c8:	69bb      	ldr	r3, [r7, #24]
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d018      	beq.n	8004200 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	685b      	ldr	r3, [r3, #4]
 80041d2:	085a      	lsrs	r2, r3, #1
 80041d4:	69bb      	ldr	r3, [r7, #24]
 80041d6:	441a      	add	r2, r3
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	685b      	ldr	r3, [r3, #4]
 80041dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80041e0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80041e2:	693b      	ldr	r3, [r7, #16]
 80041e4:	2b0f      	cmp	r3, #15
 80041e6:	d909      	bls.n	80041fc <UART_SetConfig+0x4a0>
 80041e8:	693b      	ldr	r3, [r7, #16]
 80041ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041ee:	d205      	bcs.n	80041fc <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80041f0:	693b      	ldr	r3, [r7, #16]
 80041f2:	b29a      	uxth	r2, r3
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	60da      	str	r2, [r3, #12]
 80041fa:	e001      	b.n	8004200 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80041fc:	2301      	movs	r3, #1
 80041fe:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2200      	movs	r2, #0
 8004204:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	2200      	movs	r2, #0
 800420a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800420c:	7fbb      	ldrb	r3, [r7, #30]
}
 800420e:	4618      	mov	r0, r3
 8004210:	3720      	adds	r7, #32
 8004212:	46bd      	mov	sp, r7
 8004214:	bd80      	pop	{r7, pc}
 8004216:	bf00      	nop
 8004218:	40007c00 	.word	0x40007c00
 800421c:	40023800 	.word	0x40023800
 8004220:	00f42400 	.word	0x00f42400

08004224 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004224:	b480      	push	{r7}
 8004226:	b083      	sub	sp, #12
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004230:	f003 0301 	and.w	r3, r3, #1
 8004234:	2b00      	cmp	r3, #0
 8004236:	d00a      	beq.n	800424e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	685b      	ldr	r3, [r3, #4]
 800423e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	430a      	orrs	r2, r1
 800424c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004252:	f003 0302 	and.w	r3, r3, #2
 8004256:	2b00      	cmp	r3, #0
 8004258:	d00a      	beq.n	8004270 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	685b      	ldr	r3, [r3, #4]
 8004260:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	430a      	orrs	r2, r1
 800426e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004274:	f003 0304 	and.w	r3, r3, #4
 8004278:	2b00      	cmp	r3, #0
 800427a:	d00a      	beq.n	8004292 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	685b      	ldr	r3, [r3, #4]
 8004282:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	430a      	orrs	r2, r1
 8004290:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004296:	f003 0308 	and.w	r3, r3, #8
 800429a:	2b00      	cmp	r3, #0
 800429c:	d00a      	beq.n	80042b4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	685b      	ldr	r3, [r3, #4]
 80042a4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	430a      	orrs	r2, r1
 80042b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042b8:	f003 0310 	and.w	r3, r3, #16
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d00a      	beq.n	80042d6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	689b      	ldr	r3, [r3, #8]
 80042c6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	430a      	orrs	r2, r1
 80042d4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042da:	f003 0320 	and.w	r3, r3, #32
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d00a      	beq.n	80042f8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	689b      	ldr	r3, [r3, #8]
 80042e8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	430a      	orrs	r2, r1
 80042f6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004300:	2b00      	cmp	r3, #0
 8004302:	d01a      	beq.n	800433a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	685b      	ldr	r3, [r3, #4]
 800430a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	430a      	orrs	r2, r1
 8004318:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800431e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004322:	d10a      	bne.n	800433a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	685b      	ldr	r3, [r3, #4]
 800432a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	430a      	orrs	r2, r1
 8004338:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800433e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004342:	2b00      	cmp	r3, #0
 8004344:	d00a      	beq.n	800435c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	685b      	ldr	r3, [r3, #4]
 800434c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	430a      	orrs	r2, r1
 800435a:	605a      	str	r2, [r3, #4]
  }
}
 800435c:	bf00      	nop
 800435e:	370c      	adds	r7, #12
 8004360:	46bd      	mov	sp, r7
 8004362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004366:	4770      	bx	lr

08004368 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004368:	b580      	push	{r7, lr}
 800436a:	b086      	sub	sp, #24
 800436c:	af02      	add	r7, sp, #8
 800436e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2200      	movs	r2, #0
 8004374:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004378:	f7fd fb1a 	bl	80019b0 <HAL_GetTick>
 800437c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f003 0308 	and.w	r3, r3, #8
 8004388:	2b08      	cmp	r3, #8
 800438a:	d10e      	bne.n	80043aa <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800438c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004390:	9300      	str	r3, [sp, #0]
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	2200      	movs	r2, #0
 8004396:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800439a:	6878      	ldr	r0, [r7, #4]
 800439c:	f000 f817 	bl	80043ce <UART_WaitOnFlagUntilTimeout>
 80043a0:	4603      	mov	r3, r0
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d001      	beq.n	80043aa <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80043a6:	2303      	movs	r3, #3
 80043a8:	e00d      	b.n	80043c6 <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	2220      	movs	r2, #32
 80043ae:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2220      	movs	r2, #32
 80043b4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	2200      	movs	r2, #0
 80043ba:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2200      	movs	r2, #0
 80043c0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80043c4:	2300      	movs	r3, #0
}
 80043c6:	4618      	mov	r0, r3
 80043c8:	3710      	adds	r7, #16
 80043ca:	46bd      	mov	sp, r7
 80043cc:	bd80      	pop	{r7, pc}

080043ce <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80043ce:	b580      	push	{r7, lr}
 80043d0:	b09c      	sub	sp, #112	; 0x70
 80043d2:	af00      	add	r7, sp, #0
 80043d4:	60f8      	str	r0, [r7, #12]
 80043d6:	60b9      	str	r1, [r7, #8]
 80043d8:	603b      	str	r3, [r7, #0]
 80043da:	4613      	mov	r3, r2
 80043dc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80043de:	e0a5      	b.n	800452c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043e0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80043e2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80043e6:	f000 80a1 	beq.w	800452c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043ea:	f7fd fae1 	bl	80019b0 <HAL_GetTick>
 80043ee:	4602      	mov	r2, r0
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	1ad3      	subs	r3, r2, r3
 80043f4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80043f6:	429a      	cmp	r2, r3
 80043f8:	d302      	bcc.n	8004400 <UART_WaitOnFlagUntilTimeout+0x32>
 80043fa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d13e      	bne.n	800447e <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004406:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004408:	e853 3f00 	ldrex	r3, [r3]
 800440c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800440e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004410:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004414:	667b      	str	r3, [r7, #100]	; 0x64
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	461a      	mov	r2, r3
 800441c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800441e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004420:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004422:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004424:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004426:	e841 2300 	strex	r3, r2, [r1]
 800442a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800442c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800442e:	2b00      	cmp	r3, #0
 8004430:	d1e6      	bne.n	8004400 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	3308      	adds	r3, #8
 8004438:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800443a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800443c:	e853 3f00 	ldrex	r3, [r3]
 8004440:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004442:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004444:	f023 0301 	bic.w	r3, r3, #1
 8004448:	663b      	str	r3, [r7, #96]	; 0x60
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	3308      	adds	r3, #8
 8004450:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004452:	64ba      	str	r2, [r7, #72]	; 0x48
 8004454:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004456:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004458:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800445a:	e841 2300 	strex	r3, r2, [r1]
 800445e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004460:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004462:	2b00      	cmp	r3, #0
 8004464:	d1e5      	bne.n	8004432 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	2220      	movs	r2, #32
 800446a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	2220      	movs	r2, #32
 8004470:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	2200      	movs	r2, #0
 8004476:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800447a:	2303      	movs	r3, #3
 800447c:	e067      	b.n	800454e <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f003 0304 	and.w	r3, r3, #4
 8004488:	2b00      	cmp	r3, #0
 800448a:	d04f      	beq.n	800452c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	69db      	ldr	r3, [r3, #28]
 8004492:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004496:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800449a:	d147      	bne.n	800452c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80044a4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044ae:	e853 3f00 	ldrex	r3, [r3]
 80044b2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80044b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044b6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80044ba:	66fb      	str	r3, [r7, #108]	; 0x6c
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	461a      	mov	r2, r3
 80044c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044c4:	637b      	str	r3, [r7, #52]	; 0x34
 80044c6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044c8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80044ca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80044cc:	e841 2300 	strex	r3, r2, [r1]
 80044d0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80044d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d1e6      	bne.n	80044a6 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	3308      	adds	r3, #8
 80044de:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044e0:	697b      	ldr	r3, [r7, #20]
 80044e2:	e853 3f00 	ldrex	r3, [r3]
 80044e6:	613b      	str	r3, [r7, #16]
   return(result);
 80044e8:	693b      	ldr	r3, [r7, #16]
 80044ea:	f023 0301 	bic.w	r3, r3, #1
 80044ee:	66bb      	str	r3, [r7, #104]	; 0x68
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	3308      	adds	r3, #8
 80044f6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80044f8:	623a      	str	r2, [r7, #32]
 80044fa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044fc:	69f9      	ldr	r1, [r7, #28]
 80044fe:	6a3a      	ldr	r2, [r7, #32]
 8004500:	e841 2300 	strex	r3, r2, [r1]
 8004504:	61bb      	str	r3, [r7, #24]
   return(result);
 8004506:	69bb      	ldr	r3, [r7, #24]
 8004508:	2b00      	cmp	r3, #0
 800450a:	d1e5      	bne.n	80044d8 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	2220      	movs	r2, #32
 8004510:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	2220      	movs	r2, #32
 8004516:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	2220      	movs	r2, #32
 800451c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	2200      	movs	r2, #0
 8004524:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004528:	2303      	movs	r3, #3
 800452a:	e010      	b.n	800454e <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	69da      	ldr	r2, [r3, #28]
 8004532:	68bb      	ldr	r3, [r7, #8]
 8004534:	4013      	ands	r3, r2
 8004536:	68ba      	ldr	r2, [r7, #8]
 8004538:	429a      	cmp	r2, r3
 800453a:	bf0c      	ite	eq
 800453c:	2301      	moveq	r3, #1
 800453e:	2300      	movne	r3, #0
 8004540:	b2db      	uxtb	r3, r3
 8004542:	461a      	mov	r2, r3
 8004544:	79fb      	ldrb	r3, [r7, #7]
 8004546:	429a      	cmp	r2, r3
 8004548:	f43f af4a 	beq.w	80043e0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800454c:	2300      	movs	r3, #0
}
 800454e:	4618      	mov	r0, r3
 8004550:	3770      	adds	r7, #112	; 0x70
 8004552:	46bd      	mov	sp, r7
 8004554:	bd80      	pop	{r7, pc}
	...

08004558 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004558:	b480      	push	{r7}
 800455a:	b097      	sub	sp, #92	; 0x5c
 800455c:	af00      	add	r7, sp, #0
 800455e:	60f8      	str	r0, [r7, #12]
 8004560:	60b9      	str	r1, [r7, #8]
 8004562:	4613      	mov	r3, r2
 8004564:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	68ba      	ldr	r2, [r7, #8]
 800456a:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	88fa      	ldrh	r2, [r7, #6]
 8004570:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	88fa      	ldrh	r2, [r7, #6]
 8004578:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	2200      	movs	r2, #0
 8004580:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	689b      	ldr	r3, [r3, #8]
 8004586:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800458a:	d10e      	bne.n	80045aa <UART_Start_Receive_IT+0x52>
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	691b      	ldr	r3, [r3, #16]
 8004590:	2b00      	cmp	r3, #0
 8004592:	d105      	bne.n	80045a0 <UART_Start_Receive_IT+0x48>
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	f240 12ff 	movw	r2, #511	; 0x1ff
 800459a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800459e:	e02d      	b.n	80045fc <UART_Start_Receive_IT+0xa4>
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	22ff      	movs	r2, #255	; 0xff
 80045a4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80045a8:	e028      	b.n	80045fc <UART_Start_Receive_IT+0xa4>
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	689b      	ldr	r3, [r3, #8]
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d10d      	bne.n	80045ce <UART_Start_Receive_IT+0x76>
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	691b      	ldr	r3, [r3, #16]
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d104      	bne.n	80045c4 <UART_Start_Receive_IT+0x6c>
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	22ff      	movs	r2, #255	; 0xff
 80045be:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80045c2:	e01b      	b.n	80045fc <UART_Start_Receive_IT+0xa4>
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	227f      	movs	r2, #127	; 0x7f
 80045c8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80045cc:	e016      	b.n	80045fc <UART_Start_Receive_IT+0xa4>
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	689b      	ldr	r3, [r3, #8]
 80045d2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80045d6:	d10d      	bne.n	80045f4 <UART_Start_Receive_IT+0x9c>
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	691b      	ldr	r3, [r3, #16]
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d104      	bne.n	80045ea <UART_Start_Receive_IT+0x92>
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	227f      	movs	r2, #127	; 0x7f
 80045e4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80045e8:	e008      	b.n	80045fc <UART_Start_Receive_IT+0xa4>
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	223f      	movs	r2, #63	; 0x3f
 80045ee:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80045f2:	e003      	b.n	80045fc <UART_Start_Receive_IT+0xa4>
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	2200      	movs	r2, #0
 80045f8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	2200      	movs	r2, #0
 8004600:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	2222      	movs	r2, #34	; 0x22
 8004608:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	3308      	adds	r3, #8
 8004610:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004612:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004614:	e853 3f00 	ldrex	r3, [r3]
 8004618:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800461a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800461c:	f043 0301 	orr.w	r3, r3, #1
 8004620:	657b      	str	r3, [r7, #84]	; 0x54
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	3308      	adds	r3, #8
 8004628:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800462a:	64ba      	str	r2, [r7, #72]	; 0x48
 800462c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800462e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004630:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004632:	e841 2300 	strex	r3, r2, [r1]
 8004636:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004638:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800463a:	2b00      	cmp	r3, #0
 800463c:	d1e5      	bne.n	800460a <UART_Start_Receive_IT+0xb2>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	689b      	ldr	r3, [r3, #8]
 8004642:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004646:	d107      	bne.n	8004658 <UART_Start_Receive_IT+0x100>
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	691b      	ldr	r3, [r3, #16]
 800464c:	2b00      	cmp	r3, #0
 800464e:	d103      	bne.n	8004658 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	4a24      	ldr	r2, [pc, #144]	; (80046e4 <UART_Start_Receive_IT+0x18c>)
 8004654:	665a      	str	r2, [r3, #100]	; 0x64
 8004656:	e002      	b.n	800465e <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	4a23      	ldr	r2, [pc, #140]	; (80046e8 <UART_Start_Receive_IT+0x190>)
 800465c:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	2200      	movs	r2, #0
 8004662:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	691b      	ldr	r3, [r3, #16]
 800466a:	2b00      	cmp	r3, #0
 800466c:	d019      	beq.n	80046a2 <UART_Start_Receive_IT+0x14a>
  { 
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004674:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004676:	e853 3f00 	ldrex	r3, [r3]
 800467a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800467c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800467e:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8004682:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	461a      	mov	r2, r3
 800468a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800468c:	637b      	str	r3, [r7, #52]	; 0x34
 800468e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004690:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004692:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004694:	e841 2300 	strex	r3, r2, [r1]
 8004698:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800469a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800469c:	2b00      	cmp	r3, #0
 800469e:	d1e6      	bne.n	800466e <UART_Start_Receive_IT+0x116>
 80046a0:	e018      	b.n	80046d4 <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046a8:	697b      	ldr	r3, [r7, #20]
 80046aa:	e853 3f00 	ldrex	r3, [r3]
 80046ae:	613b      	str	r3, [r7, #16]
   return(result);
 80046b0:	693b      	ldr	r3, [r7, #16]
 80046b2:	f043 0320 	orr.w	r3, r3, #32
 80046b6:	653b      	str	r3, [r7, #80]	; 0x50
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	461a      	mov	r2, r3
 80046be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80046c0:	623b      	str	r3, [r7, #32]
 80046c2:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046c4:	69f9      	ldr	r1, [r7, #28]
 80046c6:	6a3a      	ldr	r2, [r7, #32]
 80046c8:	e841 2300 	strex	r3, r2, [r1]
 80046cc:	61bb      	str	r3, [r7, #24]
   return(result);
 80046ce:	69bb      	ldr	r3, [r7, #24]
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d1e6      	bne.n	80046a2 <UART_Start_Receive_IT+0x14a>
  }
  return HAL_OK;
 80046d4:	2300      	movs	r3, #0
}
 80046d6:	4618      	mov	r0, r3
 80046d8:	375c      	adds	r7, #92	; 0x5c
 80046da:	46bd      	mov	sp, r7
 80046dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e0:	4770      	bx	lr
 80046e2:	bf00      	nop
 80046e4:	0800498f 	.word	0x0800498f
 80046e8:	08004833 	.word	0x08004833

080046ec <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80046ec:	b480      	push	{r7}
 80046ee:	b095      	sub	sp, #84	; 0x54
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046fc:	e853 3f00 	ldrex	r3, [r3]
 8004700:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004702:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004704:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004708:	64fb      	str	r3, [r7, #76]	; 0x4c
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	461a      	mov	r2, r3
 8004710:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004712:	643b      	str	r3, [r7, #64]	; 0x40
 8004714:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004716:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004718:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800471a:	e841 2300 	strex	r3, r2, [r1]
 800471e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004720:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004722:	2b00      	cmp	r3, #0
 8004724:	d1e6      	bne.n	80046f4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	3308      	adds	r3, #8
 800472c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800472e:	6a3b      	ldr	r3, [r7, #32]
 8004730:	e853 3f00 	ldrex	r3, [r3]
 8004734:	61fb      	str	r3, [r7, #28]
   return(result);
 8004736:	69fb      	ldr	r3, [r7, #28]
 8004738:	f023 0301 	bic.w	r3, r3, #1
 800473c:	64bb      	str	r3, [r7, #72]	; 0x48
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	3308      	adds	r3, #8
 8004744:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004746:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004748:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800474a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800474c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800474e:	e841 2300 	strex	r3, r2, [r1]
 8004752:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004756:	2b00      	cmp	r3, #0
 8004758:	d1e5      	bne.n	8004726 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800475e:	2b01      	cmp	r3, #1
 8004760:	d118      	bne.n	8004794 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	e853 3f00 	ldrex	r3, [r3]
 800476e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004770:	68bb      	ldr	r3, [r7, #8]
 8004772:	f023 0310 	bic.w	r3, r3, #16
 8004776:	647b      	str	r3, [r7, #68]	; 0x44
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	461a      	mov	r2, r3
 800477e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004780:	61bb      	str	r3, [r7, #24]
 8004782:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004784:	6979      	ldr	r1, [r7, #20]
 8004786:	69ba      	ldr	r2, [r7, #24]
 8004788:	e841 2300 	strex	r3, r2, [r1]
 800478c:	613b      	str	r3, [r7, #16]
   return(result);
 800478e:	693b      	ldr	r3, [r7, #16]
 8004790:	2b00      	cmp	r3, #0
 8004792:	d1e6      	bne.n	8004762 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2220      	movs	r2, #32
 8004798:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	2200      	movs	r2, #0
 800479e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2200      	movs	r2, #0
 80047a4:	665a      	str	r2, [r3, #100]	; 0x64
}
 80047a6:	bf00      	nop
 80047a8:	3754      	adds	r7, #84	; 0x54
 80047aa:	46bd      	mov	sp, r7
 80047ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b0:	4770      	bx	lr

080047b2 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80047b2:	b580      	push	{r7, lr}
 80047b4:	b084      	sub	sp, #16
 80047b6:	af00      	add	r7, sp, #0
 80047b8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047be:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	2200      	movs	r2, #0
 80047c4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	2200      	movs	r2, #0
 80047cc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80047d0:	68f8      	ldr	r0, [r7, #12]
 80047d2:	f7ff faad 	bl	8003d30 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80047d6:	bf00      	nop
 80047d8:	3710      	adds	r7, #16
 80047da:	46bd      	mov	sp, r7
 80047dc:	bd80      	pop	{r7, pc}

080047de <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80047de:	b580      	push	{r7, lr}
 80047e0:	b088      	sub	sp, #32
 80047e2:	af00      	add	r7, sp, #0
 80047e4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	e853 3f00 	ldrex	r3, [r3]
 80047f2:	60bb      	str	r3, [r7, #8]
   return(result);
 80047f4:	68bb      	ldr	r3, [r7, #8]
 80047f6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80047fa:	61fb      	str	r3, [r7, #28]
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	461a      	mov	r2, r3
 8004802:	69fb      	ldr	r3, [r7, #28]
 8004804:	61bb      	str	r3, [r7, #24]
 8004806:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004808:	6979      	ldr	r1, [r7, #20]
 800480a:	69ba      	ldr	r2, [r7, #24]
 800480c:	e841 2300 	strex	r3, r2, [r1]
 8004810:	613b      	str	r3, [r7, #16]
   return(result);
 8004812:	693b      	ldr	r3, [r7, #16]
 8004814:	2b00      	cmp	r3, #0
 8004816:	d1e6      	bne.n	80047e6 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2220      	movs	r2, #32
 800481c:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	2200      	movs	r2, #0
 8004822:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004824:	6878      	ldr	r0, [r7, #4]
 8004826:	f7ff fa79 	bl	8003d1c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800482a:	bf00      	nop
 800482c:	3720      	adds	r7, #32
 800482e:	46bd      	mov	sp, r7
 8004830:	bd80      	pop	{r7, pc}

08004832 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004832:	b580      	push	{r7, lr}
 8004834:	b096      	sub	sp, #88	; 0x58
 8004836:	af00      	add	r7, sp, #0
 8004838:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004840:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004848:	2b22      	cmp	r3, #34	; 0x22
 800484a:	f040 8094 	bne.w	8004976 <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004854:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004858:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800485c:	b2d9      	uxtb	r1, r3
 800485e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8004862:	b2da      	uxtb	r2, r3
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004868:	400a      	ands	r2, r1
 800486a:	b2d2      	uxtb	r2, r2
 800486c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004872:	1c5a      	adds	r2, r3, #1
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800487e:	b29b      	uxth	r3, r3
 8004880:	3b01      	subs	r3, #1
 8004882:	b29a      	uxth	r2, r3
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004890:	b29b      	uxth	r3, r3
 8004892:	2b00      	cmp	r3, #0
 8004894:	d177      	bne.n	8004986 <UART_RxISR_8BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800489c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800489e:	e853 3f00 	ldrex	r3, [r3]
 80048a2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80048a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048a6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80048aa:	653b      	str	r3, [r7, #80]	; 0x50
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	461a      	mov	r2, r3
 80048b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80048b4:	647b      	str	r3, [r7, #68]	; 0x44
 80048b6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048b8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80048ba:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80048bc:	e841 2300 	strex	r3, r2, [r1]
 80048c0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80048c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d1e6      	bne.n	8004896 <UART_RxISR_8BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	3308      	adds	r3, #8
 80048ce:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048d2:	e853 3f00 	ldrex	r3, [r3]
 80048d6:	623b      	str	r3, [r7, #32]
   return(result);
 80048d8:	6a3b      	ldr	r3, [r7, #32]
 80048da:	f023 0301 	bic.w	r3, r3, #1
 80048de:	64fb      	str	r3, [r7, #76]	; 0x4c
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	3308      	adds	r3, #8
 80048e6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80048e8:	633a      	str	r2, [r7, #48]	; 0x30
 80048ea:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048ec:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80048ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80048f0:	e841 2300 	strex	r3, r2, [r1]
 80048f4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80048f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d1e5      	bne.n	80048c8 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2220      	movs	r2, #32
 8004900:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	2200      	movs	r2, #0
 8004906:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800490c:	2b01      	cmp	r3, #1
 800490e:	d12e      	bne.n	800496e <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2200      	movs	r2, #0
 8004914:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800491c:	693b      	ldr	r3, [r7, #16]
 800491e:	e853 3f00 	ldrex	r3, [r3]
 8004922:	60fb      	str	r3, [r7, #12]
   return(result);
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	f023 0310 	bic.w	r3, r3, #16
 800492a:	64bb      	str	r3, [r7, #72]	; 0x48
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	461a      	mov	r2, r3
 8004932:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004934:	61fb      	str	r3, [r7, #28]
 8004936:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004938:	69b9      	ldr	r1, [r7, #24]
 800493a:	69fa      	ldr	r2, [r7, #28]
 800493c:	e841 2300 	strex	r3, r2, [r1]
 8004940:	617b      	str	r3, [r7, #20]
   return(result);
 8004942:	697b      	ldr	r3, [r7, #20]
 8004944:	2b00      	cmp	r3, #0
 8004946:	d1e6      	bne.n	8004916 <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	69db      	ldr	r3, [r3, #28]
 800494e:	f003 0310 	and.w	r3, r3, #16
 8004952:	2b10      	cmp	r3, #16
 8004954:	d103      	bne.n	800495e <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	2210      	movs	r2, #16
 800495c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004964:	4619      	mov	r1, r3
 8004966:	6878      	ldr	r0, [r7, #4]
 8004968:	f7ff f9ec 	bl	8003d44 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800496c:	e00b      	b.n	8004986 <UART_RxISR_8BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 800496e:	6878      	ldr	r0, [r7, #4]
 8004970:	f000 fa70 	bl	8004e54 <HAL_UART_RxCpltCallback>
}
 8004974:	e007      	b.n	8004986 <UART_RxISR_8BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	699a      	ldr	r2, [r3, #24]
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f042 0208 	orr.w	r2, r2, #8
 8004984:	619a      	str	r2, [r3, #24]
}
 8004986:	bf00      	nop
 8004988:	3758      	adds	r7, #88	; 0x58
 800498a:	46bd      	mov	sp, r7
 800498c:	bd80      	pop	{r7, pc}

0800498e <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800498e:	b580      	push	{r7, lr}
 8004990:	b096      	sub	sp, #88	; 0x58
 8004992:	af00      	add	r7, sp, #0
 8004994:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800499c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80049a4:	2b22      	cmp	r3, #34	; 0x22
 80049a6:	f040 8094 	bne.w	8004ad2 <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049b0:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049b8:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 80049ba:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 80049be:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80049c2:	4013      	ands	r3, r2
 80049c4:	b29a      	uxth	r2, r3
 80049c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80049c8:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049ce:	1c9a      	adds	r2, r3, #2
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80049da:	b29b      	uxth	r3, r3
 80049dc:	3b01      	subs	r3, #1
 80049de:	b29a      	uxth	r2, r3
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80049ec:	b29b      	uxth	r3, r3
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d177      	bne.n	8004ae2 <UART_RxISR_16BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049fa:	e853 3f00 	ldrex	r3, [r3]
 80049fe:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004a00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a02:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004a06:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	461a      	mov	r2, r3
 8004a0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a10:	643b      	str	r3, [r7, #64]	; 0x40
 8004a12:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a14:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004a16:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004a18:	e841 2300 	strex	r3, r2, [r1]
 8004a1c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004a1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d1e6      	bne.n	80049f2 <UART_RxISR_16BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	3308      	adds	r3, #8
 8004a2a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a2c:	6a3b      	ldr	r3, [r7, #32]
 8004a2e:	e853 3f00 	ldrex	r3, [r3]
 8004a32:	61fb      	str	r3, [r7, #28]
   return(result);
 8004a34:	69fb      	ldr	r3, [r7, #28]
 8004a36:	f023 0301 	bic.w	r3, r3, #1
 8004a3a:	64bb      	str	r3, [r7, #72]	; 0x48
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	3308      	adds	r3, #8
 8004a42:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004a44:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004a46:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a48:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004a4a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004a4c:	e841 2300 	strex	r3, r2, [r1]
 8004a50:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d1e5      	bne.n	8004a24 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2220      	movs	r2, #32
 8004a5c:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	2200      	movs	r2, #0
 8004a62:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a68:	2b01      	cmp	r3, #1
 8004a6a:	d12e      	bne.n	8004aca <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2200      	movs	r2, #0
 8004a70:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	e853 3f00 	ldrex	r3, [r3]
 8004a7e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004a80:	68bb      	ldr	r3, [r7, #8]
 8004a82:	f023 0310 	bic.w	r3, r3, #16
 8004a86:	647b      	str	r3, [r7, #68]	; 0x44
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	461a      	mov	r2, r3
 8004a8e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a90:	61bb      	str	r3, [r7, #24]
 8004a92:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a94:	6979      	ldr	r1, [r7, #20]
 8004a96:	69ba      	ldr	r2, [r7, #24]
 8004a98:	e841 2300 	strex	r3, r2, [r1]
 8004a9c:	613b      	str	r3, [r7, #16]
   return(result);
 8004a9e:	693b      	ldr	r3, [r7, #16]
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d1e6      	bne.n	8004a72 <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	69db      	ldr	r3, [r3, #28]
 8004aaa:	f003 0310 	and.w	r3, r3, #16
 8004aae:	2b10      	cmp	r3, #16
 8004ab0:	d103      	bne.n	8004aba <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	2210      	movs	r2, #16
 8004ab8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004ac0:	4619      	mov	r1, r3
 8004ac2:	6878      	ldr	r0, [r7, #4]
 8004ac4:	f7ff f93e 	bl	8003d44 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004ac8:	e00b      	b.n	8004ae2 <UART_RxISR_16BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 8004aca:	6878      	ldr	r0, [r7, #4]
 8004acc:	f000 f9c2 	bl	8004e54 <HAL_UART_RxCpltCallback>
}
 8004ad0:	e007      	b.n	8004ae2 <UART_RxISR_16BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	699a      	ldr	r2, [r3, #24]
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f042 0208 	orr.w	r2, r2, #8
 8004ae0:	619a      	str	r2, [r3, #24]
}
 8004ae2:	bf00      	nop
 8004ae4:	3758      	adds	r7, #88	; 0x58
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	bd80      	pop	{r7, pc}

08004aea <Timer_Error_Handler>:

TIM_HandleTypeDef htim16;


void Timer_Error_Handler(void)
{
 8004aea:	b480      	push	{r7}
 8004aec:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8004aee:	b672      	cpsid	i
}
 8004af0:	bf00      	nop
  __disable_irq();
  while (1)
 8004af2:	e7fe      	b.n	8004af2 <Timer_Error_Handler+0x8>

08004af4 <tim6_init>:

  }
}

void tim6_init(void)
{
 8004af4:	b580      	push	{r7, lr}
 8004af6:	b084      	sub	sp, #16
 8004af8:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 1 */
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004afa:	1d3b      	adds	r3, r7, #4
 8004afc:	2200      	movs	r2, #0
 8004afe:	601a      	str	r2, [r3, #0]
 8004b00:	605a      	str	r2, [r3, #4]
 8004b02:	609a      	str	r2, [r3, #8]

  htim16.Instance = TIM6;
 8004b04:	4b19      	ldr	r3, [pc, #100]	; (8004b6c <tim6_init+0x78>)
 8004b06:	4a1a      	ldr	r2, [pc, #104]	; (8004b70 <tim6_init+0x7c>)
 8004b08:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = TIMER6_PRESCALAR;
 8004b0a:	4b18      	ldr	r3, [pc, #96]	; (8004b6c <tim6_init+0x78>)
 8004b0c:	2208      	movs	r2, #8
 8004b0e:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004b10:	4b16      	ldr	r3, [pc, #88]	; (8004b6c <tim6_init+0x78>)
 8004b12:	2200      	movs	r2, #0
 8004b14:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = TIMER6_PEROID;
 8004b16:	4b15      	ldr	r3, [pc, #84]	; (8004b6c <tim6_init+0x78>)
 8004b18:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8004b1c:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004b1e:	4b13      	ldr	r3, [pc, #76]	; (8004b6c <tim6_init+0x78>)
 8004b20:	2200      	movs	r2, #0
 8004b22:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8004b24:	4b11      	ldr	r3, [pc, #68]	; (8004b6c <tim6_init+0x78>)
 8004b26:	2200      	movs	r2, #0
 8004b28:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004b2a:	4b10      	ldr	r3, [pc, #64]	; (8004b6c <tim6_init+0x78>)
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8004b30:	480e      	ldr	r0, [pc, #56]	; (8004b6c <tim6_init+0x78>)
 8004b32:	f7fe fb03 	bl	800313c <HAL_TIM_Base_Init>
 8004b36:	4603      	mov	r3, r0
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d001      	beq.n	8004b40 <tim6_init+0x4c>
  {
	  Timer_Error_Handler();
 8004b3c:	f7ff ffd5 	bl	8004aea <Timer_Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004b40:	2300      	movs	r3, #0
 8004b42:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004b44:	2300      	movs	r3, #0
 8004b46:	60fb      	str	r3, [r7, #12]
   if (HAL_TIMEx_MasterConfigSynchronization(&htim16, &sMasterConfig) != HAL_OK)
 8004b48:	1d3b      	adds	r3, r7, #4
 8004b4a:	4619      	mov	r1, r3
 8004b4c:	4807      	ldr	r0, [pc, #28]	; (8004b6c <tim6_init+0x78>)
 8004b4e:	f7fe fc5d 	bl	800340c <HAL_TIMEx_MasterConfigSynchronization>
 8004b52:	4603      	mov	r3, r0
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d001      	beq.n	8004b5c <tim6_init+0x68>
   {
     Error_Handler();
 8004b58:	f7fc fb6a 	bl	8001230 <Error_Handler>
   }

   HAL_TIM_Base_Start(&htim16);
 8004b5c:	4803      	ldr	r0, [pc, #12]	; (8004b6c <tim6_init+0x78>)
 8004b5e:	f7fe fb45 	bl	80031ec <HAL_TIM_Base_Start>
  /* USER CODE END TIM16_Init 1 */
}
 8004b62:	bf00      	nop
 8004b64:	3710      	adds	r7, #16
 8004b66:	46bd      	mov	sp, r7
 8004b68:	bd80      	pop	{r7, pc}
 8004b6a:	bf00      	nop
 8004b6c:	200007f8 	.word	0x200007f8
 8004b70:	40001000 	.word	0x40001000

08004b74 <console_buf_wr>:

void console_buf_wr(char *console_buf , size_t *console_buf_len)
{
 8004b74:	b580      	push	{r7, lr}
 8004b76:	b084      	sub	sp, #16
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	6078      	str	r0, [r7, #4]
 8004b7c:	6039      	str	r1, [r7, #0]
	size_t len = *console_buf_len;
 8004b7e:	683b      	ldr	r3, [r7, #0]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	60bb      	str	r3, [r7, #8]
	console_buf[len] ='\0';
 8004b84:	687a      	ldr	r2, [r7, #4]
 8004b86:	68bb      	ldr	r3, [r7, #8]
 8004b88:	4413      	add	r3, r2
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	701a      	strb	r2, [r3, #0]
	for(size_t i = 0; i < len; i++)
 8004b8e:	2300      	movs	r3, #0
 8004b90:	60fb      	str	r3, [r7, #12]
 8004b92:	e00d      	b.n	8004bb0 <console_buf_wr+0x3c>
	  {
		 _write(stdout, &console_buf[i], 1);
 8004b94:	4b0b      	ldr	r3, [pc, #44]	; (8004bc4 <console_buf_wr+0x50>)
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	689b      	ldr	r3, [r3, #8]
 8004b9a:	4618      	mov	r0, r3
 8004b9c:	687a      	ldr	r2, [r7, #4]
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	4413      	add	r3, r2
 8004ba2:	2201      	movs	r2, #1
 8004ba4:	4619      	mov	r1, r3
 8004ba6:	f000 f853 	bl	8004c50 <_write>
	for(size_t i = 0; i < len; i++)
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	3301      	adds	r3, #1
 8004bae:	60fb      	str	r3, [r7, #12]
 8004bb0:	68fa      	ldr	r2, [r7, #12]
 8004bb2:	68bb      	ldr	r3, [r7, #8]
 8004bb4:	429a      	cmp	r2, r3
 8004bb6:	d3ed      	bcc.n	8004b94 <console_buf_wr+0x20>
	  }
}
 8004bb8:	bf00      	nop
 8004bba:	bf00      	nop
 8004bbc:	3710      	adds	r7, #16
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	bd80      	pop	{r7, pc}
 8004bc2:	bf00      	nop
 8004bc4:	20000548 	.word	0x20000548

08004bc8 <console_buf_clr>:
void console_buf_clr(char *console_buf , size_t *console_buf_len)
{
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	b084      	sub	sp, #16
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
 8004bd0:	6039      	str	r1, [r7, #0]
	size_t len = *console_buf_len;
 8004bd2:	683b      	ldr	r3, [r7, #0]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	60fb      	str	r3, [r7, #12]
	memset(console_buf  , 0 , len);
 8004bd8:	68fa      	ldr	r2, [r7, #12]
 8004bda:	2100      	movs	r1, #0
 8004bdc:	6878      	ldr	r0, [r7, #4]
 8004bde:	f000 fcd6 	bl	800558e <memset>
	*console_buf_len = 0;
 8004be2:	683b      	ldr	r3, [r7, #0]
 8004be4:	2200      	movs	r2, #0
 8004be6:	601a      	str	r2, [r3, #0]
}
 8004be8:	bf00      	nop
 8004bea:	3710      	adds	r7, #16
 8004bec:	46bd      	mov	sp, r7
 8004bee:	bd80      	pop	{r7, pc}

08004bf0 <UART_Init>:
Wifi_Uart Wifi_Uart_t;
char tmp;


void UART_Init(void)
{
 8004bf0:	b580      	push	{r7, lr}
 8004bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_Init 2 */
  wifi_uart.Instance = UART_WIFI_CMD;
 8004bf4:	4b14      	ldr	r3, [pc, #80]	; (8004c48 <UART_Init+0x58>)
 8004bf6:	4a15      	ldr	r2, [pc, #84]	; (8004c4c <UART_Init+0x5c>)
 8004bf8:	601a      	str	r2, [r3, #0]
  wifi_uart.Init.BaudRate = 115200;
 8004bfa:	4b13      	ldr	r3, [pc, #76]	; (8004c48 <UART_Init+0x58>)
 8004bfc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004c00:	605a      	str	r2, [r3, #4]
  wifi_uart.Init.WordLength = UART_WORDLENGTH_8B;
 8004c02:	4b11      	ldr	r3, [pc, #68]	; (8004c48 <UART_Init+0x58>)
 8004c04:	2200      	movs	r2, #0
 8004c06:	609a      	str	r2, [r3, #8]
  wifi_uart.Init.StopBits = UART_STOPBITS_1;
 8004c08:	4b0f      	ldr	r3, [pc, #60]	; (8004c48 <UART_Init+0x58>)
 8004c0a:	2200      	movs	r2, #0
 8004c0c:	60da      	str	r2, [r3, #12]
  wifi_uart.Init.Parity = UART_PARITY_NONE;
 8004c0e:	4b0e      	ldr	r3, [pc, #56]	; (8004c48 <UART_Init+0x58>)
 8004c10:	2200      	movs	r2, #0
 8004c12:	611a      	str	r2, [r3, #16]
  wifi_uart.Init.Mode = UART_MODE_TX_RX;
 8004c14:	4b0c      	ldr	r3, [pc, #48]	; (8004c48 <UART_Init+0x58>)
 8004c16:	220c      	movs	r2, #12
 8004c18:	615a      	str	r2, [r3, #20]
  wifi_uart.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004c1a:	4b0b      	ldr	r3, [pc, #44]	; (8004c48 <UART_Init+0x58>)
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	619a      	str	r2, [r3, #24]
  wifi_uart.Init.OverSampling = UART_OVERSAMPLING_16;
 8004c20:	4b09      	ldr	r3, [pc, #36]	; (8004c48 <UART_Init+0x58>)
 8004c22:	2200      	movs	r2, #0
 8004c24:	61da      	str	r2, [r3, #28]
  wifi_uart.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004c26:	4b08      	ldr	r3, [pc, #32]	; (8004c48 <UART_Init+0x58>)
 8004c28:	2200      	movs	r2, #0
 8004c2a:	621a      	str	r2, [r3, #32]
  wifi_uart.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004c2c:	4b06      	ldr	r3, [pc, #24]	; (8004c48 <UART_Init+0x58>)
 8004c2e:	2200      	movs	r2, #0
 8004c30:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&wifi_uart) != HAL_OK)
 8004c32:	4805      	ldr	r0, [pc, #20]	; (8004c48 <UART_Init+0x58>)
 8004c34:	f7fe fc78 	bl	8003528 <HAL_UART_Init>
 8004c38:	4603      	mov	r3, r0
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d001      	beq.n	8004c42 <UART_Init+0x52>
  {
    Error_Handler();
 8004c3e:	f7fc faf7 	bl	8001230 <Error_Handler>
  }
  /* USER CODE END UART5_Init 2 */
}
 8004c42:	bf00      	nop
 8004c44:	bd80      	pop	{r7, pc}
 8004c46:	bf00      	nop
 8004c48:	20000844 	.word	0x20000844
 8004c4c:	40004400 	.word	0x40004400

08004c50 <_write>:

int _write(int file, char *ptr, int len)
{
 8004c50:	b580      	push	{r7, lr}
 8004c52:	b086      	sub	sp, #24
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	60f8      	str	r0, [r7, #12]
 8004c58:	60b9      	str	r1, [r7, #8]
 8004c5a:	607a      	str	r2, [r7, #4]
	HAL_StatusTypeDef ret = HAL_UART_Transmit(&UART_CONSOLE , (uint8_t *)ptr, len , 100);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	b29a      	uxth	r2, r3
 8004c60:	2364      	movs	r3, #100	; 0x64
 8004c62:	68b9      	ldr	r1, [r7, #8]
 8004c64:	4804      	ldr	r0, [pc, #16]	; (8004c78 <_write+0x28>)
 8004c66:	f7fe fcad 	bl	80035c4 <HAL_UART_Transmit>
 8004c6a:	4603      	mov	r3, r0
 8004c6c:	75fb      	strb	r3, [r7, #23]
	UNUSED(ret);
	return ret;
 8004c6e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c70:	4618      	mov	r0, r3
 8004c72:	3718      	adds	r7, #24
 8004c74:	46bd      	mov	sp, r7
 8004c76:	bd80      	pop	{r7, pc}
 8004c78:	2000075c 	.word	0x2000075c

08004c7c <uart_write>:
static wifi_api_status uart_write(char *buffer)
{
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	b082      	sub	sp, #8
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
	Wifi_Uart_t.WiFi_Tx_len = strlen(buffer);
 8004c84:	6878      	ldr	r0, [r7, #4]
 8004c86:	f7fb facb 	bl	8000220 <strlen>
 8004c8a:	4603      	mov	r3, r0
 8004c8c:	b2da      	uxtb	r2, r3
 8004c8e:	4b0a      	ldr	r3, [pc, #40]	; (8004cb8 <uart_write+0x3c>)
 8004c90:	711a      	strb	r2, [r3, #4]
	if(HAL_UART_Transmit(&wifi_uart, (uint8_t *)buffer, Wifi_Uart_t.WiFi_Tx_len, 1000) == HAL_OK)
 8004c92:	4b09      	ldr	r3, [pc, #36]	; (8004cb8 <uart_write+0x3c>)
 8004c94:	791b      	ldrb	r3, [r3, #4]
 8004c96:	b29a      	uxth	r2, r3
 8004c98:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004c9c:	6879      	ldr	r1, [r7, #4]
 8004c9e:	4807      	ldr	r0, [pc, #28]	; (8004cbc <uart_write+0x40>)
 8004ca0:	f7fe fc90 	bl	80035c4 <HAL_UART_Transmit>
 8004ca4:	4603      	mov	r3, r0
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d101      	bne.n	8004cae <uart_write+0x32>
		return MS_OK;
 8004caa:	2301      	movs	r3, #1
 8004cac:	e000      	b.n	8004cb0 <uart_write+0x34>
	else
		return MS_NOT_OK;
 8004cae:	2300      	movs	r3, #0
}
 8004cb0:	4618      	mov	r0, r3
 8004cb2:	3708      	adds	r7, #8
 8004cb4:	46bd      	mov	sp, r7
 8004cb6:	bd80      	pop	{r7, pc}
 8004cb8:	200008c8 	.word	0x200008c8
 8004cbc:	20000844 	.word	0x20000844

08004cc0 <wifi_mode>:
			return MS_OK;
		else
			return MS_NOT_OK;
}
wifi_api_status wifi_mode(wifi_mode_config cnt)
{
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	b084      	sub	sp, #16
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	4603      	mov	r3, r0
 8004cc8:	71fb      	strb	r3, [r7, #7]
	wifi_api_status LucStatus = MS_NOT_OK;
 8004cca:	2300      	movs	r3, #0
 8004ccc:	73fb      	strb	r3, [r7, #15]
	Wifi_Uart_t.WiFi_Tx = WIFI_MODE_CMD(cnt);
 8004cce:	4b07      	ldr	r3, [pc, #28]	; (8004cec <wifi_mode+0x2c>)
 8004cd0:	4a07      	ldr	r2, [pc, #28]	; (8004cf0 <wifi_mode+0x30>)
 8004cd2:	601a      	str	r2, [r3, #0]
	LucStatus = uart_write(Wifi_Uart_t.WiFi_Tx);
 8004cd4:	4b05      	ldr	r3, [pc, #20]	; (8004cec <wifi_mode+0x2c>)
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	4618      	mov	r0, r3
 8004cda:	f7ff ffcf 	bl	8004c7c <uart_write>
 8004cde:	4603      	mov	r3, r0
 8004ce0:	73fb      	strb	r3, [r7, #15]
	return LucStatus;
 8004ce2:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ce4:	4618      	mov	r0, r3
 8004ce6:	3710      	adds	r7, #16
 8004ce8:	46bd      	mov	sp, r7
 8004cea:	bd80      	pop	{r7, pc}
 8004cec:	200008c8 	.word	0x200008c8
 8004cf0:	080099d4 	.word	0x080099d4

08004cf4 <wifi_ap_connect>:
wifi_api_status wifi_ap_connect(char *ssid , char *psk)
{
 8004cf4:	b580      	push	{r7, lr}
 8004cf6:	b084      	sub	sp, #16
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	6078      	str	r0, [r7, #4]
 8004cfc:	6039      	str	r1, [r7, #0]
	wifi_api_status LucStatus = MS_NOT_OK;
 8004cfe:	2300      	movs	r3, #0
 8004d00:	73fb      	strb	r3, [r7, #15]
	Wifi_Uart_t.WiFi_Tx = malloc(sizeof(char) * 100);
 8004d02:	2064      	movs	r0, #100	; 0x64
 8004d04:	f000 f8da 	bl	8004ebc <malloc>
 8004d08:	4603      	mov	r3, r0
 8004d0a:	461a      	mov	r2, r3
 8004d0c:	4b0c      	ldr	r3, [pc, #48]	; (8004d40 <wifi_ap_connect+0x4c>)
 8004d0e:	601a      	str	r2, [r3, #0]
	sprintf(Wifi_Uart_t.WiFi_Tx , WIFI_CONNECT_AP_CMD , ssid , psk);
 8004d10:	4b0b      	ldr	r3, [pc, #44]	; (8004d40 <wifi_ap_connect+0x4c>)
 8004d12:	6818      	ldr	r0, [r3, #0]
 8004d14:	683b      	ldr	r3, [r7, #0]
 8004d16:	687a      	ldr	r2, [r7, #4]
 8004d18:	490a      	ldr	r1, [pc, #40]	; (8004d44 <wifi_ap_connect+0x50>)
 8004d1a:	f000 fbd5 	bl	80054c8 <sprintf>
	LucStatus = uart_write(Wifi_Uart_t.WiFi_Tx);
 8004d1e:	4b08      	ldr	r3, [pc, #32]	; (8004d40 <wifi_ap_connect+0x4c>)
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	4618      	mov	r0, r3
 8004d24:	f7ff ffaa 	bl	8004c7c <uart_write>
 8004d28:	4603      	mov	r3, r0
 8004d2a:	73fb      	strb	r3, [r7, #15]
	free(Wifi_Uart_t.WiFi_Tx);
 8004d2c:	4b04      	ldr	r3, [pc, #16]	; (8004d40 <wifi_ap_connect+0x4c>)
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	4618      	mov	r0, r3
 8004d32:	f000 f8cb 	bl	8004ecc <free>
	return LucStatus;
 8004d36:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d38:	4618      	mov	r0, r3
 8004d3a:	3710      	adds	r7, #16
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	bd80      	pop	{r7, pc}
 8004d40:	200008c8 	.word	0x200008c8
 8004d44:	080099e4 	.word	0x080099e4

08004d48 <wifi_rst>:
wifi_api_status wifi_rst()
{
 8004d48:	b580      	push	{r7, lr}
 8004d4a:	b082      	sub	sp, #8
 8004d4c:	af00      	add	r7, sp, #0
	wifi_api_status LucStatus = MS_NOT_OK;
 8004d4e:	2300      	movs	r3, #0
 8004d50:	71fb      	strb	r3, [r7, #7]
	Wifi_Uart_t.WiFi_Tx = WIFI_RST_CMD;
 8004d52:	4b07      	ldr	r3, [pc, #28]	; (8004d70 <wifi_rst+0x28>)
 8004d54:	4a07      	ldr	r2, [pc, #28]	; (8004d74 <wifi_rst+0x2c>)
 8004d56:	601a      	str	r2, [r3, #0]
	LucStatus = uart_write(Wifi_Uart_t.WiFi_Tx);
 8004d58:	4b05      	ldr	r3, [pc, #20]	; (8004d70 <wifi_rst+0x28>)
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	f7ff ff8d 	bl	8004c7c <uart_write>
 8004d62:	4603      	mov	r3, r0
 8004d64:	71fb      	strb	r3, [r7, #7]
	return LucStatus;
 8004d66:	79fb      	ldrb	r3, [r7, #7]
}
 8004d68:	4618      	mov	r0, r3
 8004d6a:	3708      	adds	r7, #8
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	bd80      	pop	{r7, pc}
 8004d70:	200008c8 	.word	0x200008c8
 8004d74:	080099fc 	.word	0x080099fc

08004d78 <wifi_mac_add>:
	Wifi_Uart_t.WiFi_Tx = WIFI_START_CMD;
	LucStatus = uart_write(Wifi_Uart_t.WiFi_Tx);
	return LucStatus;
}
wifi_api_status wifi_mac_add()
{
 8004d78:	b580      	push	{r7, lr}
 8004d7a:	b082      	sub	sp, #8
 8004d7c:	af00      	add	r7, sp, #0
	wifi_api_status LucStatus = MS_NOT_OK;
 8004d7e:	2300      	movs	r3, #0
 8004d80:	71fb      	strb	r3, [r7, #7]
	Wifi_Uart_t.WiFi_Tx = WIFI_MAC_CMD;
 8004d82:	4b07      	ldr	r3, [pc, #28]	; (8004da0 <wifi_mac_add+0x28>)
 8004d84:	4a07      	ldr	r2, [pc, #28]	; (8004da4 <wifi_mac_add+0x2c>)
 8004d86:	601a      	str	r2, [r3, #0]
	LucStatus = uart_write(Wifi_Uart_t.WiFi_Tx);
 8004d88:	4b05      	ldr	r3, [pc, #20]	; (8004da0 <wifi_mac_add+0x28>)
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	f7ff ff75 	bl	8004c7c <uart_write>
 8004d92:	4603      	mov	r3, r0
 8004d94:	71fb      	strb	r3, [r7, #7]
	return LucStatus;
 8004d96:	79fb      	ldrb	r3, [r7, #7]
}
 8004d98:	4618      	mov	r0, r3
 8004d9a:	3708      	adds	r7, #8
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	bd80      	pop	{r7, pc}
 8004da0:	200008c8 	.word	0x200008c8
 8004da4:	08009a1c 	.word	0x08009a1c

08004da8 <tcp_server_conn>:
wifi_api_status tcp_server_conn(char *ipadress , char *port)
{
 8004da8:	b580      	push	{r7, lr}
 8004daa:	b084      	sub	sp, #16
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	6078      	str	r0, [r7, #4]
 8004db0:	6039      	str	r1, [r7, #0]
	wifi_api_status LucStatus = MS_NOT_OK;
 8004db2:	2300      	movs	r3, #0
 8004db4:	73fb      	strb	r3, [r7, #15]
	Wifi_Uart_t.WiFi_Tx = malloc(sizeof(char) * 100);
 8004db6:	2064      	movs	r0, #100	; 0x64
 8004db8:	f000 f880 	bl	8004ebc <malloc>
 8004dbc:	4603      	mov	r3, r0
 8004dbe:	461a      	mov	r2, r3
 8004dc0:	4b0c      	ldr	r3, [pc, #48]	; (8004df4 <tcp_server_conn+0x4c>)
 8004dc2:	601a      	str	r2, [r3, #0]
	sprintf(Wifi_Uart_t.WiFi_Tx , WIFI_CONNECT_AP_CMD , ipadress , port);
 8004dc4:	4b0b      	ldr	r3, [pc, #44]	; (8004df4 <tcp_server_conn+0x4c>)
 8004dc6:	6818      	ldr	r0, [r3, #0]
 8004dc8:	683b      	ldr	r3, [r7, #0]
 8004dca:	687a      	ldr	r2, [r7, #4]
 8004dcc:	490a      	ldr	r1, [pc, #40]	; (8004df8 <tcp_server_conn+0x50>)
 8004dce:	f000 fb7b 	bl	80054c8 <sprintf>
	LucStatus = uart_write(Wifi_Uart_t.WiFi_Tx);
 8004dd2:	4b08      	ldr	r3, [pc, #32]	; (8004df4 <tcp_server_conn+0x4c>)
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	f7ff ff50 	bl	8004c7c <uart_write>
 8004ddc:	4603      	mov	r3, r0
 8004dde:	73fb      	strb	r3, [r7, #15]
	free(Wifi_Uart_t.WiFi_Tx);
 8004de0:	4b04      	ldr	r3, [pc, #16]	; (8004df4 <tcp_server_conn+0x4c>)
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	4618      	mov	r0, r3
 8004de6:	f000 f871 	bl	8004ecc <free>
	return LucStatus;
 8004dea:	7bfb      	ldrb	r3, [r7, #15]
}
 8004dec:	4618      	mov	r0, r3
 8004dee:	3710      	adds	r7, #16
 8004df0:	46bd      	mov	sp, r7
 8004df2:	bd80      	pop	{r7, pc}
 8004df4:	200008c8 	.word	0x200008c8
 8004df8:	080099e4 	.word	0x080099e4

08004dfc <wifi_init>:
/*
 * initialise the wifi - esp8266 via AT commands initialise the UART
 * initialise the command response handler
 */
void wifi_init()
{
 8004dfc:	b580      	push	{r7, lr}
 8004dfe:	af00      	add	r7, sp, #0
	UART_Init();
 8004e00:	f7ff fef6 	bl	8004bf0 <UART_Init>

	Wifi_Uart_t.WiFi_Rx_len = 0;
 8004e04:	4b0d      	ldr	r3, [pc, #52]	; (8004e3c <wifi_init+0x40>)
 8004e06:	2200      	movs	r2, #0
 8004e08:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
	Wifi_Uart_t.WiFi_Tx_len = 0;
 8004e0c:	4b0b      	ldr	r3, [pc, #44]	; (8004e3c <wifi_init+0x40>)
 8004e0e:	2200      	movs	r2, #0
 8004e10:	711a      	strb	r2, [r3, #4]
	memset(Wifi_Uart_t.WiFi_Rx , 0 , WIFI_RX_LEN);
 8004e12:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004e16:	2100      	movs	r1, #0
 8004e18:	4809      	ldr	r0, [pc, #36]	; (8004e40 <wifi_init+0x44>)
 8004e1a:	f000 fbb8 	bl	800558e <memset>
	Wifi_Uart_t.log_buf = &console_buf_wr;
 8004e1e:	4b07      	ldr	r3, [pc, #28]	; (8004e3c <wifi_init+0x40>)
 8004e20:	4a08      	ldr	r2, [pc, #32]	; (8004e44 <wifi_init+0x48>)
 8004e22:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
	Wifi_Uart_t.log_clr = &console_buf_clr;
 8004e26:	4b05      	ldr	r3, [pc, #20]	; (8004e3c <wifi_init+0x40>)
 8004e28:	4a07      	ldr	r2, [pc, #28]	; (8004e48 <wifi_init+0x4c>)
 8004e2a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

	HAL_UART_Receive_IT(&wifi_uart, (uint8_t *)&tmp ,1);
 8004e2e:	2201      	movs	r2, #1
 8004e30:	4906      	ldr	r1, [pc, #24]	; (8004e4c <wifi_init+0x50>)
 8004e32:	4807      	ldr	r0, [pc, #28]	; (8004e50 <wifi_init+0x54>)
 8004e34:	f7fe fc59 	bl	80036ea <HAL_UART_Receive_IT>
}
 8004e38:	bf00      	nop
 8004e3a:	bd80      	pop	{r7, pc}
 8004e3c:	200008c8 	.word	0x200008c8
 8004e40:	200008d4 	.word	0x200008d4
 8004e44:	08004b75 	.word	0x08004b75
 8004e48:	08004bc9 	.word	0x08004bc9
 8004e4c:	20000ae4 	.word	0x20000ae4
 8004e50:	20000844 	.word	0x20000844

08004e54 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004e54:	b580      	push	{r7, lr}
 8004e56:	b082      	sub	sp, #8
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]
	if(huart->Instance == UART_WIFI_CMD)
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	4a12      	ldr	r2, [pc, #72]	; (8004eac <HAL_UART_RxCpltCallback+0x58>)
 8004e62:	4293      	cmp	r3, r2
 8004e64:	d11e      	bne.n	8004ea4 <HAL_UART_RxCpltCallback+0x50>
	{
		if(Wifi_Uart_t.WiFi_Rx_len < WIFI_RX_LEN && tmp != '\0')
 8004e66:	4b12      	ldr	r3, [pc, #72]	; (8004eb0 <HAL_UART_RxCpltCallback+0x5c>)
 8004e68:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8004e6c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e70:	d213      	bcs.n	8004e9a <HAL_UART_RxCpltCallback+0x46>
 8004e72:	4b10      	ldr	r3, [pc, #64]	; (8004eb4 <HAL_UART_RxCpltCallback+0x60>)
 8004e74:	781b      	ldrb	r3, [r3, #0]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d00f      	beq.n	8004e9a <HAL_UART_RxCpltCallback+0x46>
		{
			Wifi_Uart_t.WiFi_Rx[Wifi_Uart_t.WiFi_Rx_len] = tmp;
 8004e7a:	4b0d      	ldr	r3, [pc, #52]	; (8004eb0 <HAL_UART_RxCpltCallback+0x5c>)
 8004e7c:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8004e80:	4a0c      	ldr	r2, [pc, #48]	; (8004eb4 <HAL_UART_RxCpltCallback+0x60>)
 8004e82:	7811      	ldrb	r1, [r2, #0]
 8004e84:	4a0a      	ldr	r2, [pc, #40]	; (8004eb0 <HAL_UART_RxCpltCallback+0x5c>)
 8004e86:	4413      	add	r3, r2
 8004e88:	460a      	mov	r2, r1
 8004e8a:	731a      	strb	r2, [r3, #12]
			Wifi_Uart_t.WiFi_Rx_len++;
 8004e8c:	4b08      	ldr	r3, [pc, #32]	; (8004eb0 <HAL_UART_RxCpltCallback+0x5c>)
 8004e8e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8004e92:	3301      	adds	r3, #1
 8004e94:	4a06      	ldr	r2, [pc, #24]	; (8004eb0 <HAL_UART_RxCpltCallback+0x5c>)
 8004e96:	f8c2 3210 	str.w	r3, [r2, #528]	; 0x210
		}
		HAL_UART_Receive_IT(&wifi_uart, (uint8_t *)&tmp ,1);
 8004e9a:	2201      	movs	r2, #1
 8004e9c:	4905      	ldr	r1, [pc, #20]	; (8004eb4 <HAL_UART_RxCpltCallback+0x60>)
 8004e9e:	4806      	ldr	r0, [pc, #24]	; (8004eb8 <HAL_UART_RxCpltCallback+0x64>)
 8004ea0:	f7fe fc23 	bl	80036ea <HAL_UART_Receive_IT>
	}
}
 8004ea4:	bf00      	nop
 8004ea6:	3708      	adds	r7, #8
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	bd80      	pop	{r7, pc}
 8004eac:	40004400 	.word	0x40004400
 8004eb0:	200008c8 	.word	0x200008c8
 8004eb4:	20000ae4 	.word	0x20000ae4
 8004eb8:	20000844 	.word	0x20000844

08004ebc <malloc>:
 8004ebc:	4b02      	ldr	r3, [pc, #8]	; (8004ec8 <malloc+0xc>)
 8004ebe:	4601      	mov	r1, r0
 8004ec0:	6818      	ldr	r0, [r3, #0]
 8004ec2:	f000 b80b 	b.w	8004edc <_malloc_r>
 8004ec6:	bf00      	nop
 8004ec8:	20000548 	.word	0x20000548

08004ecc <free>:
 8004ecc:	4b02      	ldr	r3, [pc, #8]	; (8004ed8 <free+0xc>)
 8004ece:	4601      	mov	r1, r0
 8004ed0:	6818      	ldr	r0, [r3, #0]
 8004ed2:	f000 bc59 	b.w	8005788 <_free_r>
 8004ed6:	bf00      	nop
 8004ed8:	20000548 	.word	0x20000548

08004edc <_malloc_r>:
 8004edc:	f101 030b 	add.w	r3, r1, #11
 8004ee0:	2b16      	cmp	r3, #22
 8004ee2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ee6:	4605      	mov	r5, r0
 8004ee8:	d906      	bls.n	8004ef8 <_malloc_r+0x1c>
 8004eea:	f033 0707 	bics.w	r7, r3, #7
 8004eee:	d504      	bpl.n	8004efa <_malloc_r+0x1e>
 8004ef0:	230c      	movs	r3, #12
 8004ef2:	602b      	str	r3, [r5, #0]
 8004ef4:	2400      	movs	r4, #0
 8004ef6:	e1a3      	b.n	8005240 <_malloc_r+0x364>
 8004ef8:	2710      	movs	r7, #16
 8004efa:	42b9      	cmp	r1, r7
 8004efc:	d8f8      	bhi.n	8004ef0 <_malloc_r+0x14>
 8004efe:	4628      	mov	r0, r5
 8004f00:	f000 fa26 	bl	8005350 <__malloc_lock>
 8004f04:	f5b7 7ffc 	cmp.w	r7, #504	; 0x1f8
 8004f08:	4eaf      	ldr	r6, [pc, #700]	; (80051c8 <_malloc_r+0x2ec>)
 8004f0a:	d237      	bcs.n	8004f7c <_malloc_r+0xa0>
 8004f0c:	f107 0208 	add.w	r2, r7, #8
 8004f10:	4432      	add	r2, r6
 8004f12:	f1a2 0108 	sub.w	r1, r2, #8
 8004f16:	6854      	ldr	r4, [r2, #4]
 8004f18:	428c      	cmp	r4, r1
 8004f1a:	ea4f 03d7 	mov.w	r3, r7, lsr #3
 8004f1e:	d102      	bne.n	8004f26 <_malloc_r+0x4a>
 8004f20:	68d4      	ldr	r4, [r2, #12]
 8004f22:	42a2      	cmp	r2, r4
 8004f24:	d010      	beq.n	8004f48 <_malloc_r+0x6c>
 8004f26:	6863      	ldr	r3, [r4, #4]
 8004f28:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 8004f2c:	f023 0303 	bic.w	r3, r3, #3
 8004f30:	60ca      	str	r2, [r1, #12]
 8004f32:	4423      	add	r3, r4
 8004f34:	6091      	str	r1, [r2, #8]
 8004f36:	685a      	ldr	r2, [r3, #4]
 8004f38:	f042 0201 	orr.w	r2, r2, #1
 8004f3c:	605a      	str	r2, [r3, #4]
 8004f3e:	4628      	mov	r0, r5
 8004f40:	f000 fa0c 	bl	800535c <__malloc_unlock>
 8004f44:	3408      	adds	r4, #8
 8004f46:	e17b      	b.n	8005240 <_malloc_r+0x364>
 8004f48:	3302      	adds	r3, #2
 8004f4a:	6934      	ldr	r4, [r6, #16]
 8004f4c:	499f      	ldr	r1, [pc, #636]	; (80051cc <_malloc_r+0x2f0>)
 8004f4e:	428c      	cmp	r4, r1
 8004f50:	d077      	beq.n	8005042 <_malloc_r+0x166>
 8004f52:	6862      	ldr	r2, [r4, #4]
 8004f54:	f022 0c03 	bic.w	ip, r2, #3
 8004f58:	ebac 0007 	sub.w	r0, ip, r7
 8004f5c:	280f      	cmp	r0, #15
 8004f5e:	dd48      	ble.n	8004ff2 <_malloc_r+0x116>
 8004f60:	19e2      	adds	r2, r4, r7
 8004f62:	f040 0301 	orr.w	r3, r0, #1
 8004f66:	f047 0701 	orr.w	r7, r7, #1
 8004f6a:	6067      	str	r7, [r4, #4]
 8004f6c:	e9c6 2204 	strd	r2, r2, [r6, #16]
 8004f70:	e9c2 1102 	strd	r1, r1, [r2, #8]
 8004f74:	6053      	str	r3, [r2, #4]
 8004f76:	f844 000c 	str.w	r0, [r4, ip]
 8004f7a:	e7e0      	b.n	8004f3e <_malloc_r+0x62>
 8004f7c:	0a7b      	lsrs	r3, r7, #9
 8004f7e:	d02a      	beq.n	8004fd6 <_malloc_r+0xfa>
 8004f80:	2b04      	cmp	r3, #4
 8004f82:	d812      	bhi.n	8004faa <_malloc_r+0xce>
 8004f84:	09bb      	lsrs	r3, r7, #6
 8004f86:	3338      	adds	r3, #56	; 0x38
 8004f88:	1c5a      	adds	r2, r3, #1
 8004f8a:	eb06 02c2 	add.w	r2, r6, r2, lsl #3
 8004f8e:	f1a2 0c08 	sub.w	ip, r2, #8
 8004f92:	6854      	ldr	r4, [r2, #4]
 8004f94:	4564      	cmp	r4, ip
 8004f96:	d006      	beq.n	8004fa6 <_malloc_r+0xca>
 8004f98:	6862      	ldr	r2, [r4, #4]
 8004f9a:	f022 0203 	bic.w	r2, r2, #3
 8004f9e:	1bd0      	subs	r0, r2, r7
 8004fa0:	280f      	cmp	r0, #15
 8004fa2:	dd1c      	ble.n	8004fde <_malloc_r+0x102>
 8004fa4:	3b01      	subs	r3, #1
 8004fa6:	3301      	adds	r3, #1
 8004fa8:	e7cf      	b.n	8004f4a <_malloc_r+0x6e>
 8004faa:	2b14      	cmp	r3, #20
 8004fac:	d801      	bhi.n	8004fb2 <_malloc_r+0xd6>
 8004fae:	335b      	adds	r3, #91	; 0x5b
 8004fb0:	e7ea      	b.n	8004f88 <_malloc_r+0xac>
 8004fb2:	2b54      	cmp	r3, #84	; 0x54
 8004fb4:	d802      	bhi.n	8004fbc <_malloc_r+0xe0>
 8004fb6:	0b3b      	lsrs	r3, r7, #12
 8004fb8:	336e      	adds	r3, #110	; 0x6e
 8004fba:	e7e5      	b.n	8004f88 <_malloc_r+0xac>
 8004fbc:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 8004fc0:	d802      	bhi.n	8004fc8 <_malloc_r+0xec>
 8004fc2:	0bfb      	lsrs	r3, r7, #15
 8004fc4:	3377      	adds	r3, #119	; 0x77
 8004fc6:	e7df      	b.n	8004f88 <_malloc_r+0xac>
 8004fc8:	f240 5254 	movw	r2, #1364	; 0x554
 8004fcc:	4293      	cmp	r3, r2
 8004fce:	d804      	bhi.n	8004fda <_malloc_r+0xfe>
 8004fd0:	0cbb      	lsrs	r3, r7, #18
 8004fd2:	337c      	adds	r3, #124	; 0x7c
 8004fd4:	e7d8      	b.n	8004f88 <_malloc_r+0xac>
 8004fd6:	233f      	movs	r3, #63	; 0x3f
 8004fd8:	e7d6      	b.n	8004f88 <_malloc_r+0xac>
 8004fda:	237e      	movs	r3, #126	; 0x7e
 8004fdc:	e7d4      	b.n	8004f88 <_malloc_r+0xac>
 8004fde:	2800      	cmp	r0, #0
 8004fe0:	68e1      	ldr	r1, [r4, #12]
 8004fe2:	db04      	blt.n	8004fee <_malloc_r+0x112>
 8004fe4:	68a3      	ldr	r3, [r4, #8]
 8004fe6:	60d9      	str	r1, [r3, #12]
 8004fe8:	608b      	str	r3, [r1, #8]
 8004fea:	18a3      	adds	r3, r4, r2
 8004fec:	e7a3      	b.n	8004f36 <_malloc_r+0x5a>
 8004fee:	460c      	mov	r4, r1
 8004ff0:	e7d0      	b.n	8004f94 <_malloc_r+0xb8>
 8004ff2:	2800      	cmp	r0, #0
 8004ff4:	e9c6 1104 	strd	r1, r1, [r6, #16]
 8004ff8:	db07      	blt.n	800500a <_malloc_r+0x12e>
 8004ffa:	44a4      	add	ip, r4
 8004ffc:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8005000:	f043 0301 	orr.w	r3, r3, #1
 8005004:	f8cc 3004 	str.w	r3, [ip, #4]
 8005008:	e799      	b.n	8004f3e <_malloc_r+0x62>
 800500a:	f5bc 7f00 	cmp.w	ip, #512	; 0x200
 800500e:	6870      	ldr	r0, [r6, #4]
 8005010:	f080 8095 	bcs.w	800513e <_malloc_r+0x262>
 8005014:	ea4f 02dc 	mov.w	r2, ip, lsr #3
 8005018:	ea4f 1e5c 	mov.w	lr, ip, lsr #5
 800501c:	f04f 0c01 	mov.w	ip, #1
 8005020:	3201      	adds	r2, #1
 8005022:	fa0c fc0e 	lsl.w	ip, ip, lr
 8005026:	ea4c 0000 	orr.w	r0, ip, r0
 800502a:	6070      	str	r0, [r6, #4]
 800502c:	f856 c032 	ldr.w	ip, [r6, r2, lsl #3]
 8005030:	eb06 00c2 	add.w	r0, r6, r2, lsl #3
 8005034:	3808      	subs	r0, #8
 8005036:	e9c4 c002 	strd	ip, r0, [r4, #8]
 800503a:	f846 4032 	str.w	r4, [r6, r2, lsl #3]
 800503e:	f8cc 400c 	str.w	r4, [ip, #12]
 8005042:	1098      	asrs	r0, r3, #2
 8005044:	2201      	movs	r2, #1
 8005046:	4082      	lsls	r2, r0
 8005048:	6870      	ldr	r0, [r6, #4]
 800504a:	4290      	cmp	r0, r2
 800504c:	d326      	bcc.n	800509c <_malloc_r+0x1c0>
 800504e:	4210      	tst	r0, r2
 8005050:	d106      	bne.n	8005060 <_malloc_r+0x184>
 8005052:	f023 0303 	bic.w	r3, r3, #3
 8005056:	0052      	lsls	r2, r2, #1
 8005058:	4210      	tst	r0, r2
 800505a:	f103 0304 	add.w	r3, r3, #4
 800505e:	d0fa      	beq.n	8005056 <_malloc_r+0x17a>
 8005060:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
 8005064:	46c1      	mov	r9, r8
 8005066:	469e      	mov	lr, r3
 8005068:	f8d9 400c 	ldr.w	r4, [r9, #12]
 800506c:	454c      	cmp	r4, r9
 800506e:	f040 80b9 	bne.w	80051e4 <_malloc_r+0x308>
 8005072:	f10e 0e01 	add.w	lr, lr, #1
 8005076:	f01e 0f03 	tst.w	lr, #3
 800507a:	f109 0908 	add.w	r9, r9, #8
 800507e:	d1f3      	bne.n	8005068 <_malloc_r+0x18c>
 8005080:	0798      	lsls	r0, r3, #30
 8005082:	f040 80e3 	bne.w	800524c <_malloc_r+0x370>
 8005086:	6873      	ldr	r3, [r6, #4]
 8005088:	ea23 0302 	bic.w	r3, r3, r2
 800508c:	6073      	str	r3, [r6, #4]
 800508e:	6870      	ldr	r0, [r6, #4]
 8005090:	0052      	lsls	r2, r2, #1
 8005092:	4290      	cmp	r0, r2
 8005094:	d302      	bcc.n	800509c <_malloc_r+0x1c0>
 8005096:	2a00      	cmp	r2, #0
 8005098:	f040 80e5 	bne.w	8005266 <_malloc_r+0x38a>
 800509c:	f8d6 a008 	ldr.w	sl, [r6, #8]
 80050a0:	f8da 3004 	ldr.w	r3, [sl, #4]
 80050a4:	f023 0903 	bic.w	r9, r3, #3
 80050a8:	45b9      	cmp	r9, r7
 80050aa:	d304      	bcc.n	80050b6 <_malloc_r+0x1da>
 80050ac:	eba9 0207 	sub.w	r2, r9, r7
 80050b0:	2a0f      	cmp	r2, #15
 80050b2:	f300 8141 	bgt.w	8005338 <_malloc_r+0x45c>
 80050b6:	4b46      	ldr	r3, [pc, #280]	; (80051d0 <_malloc_r+0x2f4>)
 80050b8:	6819      	ldr	r1, [r3, #0]
 80050ba:	3110      	adds	r1, #16
 80050bc:	4439      	add	r1, r7
 80050be:	2008      	movs	r0, #8
 80050c0:	9101      	str	r1, [sp, #4]
 80050c2:	f000 faf1 	bl	80056a8 <sysconf>
 80050c6:	4a43      	ldr	r2, [pc, #268]	; (80051d4 <_malloc_r+0x2f8>)
 80050c8:	9901      	ldr	r1, [sp, #4]
 80050ca:	6813      	ldr	r3, [r2, #0]
 80050cc:	3301      	adds	r3, #1
 80050ce:	bf1f      	itttt	ne
 80050d0:	f101 31ff 	addne.w	r1, r1, #4294967295	; 0xffffffff
 80050d4:	1809      	addne	r1, r1, r0
 80050d6:	4243      	negne	r3, r0
 80050d8:	4019      	andne	r1, r3
 80050da:	4680      	mov	r8, r0
 80050dc:	4628      	mov	r0, r5
 80050de:	9101      	str	r1, [sp, #4]
 80050e0:	f000 fa92 	bl	8005608 <_sbrk_r>
 80050e4:	1c42      	adds	r2, r0, #1
 80050e6:	eb0a 0b09 	add.w	fp, sl, r9
 80050ea:	4604      	mov	r4, r0
 80050ec:	f000 80f7 	beq.w	80052de <_malloc_r+0x402>
 80050f0:	4583      	cmp	fp, r0
 80050f2:	9901      	ldr	r1, [sp, #4]
 80050f4:	4a37      	ldr	r2, [pc, #220]	; (80051d4 <_malloc_r+0x2f8>)
 80050f6:	d902      	bls.n	80050fe <_malloc_r+0x222>
 80050f8:	45b2      	cmp	sl, r6
 80050fa:	f040 80f0 	bne.w	80052de <_malloc_r+0x402>
 80050fe:	4b36      	ldr	r3, [pc, #216]	; (80051d8 <_malloc_r+0x2fc>)
 8005100:	6818      	ldr	r0, [r3, #0]
 8005102:	45a3      	cmp	fp, r4
 8005104:	eb00 0e01 	add.w	lr, r0, r1
 8005108:	f8c3 e000 	str.w	lr, [r3]
 800510c:	f108 3cff 	add.w	ip, r8, #4294967295	; 0xffffffff
 8005110:	f040 80ab 	bne.w	800526a <_malloc_r+0x38e>
 8005114:	ea1b 0f0c 	tst.w	fp, ip
 8005118:	f040 80a7 	bne.w	800526a <_malloc_r+0x38e>
 800511c:	68b2      	ldr	r2, [r6, #8]
 800511e:	4449      	add	r1, r9
 8005120:	f041 0101 	orr.w	r1, r1, #1
 8005124:	6051      	str	r1, [r2, #4]
 8005126:	4a2d      	ldr	r2, [pc, #180]	; (80051dc <_malloc_r+0x300>)
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	6811      	ldr	r1, [r2, #0]
 800512c:	428b      	cmp	r3, r1
 800512e:	bf88      	it	hi
 8005130:	6013      	strhi	r3, [r2, #0]
 8005132:	4a2b      	ldr	r2, [pc, #172]	; (80051e0 <_malloc_r+0x304>)
 8005134:	6811      	ldr	r1, [r2, #0]
 8005136:	428b      	cmp	r3, r1
 8005138:	bf88      	it	hi
 800513a:	6013      	strhi	r3, [r2, #0]
 800513c:	e0cf      	b.n	80052de <_malloc_r+0x402>
 800513e:	f5bc 6f20 	cmp.w	ip, #2560	; 0xa00
 8005142:	ea4f 225c 	mov.w	r2, ip, lsr #9
 8005146:	d218      	bcs.n	800517a <_malloc_r+0x29e>
 8005148:	ea4f 129c 	mov.w	r2, ip, lsr #6
 800514c:	3238      	adds	r2, #56	; 0x38
 800514e:	f102 0e01 	add.w	lr, r2, #1
 8005152:	eb06 08c2 	add.w	r8, r6, r2, lsl #3
 8005156:	f856 e03e 	ldr.w	lr, [r6, lr, lsl #3]
 800515a:	45f0      	cmp	r8, lr
 800515c:	d12b      	bne.n	80051b6 <_malloc_r+0x2da>
 800515e:	1092      	asrs	r2, r2, #2
 8005160:	f04f 0c01 	mov.w	ip, #1
 8005164:	fa0c f202 	lsl.w	r2, ip, r2
 8005168:	4302      	orrs	r2, r0
 800516a:	6072      	str	r2, [r6, #4]
 800516c:	e9c4 e802 	strd	lr, r8, [r4, #8]
 8005170:	f8c8 4008 	str.w	r4, [r8, #8]
 8005174:	f8ce 400c 	str.w	r4, [lr, #12]
 8005178:	e763      	b.n	8005042 <_malloc_r+0x166>
 800517a:	2a14      	cmp	r2, #20
 800517c:	d801      	bhi.n	8005182 <_malloc_r+0x2a6>
 800517e:	325b      	adds	r2, #91	; 0x5b
 8005180:	e7e5      	b.n	800514e <_malloc_r+0x272>
 8005182:	2a54      	cmp	r2, #84	; 0x54
 8005184:	d803      	bhi.n	800518e <_malloc_r+0x2b2>
 8005186:	ea4f 321c 	mov.w	r2, ip, lsr #12
 800518a:	326e      	adds	r2, #110	; 0x6e
 800518c:	e7df      	b.n	800514e <_malloc_r+0x272>
 800518e:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8005192:	d803      	bhi.n	800519c <_malloc_r+0x2c0>
 8005194:	ea4f 32dc 	mov.w	r2, ip, lsr #15
 8005198:	3277      	adds	r2, #119	; 0x77
 800519a:	e7d8      	b.n	800514e <_malloc_r+0x272>
 800519c:	f240 5e54 	movw	lr, #1364	; 0x554
 80051a0:	4572      	cmp	r2, lr
 80051a2:	bf9a      	itte	ls
 80051a4:	ea4f 429c 	movls.w	r2, ip, lsr #18
 80051a8:	327c      	addls	r2, #124	; 0x7c
 80051aa:	227e      	movhi	r2, #126	; 0x7e
 80051ac:	e7cf      	b.n	800514e <_malloc_r+0x272>
 80051ae:	f8de e008 	ldr.w	lr, [lr, #8]
 80051b2:	45f0      	cmp	r8, lr
 80051b4:	d005      	beq.n	80051c2 <_malloc_r+0x2e6>
 80051b6:	f8de 2004 	ldr.w	r2, [lr, #4]
 80051ba:	f022 0203 	bic.w	r2, r2, #3
 80051be:	4562      	cmp	r2, ip
 80051c0:	d8f5      	bhi.n	80051ae <_malloc_r+0x2d2>
 80051c2:	f8de 800c 	ldr.w	r8, [lr, #12]
 80051c6:	e7d1      	b.n	800516c <_malloc_r+0x290>
 80051c8:	2000000c 	.word	0x2000000c
 80051cc:	20000014 	.word	0x20000014
 80051d0:	20000b18 	.word	0x20000b18
 80051d4:	20000414 	.word	0x20000414
 80051d8:	20000ae8 	.word	0x20000ae8
 80051dc:	20000b10 	.word	0x20000b10
 80051e0:	20000b14 	.word	0x20000b14
 80051e4:	6860      	ldr	r0, [r4, #4]
 80051e6:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 80051ea:	f020 0003 	bic.w	r0, r0, #3
 80051ee:	eba0 0a07 	sub.w	sl, r0, r7
 80051f2:	f1ba 0f0f 	cmp.w	sl, #15
 80051f6:	dd12      	ble.n	800521e <_malloc_r+0x342>
 80051f8:	68a3      	ldr	r3, [r4, #8]
 80051fa:	19e2      	adds	r2, r4, r7
 80051fc:	f047 0701 	orr.w	r7, r7, #1
 8005200:	6067      	str	r7, [r4, #4]
 8005202:	f8c3 c00c 	str.w	ip, [r3, #12]
 8005206:	f8cc 3008 	str.w	r3, [ip, #8]
 800520a:	f04a 0301 	orr.w	r3, sl, #1
 800520e:	e9c6 2204 	strd	r2, r2, [r6, #16]
 8005212:	e9c2 1102 	strd	r1, r1, [r2, #8]
 8005216:	6053      	str	r3, [r2, #4]
 8005218:	f844 a000 	str.w	sl, [r4, r0]
 800521c:	e68f      	b.n	8004f3e <_malloc_r+0x62>
 800521e:	f1ba 0f00 	cmp.w	sl, #0
 8005222:	db11      	blt.n	8005248 <_malloc_r+0x36c>
 8005224:	4420      	add	r0, r4
 8005226:	6843      	ldr	r3, [r0, #4]
 8005228:	f043 0301 	orr.w	r3, r3, #1
 800522c:	6043      	str	r3, [r0, #4]
 800522e:	f854 3f08 	ldr.w	r3, [r4, #8]!
 8005232:	4628      	mov	r0, r5
 8005234:	f8c3 c00c 	str.w	ip, [r3, #12]
 8005238:	f8cc 3008 	str.w	r3, [ip, #8]
 800523c:	f000 f88e 	bl	800535c <__malloc_unlock>
 8005240:	4620      	mov	r0, r4
 8005242:	b003      	add	sp, #12
 8005244:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005248:	4664      	mov	r4, ip
 800524a:	e70f      	b.n	800506c <_malloc_r+0x190>
 800524c:	f858 0908 	ldr.w	r0, [r8], #-8
 8005250:	4540      	cmp	r0, r8
 8005252:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8005256:	f43f af13 	beq.w	8005080 <_malloc_r+0x1a4>
 800525a:	e718      	b.n	800508e <_malloc_r+0x1b2>
 800525c:	3304      	adds	r3, #4
 800525e:	0052      	lsls	r2, r2, #1
 8005260:	4210      	tst	r0, r2
 8005262:	d0fb      	beq.n	800525c <_malloc_r+0x380>
 8005264:	e6fc      	b.n	8005060 <_malloc_r+0x184>
 8005266:	4673      	mov	r3, lr
 8005268:	e7fa      	b.n	8005260 <_malloc_r+0x384>
 800526a:	6810      	ldr	r0, [r2, #0]
 800526c:	3001      	adds	r0, #1
 800526e:	bf1b      	ittet	ne
 8005270:	eba4 0b0b 	subne.w	fp, r4, fp
 8005274:	eb0b 020e 	addne.w	r2, fp, lr
 8005278:	6014      	streq	r4, [r2, #0]
 800527a:	601a      	strne	r2, [r3, #0]
 800527c:	f014 0b07 	ands.w	fp, r4, #7
 8005280:	bf1a      	itte	ne
 8005282:	f1cb 0008 	rsbne	r0, fp, #8
 8005286:	1824      	addne	r4, r4, r0
 8005288:	4658      	moveq	r0, fp
 800528a:	1862      	adds	r2, r4, r1
 800528c:	ea02 010c 	and.w	r1, r2, ip
 8005290:	4480      	add	r8, r0
 8005292:	eba8 0801 	sub.w	r8, r8, r1
 8005296:	ea08 080c 	and.w	r8, r8, ip
 800529a:	4641      	mov	r1, r8
 800529c:	4628      	mov	r0, r5
 800529e:	9201      	str	r2, [sp, #4]
 80052a0:	f000 f9b2 	bl	8005608 <_sbrk_r>
 80052a4:	1c43      	adds	r3, r0, #1
 80052a6:	9a01      	ldr	r2, [sp, #4]
 80052a8:	4b28      	ldr	r3, [pc, #160]	; (800534c <_malloc_r+0x470>)
 80052aa:	d107      	bne.n	80052bc <_malloc_r+0x3e0>
 80052ac:	f1bb 0f00 	cmp.w	fp, #0
 80052b0:	d023      	beq.n	80052fa <_malloc_r+0x41e>
 80052b2:	f1ab 0008 	sub.w	r0, fp, #8
 80052b6:	4410      	add	r0, r2
 80052b8:	f04f 0800 	mov.w	r8, #0
 80052bc:	681a      	ldr	r2, [r3, #0]
 80052be:	60b4      	str	r4, [r6, #8]
 80052c0:	1b00      	subs	r0, r0, r4
 80052c2:	4440      	add	r0, r8
 80052c4:	4442      	add	r2, r8
 80052c6:	f040 0001 	orr.w	r0, r0, #1
 80052ca:	45b2      	cmp	sl, r6
 80052cc:	601a      	str	r2, [r3, #0]
 80052ce:	6060      	str	r0, [r4, #4]
 80052d0:	f43f af29 	beq.w	8005126 <_malloc_r+0x24a>
 80052d4:	f1b9 0f0f 	cmp.w	r9, #15
 80052d8:	d812      	bhi.n	8005300 <_malloc_r+0x424>
 80052da:	2301      	movs	r3, #1
 80052dc:	6063      	str	r3, [r4, #4]
 80052de:	68b3      	ldr	r3, [r6, #8]
 80052e0:	685b      	ldr	r3, [r3, #4]
 80052e2:	f023 0303 	bic.w	r3, r3, #3
 80052e6:	42bb      	cmp	r3, r7
 80052e8:	eba3 0207 	sub.w	r2, r3, r7
 80052ec:	d301      	bcc.n	80052f2 <_malloc_r+0x416>
 80052ee:	2a0f      	cmp	r2, #15
 80052f0:	dc22      	bgt.n	8005338 <_malloc_r+0x45c>
 80052f2:	4628      	mov	r0, r5
 80052f4:	f000 f832 	bl	800535c <__malloc_unlock>
 80052f8:	e5fc      	b.n	8004ef4 <_malloc_r+0x18>
 80052fa:	4610      	mov	r0, r2
 80052fc:	46d8      	mov	r8, fp
 80052fe:	e7dd      	b.n	80052bc <_malloc_r+0x3e0>
 8005300:	f8da 2004 	ldr.w	r2, [sl, #4]
 8005304:	f1a9 090c 	sub.w	r9, r9, #12
 8005308:	f029 0907 	bic.w	r9, r9, #7
 800530c:	f002 0201 	and.w	r2, r2, #1
 8005310:	ea42 0209 	orr.w	r2, r2, r9
 8005314:	f8ca 2004 	str.w	r2, [sl, #4]
 8005318:	2105      	movs	r1, #5
 800531a:	eb0a 0209 	add.w	r2, sl, r9
 800531e:	f1b9 0f0f 	cmp.w	r9, #15
 8005322:	e9c2 1101 	strd	r1, r1, [r2, #4]
 8005326:	f67f aefe 	bls.w	8005126 <_malloc_r+0x24a>
 800532a:	f10a 0108 	add.w	r1, sl, #8
 800532e:	4628      	mov	r0, r5
 8005330:	f000 fa2a 	bl	8005788 <_free_r>
 8005334:	4b05      	ldr	r3, [pc, #20]	; (800534c <_malloc_r+0x470>)
 8005336:	e6f6      	b.n	8005126 <_malloc_r+0x24a>
 8005338:	68b4      	ldr	r4, [r6, #8]
 800533a:	f047 0301 	orr.w	r3, r7, #1
 800533e:	4427      	add	r7, r4
 8005340:	f042 0201 	orr.w	r2, r2, #1
 8005344:	6063      	str	r3, [r4, #4]
 8005346:	60b7      	str	r7, [r6, #8]
 8005348:	607a      	str	r2, [r7, #4]
 800534a:	e5f8      	b.n	8004f3e <_malloc_r+0x62>
 800534c:	20000ae8 	.word	0x20000ae8

08005350 <__malloc_lock>:
 8005350:	4801      	ldr	r0, [pc, #4]	; (8005358 <__malloc_lock+0x8>)
 8005352:	f000 b9a7 	b.w	80056a4 <__retarget_lock_acquire_recursive>
 8005356:	bf00      	nop
 8005358:	20000c5d 	.word	0x20000c5d

0800535c <__malloc_unlock>:
 800535c:	4801      	ldr	r0, [pc, #4]	; (8005364 <__malloc_unlock+0x8>)
 800535e:	f000 b9a2 	b.w	80056a6 <__retarget_lock_release_recursive>
 8005362:	bf00      	nop
 8005364:	20000c5d 	.word	0x20000c5d

08005368 <std>:
 8005368:	2300      	movs	r3, #0
 800536a:	b510      	push	{r4, lr}
 800536c:	4604      	mov	r4, r0
 800536e:	e9c0 3300 	strd	r3, r3, [r0]
 8005372:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005376:	6083      	str	r3, [r0, #8]
 8005378:	8181      	strh	r1, [r0, #12]
 800537a:	6643      	str	r3, [r0, #100]	; 0x64
 800537c:	81c2      	strh	r2, [r0, #14]
 800537e:	6183      	str	r3, [r0, #24]
 8005380:	4619      	mov	r1, r3
 8005382:	2208      	movs	r2, #8
 8005384:	305c      	adds	r0, #92	; 0x5c
 8005386:	f000 f902 	bl	800558e <memset>
 800538a:	4b05      	ldr	r3, [pc, #20]	; (80053a0 <std+0x38>)
 800538c:	6223      	str	r3, [r4, #32]
 800538e:	4b05      	ldr	r3, [pc, #20]	; (80053a4 <std+0x3c>)
 8005390:	6263      	str	r3, [r4, #36]	; 0x24
 8005392:	4b05      	ldr	r3, [pc, #20]	; (80053a8 <std+0x40>)
 8005394:	62a3      	str	r3, [r4, #40]	; 0x28
 8005396:	4b05      	ldr	r3, [pc, #20]	; (80053ac <std+0x44>)
 8005398:	61e4      	str	r4, [r4, #28]
 800539a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800539c:	bd10      	pop	{r4, pc}
 800539e:	bf00      	nop
 80053a0:	08005509 	.word	0x08005509
 80053a4:	0800552b 	.word	0x0800552b
 80053a8:	08005563 	.word	0x08005563
 80053ac:	08005587 	.word	0x08005587

080053b0 <stdio_exit_handler>:
 80053b0:	4a02      	ldr	r2, [pc, #8]	; (80053bc <stdio_exit_handler+0xc>)
 80053b2:	4903      	ldr	r1, [pc, #12]	; (80053c0 <stdio_exit_handler+0x10>)
 80053b4:	4803      	ldr	r0, [pc, #12]	; (80053c4 <stdio_exit_handler+0x14>)
 80053b6:	f000 b869 	b.w	800548c <_fwalk_sglue>
 80053ba:	bf00      	nop
 80053bc:	2000041c 	.word	0x2000041c
 80053c0:	08006ce5 	.word	0x08006ce5
 80053c4:	20000428 	.word	0x20000428

080053c8 <cleanup_stdio>:
 80053c8:	6841      	ldr	r1, [r0, #4]
 80053ca:	4b0c      	ldr	r3, [pc, #48]	; (80053fc <cleanup_stdio+0x34>)
 80053cc:	4299      	cmp	r1, r3
 80053ce:	b510      	push	{r4, lr}
 80053d0:	4604      	mov	r4, r0
 80053d2:	d001      	beq.n	80053d8 <cleanup_stdio+0x10>
 80053d4:	f001 fc86 	bl	8006ce4 <_fclose_r>
 80053d8:	68a1      	ldr	r1, [r4, #8]
 80053da:	4b09      	ldr	r3, [pc, #36]	; (8005400 <cleanup_stdio+0x38>)
 80053dc:	4299      	cmp	r1, r3
 80053de:	d002      	beq.n	80053e6 <cleanup_stdio+0x1e>
 80053e0:	4620      	mov	r0, r4
 80053e2:	f001 fc7f 	bl	8006ce4 <_fclose_r>
 80053e6:	68e1      	ldr	r1, [r4, #12]
 80053e8:	4b06      	ldr	r3, [pc, #24]	; (8005404 <cleanup_stdio+0x3c>)
 80053ea:	4299      	cmp	r1, r3
 80053ec:	d004      	beq.n	80053f8 <cleanup_stdio+0x30>
 80053ee:	4620      	mov	r0, r4
 80053f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80053f4:	f001 bc76 	b.w	8006ce4 <_fclose_r>
 80053f8:	bd10      	pop	{r4, pc}
 80053fa:	bf00      	nop
 80053fc:	20000b1c 	.word	0x20000b1c
 8005400:	20000b84 	.word	0x20000b84
 8005404:	20000bec 	.word	0x20000bec

08005408 <global_stdio_init.part.0>:
 8005408:	b510      	push	{r4, lr}
 800540a:	4b0b      	ldr	r3, [pc, #44]	; (8005438 <global_stdio_init.part.0+0x30>)
 800540c:	4c0b      	ldr	r4, [pc, #44]	; (800543c <global_stdio_init.part.0+0x34>)
 800540e:	4a0c      	ldr	r2, [pc, #48]	; (8005440 <global_stdio_init.part.0+0x38>)
 8005410:	601a      	str	r2, [r3, #0]
 8005412:	4620      	mov	r0, r4
 8005414:	2200      	movs	r2, #0
 8005416:	2104      	movs	r1, #4
 8005418:	f7ff ffa6 	bl	8005368 <std>
 800541c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8005420:	2201      	movs	r2, #1
 8005422:	2109      	movs	r1, #9
 8005424:	f7ff ffa0 	bl	8005368 <std>
 8005428:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800542c:	2202      	movs	r2, #2
 800542e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005432:	2112      	movs	r1, #18
 8005434:	f7ff bf98 	b.w	8005368 <std>
 8005438:	20000c54 	.word	0x20000c54
 800543c:	20000b1c 	.word	0x20000b1c
 8005440:	080053b1 	.word	0x080053b1

08005444 <__sfp_lock_acquire>:
 8005444:	4801      	ldr	r0, [pc, #4]	; (800544c <__sfp_lock_acquire+0x8>)
 8005446:	f000 b92d 	b.w	80056a4 <__retarget_lock_acquire_recursive>
 800544a:	bf00      	nop
 800544c:	20000c5e 	.word	0x20000c5e

08005450 <__sfp_lock_release>:
 8005450:	4801      	ldr	r0, [pc, #4]	; (8005458 <__sfp_lock_release+0x8>)
 8005452:	f000 b928 	b.w	80056a6 <__retarget_lock_release_recursive>
 8005456:	bf00      	nop
 8005458:	20000c5e 	.word	0x20000c5e

0800545c <__sinit>:
 800545c:	b510      	push	{r4, lr}
 800545e:	4604      	mov	r4, r0
 8005460:	f7ff fff0 	bl	8005444 <__sfp_lock_acquire>
 8005464:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005466:	b11b      	cbz	r3, 8005470 <__sinit+0x14>
 8005468:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800546c:	f7ff bff0 	b.w	8005450 <__sfp_lock_release>
 8005470:	4b04      	ldr	r3, [pc, #16]	; (8005484 <__sinit+0x28>)
 8005472:	6363      	str	r3, [r4, #52]	; 0x34
 8005474:	4b04      	ldr	r3, [pc, #16]	; (8005488 <__sinit+0x2c>)
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	2b00      	cmp	r3, #0
 800547a:	d1f5      	bne.n	8005468 <__sinit+0xc>
 800547c:	f7ff ffc4 	bl	8005408 <global_stdio_init.part.0>
 8005480:	e7f2      	b.n	8005468 <__sinit+0xc>
 8005482:	bf00      	nop
 8005484:	080053c9 	.word	0x080053c9
 8005488:	20000c54 	.word	0x20000c54

0800548c <_fwalk_sglue>:
 800548c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005490:	4607      	mov	r7, r0
 8005492:	4688      	mov	r8, r1
 8005494:	4614      	mov	r4, r2
 8005496:	2600      	movs	r6, #0
 8005498:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800549c:	f1b9 0901 	subs.w	r9, r9, #1
 80054a0:	d505      	bpl.n	80054ae <_fwalk_sglue+0x22>
 80054a2:	6824      	ldr	r4, [r4, #0]
 80054a4:	2c00      	cmp	r4, #0
 80054a6:	d1f7      	bne.n	8005498 <_fwalk_sglue+0xc>
 80054a8:	4630      	mov	r0, r6
 80054aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80054ae:	89ab      	ldrh	r3, [r5, #12]
 80054b0:	2b01      	cmp	r3, #1
 80054b2:	d907      	bls.n	80054c4 <_fwalk_sglue+0x38>
 80054b4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80054b8:	3301      	adds	r3, #1
 80054ba:	d003      	beq.n	80054c4 <_fwalk_sglue+0x38>
 80054bc:	4629      	mov	r1, r5
 80054be:	4638      	mov	r0, r7
 80054c0:	47c0      	blx	r8
 80054c2:	4306      	orrs	r6, r0
 80054c4:	3568      	adds	r5, #104	; 0x68
 80054c6:	e7e9      	b.n	800549c <_fwalk_sglue+0x10>

080054c8 <sprintf>:
 80054c8:	b40e      	push	{r1, r2, r3}
 80054ca:	b500      	push	{lr}
 80054cc:	b09c      	sub	sp, #112	; 0x70
 80054ce:	ab1d      	add	r3, sp, #116	; 0x74
 80054d0:	9002      	str	r0, [sp, #8]
 80054d2:	9006      	str	r0, [sp, #24]
 80054d4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80054d8:	4809      	ldr	r0, [pc, #36]	; (8005500 <sprintf+0x38>)
 80054da:	9107      	str	r1, [sp, #28]
 80054dc:	9104      	str	r1, [sp, #16]
 80054de:	4909      	ldr	r1, [pc, #36]	; (8005504 <sprintf+0x3c>)
 80054e0:	f853 2b04 	ldr.w	r2, [r3], #4
 80054e4:	9105      	str	r1, [sp, #20]
 80054e6:	6800      	ldr	r0, [r0, #0]
 80054e8:	9301      	str	r3, [sp, #4]
 80054ea:	a902      	add	r1, sp, #8
 80054ec:	f000 fa0c 	bl	8005908 <_svfprintf_r>
 80054f0:	9b02      	ldr	r3, [sp, #8]
 80054f2:	2200      	movs	r2, #0
 80054f4:	701a      	strb	r2, [r3, #0]
 80054f6:	b01c      	add	sp, #112	; 0x70
 80054f8:	f85d eb04 	ldr.w	lr, [sp], #4
 80054fc:	b003      	add	sp, #12
 80054fe:	4770      	bx	lr
 8005500:	20000548 	.word	0x20000548
 8005504:	ffff0208 	.word	0xffff0208

08005508 <__sread>:
 8005508:	b510      	push	{r4, lr}
 800550a:	460c      	mov	r4, r1
 800550c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005510:	f000 f868 	bl	80055e4 <_read_r>
 8005514:	2800      	cmp	r0, #0
 8005516:	bfab      	itete	ge
 8005518:	6d23      	ldrge	r3, [r4, #80]	; 0x50
 800551a:	89a3      	ldrhlt	r3, [r4, #12]
 800551c:	181b      	addge	r3, r3, r0
 800551e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005522:	bfac      	ite	ge
 8005524:	6523      	strge	r3, [r4, #80]	; 0x50
 8005526:	81a3      	strhlt	r3, [r4, #12]
 8005528:	bd10      	pop	{r4, pc}

0800552a <__swrite>:
 800552a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800552e:	461f      	mov	r7, r3
 8005530:	898b      	ldrh	r3, [r1, #12]
 8005532:	05db      	lsls	r3, r3, #23
 8005534:	4605      	mov	r5, r0
 8005536:	460c      	mov	r4, r1
 8005538:	4616      	mov	r6, r2
 800553a:	d505      	bpl.n	8005548 <__swrite+0x1e>
 800553c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005540:	2302      	movs	r3, #2
 8005542:	2200      	movs	r2, #0
 8005544:	f000 f83c 	bl	80055c0 <_lseek_r>
 8005548:	89a3      	ldrh	r3, [r4, #12]
 800554a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800554e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005552:	81a3      	strh	r3, [r4, #12]
 8005554:	4632      	mov	r2, r6
 8005556:	463b      	mov	r3, r7
 8005558:	4628      	mov	r0, r5
 800555a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800555e:	f000 b863 	b.w	8005628 <_write_r>

08005562 <__sseek>:
 8005562:	b510      	push	{r4, lr}
 8005564:	460c      	mov	r4, r1
 8005566:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800556a:	f000 f829 	bl	80055c0 <_lseek_r>
 800556e:	1c43      	adds	r3, r0, #1
 8005570:	89a3      	ldrh	r3, [r4, #12]
 8005572:	bf15      	itete	ne
 8005574:	6520      	strne	r0, [r4, #80]	; 0x50
 8005576:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800557a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800557e:	81a3      	strheq	r3, [r4, #12]
 8005580:	bf18      	it	ne
 8005582:	81a3      	strhne	r3, [r4, #12]
 8005584:	bd10      	pop	{r4, pc}

08005586 <__sclose>:
 8005586:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800558a:	f000 b809 	b.w	80055a0 <_close_r>

0800558e <memset>:
 800558e:	4402      	add	r2, r0
 8005590:	4603      	mov	r3, r0
 8005592:	4293      	cmp	r3, r2
 8005594:	d100      	bne.n	8005598 <memset+0xa>
 8005596:	4770      	bx	lr
 8005598:	f803 1b01 	strb.w	r1, [r3], #1
 800559c:	e7f9      	b.n	8005592 <memset+0x4>
	...

080055a0 <_close_r>:
 80055a0:	b538      	push	{r3, r4, r5, lr}
 80055a2:	4d06      	ldr	r5, [pc, #24]	; (80055bc <_close_r+0x1c>)
 80055a4:	2300      	movs	r3, #0
 80055a6:	4604      	mov	r4, r0
 80055a8:	4608      	mov	r0, r1
 80055aa:	602b      	str	r3, [r5, #0]
 80055ac:	f7fb ff8d 	bl	80014ca <_close>
 80055b0:	1c43      	adds	r3, r0, #1
 80055b2:	d102      	bne.n	80055ba <_close_r+0x1a>
 80055b4:	682b      	ldr	r3, [r5, #0]
 80055b6:	b103      	cbz	r3, 80055ba <_close_r+0x1a>
 80055b8:	6023      	str	r3, [r4, #0]
 80055ba:	bd38      	pop	{r3, r4, r5, pc}
 80055bc:	20000c58 	.word	0x20000c58

080055c0 <_lseek_r>:
 80055c0:	b538      	push	{r3, r4, r5, lr}
 80055c2:	4d07      	ldr	r5, [pc, #28]	; (80055e0 <_lseek_r+0x20>)
 80055c4:	4604      	mov	r4, r0
 80055c6:	4608      	mov	r0, r1
 80055c8:	4611      	mov	r1, r2
 80055ca:	2200      	movs	r2, #0
 80055cc:	602a      	str	r2, [r5, #0]
 80055ce:	461a      	mov	r2, r3
 80055d0:	f7fb ffa2 	bl	8001518 <_lseek>
 80055d4:	1c43      	adds	r3, r0, #1
 80055d6:	d102      	bne.n	80055de <_lseek_r+0x1e>
 80055d8:	682b      	ldr	r3, [r5, #0]
 80055da:	b103      	cbz	r3, 80055de <_lseek_r+0x1e>
 80055dc:	6023      	str	r3, [r4, #0]
 80055de:	bd38      	pop	{r3, r4, r5, pc}
 80055e0:	20000c58 	.word	0x20000c58

080055e4 <_read_r>:
 80055e4:	b538      	push	{r3, r4, r5, lr}
 80055e6:	4d07      	ldr	r5, [pc, #28]	; (8005604 <_read_r+0x20>)
 80055e8:	4604      	mov	r4, r0
 80055ea:	4608      	mov	r0, r1
 80055ec:	4611      	mov	r1, r2
 80055ee:	2200      	movs	r2, #0
 80055f0:	602a      	str	r2, [r5, #0]
 80055f2:	461a      	mov	r2, r3
 80055f4:	f7fb ff4c 	bl	8001490 <_read>
 80055f8:	1c43      	adds	r3, r0, #1
 80055fa:	d102      	bne.n	8005602 <_read_r+0x1e>
 80055fc:	682b      	ldr	r3, [r5, #0]
 80055fe:	b103      	cbz	r3, 8005602 <_read_r+0x1e>
 8005600:	6023      	str	r3, [r4, #0]
 8005602:	bd38      	pop	{r3, r4, r5, pc}
 8005604:	20000c58 	.word	0x20000c58

08005608 <_sbrk_r>:
 8005608:	b538      	push	{r3, r4, r5, lr}
 800560a:	4d06      	ldr	r5, [pc, #24]	; (8005624 <_sbrk_r+0x1c>)
 800560c:	2300      	movs	r3, #0
 800560e:	4604      	mov	r4, r0
 8005610:	4608      	mov	r0, r1
 8005612:	602b      	str	r3, [r5, #0]
 8005614:	f7fb ff8e 	bl	8001534 <_sbrk>
 8005618:	1c43      	adds	r3, r0, #1
 800561a:	d102      	bne.n	8005622 <_sbrk_r+0x1a>
 800561c:	682b      	ldr	r3, [r5, #0]
 800561e:	b103      	cbz	r3, 8005622 <_sbrk_r+0x1a>
 8005620:	6023      	str	r3, [r4, #0]
 8005622:	bd38      	pop	{r3, r4, r5, pc}
 8005624:	20000c58 	.word	0x20000c58

08005628 <_write_r>:
 8005628:	b538      	push	{r3, r4, r5, lr}
 800562a:	4d07      	ldr	r5, [pc, #28]	; (8005648 <_write_r+0x20>)
 800562c:	4604      	mov	r4, r0
 800562e:	4608      	mov	r0, r1
 8005630:	4611      	mov	r1, r2
 8005632:	2200      	movs	r2, #0
 8005634:	602a      	str	r2, [r5, #0]
 8005636:	461a      	mov	r2, r3
 8005638:	f7ff fb0a 	bl	8004c50 <_write>
 800563c:	1c43      	adds	r3, r0, #1
 800563e:	d102      	bne.n	8005646 <_write_r+0x1e>
 8005640:	682b      	ldr	r3, [r5, #0]
 8005642:	b103      	cbz	r3, 8005646 <_write_r+0x1e>
 8005644:	6023      	str	r3, [r4, #0]
 8005646:	bd38      	pop	{r3, r4, r5, pc}
 8005648:	20000c58 	.word	0x20000c58

0800564c <__errno>:
 800564c:	4b01      	ldr	r3, [pc, #4]	; (8005654 <__errno+0x8>)
 800564e:	6818      	ldr	r0, [r3, #0]
 8005650:	4770      	bx	lr
 8005652:	bf00      	nop
 8005654:	20000548 	.word	0x20000548

08005658 <__libc_init_array>:
 8005658:	b570      	push	{r4, r5, r6, lr}
 800565a:	4d0d      	ldr	r5, [pc, #52]	; (8005690 <__libc_init_array+0x38>)
 800565c:	4c0d      	ldr	r4, [pc, #52]	; (8005694 <__libc_init_array+0x3c>)
 800565e:	1b64      	subs	r4, r4, r5
 8005660:	10a4      	asrs	r4, r4, #2
 8005662:	2600      	movs	r6, #0
 8005664:	42a6      	cmp	r6, r4
 8005666:	d109      	bne.n	800567c <__libc_init_array+0x24>
 8005668:	4d0b      	ldr	r5, [pc, #44]	; (8005698 <__libc_init_array+0x40>)
 800566a:	4c0c      	ldr	r4, [pc, #48]	; (800569c <__libc_init_array+0x44>)
 800566c:	f004 f990 	bl	8009990 <_init>
 8005670:	1b64      	subs	r4, r4, r5
 8005672:	10a4      	asrs	r4, r4, #2
 8005674:	2600      	movs	r6, #0
 8005676:	42a6      	cmp	r6, r4
 8005678:	d105      	bne.n	8005686 <__libc_init_array+0x2e>
 800567a:	bd70      	pop	{r4, r5, r6, pc}
 800567c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005680:	4798      	blx	r3
 8005682:	3601      	adds	r6, #1
 8005684:	e7ee      	b.n	8005664 <__libc_init_array+0xc>
 8005686:	f855 3b04 	ldr.w	r3, [r5], #4
 800568a:	4798      	blx	r3
 800568c:	3601      	adds	r6, #1
 800568e:	e7f2      	b.n	8005676 <__libc_init_array+0x1e>
 8005690:	08009de4 	.word	0x08009de4
 8005694:	08009de4 	.word	0x08009de4
 8005698:	08009de4 	.word	0x08009de4
 800569c:	08009dec 	.word	0x08009dec

080056a0 <__retarget_lock_init_recursive>:
 80056a0:	4770      	bx	lr

080056a2 <__retarget_lock_close_recursive>:
 80056a2:	4770      	bx	lr

080056a4 <__retarget_lock_acquire_recursive>:
 80056a4:	4770      	bx	lr

080056a6 <__retarget_lock_release_recursive>:
 80056a6:	4770      	bx	lr

080056a8 <sysconf>:
 80056a8:	2808      	cmp	r0, #8
 80056aa:	b508      	push	{r3, lr}
 80056ac:	d006      	beq.n	80056bc <sysconf+0x14>
 80056ae:	f7ff ffcd 	bl	800564c <__errno>
 80056b2:	2316      	movs	r3, #22
 80056b4:	6003      	str	r3, [r0, #0]
 80056b6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80056ba:	bd08      	pop	{r3, pc}
 80056bc:	2080      	movs	r0, #128	; 0x80
 80056be:	e7fc      	b.n	80056ba <sysconf+0x12>

080056c0 <register_fini>:
 80056c0:	4b02      	ldr	r3, [pc, #8]	; (80056cc <register_fini+0xc>)
 80056c2:	b113      	cbz	r3, 80056ca <register_fini+0xa>
 80056c4:	4802      	ldr	r0, [pc, #8]	; (80056d0 <register_fini+0x10>)
 80056c6:	f000 b805 	b.w	80056d4 <atexit>
 80056ca:	4770      	bx	lr
 80056cc:	00000000 	.word	0x00000000
 80056d0:	08006f29 	.word	0x08006f29

080056d4 <atexit>:
 80056d4:	2300      	movs	r3, #0
 80056d6:	4601      	mov	r1, r0
 80056d8:	461a      	mov	r2, r3
 80056da:	4618      	mov	r0, r3
 80056dc:	f001 bc70 	b.w	8006fc0 <__register_exitproc>

080056e0 <_malloc_trim_r>:
 80056e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80056e4:	4606      	mov	r6, r0
 80056e6:	2008      	movs	r0, #8
 80056e8:	460c      	mov	r4, r1
 80056ea:	f7ff ffdd 	bl	80056a8 <sysconf>
 80056ee:	4f23      	ldr	r7, [pc, #140]	; (800577c <_malloc_trim_r+0x9c>)
 80056f0:	4680      	mov	r8, r0
 80056f2:	4630      	mov	r0, r6
 80056f4:	f7ff fe2c 	bl	8005350 <__malloc_lock>
 80056f8:	68bb      	ldr	r3, [r7, #8]
 80056fa:	685d      	ldr	r5, [r3, #4]
 80056fc:	f025 0503 	bic.w	r5, r5, #3
 8005700:	1b2c      	subs	r4, r5, r4
 8005702:	3c11      	subs	r4, #17
 8005704:	4444      	add	r4, r8
 8005706:	fbb4 f4f8 	udiv	r4, r4, r8
 800570a:	3c01      	subs	r4, #1
 800570c:	fb08 f404 	mul.w	r4, r8, r4
 8005710:	45a0      	cmp	r8, r4
 8005712:	dd05      	ble.n	8005720 <_malloc_trim_r+0x40>
 8005714:	4630      	mov	r0, r6
 8005716:	f7ff fe21 	bl	800535c <__malloc_unlock>
 800571a:	2000      	movs	r0, #0
 800571c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005720:	2100      	movs	r1, #0
 8005722:	4630      	mov	r0, r6
 8005724:	f7ff ff70 	bl	8005608 <_sbrk_r>
 8005728:	68bb      	ldr	r3, [r7, #8]
 800572a:	442b      	add	r3, r5
 800572c:	4298      	cmp	r0, r3
 800572e:	d1f1      	bne.n	8005714 <_malloc_trim_r+0x34>
 8005730:	4261      	negs	r1, r4
 8005732:	4630      	mov	r0, r6
 8005734:	f7ff ff68 	bl	8005608 <_sbrk_r>
 8005738:	3001      	adds	r0, #1
 800573a:	d110      	bne.n	800575e <_malloc_trim_r+0x7e>
 800573c:	2100      	movs	r1, #0
 800573e:	4630      	mov	r0, r6
 8005740:	f7ff ff62 	bl	8005608 <_sbrk_r>
 8005744:	68ba      	ldr	r2, [r7, #8]
 8005746:	1a83      	subs	r3, r0, r2
 8005748:	2b0f      	cmp	r3, #15
 800574a:	dde3      	ble.n	8005714 <_malloc_trim_r+0x34>
 800574c:	490c      	ldr	r1, [pc, #48]	; (8005780 <_malloc_trim_r+0xa0>)
 800574e:	6809      	ldr	r1, [r1, #0]
 8005750:	1a40      	subs	r0, r0, r1
 8005752:	490c      	ldr	r1, [pc, #48]	; (8005784 <_malloc_trim_r+0xa4>)
 8005754:	f043 0301 	orr.w	r3, r3, #1
 8005758:	6008      	str	r0, [r1, #0]
 800575a:	6053      	str	r3, [r2, #4]
 800575c:	e7da      	b.n	8005714 <_malloc_trim_r+0x34>
 800575e:	68bb      	ldr	r3, [r7, #8]
 8005760:	4a08      	ldr	r2, [pc, #32]	; (8005784 <_malloc_trim_r+0xa4>)
 8005762:	1b2d      	subs	r5, r5, r4
 8005764:	f045 0501 	orr.w	r5, r5, #1
 8005768:	605d      	str	r5, [r3, #4]
 800576a:	6813      	ldr	r3, [r2, #0]
 800576c:	4630      	mov	r0, r6
 800576e:	1b1b      	subs	r3, r3, r4
 8005770:	6013      	str	r3, [r2, #0]
 8005772:	f7ff fdf3 	bl	800535c <__malloc_unlock>
 8005776:	2001      	movs	r0, #1
 8005778:	e7d0      	b.n	800571c <_malloc_trim_r+0x3c>
 800577a:	bf00      	nop
 800577c:	2000000c 	.word	0x2000000c
 8005780:	20000414 	.word	0x20000414
 8005784:	20000ae8 	.word	0x20000ae8

08005788 <_free_r>:
 8005788:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800578a:	4605      	mov	r5, r0
 800578c:	460f      	mov	r7, r1
 800578e:	2900      	cmp	r1, #0
 8005790:	f000 80b1 	beq.w	80058f6 <_free_r+0x16e>
 8005794:	f7ff fddc 	bl	8005350 <__malloc_lock>
 8005798:	f857 2c04 	ldr.w	r2, [r7, #-4]
 800579c:	4856      	ldr	r0, [pc, #344]	; (80058f8 <_free_r+0x170>)
 800579e:	f022 0401 	bic.w	r4, r2, #1
 80057a2:	f1a7 0308 	sub.w	r3, r7, #8
 80057a6:	eb03 0c04 	add.w	ip, r3, r4
 80057aa:	6881      	ldr	r1, [r0, #8]
 80057ac:	f8dc 6004 	ldr.w	r6, [ip, #4]
 80057b0:	4561      	cmp	r1, ip
 80057b2:	f026 0603 	bic.w	r6, r6, #3
 80057b6:	f002 0201 	and.w	r2, r2, #1
 80057ba:	d11b      	bne.n	80057f4 <_free_r+0x6c>
 80057bc:	4426      	add	r6, r4
 80057be:	b93a      	cbnz	r2, 80057d0 <_free_r+0x48>
 80057c0:	f857 2c08 	ldr.w	r2, [r7, #-8]
 80057c4:	1a9b      	subs	r3, r3, r2
 80057c6:	4416      	add	r6, r2
 80057c8:	e9d3 1202 	ldrd	r1, r2, [r3, #8]
 80057cc:	60ca      	str	r2, [r1, #12]
 80057ce:	6091      	str	r1, [r2, #8]
 80057d0:	f046 0201 	orr.w	r2, r6, #1
 80057d4:	605a      	str	r2, [r3, #4]
 80057d6:	6083      	str	r3, [r0, #8]
 80057d8:	4b48      	ldr	r3, [pc, #288]	; (80058fc <_free_r+0x174>)
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	42b3      	cmp	r3, r6
 80057de:	d804      	bhi.n	80057ea <_free_r+0x62>
 80057e0:	4b47      	ldr	r3, [pc, #284]	; (8005900 <_free_r+0x178>)
 80057e2:	4628      	mov	r0, r5
 80057e4:	6819      	ldr	r1, [r3, #0]
 80057e6:	f7ff ff7b 	bl	80056e0 <_malloc_trim_r>
 80057ea:	4628      	mov	r0, r5
 80057ec:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80057f0:	f7ff bdb4 	b.w	800535c <__malloc_unlock>
 80057f4:	f8cc 6004 	str.w	r6, [ip, #4]
 80057f8:	2a00      	cmp	r2, #0
 80057fa:	d138      	bne.n	800586e <_free_r+0xe6>
 80057fc:	f857 1c08 	ldr.w	r1, [r7, #-8]
 8005800:	1a5b      	subs	r3, r3, r1
 8005802:	440c      	add	r4, r1
 8005804:	6899      	ldr	r1, [r3, #8]
 8005806:	f100 0708 	add.w	r7, r0, #8
 800580a:	42b9      	cmp	r1, r7
 800580c:	d031      	beq.n	8005872 <_free_r+0xea>
 800580e:	68df      	ldr	r7, [r3, #12]
 8005810:	60cf      	str	r7, [r1, #12]
 8005812:	60b9      	str	r1, [r7, #8]
 8005814:	eb0c 0106 	add.w	r1, ip, r6
 8005818:	6849      	ldr	r1, [r1, #4]
 800581a:	07c9      	lsls	r1, r1, #31
 800581c:	d40b      	bmi.n	8005836 <_free_r+0xae>
 800581e:	f8dc 1008 	ldr.w	r1, [ip, #8]
 8005822:	4434      	add	r4, r6
 8005824:	bb3a      	cbnz	r2, 8005876 <_free_r+0xee>
 8005826:	4e37      	ldr	r6, [pc, #220]	; (8005904 <_free_r+0x17c>)
 8005828:	42b1      	cmp	r1, r6
 800582a:	d124      	bne.n	8005876 <_free_r+0xee>
 800582c:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005830:	e9c3 1102 	strd	r1, r1, [r3, #8]
 8005834:	2201      	movs	r2, #1
 8005836:	f044 0101 	orr.w	r1, r4, #1
 800583a:	6059      	str	r1, [r3, #4]
 800583c:	511c      	str	r4, [r3, r4]
 800583e:	2a00      	cmp	r2, #0
 8005840:	d1d3      	bne.n	80057ea <_free_r+0x62>
 8005842:	f5b4 7f00 	cmp.w	r4, #512	; 0x200
 8005846:	d21b      	bcs.n	8005880 <_free_r+0xf8>
 8005848:	08e2      	lsrs	r2, r4, #3
 800584a:	2101      	movs	r1, #1
 800584c:	0964      	lsrs	r4, r4, #5
 800584e:	40a1      	lsls	r1, r4
 8005850:	6844      	ldr	r4, [r0, #4]
 8005852:	3201      	adds	r2, #1
 8005854:	4321      	orrs	r1, r4
 8005856:	6041      	str	r1, [r0, #4]
 8005858:	f850 4032 	ldr.w	r4, [r0, r2, lsl #3]
 800585c:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
 8005860:	3908      	subs	r1, #8
 8005862:	e9c3 4102 	strd	r4, r1, [r3, #8]
 8005866:	f840 3032 	str.w	r3, [r0, r2, lsl #3]
 800586a:	60e3      	str	r3, [r4, #12]
 800586c:	e7bd      	b.n	80057ea <_free_r+0x62>
 800586e:	2200      	movs	r2, #0
 8005870:	e7d0      	b.n	8005814 <_free_r+0x8c>
 8005872:	2201      	movs	r2, #1
 8005874:	e7ce      	b.n	8005814 <_free_r+0x8c>
 8005876:	f8dc 600c 	ldr.w	r6, [ip, #12]
 800587a:	60ce      	str	r6, [r1, #12]
 800587c:	60b1      	str	r1, [r6, #8]
 800587e:	e7da      	b.n	8005836 <_free_r+0xae>
 8005880:	f5b4 6f20 	cmp.w	r4, #2560	; 0xa00
 8005884:	ea4f 2254 	mov.w	r2, r4, lsr #9
 8005888:	d214      	bcs.n	80058b4 <_free_r+0x12c>
 800588a:	09a2      	lsrs	r2, r4, #6
 800588c:	3238      	adds	r2, #56	; 0x38
 800588e:	1c51      	adds	r1, r2, #1
 8005890:	eb00 06c2 	add.w	r6, r0, r2, lsl #3
 8005894:	f850 1031 	ldr.w	r1, [r0, r1, lsl #3]
 8005898:	428e      	cmp	r6, r1
 800589a:	d125      	bne.n	80058e8 <_free_r+0x160>
 800589c:	2401      	movs	r4, #1
 800589e:	1092      	asrs	r2, r2, #2
 80058a0:	fa04 f202 	lsl.w	r2, r4, r2
 80058a4:	6844      	ldr	r4, [r0, #4]
 80058a6:	4322      	orrs	r2, r4
 80058a8:	6042      	str	r2, [r0, #4]
 80058aa:	e9c3 1602 	strd	r1, r6, [r3, #8]
 80058ae:	60b3      	str	r3, [r6, #8]
 80058b0:	60cb      	str	r3, [r1, #12]
 80058b2:	e79a      	b.n	80057ea <_free_r+0x62>
 80058b4:	2a14      	cmp	r2, #20
 80058b6:	d801      	bhi.n	80058bc <_free_r+0x134>
 80058b8:	325b      	adds	r2, #91	; 0x5b
 80058ba:	e7e8      	b.n	800588e <_free_r+0x106>
 80058bc:	2a54      	cmp	r2, #84	; 0x54
 80058be:	d802      	bhi.n	80058c6 <_free_r+0x13e>
 80058c0:	0b22      	lsrs	r2, r4, #12
 80058c2:	326e      	adds	r2, #110	; 0x6e
 80058c4:	e7e3      	b.n	800588e <_free_r+0x106>
 80058c6:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 80058ca:	d802      	bhi.n	80058d2 <_free_r+0x14a>
 80058cc:	0be2      	lsrs	r2, r4, #15
 80058ce:	3277      	adds	r2, #119	; 0x77
 80058d0:	e7dd      	b.n	800588e <_free_r+0x106>
 80058d2:	f240 5154 	movw	r1, #1364	; 0x554
 80058d6:	428a      	cmp	r2, r1
 80058d8:	bf9a      	itte	ls
 80058da:	0ca2      	lsrls	r2, r4, #18
 80058dc:	327c      	addls	r2, #124	; 0x7c
 80058de:	227e      	movhi	r2, #126	; 0x7e
 80058e0:	e7d5      	b.n	800588e <_free_r+0x106>
 80058e2:	6889      	ldr	r1, [r1, #8]
 80058e4:	428e      	cmp	r6, r1
 80058e6:	d004      	beq.n	80058f2 <_free_r+0x16a>
 80058e8:	684a      	ldr	r2, [r1, #4]
 80058ea:	f022 0203 	bic.w	r2, r2, #3
 80058ee:	42a2      	cmp	r2, r4
 80058f0:	d8f7      	bhi.n	80058e2 <_free_r+0x15a>
 80058f2:	68ce      	ldr	r6, [r1, #12]
 80058f4:	e7d9      	b.n	80058aa <_free_r+0x122>
 80058f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80058f8:	2000000c 	.word	0x2000000c
 80058fc:	20000418 	.word	0x20000418
 8005900:	20000b18 	.word	0x20000b18
 8005904:	20000014 	.word	0x20000014

08005908 <_svfprintf_r>:
 8005908:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800590c:	ed2d 8b04 	vpush	{d8-d9}
 8005910:	b0cf      	sub	sp, #316	; 0x13c
 8005912:	4689      	mov	r9, r1
 8005914:	9203      	str	r2, [sp, #12]
 8005916:	461d      	mov	r5, r3
 8005918:	4682      	mov	sl, r0
 800591a:	f001 fb01 	bl	8006f20 <_localeconv_r>
 800591e:	6803      	ldr	r3, [r0, #0]
 8005920:	9313      	str	r3, [sp, #76]	; 0x4c
 8005922:	4618      	mov	r0, r3
 8005924:	f7fa fc7c 	bl	8000220 <strlen>
 8005928:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 800592c:	900e      	str	r0, [sp, #56]	; 0x38
 800592e:	0619      	lsls	r1, r3, #24
 8005930:	d51a      	bpl.n	8005968 <_svfprintf_r+0x60>
 8005932:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8005936:	b9bb      	cbnz	r3, 8005968 <_svfprintf_r+0x60>
 8005938:	2140      	movs	r1, #64	; 0x40
 800593a:	4650      	mov	r0, sl
 800593c:	f7ff face 	bl	8004edc <_malloc_r>
 8005940:	f8c9 0000 	str.w	r0, [r9]
 8005944:	f8c9 0010 	str.w	r0, [r9, #16]
 8005948:	b958      	cbnz	r0, 8005962 <_svfprintf_r+0x5a>
 800594a:	230c      	movs	r3, #12
 800594c:	f8ca 3000 	str.w	r3, [sl]
 8005950:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005954:	930b      	str	r3, [sp, #44]	; 0x2c
 8005956:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8005958:	b04f      	add	sp, #316	; 0x13c
 800595a:	ecbd 8b04 	vpop	{d8-d9}
 800595e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005962:	2340      	movs	r3, #64	; 0x40
 8005964:	f8c9 3014 	str.w	r3, [r9, #20]
 8005968:	ed9f 7b91 	vldr	d7, [pc, #580]	; 8005bb0 <_svfprintf_r+0x2a8>
 800596c:	2300      	movs	r3, #0
 800596e:	e9cd 3323 	strd	r3, r3, [sp, #140]	; 0x8c
 8005972:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8005976:	e9cd 3315 	strd	r3, r3, [sp, #84]	; 0x54
 800597a:	ac25      	add	r4, sp, #148	; 0x94
 800597c:	9422      	str	r4, [sp, #136]	; 0x88
 800597e:	9305      	str	r3, [sp, #20]
 8005980:	9309      	str	r3, [sp, #36]	; 0x24
 8005982:	9311      	str	r3, [sp, #68]	; 0x44
 8005984:	9314      	str	r3, [sp, #80]	; 0x50
 8005986:	930b      	str	r3, [sp, #44]	; 0x2c
 8005988:	9b03      	ldr	r3, [sp, #12]
 800598a:	461e      	mov	r6, r3
 800598c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005990:	b10a      	cbz	r2, 8005996 <_svfprintf_r+0x8e>
 8005992:	2a25      	cmp	r2, #37	; 0x25
 8005994:	d1f9      	bne.n	800598a <_svfprintf_r+0x82>
 8005996:	9b03      	ldr	r3, [sp, #12]
 8005998:	1af7      	subs	r7, r6, r3
 800599a:	d00d      	beq.n	80059b8 <_svfprintf_r+0xb0>
 800599c:	e9c4 3700 	strd	r3, r7, [r4]
 80059a0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80059a2:	443b      	add	r3, r7
 80059a4:	9324      	str	r3, [sp, #144]	; 0x90
 80059a6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80059a8:	3301      	adds	r3, #1
 80059aa:	2b07      	cmp	r3, #7
 80059ac:	9323      	str	r3, [sp, #140]	; 0x8c
 80059ae:	dc78      	bgt.n	8005aa2 <_svfprintf_r+0x19a>
 80059b0:	3408      	adds	r4, #8
 80059b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80059b4:	443b      	add	r3, r7
 80059b6:	930b      	str	r3, [sp, #44]	; 0x2c
 80059b8:	7833      	ldrb	r3, [r6, #0]
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	f001 815a 	beq.w	8006c74 <_svfprintf_r+0x136c>
 80059c0:	2300      	movs	r3, #0
 80059c2:	3601      	adds	r6, #1
 80059c4:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 80059c8:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 80059cc:	930f      	str	r3, [sp, #60]	; 0x3c
 80059ce:	469b      	mov	fp, r3
 80059d0:	270a      	movs	r7, #10
 80059d2:	212b      	movs	r1, #43	; 0x2b
 80059d4:	4633      	mov	r3, r6
 80059d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80059da:	9207      	str	r2, [sp, #28]
 80059dc:	930a      	str	r3, [sp, #40]	; 0x28
 80059de:	9b07      	ldr	r3, [sp, #28]
 80059e0:	3b20      	subs	r3, #32
 80059e2:	2b5a      	cmp	r3, #90	; 0x5a
 80059e4:	f200 85c6 	bhi.w	8006574 <_svfprintf_r+0xc6c>
 80059e8:	e8df f013 	tbh	[pc, r3, lsl #1]
 80059ec:	05c4007e 	.word	0x05c4007e
 80059f0:	008605c4 	.word	0x008605c4
 80059f4:	05c405c4 	.word	0x05c405c4
 80059f8:	006505c4 	.word	0x006505c4
 80059fc:	05c405c4 	.word	0x05c405c4
 8005a00:	00930089 	.word	0x00930089
 8005a04:	009005c4 	.word	0x009005c4
 8005a08:	05c40096 	.word	0x05c40096
 8005a0c:	00b200af 	.word	0x00b200af
 8005a10:	00b200b2 	.word	0x00b200b2
 8005a14:	00b200b2 	.word	0x00b200b2
 8005a18:	00b200b2 	.word	0x00b200b2
 8005a1c:	00b200b2 	.word	0x00b200b2
 8005a20:	05c405c4 	.word	0x05c405c4
 8005a24:	05c405c4 	.word	0x05c405c4
 8005a28:	05c405c4 	.word	0x05c405c4
 8005a2c:	012905c4 	.word	0x012905c4
 8005a30:	00e605c4 	.word	0x00e605c4
 8005a34:	012900f9 	.word	0x012900f9
 8005a38:	01290129 	.word	0x01290129
 8005a3c:	05c405c4 	.word	0x05c405c4
 8005a40:	05c405c4 	.word	0x05c405c4
 8005a44:	05c400c2 	.word	0x05c400c2
 8005a48:	049105c4 	.word	0x049105c4
 8005a4c:	05c405c4 	.word	0x05c405c4
 8005a50:	04db05c4 	.word	0x04db05c4
 8005a54:	050105c4 	.word	0x050105c4
 8005a58:	05c405c4 	.word	0x05c405c4
 8005a5c:	05c40523 	.word	0x05c40523
 8005a60:	05c405c4 	.word	0x05c405c4
 8005a64:	05c405c4 	.word	0x05c405c4
 8005a68:	05c405c4 	.word	0x05c405c4
 8005a6c:	012905c4 	.word	0x012905c4
 8005a70:	00e605c4 	.word	0x00e605c4
 8005a74:	012900fb 	.word	0x012900fb
 8005a78:	01290129 	.word	0x01290129
 8005a7c:	00fb00c5 	.word	0x00fb00c5
 8005a80:	05c400d9 	.word	0x05c400d9
 8005a84:	05c400d2 	.word	0x05c400d2
 8005a88:	0493046c 	.word	0x0493046c
 8005a8c:	00d904ca 	.word	0x00d904ca
 8005a90:	04db05c4 	.word	0x04db05c4
 8005a94:	0503007c 	.word	0x0503007c
 8005a98:	05c405c4 	.word	0x05c405c4
 8005a9c:	05c40542 	.word	0x05c40542
 8005aa0:	007c      	.short	0x007c
 8005aa2:	aa22      	add	r2, sp, #136	; 0x88
 8005aa4:	4649      	mov	r1, r9
 8005aa6:	4650      	mov	r0, sl
 8005aa8:	f002 fc56 	bl	8008358 <__ssprint_r>
 8005aac:	2800      	cmp	r0, #0
 8005aae:	f040 8137 	bne.w	8005d20 <_svfprintf_r+0x418>
 8005ab2:	ac25      	add	r4, sp, #148	; 0x94
 8005ab4:	e77d      	b.n	80059b2 <_svfprintf_r+0xaa>
 8005ab6:	4650      	mov	r0, sl
 8005ab8:	f001 fa32 	bl	8006f20 <_localeconv_r>
 8005abc:	6843      	ldr	r3, [r0, #4]
 8005abe:	9314      	str	r3, [sp, #80]	; 0x50
 8005ac0:	4618      	mov	r0, r3
 8005ac2:	f7fa fbad 	bl	8000220 <strlen>
 8005ac6:	9011      	str	r0, [sp, #68]	; 0x44
 8005ac8:	4650      	mov	r0, sl
 8005aca:	f001 fa29 	bl	8006f20 <_localeconv_r>
 8005ace:	6883      	ldr	r3, [r0, #8]
 8005ad0:	9309      	str	r3, [sp, #36]	; 0x24
 8005ad2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005ad4:	212b      	movs	r1, #43	; 0x2b
 8005ad6:	b12b      	cbz	r3, 8005ae4 <_svfprintf_r+0x1dc>
 8005ad8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ada:	b11b      	cbz	r3, 8005ae4 <_svfprintf_r+0x1dc>
 8005adc:	781b      	ldrb	r3, [r3, #0]
 8005ade:	b10b      	cbz	r3, 8005ae4 <_svfprintf_r+0x1dc>
 8005ae0:	f44b 6b80 	orr.w	fp, fp, #1024	; 0x400
 8005ae4:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8005ae6:	e775      	b.n	80059d4 <_svfprintf_r+0xcc>
 8005ae8:	f89d 306b 	ldrb.w	r3, [sp, #107]	; 0x6b
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d1f9      	bne.n	8005ae4 <_svfprintf_r+0x1dc>
 8005af0:	2320      	movs	r3, #32
 8005af2:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 8005af6:	e7f5      	b.n	8005ae4 <_svfprintf_r+0x1dc>
 8005af8:	f04b 0b01 	orr.w	fp, fp, #1
 8005afc:	e7f2      	b.n	8005ae4 <_svfprintf_r+0x1dc>
 8005afe:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b02:	930f      	str	r3, [sp, #60]	; 0x3c
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	daed      	bge.n	8005ae4 <_svfprintf_r+0x1dc>
 8005b08:	425b      	negs	r3, r3
 8005b0a:	930f      	str	r3, [sp, #60]	; 0x3c
 8005b0c:	f04b 0b04 	orr.w	fp, fp, #4
 8005b10:	e7e8      	b.n	8005ae4 <_svfprintf_r+0x1dc>
 8005b12:	f88d 106b 	strb.w	r1, [sp, #107]	; 0x6b
 8005b16:	e7e5      	b.n	8005ae4 <_svfprintf_r+0x1dc>
 8005b18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005b1a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005b1e:	9207      	str	r2, [sp, #28]
 8005b20:	2a2a      	cmp	r2, #42	; 0x2a
 8005b22:	d10f      	bne.n	8005b44 <_svfprintf_r+0x23c>
 8005b24:	f855 2b04 	ldr.w	r2, [r5], #4
 8005b28:	930a      	str	r3, [sp, #40]	; 0x28
 8005b2a:	ea42 78e2 	orr.w	r8, r2, r2, asr #31
 8005b2e:	e7d9      	b.n	8005ae4 <_svfprintf_r+0x1dc>
 8005b30:	fb07 2808 	mla	r8, r7, r8, r2
 8005b34:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005b38:	9207      	str	r2, [sp, #28]
 8005b3a:	9a07      	ldr	r2, [sp, #28]
 8005b3c:	3a30      	subs	r2, #48	; 0x30
 8005b3e:	2a09      	cmp	r2, #9
 8005b40:	d9f6      	bls.n	8005b30 <_svfprintf_r+0x228>
 8005b42:	e74b      	b.n	80059dc <_svfprintf_r+0xd4>
 8005b44:	f04f 0800 	mov.w	r8, #0
 8005b48:	e7f7      	b.n	8005b3a <_svfprintf_r+0x232>
 8005b4a:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
 8005b4e:	e7c9      	b.n	8005ae4 <_svfprintf_r+0x1dc>
 8005b50:	2200      	movs	r2, #0
 8005b52:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005b54:	920f      	str	r2, [sp, #60]	; 0x3c
 8005b56:	9a07      	ldr	r2, [sp, #28]
 8005b58:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8005b5a:	3a30      	subs	r2, #48	; 0x30
 8005b5c:	fb07 2200 	mla	r2, r7, r0, r2
 8005b60:	920f      	str	r2, [sp, #60]	; 0x3c
 8005b62:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005b66:	9207      	str	r2, [sp, #28]
 8005b68:	3a30      	subs	r2, #48	; 0x30
 8005b6a:	2a09      	cmp	r2, #9
 8005b6c:	d9f3      	bls.n	8005b56 <_svfprintf_r+0x24e>
 8005b6e:	e735      	b.n	80059dc <_svfprintf_r+0xd4>
 8005b70:	f04b 0b08 	orr.w	fp, fp, #8
 8005b74:	e7b6      	b.n	8005ae4 <_svfprintf_r+0x1dc>
 8005b76:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005b78:	781b      	ldrb	r3, [r3, #0]
 8005b7a:	2b68      	cmp	r3, #104	; 0x68
 8005b7c:	bf01      	itttt	eq
 8005b7e:	9b0a      	ldreq	r3, [sp, #40]	; 0x28
 8005b80:	3301      	addeq	r3, #1
 8005b82:	930a      	streq	r3, [sp, #40]	; 0x28
 8005b84:	f44b 7b00 	orreq.w	fp, fp, #512	; 0x200
 8005b88:	bf18      	it	ne
 8005b8a:	f04b 0b40 	orrne.w	fp, fp, #64	; 0x40
 8005b8e:	e7a9      	b.n	8005ae4 <_svfprintf_r+0x1dc>
 8005b90:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005b92:	781b      	ldrb	r3, [r3, #0]
 8005b94:	2b6c      	cmp	r3, #108	; 0x6c
 8005b96:	d105      	bne.n	8005ba4 <_svfprintf_r+0x29c>
 8005b98:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005b9a:	3301      	adds	r3, #1
 8005b9c:	930a      	str	r3, [sp, #40]	; 0x28
 8005b9e:	f04b 0b20 	orr.w	fp, fp, #32
 8005ba2:	e79f      	b.n	8005ae4 <_svfprintf_r+0x1dc>
 8005ba4:	f04b 0b10 	orr.w	fp, fp, #16
 8005ba8:	e79c      	b.n	8005ae4 <_svfprintf_r+0x1dc>
 8005baa:	bf00      	nop
 8005bac:	f3af 8000 	nop.w
	...
 8005bb8:	462a      	mov	r2, r5
 8005bba:	f852 3b04 	ldr.w	r3, [r2], #4
 8005bbe:	f88d 30d4 	strb.w	r3, [sp, #212]	; 0xd4
 8005bc2:	2300      	movs	r3, #0
 8005bc4:	9206      	str	r2, [sp, #24]
 8005bc6:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 8005bca:	9304      	str	r3, [sp, #16]
 8005bcc:	461f      	mov	r7, r3
 8005bce:	461e      	mov	r6, r3
 8005bd0:	9308      	str	r3, [sp, #32]
 8005bd2:	461d      	mov	r5, r3
 8005bd4:	ab35      	add	r3, sp, #212	; 0xd4
 8005bd6:	f04f 0801 	mov.w	r8, #1
 8005bda:	9303      	str	r3, [sp, #12]
 8005bdc:	e1b9      	b.n	8005f52 <_svfprintf_r+0x64a>
 8005bde:	f04b 0b10 	orr.w	fp, fp, #16
 8005be2:	f01b 0f20 	tst.w	fp, #32
 8005be6:	d012      	beq.n	8005c0e <_svfprintf_r+0x306>
 8005be8:	3507      	adds	r5, #7
 8005bea:	f025 0307 	bic.w	r3, r5, #7
 8005bee:	461a      	mov	r2, r3
 8005bf0:	685e      	ldr	r6, [r3, #4]
 8005bf2:	f852 5b08 	ldr.w	r5, [r2], #8
 8005bf6:	9206      	str	r2, [sp, #24]
 8005bf8:	2e00      	cmp	r6, #0
 8005bfa:	da06      	bge.n	8005c0a <_svfprintf_r+0x302>
 8005bfc:	426d      	negs	r5, r5
 8005bfe:	f04f 032d 	mov.w	r3, #45	; 0x2d
 8005c02:	eb66 0646 	sbc.w	r6, r6, r6, lsl #1
 8005c06:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 8005c0a:	2301      	movs	r3, #1
 8005c0c:	e392      	b.n	8006334 <_svfprintf_r+0xa2c>
 8005c0e:	462b      	mov	r3, r5
 8005c10:	f01b 0f10 	tst.w	fp, #16
 8005c14:	f853 6b04 	ldr.w	r6, [r3], #4
 8005c18:	9306      	str	r3, [sp, #24]
 8005c1a:	d002      	beq.n	8005c22 <_svfprintf_r+0x31a>
 8005c1c:	4635      	mov	r5, r6
 8005c1e:	17f6      	asrs	r6, r6, #31
 8005c20:	e7ea      	b.n	8005bf8 <_svfprintf_r+0x2f0>
 8005c22:	f01b 0f40 	tst.w	fp, #64	; 0x40
 8005c26:	d003      	beq.n	8005c30 <_svfprintf_r+0x328>
 8005c28:	b235      	sxth	r5, r6
 8005c2a:	f346 36c0 	sbfx	r6, r6, #15, #1
 8005c2e:	e7e3      	b.n	8005bf8 <_svfprintf_r+0x2f0>
 8005c30:	f41b 7f00 	tst.w	fp, #512	; 0x200
 8005c34:	d0f2      	beq.n	8005c1c <_svfprintf_r+0x314>
 8005c36:	b275      	sxtb	r5, r6
 8005c38:	f346 16c0 	sbfx	r6, r6, #7, #1
 8005c3c:	e7dc      	b.n	8005bf8 <_svfprintf_r+0x2f0>
 8005c3e:	3507      	adds	r5, #7
 8005c40:	f025 0307 	bic.w	r3, r5, #7
 8005c44:	ecb3 7b02 	vldmia	r3!, {d7}
 8005c48:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8005c4c:	9306      	str	r3, [sp, #24]
 8005c4e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005c50:	ee09 3a10 	vmov	s18, r3
 8005c54:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005c56:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005c5a:	ee09 3a90 	vmov	s19, r3
 8005c5e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005c62:	4b34      	ldr	r3, [pc, #208]	; (8005d34 <_svfprintf_r+0x42c>)
 8005c64:	ec51 0b19 	vmov	r0, r1, d9
 8005c68:	f7fa ff88 	bl	8000b7c <__aeabi_dcmpun>
 8005c6c:	bb18      	cbnz	r0, 8005cb6 <_svfprintf_r+0x3ae>
 8005c6e:	4b31      	ldr	r3, [pc, #196]	; (8005d34 <_svfprintf_r+0x42c>)
 8005c70:	ec51 0b19 	vmov	r0, r1, d9
 8005c74:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005c78:	f7fa ff62 	bl	8000b40 <__aeabi_dcmple>
 8005c7c:	b9d8      	cbnz	r0, 8005cb6 <_svfprintf_r+0x3ae>
 8005c7e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005c82:	2200      	movs	r2, #0
 8005c84:	2300      	movs	r3, #0
 8005c86:	f7fa ff51 	bl	8000b2c <__aeabi_dcmplt>
 8005c8a:	b110      	cbz	r0, 8005c92 <_svfprintf_r+0x38a>
 8005c8c:	232d      	movs	r3, #45	; 0x2d
 8005c8e:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 8005c92:	4a29      	ldr	r2, [pc, #164]	; (8005d38 <_svfprintf_r+0x430>)
 8005c94:	4b29      	ldr	r3, [pc, #164]	; (8005d3c <_svfprintf_r+0x434>)
 8005c96:	9907      	ldr	r1, [sp, #28]
 8005c98:	2947      	cmp	r1, #71	; 0x47
 8005c9a:	bfc8      	it	gt
 8005c9c:	461a      	movgt	r2, r3
 8005c9e:	2300      	movs	r3, #0
 8005ca0:	9203      	str	r2, [sp, #12]
 8005ca2:	f02b 0b80 	bic.w	fp, fp, #128	; 0x80
 8005ca6:	9304      	str	r3, [sp, #16]
 8005ca8:	f04f 0803 	mov.w	r8, #3
 8005cac:	461f      	mov	r7, r3
 8005cae:	461e      	mov	r6, r3
 8005cb0:	9308      	str	r3, [sp, #32]
 8005cb2:	461d      	mov	r5, r3
 8005cb4:	e14d      	b.n	8005f52 <_svfprintf_r+0x64a>
 8005cb6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8005cba:	4610      	mov	r0, r2
 8005cbc:	4619      	mov	r1, r3
 8005cbe:	f7fa ff5d 	bl	8000b7c <__aeabi_dcmpun>
 8005cc2:	b140      	cbz	r0, 8005cd6 <_svfprintf_r+0x3ce>
 8005cc4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005cc6:	4a1e      	ldr	r2, [pc, #120]	; (8005d40 <_svfprintf_r+0x438>)
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	bfbc      	itt	lt
 8005ccc:	232d      	movlt	r3, #45	; 0x2d
 8005cce:	f88d 306b 	strblt.w	r3, [sp, #107]	; 0x6b
 8005cd2:	4b1c      	ldr	r3, [pc, #112]	; (8005d44 <_svfprintf_r+0x43c>)
 8005cd4:	e7df      	b.n	8005c96 <_svfprintf_r+0x38e>
 8005cd6:	9b07      	ldr	r3, [sp, #28]
 8005cd8:	f023 0320 	bic.w	r3, r3, #32
 8005cdc:	2b41      	cmp	r3, #65	; 0x41
 8005cde:	9308      	str	r3, [sp, #32]
 8005ce0:	d132      	bne.n	8005d48 <_svfprintf_r+0x440>
 8005ce2:	2330      	movs	r3, #48	; 0x30
 8005ce4:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
 8005ce8:	9b07      	ldr	r3, [sp, #28]
 8005cea:	2b61      	cmp	r3, #97	; 0x61
 8005cec:	bf0c      	ite	eq
 8005cee:	2378      	moveq	r3, #120	; 0x78
 8005cf0:	2358      	movne	r3, #88	; 0x58
 8005cf2:	f1b8 0f63 	cmp.w	r8, #99	; 0x63
 8005cf6:	f88d 306d 	strb.w	r3, [sp, #109]	; 0x6d
 8005cfa:	f04b 0b02 	orr.w	fp, fp, #2
 8005cfe:	f340 8204 	ble.w	800610a <_svfprintf_r+0x802>
 8005d02:	f108 0101 	add.w	r1, r8, #1
 8005d06:	4650      	mov	r0, sl
 8005d08:	f7ff f8e8 	bl	8004edc <_malloc_r>
 8005d0c:	9003      	str	r0, [sp, #12]
 8005d0e:	2800      	cmp	r0, #0
 8005d10:	f040 81ff 	bne.w	8006112 <_svfprintf_r+0x80a>
 8005d14:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8005d18:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005d1c:	f8a9 300c 	strh.w	r3, [r9, #12]
 8005d20:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8005d24:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005d28:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005d2a:	bf18      	it	ne
 8005d2c:	f04f 33ff 	movne.w	r3, #4294967295	; 0xffffffff
 8005d30:	e610      	b.n	8005954 <_svfprintf_r+0x4c>
 8005d32:	bf00      	nop
 8005d34:	7fefffff 	.word	0x7fefffff
 8005d38:	08009a50 	.word	0x08009a50
 8005d3c:	08009a54 	.word	0x08009a54
 8005d40:	08009a58 	.word	0x08009a58
 8005d44:	08009a5c 	.word	0x08009a5c
 8005d48:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
 8005d4c:	f000 81e4 	beq.w	8006118 <_svfprintf_r+0x810>
 8005d50:	9b08      	ldr	r3, [sp, #32]
 8005d52:	2b47      	cmp	r3, #71	; 0x47
 8005d54:	f040 81e4 	bne.w	8006120 <_svfprintf_r+0x818>
 8005d58:	f1b8 0f00 	cmp.w	r8, #0
 8005d5c:	f040 81e0 	bne.w	8006120 <_svfprintf_r+0x818>
 8005d60:	f8cd 8010 	str.w	r8, [sp, #16]
 8005d64:	f04f 0801 	mov.w	r8, #1
 8005d68:	f44b 7380 	orr.w	r3, fp, #256	; 0x100
 8005d6c:	9310      	str	r3, [sp, #64]	; 0x40
 8005d6e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	f280 81d7 	bge.w	8006124 <_svfprintf_r+0x81c>
 8005d76:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005d78:	ee08 3a10 	vmov	s16, r3
 8005d7c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005d7e:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8005d82:	ee08 3a90 	vmov	s17, r3
 8005d86:	232d      	movs	r3, #45	; 0x2d
 8005d88:	9318      	str	r3, [sp, #96]	; 0x60
 8005d8a:	9b08      	ldr	r3, [sp, #32]
 8005d8c:	2b41      	cmp	r3, #65	; 0x41
 8005d8e:	f040 81e7 	bne.w	8006160 <_svfprintf_r+0x858>
 8005d92:	eeb0 0a48 	vmov.f32	s0, s16
 8005d96:	eef0 0a68 	vmov.f32	s1, s17
 8005d9a:	a81c      	add	r0, sp, #112	; 0x70
 8005d9c:	f001 f8d8 	bl	8006f50 <frexp>
 8005da0:	2200      	movs	r2, #0
 8005da2:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8005da6:	ec51 0b10 	vmov	r0, r1, d0
 8005daa:	f7fa fc4d 	bl	8000648 <__aeabi_dmul>
 8005dae:	2200      	movs	r2, #0
 8005db0:	2300      	movs	r3, #0
 8005db2:	4606      	mov	r6, r0
 8005db4:	460f      	mov	r7, r1
 8005db6:	f7fa feaf 	bl	8000b18 <__aeabi_dcmpeq>
 8005dba:	b108      	cbz	r0, 8005dc0 <_svfprintf_r+0x4b8>
 8005dbc:	2301      	movs	r3, #1
 8005dbe:	931c      	str	r3, [sp, #112]	; 0x70
 8005dc0:	4bac      	ldr	r3, [pc, #688]	; (8006074 <_svfprintf_r+0x76c>)
 8005dc2:	4aad      	ldr	r2, [pc, #692]	; (8006078 <_svfprintf_r+0x770>)
 8005dc4:	9907      	ldr	r1, [sp, #28]
 8005dc6:	9d03      	ldr	r5, [sp, #12]
 8005dc8:	2961      	cmp	r1, #97	; 0x61
 8005dca:	bf18      	it	ne
 8005dcc:	461a      	movne	r2, r3
 8005dce:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
 8005dd2:	9217      	str	r2, [sp, #92]	; 0x5c
 8005dd4:	9305      	str	r3, [sp, #20]
 8005dd6:	4ba9      	ldr	r3, [pc, #676]	; (800607c <_svfprintf_r+0x774>)
 8005dd8:	2200      	movs	r2, #0
 8005dda:	4630      	mov	r0, r6
 8005ddc:	4639      	mov	r1, r7
 8005dde:	f7fa fc33 	bl	8000648 <__aeabi_dmul>
 8005de2:	460f      	mov	r7, r1
 8005de4:	4606      	mov	r6, r0
 8005de6:	f7fa fedf 	bl	8000ba8 <__aeabi_d2iz>
 8005dea:	9019      	str	r0, [sp, #100]	; 0x64
 8005dec:	f7fa fbc2 	bl	8000574 <__aeabi_i2d>
 8005df0:	4602      	mov	r2, r0
 8005df2:	460b      	mov	r3, r1
 8005df4:	4630      	mov	r0, r6
 8005df6:	4639      	mov	r1, r7
 8005df8:	f7fa fa6e 	bl	80002d8 <__aeabi_dsub>
 8005dfc:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8005dfe:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005e00:	5c9b      	ldrb	r3, [r3, r2]
 8005e02:	f805 3b01 	strb.w	r3, [r5], #1
 8005e06:	9b05      	ldr	r3, [sp, #20]
 8005e08:	9312      	str	r3, [sp, #72]	; 0x48
 8005e0a:	1c5a      	adds	r2, r3, #1
 8005e0c:	4606      	mov	r6, r0
 8005e0e:	460f      	mov	r7, r1
 8005e10:	d007      	beq.n	8005e22 <_svfprintf_r+0x51a>
 8005e12:	3b01      	subs	r3, #1
 8005e14:	9305      	str	r3, [sp, #20]
 8005e16:	2200      	movs	r2, #0
 8005e18:	2300      	movs	r3, #0
 8005e1a:	f7fa fe7d 	bl	8000b18 <__aeabi_dcmpeq>
 8005e1e:	2800      	cmp	r0, #0
 8005e20:	d0d9      	beq.n	8005dd6 <_svfprintf_r+0x4ce>
 8005e22:	4b97      	ldr	r3, [pc, #604]	; (8006080 <_svfprintf_r+0x778>)
 8005e24:	2200      	movs	r2, #0
 8005e26:	4630      	mov	r0, r6
 8005e28:	4639      	mov	r1, r7
 8005e2a:	f7fa fe9d 	bl	8000b68 <__aeabi_dcmpgt>
 8005e2e:	b960      	cbnz	r0, 8005e4a <_svfprintf_r+0x542>
 8005e30:	4b93      	ldr	r3, [pc, #588]	; (8006080 <_svfprintf_r+0x778>)
 8005e32:	2200      	movs	r2, #0
 8005e34:	4630      	mov	r0, r6
 8005e36:	4639      	mov	r1, r7
 8005e38:	f7fa fe6e 	bl	8000b18 <__aeabi_dcmpeq>
 8005e3c:	2800      	cmp	r0, #0
 8005e3e:	f000 818a 	beq.w	8006156 <_svfprintf_r+0x84e>
 8005e42:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005e44:	07de      	lsls	r6, r3, #31
 8005e46:	f140 8186 	bpl.w	8006156 <_svfprintf_r+0x84e>
 8005e4a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005e4c:	9520      	str	r5, [sp, #128]	; 0x80
 8005e4e:	7bd9      	ldrb	r1, [r3, #15]
 8005e50:	2030      	movs	r0, #48	; 0x30
 8005e52:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005e54:	1e53      	subs	r3, r2, #1
 8005e56:	9320      	str	r3, [sp, #128]	; 0x80
 8005e58:	f812 3c01 	ldrb.w	r3, [r2, #-1]
 8005e5c:	428b      	cmp	r3, r1
 8005e5e:	f000 8169 	beq.w	8006134 <_svfprintf_r+0x82c>
 8005e62:	2b39      	cmp	r3, #57	; 0x39
 8005e64:	bf0b      	itete	eq
 8005e66:	9b17      	ldreq	r3, [sp, #92]	; 0x5c
 8005e68:	3301      	addne	r3, #1
 8005e6a:	7a9b      	ldrbeq	r3, [r3, #10]
 8005e6c:	b2db      	uxtbne	r3, r3
 8005e6e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8005e72:	9b03      	ldr	r3, [sp, #12]
 8005e74:	1aeb      	subs	r3, r5, r3
 8005e76:	9305      	str	r3, [sp, #20]
 8005e78:	9b08      	ldr	r3, [sp, #32]
 8005e7a:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 8005e7c:	2b47      	cmp	r3, #71	; 0x47
 8005e7e:	f040 81b9 	bne.w	80061f4 <_svfprintf_r+0x8ec>
 8005e82:	1ce8      	adds	r0, r5, #3
 8005e84:	db02      	blt.n	8005e8c <_svfprintf_r+0x584>
 8005e86:	45a8      	cmp	r8, r5
 8005e88:	f280 81d7 	bge.w	800623a <_svfprintf_r+0x932>
 8005e8c:	9b07      	ldr	r3, [sp, #28]
 8005e8e:	3b02      	subs	r3, #2
 8005e90:	9307      	str	r3, [sp, #28]
 8005e92:	9907      	ldr	r1, [sp, #28]
 8005e94:	f89d 201c 	ldrb.w	r2, [sp, #28]
 8005e98:	f021 0120 	bic.w	r1, r1, #32
 8005e9c:	2941      	cmp	r1, #65	; 0x41
 8005e9e:	bf08      	it	eq
 8005ea0:	320f      	addeq	r2, #15
 8005ea2:	f105 33ff 	add.w	r3, r5, #4294967295	; 0xffffffff
 8005ea6:	bf06      	itte	eq
 8005ea8:	b2d2      	uxtbeq	r2, r2
 8005eaa:	2101      	moveq	r1, #1
 8005eac:	2100      	movne	r1, #0
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	931c      	str	r3, [sp, #112]	; 0x70
 8005eb2:	bfb8      	it	lt
 8005eb4:	f1c5 0301 	rsblt	r3, r5, #1
 8005eb8:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
 8005ebc:	bfb4      	ite	lt
 8005ebe:	222d      	movlt	r2, #45	; 0x2d
 8005ec0:	222b      	movge	r2, #43	; 0x2b
 8005ec2:	2b09      	cmp	r3, #9
 8005ec4:	f88d 2079 	strb.w	r2, [sp, #121]	; 0x79
 8005ec8:	f340 81aa 	ble.w	8006220 <_svfprintf_r+0x918>
 8005ecc:	f10d 0087 	add.w	r0, sp, #135	; 0x87
 8005ed0:	260a      	movs	r6, #10
 8005ed2:	4602      	mov	r2, r0
 8005ed4:	fb93 f5f6 	sdiv	r5, r3, r6
 8005ed8:	fb06 3115 	mls	r1, r6, r5, r3
 8005edc:	3130      	adds	r1, #48	; 0x30
 8005ede:	f802 1c01 	strb.w	r1, [r2, #-1]
 8005ee2:	4619      	mov	r1, r3
 8005ee4:	2963      	cmp	r1, #99	; 0x63
 8005ee6:	f100 30ff 	add.w	r0, r0, #4294967295	; 0xffffffff
 8005eea:	462b      	mov	r3, r5
 8005eec:	dcf1      	bgt.n	8005ed2 <_svfprintf_r+0x5ca>
 8005eee:	3330      	adds	r3, #48	; 0x30
 8005ef0:	1e91      	subs	r1, r2, #2
 8005ef2:	f800 3c01 	strb.w	r3, [r0, #-1]
 8005ef6:	f10d 0579 	add.w	r5, sp, #121	; 0x79
 8005efa:	460b      	mov	r3, r1
 8005efc:	f10d 0087 	add.w	r0, sp, #135	; 0x87
 8005f00:	4283      	cmp	r3, r0
 8005f02:	f0c0 8188 	bcc.w	8006216 <_svfprintf_r+0x90e>
 8005f06:	f10d 0389 	add.w	r3, sp, #137	; 0x89
 8005f0a:	1a9b      	subs	r3, r3, r2
 8005f0c:	4281      	cmp	r1, r0
 8005f0e:	bf88      	it	hi
 8005f10:	2300      	movhi	r3, #0
 8005f12:	f10d 027a 	add.w	r2, sp, #122	; 0x7a
 8005f16:	441a      	add	r2, r3
 8005f18:	ab1e      	add	r3, sp, #120	; 0x78
 8005f1a:	1ad3      	subs	r3, r2, r3
 8005f1c:	9a05      	ldr	r2, [sp, #20]
 8005f1e:	9315      	str	r3, [sp, #84]	; 0x54
 8005f20:	2a01      	cmp	r2, #1
 8005f22:	eb03 0802 	add.w	r8, r3, r2
 8005f26:	dc02      	bgt.n	8005f2e <_svfprintf_r+0x626>
 8005f28:	f01b 0f01 	tst.w	fp, #1
 8005f2c:	d001      	beq.n	8005f32 <_svfprintf_r+0x62a>
 8005f2e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005f30:	4498      	add	r8, r3
 8005f32:	f42b 6380 	bic.w	r3, fp, #1024	; 0x400
 8005f36:	2600      	movs	r6, #0
 8005f38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f3c:	9310      	str	r3, [sp, #64]	; 0x40
 8005f3e:	9608      	str	r6, [sp, #32]
 8005f40:	4635      	mov	r5, r6
 8005f42:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8005f44:	b113      	cbz	r3, 8005f4c <_svfprintf_r+0x644>
 8005f46:	232d      	movs	r3, #45	; 0x2d
 8005f48:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 8005f4c:	f8dd b040 	ldr.w	fp, [sp, #64]	; 0x40
 8005f50:	2700      	movs	r7, #0
 8005f52:	4547      	cmp	r7, r8
 8005f54:	463b      	mov	r3, r7
 8005f56:	bfb8      	it	lt
 8005f58:	4643      	movlt	r3, r8
 8005f5a:	9310      	str	r3, [sp, #64]	; 0x40
 8005f5c:	f89d 306b 	ldrb.w	r3, [sp, #107]	; 0x6b
 8005f60:	b113      	cbz	r3, 8005f68 <_svfprintf_r+0x660>
 8005f62:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005f64:	3301      	adds	r3, #1
 8005f66:	9310      	str	r3, [sp, #64]	; 0x40
 8005f68:	f01b 0302 	ands.w	r3, fp, #2
 8005f6c:	9317      	str	r3, [sp, #92]	; 0x5c
 8005f6e:	bf1e      	ittt	ne
 8005f70:	9b10      	ldrne	r3, [sp, #64]	; 0x40
 8005f72:	3302      	addne	r3, #2
 8005f74:	9310      	strne	r3, [sp, #64]	; 0x40
 8005f76:	f01b 0384 	ands.w	r3, fp, #132	; 0x84
 8005f7a:	9318      	str	r3, [sp, #96]	; 0x60
 8005f7c:	d122      	bne.n	8005fc4 <_svfprintf_r+0x6bc>
 8005f7e:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	; 0x3c
 8005f82:	1a9b      	subs	r3, r3, r2
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	9312      	str	r3, [sp, #72]	; 0x48
 8005f88:	dd1c      	ble.n	8005fc4 <_svfprintf_r+0x6bc>
 8005f8a:	9812      	ldr	r0, [sp, #72]	; 0x48
 8005f8c:	e9dd 2323 	ldrd	r2, r3, [sp, #140]	; 0x8c
 8005f90:	2810      	cmp	r0, #16
 8005f92:	483c      	ldr	r0, [pc, #240]	; (8006084 <_svfprintf_r+0x77c>)
 8005f94:	6020      	str	r0, [r4, #0]
 8005f96:	f102 0201 	add.w	r2, r2, #1
 8005f9a:	f104 0108 	add.w	r1, r4, #8
 8005f9e:	f300 82f7 	bgt.w	8006590 <_svfprintf_r+0xc88>
 8005fa2:	9812      	ldr	r0, [sp, #72]	; 0x48
 8005fa4:	6060      	str	r0, [r4, #4]
 8005fa6:	4403      	add	r3, r0
 8005fa8:	2a07      	cmp	r2, #7
 8005faa:	e9cd 2323 	strd	r2, r3, [sp, #140]	; 0x8c
 8005fae:	f340 8304 	ble.w	80065ba <_svfprintf_r+0xcb2>
 8005fb2:	aa22      	add	r2, sp, #136	; 0x88
 8005fb4:	4649      	mov	r1, r9
 8005fb6:	4650      	mov	r0, sl
 8005fb8:	f002 f9ce 	bl	8008358 <__ssprint_r>
 8005fbc:	2800      	cmp	r0, #0
 8005fbe:	f040 8637 	bne.w	8006c30 <_svfprintf_r+0x1328>
 8005fc2:	ac25      	add	r4, sp, #148	; 0x94
 8005fc4:	f89d 206b 	ldrb.w	r2, [sp, #107]	; 0x6b
 8005fc8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8005fca:	b16a      	cbz	r2, 8005fe8 <_svfprintf_r+0x6e0>
 8005fcc:	f10d 026b 	add.w	r2, sp, #107	; 0x6b
 8005fd0:	6022      	str	r2, [r4, #0]
 8005fd2:	2201      	movs	r2, #1
 8005fd4:	4413      	add	r3, r2
 8005fd6:	9324      	str	r3, [sp, #144]	; 0x90
 8005fd8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005fda:	6062      	str	r2, [r4, #4]
 8005fdc:	4413      	add	r3, r2
 8005fde:	2b07      	cmp	r3, #7
 8005fe0:	9323      	str	r3, [sp, #140]	; 0x8c
 8005fe2:	f300 82ec 	bgt.w	80065be <_svfprintf_r+0xcb6>
 8005fe6:	3408      	adds	r4, #8
 8005fe8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8005fea:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8005fec:	b162      	cbz	r2, 8006008 <_svfprintf_r+0x700>
 8005fee:	aa1b      	add	r2, sp, #108	; 0x6c
 8005ff0:	6022      	str	r2, [r4, #0]
 8005ff2:	2202      	movs	r2, #2
 8005ff4:	4413      	add	r3, r2
 8005ff6:	9324      	str	r3, [sp, #144]	; 0x90
 8005ff8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005ffa:	6062      	str	r2, [r4, #4]
 8005ffc:	3301      	adds	r3, #1
 8005ffe:	2b07      	cmp	r3, #7
 8006000:	9323      	str	r3, [sp, #140]	; 0x8c
 8006002:	f300 82e6 	bgt.w	80065d2 <_svfprintf_r+0xcca>
 8006006:	3408      	adds	r4, #8
 8006008:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800600a:	2b80      	cmp	r3, #128	; 0x80
 800600c:	d122      	bne.n	8006054 <_svfprintf_r+0x74c>
 800600e:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	; 0x3c
 8006012:	1a9b      	subs	r3, r3, r2
 8006014:	2b00      	cmp	r3, #0
 8006016:	9312      	str	r3, [sp, #72]	; 0x48
 8006018:	dd1c      	ble.n	8006054 <_svfprintf_r+0x74c>
 800601a:	9812      	ldr	r0, [sp, #72]	; 0x48
 800601c:	e9dd 2323 	ldrd	r2, r3, [sp, #140]	; 0x8c
 8006020:	2810      	cmp	r0, #16
 8006022:	4819      	ldr	r0, [pc, #100]	; (8006088 <_svfprintf_r+0x780>)
 8006024:	6020      	str	r0, [r4, #0]
 8006026:	f102 0201 	add.w	r2, r2, #1
 800602a:	f104 0108 	add.w	r1, r4, #8
 800602e:	f300 82da 	bgt.w	80065e6 <_svfprintf_r+0xcde>
 8006032:	9812      	ldr	r0, [sp, #72]	; 0x48
 8006034:	6060      	str	r0, [r4, #4]
 8006036:	4403      	add	r3, r0
 8006038:	2a07      	cmp	r2, #7
 800603a:	e9cd 2323 	strd	r2, r3, [sp, #140]	; 0x8c
 800603e:	f340 82e7 	ble.w	8006610 <_svfprintf_r+0xd08>
 8006042:	aa22      	add	r2, sp, #136	; 0x88
 8006044:	4649      	mov	r1, r9
 8006046:	4650      	mov	r0, sl
 8006048:	f002 f986 	bl	8008358 <__ssprint_r>
 800604c:	2800      	cmp	r0, #0
 800604e:	f040 85ef 	bne.w	8006c30 <_svfprintf_r+0x1328>
 8006052:	ac25      	add	r4, sp, #148	; 0x94
 8006054:	eba7 0708 	sub.w	r7, r7, r8
 8006058:	2f00      	cmp	r7, #0
 800605a:	dd27      	ble.n	80060ac <_svfprintf_r+0x7a4>
 800605c:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 8006060:	4809      	ldr	r0, [pc, #36]	; (8006088 <_svfprintf_r+0x780>)
 8006062:	6020      	str	r0, [r4, #0]
 8006064:	2f10      	cmp	r7, #16
 8006066:	f103 0301 	add.w	r3, r3, #1
 800606a:	f104 0108 	add.w	r1, r4, #8
 800606e:	f300 82d1 	bgt.w	8006614 <_svfprintf_r+0xd0c>
 8006072:	e00b      	b.n	800608c <_svfprintf_r+0x784>
 8006074:	08009a71 	.word	0x08009a71
 8006078:	08009a60 	.word	0x08009a60
 800607c:	40300000 	.word	0x40300000
 8006080:	3fe00000 	.word	0x3fe00000
 8006084:	08009a84 	.word	0x08009a84
 8006088:	08009a94 	.word	0x08009a94
 800608c:	6067      	str	r7, [r4, #4]
 800608e:	2b07      	cmp	r3, #7
 8006090:	4417      	add	r7, r2
 8006092:	e9cd 3723 	strd	r3, r7, [sp, #140]	; 0x8c
 8006096:	f340 82d0 	ble.w	800663a <_svfprintf_r+0xd32>
 800609a:	aa22      	add	r2, sp, #136	; 0x88
 800609c:	4649      	mov	r1, r9
 800609e:	4650      	mov	r0, sl
 80060a0:	f002 f95a 	bl	8008358 <__ssprint_r>
 80060a4:	2800      	cmp	r0, #0
 80060a6:	f040 85c3 	bne.w	8006c30 <_svfprintf_r+0x1328>
 80060aa:	ac25      	add	r4, sp, #148	; 0x94
 80060ac:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80060b0:	9f24      	ldr	r7, [sp, #144]	; 0x90
 80060b2:	f040 82c9 	bne.w	8006648 <_svfprintf_r+0xd40>
 80060b6:	9b03      	ldr	r3, [sp, #12]
 80060b8:	e9c4 3800 	strd	r3, r8, [r4]
 80060bc:	4447      	add	r7, r8
 80060be:	9724      	str	r7, [sp, #144]	; 0x90
 80060c0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80060c2:	3301      	adds	r3, #1
 80060c4:	2b07      	cmp	r3, #7
 80060c6:	9323      	str	r3, [sp, #140]	; 0x8c
 80060c8:	f300 8303 	bgt.w	80066d2 <_svfprintf_r+0xdca>
 80060cc:	3408      	adds	r4, #8
 80060ce:	f01b 0f04 	tst.w	fp, #4
 80060d2:	f040 858f 	bne.w	8006bf4 <_svfprintf_r+0x12ec>
 80060d6:	e9dd 210f 	ldrd	r2, r1, [sp, #60]	; 0x3c
 80060da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80060dc:	428a      	cmp	r2, r1
 80060de:	bfac      	ite	ge
 80060e0:	189b      	addge	r3, r3, r2
 80060e2:	185b      	addlt	r3, r3, r1
 80060e4:	930b      	str	r3, [sp, #44]	; 0x2c
 80060e6:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80060e8:	b13b      	cbz	r3, 80060fa <_svfprintf_r+0x7f2>
 80060ea:	aa22      	add	r2, sp, #136	; 0x88
 80060ec:	4649      	mov	r1, r9
 80060ee:	4650      	mov	r0, sl
 80060f0:	f002 f932 	bl	8008358 <__ssprint_r>
 80060f4:	2800      	cmp	r0, #0
 80060f6:	f040 859b 	bne.w	8006c30 <_svfprintf_r+0x1328>
 80060fa:	2300      	movs	r3, #0
 80060fc:	9323      	str	r3, [sp, #140]	; 0x8c
 80060fe:	9b04      	ldr	r3, [sp, #16]
 8006100:	2b00      	cmp	r3, #0
 8006102:	f040 85b1 	bne.w	8006c68 <_svfprintf_r+0x1360>
 8006106:	ac25      	add	r4, sp, #148	; 0x94
 8006108:	e0e7      	b.n	80062da <_svfprintf_r+0x9d2>
 800610a:	ab35      	add	r3, sp, #212	; 0xd4
 800610c:	9004      	str	r0, [sp, #16]
 800610e:	9303      	str	r3, [sp, #12]
 8006110:	e62a      	b.n	8005d68 <_svfprintf_r+0x460>
 8006112:	9b03      	ldr	r3, [sp, #12]
 8006114:	9304      	str	r3, [sp, #16]
 8006116:	e627      	b.n	8005d68 <_svfprintf_r+0x460>
 8006118:	9004      	str	r0, [sp, #16]
 800611a:	f04f 0806 	mov.w	r8, #6
 800611e:	e623      	b.n	8005d68 <_svfprintf_r+0x460>
 8006120:	9004      	str	r0, [sp, #16]
 8006122:	e621      	b.n	8005d68 <_svfprintf_r+0x460>
 8006124:	ed9d 7b0c 	vldr	d7, [sp, #48]	; 0x30
 8006128:	2300      	movs	r3, #0
 800612a:	eeb0 8a47 	vmov.f32	s16, s14
 800612e:	eef0 8a67 	vmov.f32	s17, s15
 8006132:	e629      	b.n	8005d88 <_svfprintf_r+0x480>
 8006134:	f802 0c01 	strb.w	r0, [r2, #-1]
 8006138:	e68b      	b.n	8005e52 <_svfprintf_r+0x54a>
 800613a:	f803 0b01 	strb.w	r0, [r3], #1
 800613e:	1aca      	subs	r2, r1, r3
 8006140:	2a00      	cmp	r2, #0
 8006142:	dafa      	bge.n	800613a <_svfprintf_r+0x832>
 8006144:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006146:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006148:	3201      	adds	r2, #1
 800614a:	f103 0301 	add.w	r3, r3, #1
 800614e:	bfb8      	it	lt
 8006150:	2300      	movlt	r3, #0
 8006152:	441d      	add	r5, r3
 8006154:	e68d      	b.n	8005e72 <_svfprintf_r+0x56a>
 8006156:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006158:	462b      	mov	r3, r5
 800615a:	18a9      	adds	r1, r5, r2
 800615c:	2030      	movs	r0, #48	; 0x30
 800615e:	e7ee      	b.n	800613e <_svfprintf_r+0x836>
 8006160:	9b08      	ldr	r3, [sp, #32]
 8006162:	2b46      	cmp	r3, #70	; 0x46
 8006164:	d005      	beq.n	8006172 <_svfprintf_r+0x86a>
 8006166:	2b45      	cmp	r3, #69	; 0x45
 8006168:	d11d      	bne.n	80061a6 <_svfprintf_r+0x89e>
 800616a:	f108 0501 	add.w	r5, r8, #1
 800616e:	2102      	movs	r1, #2
 8006170:	e001      	b.n	8006176 <_svfprintf_r+0x86e>
 8006172:	4645      	mov	r5, r8
 8006174:	2103      	movs	r1, #3
 8006176:	ab20      	add	r3, sp, #128	; 0x80
 8006178:	9301      	str	r3, [sp, #4]
 800617a:	ab1d      	add	r3, sp, #116	; 0x74
 800617c:	9300      	str	r3, [sp, #0]
 800617e:	462a      	mov	r2, r5
 8006180:	ab1c      	add	r3, sp, #112	; 0x70
 8006182:	4650      	mov	r0, sl
 8006184:	eeb0 0a48 	vmov.f32	s0, s16
 8006188:	eef0 0a68 	vmov.f32	s1, s17
 800618c:	f000 ffe0 	bl	8007150 <_dtoa_r>
 8006190:	9b08      	ldr	r3, [sp, #32]
 8006192:	9003      	str	r0, [sp, #12]
 8006194:	2b47      	cmp	r3, #71	; 0x47
 8006196:	d108      	bne.n	80061aa <_svfprintf_r+0x8a2>
 8006198:	f01b 0f01 	tst.w	fp, #1
 800619c:	d105      	bne.n	80061aa <_svfprintf_r+0x8a2>
 800619e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80061a0:	9a03      	ldr	r2, [sp, #12]
 80061a2:	1a9b      	subs	r3, r3, r2
 80061a4:	e667      	b.n	8005e76 <_svfprintf_r+0x56e>
 80061a6:	4645      	mov	r5, r8
 80061a8:	e7e1      	b.n	800616e <_svfprintf_r+0x866>
 80061aa:	9b03      	ldr	r3, [sp, #12]
 80061ac:	195e      	adds	r6, r3, r5
 80061ae:	9b08      	ldr	r3, [sp, #32]
 80061b0:	2b46      	cmp	r3, #70	; 0x46
 80061b2:	d10f      	bne.n	80061d4 <_svfprintf_r+0x8cc>
 80061b4:	9b03      	ldr	r3, [sp, #12]
 80061b6:	781b      	ldrb	r3, [r3, #0]
 80061b8:	2b30      	cmp	r3, #48	; 0x30
 80061ba:	d109      	bne.n	80061d0 <_svfprintf_r+0x8c8>
 80061bc:	ec51 0b18 	vmov	r0, r1, d8
 80061c0:	2200      	movs	r2, #0
 80061c2:	2300      	movs	r3, #0
 80061c4:	f7fa fca8 	bl	8000b18 <__aeabi_dcmpeq>
 80061c8:	b910      	cbnz	r0, 80061d0 <_svfprintf_r+0x8c8>
 80061ca:	f1c5 0501 	rsb	r5, r5, #1
 80061ce:	951c      	str	r5, [sp, #112]	; 0x70
 80061d0:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80061d2:	441e      	add	r6, r3
 80061d4:	ec51 0b18 	vmov	r0, r1, d8
 80061d8:	2200      	movs	r2, #0
 80061da:	2300      	movs	r3, #0
 80061dc:	f7fa fc9c 	bl	8000b18 <__aeabi_dcmpeq>
 80061e0:	b100      	cbz	r0, 80061e4 <_svfprintf_r+0x8dc>
 80061e2:	9620      	str	r6, [sp, #128]	; 0x80
 80061e4:	2230      	movs	r2, #48	; 0x30
 80061e6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80061e8:	429e      	cmp	r6, r3
 80061ea:	d9d8      	bls.n	800619e <_svfprintf_r+0x896>
 80061ec:	1c59      	adds	r1, r3, #1
 80061ee:	9120      	str	r1, [sp, #128]	; 0x80
 80061f0:	701a      	strb	r2, [r3, #0]
 80061f2:	e7f8      	b.n	80061e6 <_svfprintf_r+0x8de>
 80061f4:	9b08      	ldr	r3, [sp, #32]
 80061f6:	2b46      	cmp	r3, #70	; 0x46
 80061f8:	f47f ae4b 	bne.w	8005e92 <_svfprintf_r+0x58a>
 80061fc:	f00b 0301 	and.w	r3, fp, #1
 8006200:	2d00      	cmp	r5, #0
 8006202:	ea43 0308 	orr.w	r3, r3, r8
 8006206:	dd25      	ble.n	8006254 <_svfprintf_r+0x94c>
 8006208:	b383      	cbz	r3, 800626c <_svfprintf_r+0x964>
 800620a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800620c:	18eb      	adds	r3, r5, r3
 800620e:	4498      	add	r8, r3
 8006210:	2366      	movs	r3, #102	; 0x66
 8006212:	9307      	str	r3, [sp, #28]
 8006214:	e030      	b.n	8006278 <_svfprintf_r+0x970>
 8006216:	f813 6b01 	ldrb.w	r6, [r3], #1
 800621a:	f805 6f01 	strb.w	r6, [r5, #1]!
 800621e:	e66f      	b.n	8005f00 <_svfprintf_r+0x5f8>
 8006220:	b941      	cbnz	r1, 8006234 <_svfprintf_r+0x92c>
 8006222:	2230      	movs	r2, #48	; 0x30
 8006224:	f88d 207a 	strb.w	r2, [sp, #122]	; 0x7a
 8006228:	f10d 027b 	add.w	r2, sp, #123	; 0x7b
 800622c:	3330      	adds	r3, #48	; 0x30
 800622e:	f802 3b01 	strb.w	r3, [r2], #1
 8006232:	e671      	b.n	8005f18 <_svfprintf_r+0x610>
 8006234:	f10d 027a 	add.w	r2, sp, #122	; 0x7a
 8006238:	e7f8      	b.n	800622c <_svfprintf_r+0x924>
 800623a:	9b05      	ldr	r3, [sp, #20]
 800623c:	42ab      	cmp	r3, r5
 800623e:	dd0d      	ble.n	800625c <_svfprintf_r+0x954>
 8006240:	9b05      	ldr	r3, [sp, #20]
 8006242:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006244:	2d00      	cmp	r5, #0
 8006246:	eb03 0802 	add.w	r8, r3, r2
 800624a:	dc0d      	bgt.n	8006268 <_svfprintf_r+0x960>
 800624c:	f1c5 0301 	rsb	r3, r5, #1
 8006250:	4498      	add	r8, r3
 8006252:	e009      	b.n	8006268 <_svfprintf_r+0x960>
 8006254:	b163      	cbz	r3, 8006270 <_svfprintf_r+0x968>
 8006256:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006258:	3301      	adds	r3, #1
 800625a:	e7d8      	b.n	800620e <_svfprintf_r+0x906>
 800625c:	f01b 0f01 	tst.w	fp, #1
 8006260:	d01d      	beq.n	800629e <_svfprintf_r+0x996>
 8006262:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006264:	eb05 0803 	add.w	r8, r5, r3
 8006268:	2367      	movs	r3, #103	; 0x67
 800626a:	e7d2      	b.n	8006212 <_svfprintf_r+0x90a>
 800626c:	46a8      	mov	r8, r5
 800626e:	e7cf      	b.n	8006210 <_svfprintf_r+0x908>
 8006270:	2366      	movs	r3, #102	; 0x66
 8006272:	9307      	str	r3, [sp, #28]
 8006274:	f04f 0801 	mov.w	r8, #1
 8006278:	f41b 6380 	ands.w	r3, fp, #1024	; 0x400
 800627c:	9308      	str	r3, [sp, #32]
 800627e:	d01f      	beq.n	80062c0 <_svfprintf_r+0x9b8>
 8006280:	2600      	movs	r6, #0
 8006282:	2d00      	cmp	r5, #0
 8006284:	9608      	str	r6, [sp, #32]
 8006286:	f77f ae5c 	ble.w	8005f42 <_svfprintf_r+0x63a>
 800628a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800628c:	781b      	ldrb	r3, [r3, #0]
 800628e:	2bff      	cmp	r3, #255	; 0xff
 8006290:	d107      	bne.n	80062a2 <_svfprintf_r+0x99a>
 8006292:	9b08      	ldr	r3, [sp, #32]
 8006294:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8006296:	4433      	add	r3, r6
 8006298:	fb02 8803 	mla	r8, r2, r3, r8
 800629c:	e651      	b.n	8005f42 <_svfprintf_r+0x63a>
 800629e:	46a8      	mov	r8, r5
 80062a0:	e7e2      	b.n	8006268 <_svfprintf_r+0x960>
 80062a2:	42ab      	cmp	r3, r5
 80062a4:	daf5      	bge.n	8006292 <_svfprintf_r+0x98a>
 80062a6:	1aed      	subs	r5, r5, r3
 80062a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80062aa:	785b      	ldrb	r3, [r3, #1]
 80062ac:	b133      	cbz	r3, 80062bc <_svfprintf_r+0x9b4>
 80062ae:	9b08      	ldr	r3, [sp, #32]
 80062b0:	3301      	adds	r3, #1
 80062b2:	9308      	str	r3, [sp, #32]
 80062b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80062b6:	3301      	adds	r3, #1
 80062b8:	9309      	str	r3, [sp, #36]	; 0x24
 80062ba:	e7e6      	b.n	800628a <_svfprintf_r+0x982>
 80062bc:	3601      	adds	r6, #1
 80062be:	e7e4      	b.n	800628a <_svfprintf_r+0x982>
 80062c0:	9e08      	ldr	r6, [sp, #32]
 80062c2:	e63e      	b.n	8005f42 <_svfprintf_r+0x63a>
 80062c4:	1d2b      	adds	r3, r5, #4
 80062c6:	f01b 0f20 	tst.w	fp, #32
 80062ca:	9306      	str	r3, [sp, #24]
 80062cc:	d00a      	beq.n	80062e4 <_svfprintf_r+0x9dc>
 80062ce:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80062d0:	682b      	ldr	r3, [r5, #0]
 80062d2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80062d4:	17d2      	asrs	r2, r2, #31
 80062d6:	e9c3 1200 	strd	r1, r2, [r3]
 80062da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80062dc:	9d06      	ldr	r5, [sp, #24]
 80062de:	9303      	str	r3, [sp, #12]
 80062e0:	f7ff bb52 	b.w	8005988 <_svfprintf_r+0x80>
 80062e4:	f01b 0f10 	tst.w	fp, #16
 80062e8:	d003      	beq.n	80062f2 <_svfprintf_r+0x9ea>
 80062ea:	682b      	ldr	r3, [r5, #0]
 80062ec:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80062ee:	601a      	str	r2, [r3, #0]
 80062f0:	e7f3      	b.n	80062da <_svfprintf_r+0x9d2>
 80062f2:	f01b 0f40 	tst.w	fp, #64	; 0x40
 80062f6:	d003      	beq.n	8006300 <_svfprintf_r+0x9f8>
 80062f8:	682b      	ldr	r3, [r5, #0]
 80062fa:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80062fc:	801a      	strh	r2, [r3, #0]
 80062fe:	e7ec      	b.n	80062da <_svfprintf_r+0x9d2>
 8006300:	f41b 7f00 	tst.w	fp, #512	; 0x200
 8006304:	d0f1      	beq.n	80062ea <_svfprintf_r+0x9e2>
 8006306:	682b      	ldr	r3, [r5, #0]
 8006308:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800630a:	701a      	strb	r2, [r3, #0]
 800630c:	e7e5      	b.n	80062da <_svfprintf_r+0x9d2>
 800630e:	f04b 0b10 	orr.w	fp, fp, #16
 8006312:	f01b 0320 	ands.w	r3, fp, #32
 8006316:	d020      	beq.n	800635a <_svfprintf_r+0xa52>
 8006318:	3507      	adds	r5, #7
 800631a:	f025 0307 	bic.w	r3, r5, #7
 800631e:	461a      	mov	r2, r3
 8006320:	685e      	ldr	r6, [r3, #4]
 8006322:	f852 5b08 	ldr.w	r5, [r2], #8
 8006326:	9206      	str	r2, [sp, #24]
 8006328:	f42b 6b80 	bic.w	fp, fp, #1024	; 0x400
 800632c:	2300      	movs	r3, #0
 800632e:	2200      	movs	r2, #0
 8006330:	f88d 206b 	strb.w	r2, [sp, #107]	; 0x6b
 8006334:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
 8006338:	f000 84a7 	beq.w	8006c8a <_svfprintf_r+0x1382>
 800633c:	f02b 0280 	bic.w	r2, fp, #128	; 0x80
 8006340:	9204      	str	r2, [sp, #16]
 8006342:	ea55 0206 	orrs.w	r2, r5, r6
 8006346:	f040 84a6 	bne.w	8006c96 <_svfprintf_r+0x138e>
 800634a:	f1b8 0f00 	cmp.w	r8, #0
 800634e:	f000 8107 	beq.w	8006560 <_svfprintf_r+0xc58>
 8006352:	2b01      	cmp	r3, #1
 8006354:	f040 84a2 	bne.w	8006c9c <_svfprintf_r+0x1394>
 8006358:	e0a3      	b.n	80064a2 <_svfprintf_r+0xb9a>
 800635a:	462a      	mov	r2, r5
 800635c:	f01b 0610 	ands.w	r6, fp, #16
 8006360:	f852 5b04 	ldr.w	r5, [r2], #4
 8006364:	9206      	str	r2, [sp, #24]
 8006366:	d001      	beq.n	800636c <_svfprintf_r+0xa64>
 8006368:	461e      	mov	r6, r3
 800636a:	e7dd      	b.n	8006328 <_svfprintf_r+0xa20>
 800636c:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
 8006370:	d001      	beq.n	8006376 <_svfprintf_r+0xa6e>
 8006372:	b2ad      	uxth	r5, r5
 8006374:	e7d8      	b.n	8006328 <_svfprintf_r+0xa20>
 8006376:	f41b 7600 	ands.w	r6, fp, #512	; 0x200
 800637a:	d0d5      	beq.n	8006328 <_svfprintf_r+0xa20>
 800637c:	b2ed      	uxtb	r5, r5
 800637e:	e7f3      	b.n	8006368 <_svfprintf_r+0xa60>
 8006380:	462b      	mov	r3, r5
 8006382:	2278      	movs	r2, #120	; 0x78
 8006384:	f853 5b04 	ldr.w	r5, [r3], #4
 8006388:	9306      	str	r3, [sp, #24]
 800638a:	f647 0330 	movw	r3, #30768	; 0x7830
 800638e:	f8ad 306c 	strh.w	r3, [sp, #108]	; 0x6c
 8006392:	4bab      	ldr	r3, [pc, #684]	; (8006640 <_svfprintf_r+0xd38>)
 8006394:	9316      	str	r3, [sp, #88]	; 0x58
 8006396:	2600      	movs	r6, #0
 8006398:	f04b 0b02 	orr.w	fp, fp, #2
 800639c:	2302      	movs	r3, #2
 800639e:	9207      	str	r2, [sp, #28]
 80063a0:	e7c5      	b.n	800632e <_svfprintf_r+0xa26>
 80063a2:	462b      	mov	r3, r5
 80063a4:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
 80063a8:	f853 2b04 	ldr.w	r2, [r3], #4
 80063ac:	9203      	str	r2, [sp, #12]
 80063ae:	f04f 0500 	mov.w	r5, #0
 80063b2:	9306      	str	r3, [sp, #24]
 80063b4:	f88d 506b 	strb.w	r5, [sp, #107]	; 0x6b
 80063b8:	d010      	beq.n	80063dc <_svfprintf_r+0xad4>
 80063ba:	9803      	ldr	r0, [sp, #12]
 80063bc:	4642      	mov	r2, r8
 80063be:	4629      	mov	r1, r5
 80063c0:	f7f9 ff36 	bl	8000230 <memchr>
 80063c4:	9004      	str	r0, [sp, #16]
 80063c6:	2800      	cmp	r0, #0
 80063c8:	f000 80e0 	beq.w	800658c <_svfprintf_r+0xc84>
 80063cc:	9a03      	ldr	r2, [sp, #12]
 80063ce:	9504      	str	r5, [sp, #16]
 80063d0:	eba0 0802 	sub.w	r8, r0, r2
 80063d4:	462f      	mov	r7, r5
 80063d6:	462e      	mov	r6, r5
 80063d8:	9508      	str	r5, [sp, #32]
 80063da:	e5ba      	b.n	8005f52 <_svfprintf_r+0x64a>
 80063dc:	9803      	ldr	r0, [sp, #12]
 80063de:	f7f9 ff1f 	bl	8000220 <strlen>
 80063e2:	462f      	mov	r7, r5
 80063e4:	4680      	mov	r8, r0
 80063e6:	9504      	str	r5, [sp, #16]
 80063e8:	463e      	mov	r6, r7
 80063ea:	463b      	mov	r3, r7
 80063ec:	e460      	b.n	8005cb0 <_svfprintf_r+0x3a8>
 80063ee:	f04b 0b10 	orr.w	fp, fp, #16
 80063f2:	f01b 0320 	ands.w	r3, fp, #32
 80063f6:	d009      	beq.n	800640c <_svfprintf_r+0xb04>
 80063f8:	3507      	adds	r5, #7
 80063fa:	f025 0307 	bic.w	r3, r5, #7
 80063fe:	461a      	mov	r2, r3
 8006400:	685e      	ldr	r6, [r3, #4]
 8006402:	f852 5b08 	ldr.w	r5, [r2], #8
 8006406:	9206      	str	r2, [sp, #24]
 8006408:	2301      	movs	r3, #1
 800640a:	e790      	b.n	800632e <_svfprintf_r+0xa26>
 800640c:	462a      	mov	r2, r5
 800640e:	f01b 0610 	ands.w	r6, fp, #16
 8006412:	f852 5b04 	ldr.w	r5, [r2], #4
 8006416:	9206      	str	r2, [sp, #24]
 8006418:	d001      	beq.n	800641e <_svfprintf_r+0xb16>
 800641a:	461e      	mov	r6, r3
 800641c:	e7f4      	b.n	8006408 <_svfprintf_r+0xb00>
 800641e:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
 8006422:	d001      	beq.n	8006428 <_svfprintf_r+0xb20>
 8006424:	b2ad      	uxth	r5, r5
 8006426:	e7ef      	b.n	8006408 <_svfprintf_r+0xb00>
 8006428:	f41b 7600 	ands.w	r6, fp, #512	; 0x200
 800642c:	d0ec      	beq.n	8006408 <_svfprintf_r+0xb00>
 800642e:	b2ed      	uxtb	r5, r5
 8006430:	e7f3      	b.n	800641a <_svfprintf_r+0xb12>
 8006432:	4b84      	ldr	r3, [pc, #528]	; (8006644 <_svfprintf_r+0xd3c>)
 8006434:	9316      	str	r3, [sp, #88]	; 0x58
 8006436:	f01b 0320 	ands.w	r3, fp, #32
 800643a:	d01b      	beq.n	8006474 <_svfprintf_r+0xb6c>
 800643c:	3507      	adds	r5, #7
 800643e:	f025 0307 	bic.w	r3, r5, #7
 8006442:	461a      	mov	r2, r3
 8006444:	685e      	ldr	r6, [r3, #4]
 8006446:	f852 5b08 	ldr.w	r5, [r2], #8
 800644a:	9206      	str	r2, [sp, #24]
 800644c:	f01b 0f01 	tst.w	fp, #1
 8006450:	d00a      	beq.n	8006468 <_svfprintf_r+0xb60>
 8006452:	ea55 0306 	orrs.w	r3, r5, r6
 8006456:	d007      	beq.n	8006468 <_svfprintf_r+0xb60>
 8006458:	2330      	movs	r3, #48	; 0x30
 800645a:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
 800645e:	9b07      	ldr	r3, [sp, #28]
 8006460:	f88d 306d 	strb.w	r3, [sp, #109]	; 0x6d
 8006464:	f04b 0b02 	orr.w	fp, fp, #2
 8006468:	f42b 6b80 	bic.w	fp, fp, #1024	; 0x400
 800646c:	2302      	movs	r3, #2
 800646e:	e75e      	b.n	800632e <_svfprintf_r+0xa26>
 8006470:	4b73      	ldr	r3, [pc, #460]	; (8006640 <_svfprintf_r+0xd38>)
 8006472:	e7df      	b.n	8006434 <_svfprintf_r+0xb2c>
 8006474:	462a      	mov	r2, r5
 8006476:	f01b 0610 	ands.w	r6, fp, #16
 800647a:	f852 5b04 	ldr.w	r5, [r2], #4
 800647e:	9206      	str	r2, [sp, #24]
 8006480:	d001      	beq.n	8006486 <_svfprintf_r+0xb7e>
 8006482:	461e      	mov	r6, r3
 8006484:	e7e2      	b.n	800644c <_svfprintf_r+0xb44>
 8006486:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
 800648a:	d001      	beq.n	8006490 <_svfprintf_r+0xb88>
 800648c:	b2ad      	uxth	r5, r5
 800648e:	e7dd      	b.n	800644c <_svfprintf_r+0xb44>
 8006490:	f41b 7600 	ands.w	r6, fp, #512	; 0x200
 8006494:	d0da      	beq.n	800644c <_svfprintf_r+0xb44>
 8006496:	b2ed      	uxtb	r5, r5
 8006498:	e7f3      	b.n	8006482 <_svfprintf_r+0xb7a>
 800649a:	2d0a      	cmp	r5, #10
 800649c:	f176 0300 	sbcs.w	r3, r6, #0
 80064a0:	d206      	bcs.n	80064b0 <_svfprintf_r+0xba8>
 80064a2:	3530      	adds	r5, #48	; 0x30
 80064a4:	f88d 5137 	strb.w	r5, [sp, #311]	; 0x137
 80064a8:	f20d 1337 	addw	r3, sp, #311	; 0x137
 80064ac:	f000 bc16 	b.w	8006cdc <_svfprintf_r+0x13d4>
 80064b0:	2300      	movs	r3, #0
 80064b2:	9305      	str	r3, [sp, #20]
 80064b4:	9b04      	ldr	r3, [sp, #16]
 80064b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80064ba:	af4e      	add	r7, sp, #312	; 0x138
 80064bc:	9308      	str	r3, [sp, #32]
 80064be:	220a      	movs	r2, #10
 80064c0:	2300      	movs	r3, #0
 80064c2:	4628      	mov	r0, r5
 80064c4:	4631      	mov	r1, r6
 80064c6:	f7fa fb97 	bl	8000bf8 <__aeabi_uldivmod>
 80064ca:	1e7b      	subs	r3, r7, #1
 80064cc:	9303      	str	r3, [sp, #12]
 80064ce:	9b05      	ldr	r3, [sp, #20]
 80064d0:	9010      	str	r0, [sp, #64]	; 0x40
 80064d2:	3301      	adds	r3, #1
 80064d4:	9305      	str	r3, [sp, #20]
 80064d6:	9b08      	ldr	r3, [sp, #32]
 80064d8:	3230      	adds	r2, #48	; 0x30
 80064da:	468b      	mov	fp, r1
 80064dc:	f807 2c01 	strb.w	r2, [r7, #-1]
 80064e0:	b1d3      	cbz	r3, 8006518 <_svfprintf_r+0xc10>
 80064e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80064e4:	9a05      	ldr	r2, [sp, #20]
 80064e6:	781b      	ldrb	r3, [r3, #0]
 80064e8:	429a      	cmp	r2, r3
 80064ea:	d115      	bne.n	8006518 <_svfprintf_r+0xc10>
 80064ec:	2aff      	cmp	r2, #255	; 0xff
 80064ee:	d013      	beq.n	8006518 <_svfprintf_r+0xc10>
 80064f0:	2d0a      	cmp	r5, #10
 80064f2:	f176 0300 	sbcs.w	r3, r6, #0
 80064f6:	d30f      	bcc.n	8006518 <_svfprintf_r+0xc10>
 80064f8:	9b03      	ldr	r3, [sp, #12]
 80064fa:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80064fc:	9914      	ldr	r1, [sp, #80]	; 0x50
 80064fe:	1a9b      	subs	r3, r3, r2
 8006500:	4618      	mov	r0, r3
 8006502:	9303      	str	r3, [sp, #12]
 8006504:	f000 fcf9 	bl	8006efa <strncpy>
 8006508:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800650a:	785b      	ldrb	r3, [r3, #1]
 800650c:	b11b      	cbz	r3, 8006516 <_svfprintf_r+0xc0e>
 800650e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006510:	3301      	adds	r3, #1
 8006512:	9309      	str	r3, [sp, #36]	; 0x24
 8006514:	2300      	movs	r3, #0
 8006516:	9305      	str	r3, [sp, #20]
 8006518:	2d0a      	cmp	r5, #10
 800651a:	f176 0600 	sbcs.w	r6, r6, #0
 800651e:	d20b      	bcs.n	8006538 <_svfprintf_r+0xc30>
 8006520:	9b03      	ldr	r3, [sp, #12]
 8006522:	f8dd b010 	ldr.w	fp, [sp, #16]
 8006526:	aa4e      	add	r2, sp, #312	; 0x138
 8006528:	4647      	mov	r7, r8
 800652a:	eba2 0803 	sub.w	r8, r2, r3
 800652e:	2300      	movs	r3, #0
 8006530:	9304      	str	r3, [sp, #16]
 8006532:	461e      	mov	r6, r3
 8006534:	f7ff bbbc 	b.w	8005cb0 <_svfprintf_r+0x3a8>
 8006538:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800653a:	9f03      	ldr	r7, [sp, #12]
 800653c:	465e      	mov	r6, fp
 800653e:	e7be      	b.n	80064be <_svfprintf_r+0xbb6>
 8006540:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8006542:	f005 030f 	and.w	r3, r5, #15
 8006546:	092d      	lsrs	r5, r5, #4
 8006548:	5cd3      	ldrb	r3, [r2, r3]
 800654a:	9a03      	ldr	r2, [sp, #12]
 800654c:	ea45 7506 	orr.w	r5, r5, r6, lsl #28
 8006550:	f802 3d01 	strb.w	r3, [r2, #-1]!
 8006554:	0936      	lsrs	r6, r6, #4
 8006556:	ea55 0306 	orrs.w	r3, r5, r6
 800655a:	9203      	str	r2, [sp, #12]
 800655c:	d1f0      	bne.n	8006540 <_svfprintf_r+0xc38>
 800655e:	e7df      	b.n	8006520 <_svfprintf_r+0xc18>
 8006560:	b933      	cbnz	r3, 8006570 <_svfprintf_r+0xc68>
 8006562:	f01b 0f01 	tst.w	fp, #1
 8006566:	d003      	beq.n	8006570 <_svfprintf_r+0xc68>
 8006568:	2330      	movs	r3, #48	; 0x30
 800656a:	f88d 3137 	strb.w	r3, [sp, #311]	; 0x137
 800656e:	e79b      	b.n	80064a8 <_svfprintf_r+0xba0>
 8006570:	ab4e      	add	r3, sp, #312	; 0x138
 8006572:	e3b3      	b.n	8006cdc <_svfprintf_r+0x13d4>
 8006574:	9b07      	ldr	r3, [sp, #28]
 8006576:	2b00      	cmp	r3, #0
 8006578:	f000 837c 	beq.w	8006c74 <_svfprintf_r+0x136c>
 800657c:	f88d 30d4 	strb.w	r3, [sp, #212]	; 0xd4
 8006580:	2300      	movs	r3, #0
 8006582:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 8006586:	9506      	str	r5, [sp, #24]
 8006588:	f7ff bb1f 	b.w	8005bca <_svfprintf_r+0x2c2>
 800658c:	9f04      	ldr	r7, [sp, #16]
 800658e:	e72b      	b.n	80063e8 <_svfprintf_r+0xae0>
 8006590:	2010      	movs	r0, #16
 8006592:	4403      	add	r3, r0
 8006594:	2a07      	cmp	r2, #7
 8006596:	e9cd 2323 	strd	r2, r3, [sp, #140]	; 0x8c
 800659a:	6060      	str	r0, [r4, #4]
 800659c:	dd08      	ble.n	80065b0 <_svfprintf_r+0xca8>
 800659e:	aa22      	add	r2, sp, #136	; 0x88
 80065a0:	4649      	mov	r1, r9
 80065a2:	4650      	mov	r0, sl
 80065a4:	f001 fed8 	bl	8008358 <__ssprint_r>
 80065a8:	2800      	cmp	r0, #0
 80065aa:	f040 8341 	bne.w	8006c30 <_svfprintf_r+0x1328>
 80065ae:	a925      	add	r1, sp, #148	; 0x94
 80065b0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80065b2:	3b10      	subs	r3, #16
 80065b4:	9312      	str	r3, [sp, #72]	; 0x48
 80065b6:	460c      	mov	r4, r1
 80065b8:	e4e7      	b.n	8005f8a <_svfprintf_r+0x682>
 80065ba:	460c      	mov	r4, r1
 80065bc:	e502      	b.n	8005fc4 <_svfprintf_r+0x6bc>
 80065be:	aa22      	add	r2, sp, #136	; 0x88
 80065c0:	4649      	mov	r1, r9
 80065c2:	4650      	mov	r0, sl
 80065c4:	f001 fec8 	bl	8008358 <__ssprint_r>
 80065c8:	2800      	cmp	r0, #0
 80065ca:	f040 8331 	bne.w	8006c30 <_svfprintf_r+0x1328>
 80065ce:	ac25      	add	r4, sp, #148	; 0x94
 80065d0:	e50a      	b.n	8005fe8 <_svfprintf_r+0x6e0>
 80065d2:	aa22      	add	r2, sp, #136	; 0x88
 80065d4:	4649      	mov	r1, r9
 80065d6:	4650      	mov	r0, sl
 80065d8:	f001 febe 	bl	8008358 <__ssprint_r>
 80065dc:	2800      	cmp	r0, #0
 80065de:	f040 8327 	bne.w	8006c30 <_svfprintf_r+0x1328>
 80065e2:	ac25      	add	r4, sp, #148	; 0x94
 80065e4:	e510      	b.n	8006008 <_svfprintf_r+0x700>
 80065e6:	2010      	movs	r0, #16
 80065e8:	4403      	add	r3, r0
 80065ea:	2a07      	cmp	r2, #7
 80065ec:	e9cd 2323 	strd	r2, r3, [sp, #140]	; 0x8c
 80065f0:	6060      	str	r0, [r4, #4]
 80065f2:	dd08      	ble.n	8006606 <_svfprintf_r+0xcfe>
 80065f4:	aa22      	add	r2, sp, #136	; 0x88
 80065f6:	4649      	mov	r1, r9
 80065f8:	4650      	mov	r0, sl
 80065fa:	f001 fead 	bl	8008358 <__ssprint_r>
 80065fe:	2800      	cmp	r0, #0
 8006600:	f040 8316 	bne.w	8006c30 <_svfprintf_r+0x1328>
 8006604:	a925      	add	r1, sp, #148	; 0x94
 8006606:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006608:	3b10      	subs	r3, #16
 800660a:	9312      	str	r3, [sp, #72]	; 0x48
 800660c:	460c      	mov	r4, r1
 800660e:	e504      	b.n	800601a <_svfprintf_r+0x712>
 8006610:	460c      	mov	r4, r1
 8006612:	e51f      	b.n	8006054 <_svfprintf_r+0x74c>
 8006614:	2010      	movs	r0, #16
 8006616:	4402      	add	r2, r0
 8006618:	2b07      	cmp	r3, #7
 800661a:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 800661e:	6060      	str	r0, [r4, #4]
 8006620:	dd08      	ble.n	8006634 <_svfprintf_r+0xd2c>
 8006622:	aa22      	add	r2, sp, #136	; 0x88
 8006624:	4649      	mov	r1, r9
 8006626:	4650      	mov	r0, sl
 8006628:	f001 fe96 	bl	8008358 <__ssprint_r>
 800662c:	2800      	cmp	r0, #0
 800662e:	f040 82ff 	bne.w	8006c30 <_svfprintf_r+0x1328>
 8006632:	a925      	add	r1, sp, #148	; 0x94
 8006634:	3f10      	subs	r7, #16
 8006636:	460c      	mov	r4, r1
 8006638:	e510      	b.n	800605c <_svfprintf_r+0x754>
 800663a:	460c      	mov	r4, r1
 800663c:	e536      	b.n	80060ac <_svfprintf_r+0x7a4>
 800663e:	bf00      	nop
 8006640:	08009a60 	.word	0x08009a60
 8006644:	08009a71 	.word	0x08009a71
 8006648:	9b07      	ldr	r3, [sp, #28]
 800664a:	2b65      	cmp	r3, #101	; 0x65
 800664c:	f340 823a 	ble.w	8006ac4 <_svfprintf_r+0x11bc>
 8006650:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006654:	2200      	movs	r2, #0
 8006656:	2300      	movs	r3, #0
 8006658:	f7fa fa5e 	bl	8000b18 <__aeabi_dcmpeq>
 800665c:	2800      	cmp	r0, #0
 800665e:	d068      	beq.n	8006732 <_svfprintf_r+0xe2a>
 8006660:	4b6d      	ldr	r3, [pc, #436]	; (8006818 <_svfprintf_r+0xf10>)
 8006662:	6023      	str	r3, [r4, #0]
 8006664:	2301      	movs	r3, #1
 8006666:	441f      	add	r7, r3
 8006668:	6063      	str	r3, [r4, #4]
 800666a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800666c:	9724      	str	r7, [sp, #144]	; 0x90
 800666e:	3301      	adds	r3, #1
 8006670:	2b07      	cmp	r3, #7
 8006672:	9323      	str	r3, [sp, #140]	; 0x8c
 8006674:	dc37      	bgt.n	80066e6 <_svfprintf_r+0xdde>
 8006676:	3408      	adds	r4, #8
 8006678:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800667a:	9a05      	ldr	r2, [sp, #20]
 800667c:	4293      	cmp	r3, r2
 800667e:	db03      	blt.n	8006688 <_svfprintf_r+0xd80>
 8006680:	f01b 0f01 	tst.w	fp, #1
 8006684:	f43f ad23 	beq.w	80060ce <_svfprintf_r+0x7c6>
 8006688:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800668a:	6023      	str	r3, [r4, #0]
 800668c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800668e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006690:	6063      	str	r3, [r4, #4]
 8006692:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8006694:	4413      	add	r3, r2
 8006696:	9324      	str	r3, [sp, #144]	; 0x90
 8006698:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800669a:	3301      	adds	r3, #1
 800669c:	2b07      	cmp	r3, #7
 800669e:	9323      	str	r3, [sp, #140]	; 0x8c
 80066a0:	dc2b      	bgt.n	80066fa <_svfprintf_r+0xdf2>
 80066a2:	3408      	adds	r4, #8
 80066a4:	9b05      	ldr	r3, [sp, #20]
 80066a6:	1e5d      	subs	r5, r3, #1
 80066a8:	2d00      	cmp	r5, #0
 80066aa:	f77f ad10 	ble.w	80060ce <_svfprintf_r+0x7c6>
 80066ae:	4e5b      	ldr	r6, [pc, #364]	; (800681c <_svfprintf_r+0xf14>)
 80066b0:	2710      	movs	r7, #16
 80066b2:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 80066b6:	2d10      	cmp	r5, #16
 80066b8:	f103 0301 	add.w	r3, r3, #1
 80066bc:	f104 0108 	add.w	r1, r4, #8
 80066c0:	6026      	str	r6, [r4, #0]
 80066c2:	dc24      	bgt.n	800670e <_svfprintf_r+0xe06>
 80066c4:	6065      	str	r5, [r4, #4]
 80066c6:	4415      	add	r5, r2
 80066c8:	9524      	str	r5, [sp, #144]	; 0x90
 80066ca:	2b07      	cmp	r3, #7
 80066cc:	9323      	str	r3, [sp, #140]	; 0x8c
 80066ce:	f340 828e 	ble.w	8006bee <_svfprintf_r+0x12e6>
 80066d2:	aa22      	add	r2, sp, #136	; 0x88
 80066d4:	4649      	mov	r1, r9
 80066d6:	4650      	mov	r0, sl
 80066d8:	f001 fe3e 	bl	8008358 <__ssprint_r>
 80066dc:	2800      	cmp	r0, #0
 80066de:	f040 82a7 	bne.w	8006c30 <_svfprintf_r+0x1328>
 80066e2:	ac25      	add	r4, sp, #148	; 0x94
 80066e4:	e4f3      	b.n	80060ce <_svfprintf_r+0x7c6>
 80066e6:	aa22      	add	r2, sp, #136	; 0x88
 80066e8:	4649      	mov	r1, r9
 80066ea:	4650      	mov	r0, sl
 80066ec:	f001 fe34 	bl	8008358 <__ssprint_r>
 80066f0:	2800      	cmp	r0, #0
 80066f2:	f040 829d 	bne.w	8006c30 <_svfprintf_r+0x1328>
 80066f6:	ac25      	add	r4, sp, #148	; 0x94
 80066f8:	e7be      	b.n	8006678 <_svfprintf_r+0xd70>
 80066fa:	aa22      	add	r2, sp, #136	; 0x88
 80066fc:	4649      	mov	r1, r9
 80066fe:	4650      	mov	r0, sl
 8006700:	f001 fe2a 	bl	8008358 <__ssprint_r>
 8006704:	2800      	cmp	r0, #0
 8006706:	f040 8293 	bne.w	8006c30 <_svfprintf_r+0x1328>
 800670a:	ac25      	add	r4, sp, #148	; 0x94
 800670c:	e7ca      	b.n	80066a4 <_svfprintf_r+0xd9c>
 800670e:	3210      	adds	r2, #16
 8006710:	2b07      	cmp	r3, #7
 8006712:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 8006716:	6067      	str	r7, [r4, #4]
 8006718:	dd08      	ble.n	800672c <_svfprintf_r+0xe24>
 800671a:	aa22      	add	r2, sp, #136	; 0x88
 800671c:	4649      	mov	r1, r9
 800671e:	4650      	mov	r0, sl
 8006720:	f001 fe1a 	bl	8008358 <__ssprint_r>
 8006724:	2800      	cmp	r0, #0
 8006726:	f040 8283 	bne.w	8006c30 <_svfprintf_r+0x1328>
 800672a:	a925      	add	r1, sp, #148	; 0x94
 800672c:	3d10      	subs	r5, #16
 800672e:	460c      	mov	r4, r1
 8006730:	e7bf      	b.n	80066b2 <_svfprintf_r+0xdaa>
 8006732:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8006734:	2b00      	cmp	r3, #0
 8006736:	dc73      	bgt.n	8006820 <_svfprintf_r+0xf18>
 8006738:	4b37      	ldr	r3, [pc, #220]	; (8006818 <_svfprintf_r+0xf10>)
 800673a:	6023      	str	r3, [r4, #0]
 800673c:	2301      	movs	r3, #1
 800673e:	441f      	add	r7, r3
 8006740:	6063      	str	r3, [r4, #4]
 8006742:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006744:	9724      	str	r7, [sp, #144]	; 0x90
 8006746:	3301      	adds	r3, #1
 8006748:	2b07      	cmp	r3, #7
 800674a:	9323      	str	r3, [sp, #140]	; 0x8c
 800674c:	dc3d      	bgt.n	80067ca <_svfprintf_r+0xec2>
 800674e:	3408      	adds	r4, #8
 8006750:	9905      	ldr	r1, [sp, #20]
 8006752:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8006754:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006756:	430b      	orrs	r3, r1
 8006758:	f00b 0101 	and.w	r1, fp, #1
 800675c:	430b      	orrs	r3, r1
 800675e:	f43f acb6 	beq.w	80060ce <_svfprintf_r+0x7c6>
 8006762:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006764:	6023      	str	r3, [r4, #0]
 8006766:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006768:	6063      	str	r3, [r4, #4]
 800676a:	441a      	add	r2, r3
 800676c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800676e:	9224      	str	r2, [sp, #144]	; 0x90
 8006770:	3301      	adds	r3, #1
 8006772:	2b07      	cmp	r3, #7
 8006774:	9323      	str	r3, [sp, #140]	; 0x8c
 8006776:	dc32      	bgt.n	80067de <_svfprintf_r+0xed6>
 8006778:	3408      	adds	r4, #8
 800677a:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 800677c:	2d00      	cmp	r5, #0
 800677e:	da1b      	bge.n	80067b8 <_svfprintf_r+0xeb0>
 8006780:	4e26      	ldr	r6, [pc, #152]	; (800681c <_svfprintf_r+0xf14>)
 8006782:	426d      	negs	r5, r5
 8006784:	4623      	mov	r3, r4
 8006786:	2710      	movs	r7, #16
 8006788:	e9dd 2123 	ldrd	r2, r1, [sp, #140]	; 0x8c
 800678c:	2d10      	cmp	r5, #16
 800678e:	f102 0201 	add.w	r2, r2, #1
 8006792:	f104 0408 	add.w	r4, r4, #8
 8006796:	601e      	str	r6, [r3, #0]
 8006798:	dc2b      	bgt.n	80067f2 <_svfprintf_r+0xeea>
 800679a:	605d      	str	r5, [r3, #4]
 800679c:	2a07      	cmp	r2, #7
 800679e:	440d      	add	r5, r1
 80067a0:	e9cd 2523 	strd	r2, r5, [sp, #140]	; 0x8c
 80067a4:	dd08      	ble.n	80067b8 <_svfprintf_r+0xeb0>
 80067a6:	aa22      	add	r2, sp, #136	; 0x88
 80067a8:	4649      	mov	r1, r9
 80067aa:	4650      	mov	r0, sl
 80067ac:	f001 fdd4 	bl	8008358 <__ssprint_r>
 80067b0:	2800      	cmp	r0, #0
 80067b2:	f040 823d 	bne.w	8006c30 <_svfprintf_r+0x1328>
 80067b6:	ac25      	add	r4, sp, #148	; 0x94
 80067b8:	9b03      	ldr	r3, [sp, #12]
 80067ba:	6023      	str	r3, [r4, #0]
 80067bc:	9b05      	ldr	r3, [sp, #20]
 80067be:	9a05      	ldr	r2, [sp, #20]
 80067c0:	6063      	str	r3, [r4, #4]
 80067c2:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80067c4:	4413      	add	r3, r2
 80067c6:	9324      	str	r3, [sp, #144]	; 0x90
 80067c8:	e47a      	b.n	80060c0 <_svfprintf_r+0x7b8>
 80067ca:	aa22      	add	r2, sp, #136	; 0x88
 80067cc:	4649      	mov	r1, r9
 80067ce:	4650      	mov	r0, sl
 80067d0:	f001 fdc2 	bl	8008358 <__ssprint_r>
 80067d4:	2800      	cmp	r0, #0
 80067d6:	f040 822b 	bne.w	8006c30 <_svfprintf_r+0x1328>
 80067da:	ac25      	add	r4, sp, #148	; 0x94
 80067dc:	e7b8      	b.n	8006750 <_svfprintf_r+0xe48>
 80067de:	aa22      	add	r2, sp, #136	; 0x88
 80067e0:	4649      	mov	r1, r9
 80067e2:	4650      	mov	r0, sl
 80067e4:	f001 fdb8 	bl	8008358 <__ssprint_r>
 80067e8:	2800      	cmp	r0, #0
 80067ea:	f040 8221 	bne.w	8006c30 <_svfprintf_r+0x1328>
 80067ee:	ac25      	add	r4, sp, #148	; 0x94
 80067f0:	e7c3      	b.n	800677a <_svfprintf_r+0xe72>
 80067f2:	3110      	adds	r1, #16
 80067f4:	2a07      	cmp	r2, #7
 80067f6:	e9cd 2123 	strd	r2, r1, [sp, #140]	; 0x8c
 80067fa:	605f      	str	r7, [r3, #4]
 80067fc:	dd08      	ble.n	8006810 <_svfprintf_r+0xf08>
 80067fe:	aa22      	add	r2, sp, #136	; 0x88
 8006800:	4649      	mov	r1, r9
 8006802:	4650      	mov	r0, sl
 8006804:	f001 fda8 	bl	8008358 <__ssprint_r>
 8006808:	2800      	cmp	r0, #0
 800680a:	f040 8211 	bne.w	8006c30 <_svfprintf_r+0x1328>
 800680e:	ac25      	add	r4, sp, #148	; 0x94
 8006810:	3d10      	subs	r5, #16
 8006812:	4623      	mov	r3, r4
 8006814:	e7b8      	b.n	8006788 <_svfprintf_r+0xe80>
 8006816:	bf00      	nop
 8006818:	08009a82 	.word	0x08009a82
 800681c:	08009a94 	.word	0x08009a94
 8006820:	9b05      	ldr	r3, [sp, #20]
 8006822:	42ab      	cmp	r3, r5
 8006824:	bfa8      	it	ge
 8006826:	462b      	movge	r3, r5
 8006828:	2b00      	cmp	r3, #0
 800682a:	4698      	mov	r8, r3
 800682c:	dd0a      	ble.n	8006844 <_svfprintf_r+0xf3c>
 800682e:	9b03      	ldr	r3, [sp, #12]
 8006830:	e9c4 3800 	strd	r3, r8, [r4]
 8006834:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006836:	3301      	adds	r3, #1
 8006838:	4447      	add	r7, r8
 800683a:	2b07      	cmp	r3, #7
 800683c:	9724      	str	r7, [sp, #144]	; 0x90
 800683e:	9323      	str	r3, [sp, #140]	; 0x8c
 8006840:	dc7b      	bgt.n	800693a <_svfprintf_r+0x1032>
 8006842:	3408      	adds	r4, #8
 8006844:	f1b8 0f00 	cmp.w	r8, #0
 8006848:	bfac      	ite	ge
 800684a:	eba5 0708 	subge.w	r7, r5, r8
 800684e:	462f      	movlt	r7, r5
 8006850:	2f00      	cmp	r7, #0
 8006852:	dd1a      	ble.n	800688a <_svfprintf_r+0xf82>
 8006854:	f8df 8368 	ldr.w	r8, [pc, #872]	; 8006bc0 <_svfprintf_r+0x12b8>
 8006858:	f8c4 8000 	str.w	r8, [r4]
 800685c:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 8006860:	2f10      	cmp	r7, #16
 8006862:	f103 0301 	add.w	r3, r3, #1
 8006866:	f104 0108 	add.w	r1, r4, #8
 800686a:	dc70      	bgt.n	800694e <_svfprintf_r+0x1046>
 800686c:	6067      	str	r7, [r4, #4]
 800686e:	2b07      	cmp	r3, #7
 8006870:	4417      	add	r7, r2
 8006872:	e9cd 3723 	strd	r3, r7, [sp, #140]	; 0x8c
 8006876:	dd7d      	ble.n	8006974 <_svfprintf_r+0x106c>
 8006878:	aa22      	add	r2, sp, #136	; 0x88
 800687a:	4649      	mov	r1, r9
 800687c:	4650      	mov	r0, sl
 800687e:	f001 fd6b 	bl	8008358 <__ssprint_r>
 8006882:	2800      	cmp	r0, #0
 8006884:	f040 81d4 	bne.w	8006c30 <_svfprintf_r+0x1328>
 8006888:	ac25      	add	r4, sp, #148	; 0x94
 800688a:	9b03      	ldr	r3, [sp, #12]
 800688c:	f41b 6f80 	tst.w	fp, #1024	; 0x400
 8006890:	441d      	add	r5, r3
 8006892:	d00a      	beq.n	80068aa <_svfprintf_r+0xfa2>
 8006894:	9b08      	ldr	r3, [sp, #32]
 8006896:	2b00      	cmp	r3, #0
 8006898:	d16e      	bne.n	8006978 <_svfprintf_r+0x1070>
 800689a:	2e00      	cmp	r6, #0
 800689c:	d16e      	bne.n	800697c <_svfprintf_r+0x1074>
 800689e:	9b03      	ldr	r3, [sp, #12]
 80068a0:	9a05      	ldr	r2, [sp, #20]
 80068a2:	4413      	add	r3, r2
 80068a4:	429d      	cmp	r5, r3
 80068a6:	bf28      	it	cs
 80068a8:	461d      	movcs	r5, r3
 80068aa:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80068ac:	9a05      	ldr	r2, [sp, #20]
 80068ae:	4293      	cmp	r3, r2
 80068b0:	db02      	blt.n	80068b8 <_svfprintf_r+0xfb0>
 80068b2:	f01b 0f01 	tst.w	fp, #1
 80068b6:	d00e      	beq.n	80068d6 <_svfprintf_r+0xfce>
 80068b8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80068ba:	6023      	str	r3, [r4, #0]
 80068bc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80068be:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80068c0:	6063      	str	r3, [r4, #4]
 80068c2:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80068c4:	4413      	add	r3, r2
 80068c6:	9324      	str	r3, [sp, #144]	; 0x90
 80068c8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80068ca:	3301      	adds	r3, #1
 80068cc:	2b07      	cmp	r3, #7
 80068ce:	9323      	str	r3, [sp, #140]	; 0x8c
 80068d0:	f300 80d2 	bgt.w	8006a78 <_svfprintf_r+0x1170>
 80068d4:	3408      	adds	r4, #8
 80068d6:	9b05      	ldr	r3, [sp, #20]
 80068d8:	9e1c      	ldr	r6, [sp, #112]	; 0x70
 80068da:	9a05      	ldr	r2, [sp, #20]
 80068dc:	1b9e      	subs	r6, r3, r6
 80068de:	9b03      	ldr	r3, [sp, #12]
 80068e0:	4413      	add	r3, r2
 80068e2:	1b5b      	subs	r3, r3, r5
 80068e4:	429e      	cmp	r6, r3
 80068e6:	bfa8      	it	ge
 80068e8:	461e      	movge	r6, r3
 80068ea:	2e00      	cmp	r6, #0
 80068ec:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80068ee:	dd0a      	ble.n	8006906 <_svfprintf_r+0xffe>
 80068f0:	4433      	add	r3, r6
 80068f2:	9324      	str	r3, [sp, #144]	; 0x90
 80068f4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80068f6:	3301      	adds	r3, #1
 80068f8:	2b07      	cmp	r3, #7
 80068fa:	e9c4 5600 	strd	r5, r6, [r4]
 80068fe:	9323      	str	r3, [sp, #140]	; 0x8c
 8006900:	f300 80c4 	bgt.w	8006a8c <_svfprintf_r+0x1184>
 8006904:	3408      	adds	r4, #8
 8006906:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 8006908:	9b05      	ldr	r3, [sp, #20]
 800690a:	2e00      	cmp	r6, #0
 800690c:	eba3 0505 	sub.w	r5, r3, r5
 8006910:	bfa8      	it	ge
 8006912:	1bad      	subge	r5, r5, r6
 8006914:	2d00      	cmp	r5, #0
 8006916:	f77f abda 	ble.w	80060ce <_svfprintf_r+0x7c6>
 800691a:	4ea9      	ldr	r6, [pc, #676]	; (8006bc0 <_svfprintf_r+0x12b8>)
 800691c:	2710      	movs	r7, #16
 800691e:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 8006922:	2d10      	cmp	r5, #16
 8006924:	f103 0301 	add.w	r3, r3, #1
 8006928:	f104 0108 	add.w	r1, r4, #8
 800692c:	6026      	str	r6, [r4, #0]
 800692e:	f300 80b7 	bgt.w	8006aa0 <_svfprintf_r+0x1198>
 8006932:	442a      	add	r2, r5
 8006934:	6065      	str	r5, [r4, #4]
 8006936:	9224      	str	r2, [sp, #144]	; 0x90
 8006938:	e6c7      	b.n	80066ca <_svfprintf_r+0xdc2>
 800693a:	aa22      	add	r2, sp, #136	; 0x88
 800693c:	4649      	mov	r1, r9
 800693e:	4650      	mov	r0, sl
 8006940:	f001 fd0a 	bl	8008358 <__ssprint_r>
 8006944:	2800      	cmp	r0, #0
 8006946:	f040 8173 	bne.w	8006c30 <_svfprintf_r+0x1328>
 800694a:	ac25      	add	r4, sp, #148	; 0x94
 800694c:	e77a      	b.n	8006844 <_svfprintf_r+0xf3c>
 800694e:	2010      	movs	r0, #16
 8006950:	4402      	add	r2, r0
 8006952:	2b07      	cmp	r3, #7
 8006954:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 8006958:	6060      	str	r0, [r4, #4]
 800695a:	dd08      	ble.n	800696e <_svfprintf_r+0x1066>
 800695c:	aa22      	add	r2, sp, #136	; 0x88
 800695e:	4649      	mov	r1, r9
 8006960:	4650      	mov	r0, sl
 8006962:	f001 fcf9 	bl	8008358 <__ssprint_r>
 8006966:	2800      	cmp	r0, #0
 8006968:	f040 8162 	bne.w	8006c30 <_svfprintf_r+0x1328>
 800696c:	a925      	add	r1, sp, #148	; 0x94
 800696e:	3f10      	subs	r7, #16
 8006970:	460c      	mov	r4, r1
 8006972:	e771      	b.n	8006858 <_svfprintf_r+0xf50>
 8006974:	460c      	mov	r4, r1
 8006976:	e788      	b.n	800688a <_svfprintf_r+0xf82>
 8006978:	2e00      	cmp	r6, #0
 800697a:	d04d      	beq.n	8006a18 <_svfprintf_r+0x1110>
 800697c:	3e01      	subs	r6, #1
 800697e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006980:	6023      	str	r3, [r4, #0]
 8006982:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006984:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8006986:	6063      	str	r3, [r4, #4]
 8006988:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800698a:	4413      	add	r3, r2
 800698c:	9324      	str	r3, [sp, #144]	; 0x90
 800698e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006990:	3301      	adds	r3, #1
 8006992:	2b07      	cmp	r3, #7
 8006994:	9323      	str	r3, [sp, #140]	; 0x8c
 8006996:	dc46      	bgt.n	8006a26 <_svfprintf_r+0x111e>
 8006998:	3408      	adds	r4, #8
 800699a:	9b03      	ldr	r3, [sp, #12]
 800699c:	9a05      	ldr	r2, [sp, #20]
 800699e:	eb03 0802 	add.w	r8, r3, r2
 80069a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80069a4:	781b      	ldrb	r3, [r3, #0]
 80069a6:	eba8 0805 	sub.w	r8, r8, r5
 80069aa:	4598      	cmp	r8, r3
 80069ac:	bfa8      	it	ge
 80069ae:	4698      	movge	r8, r3
 80069b0:	f1b8 0f00 	cmp.w	r8, #0
 80069b4:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80069b6:	dd09      	ble.n	80069cc <_svfprintf_r+0x10c4>
 80069b8:	4443      	add	r3, r8
 80069ba:	9324      	str	r3, [sp, #144]	; 0x90
 80069bc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80069be:	3301      	adds	r3, #1
 80069c0:	2b07      	cmp	r3, #7
 80069c2:	e9c4 5800 	strd	r5, r8, [r4]
 80069c6:	9323      	str	r3, [sp, #140]	; 0x8c
 80069c8:	dc37      	bgt.n	8006a3a <_svfprintf_r+0x1132>
 80069ca:	3408      	adds	r4, #8
 80069cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80069ce:	781f      	ldrb	r7, [r3, #0]
 80069d0:	f1b8 0f00 	cmp.w	r8, #0
 80069d4:	bfa8      	it	ge
 80069d6:	eba7 0708 	subge.w	r7, r7, r8
 80069da:	2f00      	cmp	r7, #0
 80069dc:	dd18      	ble.n	8006a10 <_svfprintf_r+0x1108>
 80069de:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 80069e2:	4877      	ldr	r0, [pc, #476]	; (8006bc0 <_svfprintf_r+0x12b8>)
 80069e4:	6020      	str	r0, [r4, #0]
 80069e6:	2f10      	cmp	r7, #16
 80069e8:	f103 0301 	add.w	r3, r3, #1
 80069ec:	f104 0108 	add.w	r1, r4, #8
 80069f0:	dc2d      	bgt.n	8006a4e <_svfprintf_r+0x1146>
 80069f2:	443a      	add	r2, r7
 80069f4:	2b07      	cmp	r3, #7
 80069f6:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 80069fa:	6067      	str	r7, [r4, #4]
 80069fc:	dd3a      	ble.n	8006a74 <_svfprintf_r+0x116c>
 80069fe:	aa22      	add	r2, sp, #136	; 0x88
 8006a00:	4649      	mov	r1, r9
 8006a02:	4650      	mov	r0, sl
 8006a04:	f001 fca8 	bl	8008358 <__ssprint_r>
 8006a08:	2800      	cmp	r0, #0
 8006a0a:	f040 8111 	bne.w	8006c30 <_svfprintf_r+0x1328>
 8006a0e:	ac25      	add	r4, sp, #148	; 0x94
 8006a10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a12:	781b      	ldrb	r3, [r3, #0]
 8006a14:	441d      	add	r5, r3
 8006a16:	e73d      	b.n	8006894 <_svfprintf_r+0xf8c>
 8006a18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a1a:	3b01      	subs	r3, #1
 8006a1c:	9309      	str	r3, [sp, #36]	; 0x24
 8006a1e:	9b08      	ldr	r3, [sp, #32]
 8006a20:	3b01      	subs	r3, #1
 8006a22:	9308      	str	r3, [sp, #32]
 8006a24:	e7ab      	b.n	800697e <_svfprintf_r+0x1076>
 8006a26:	aa22      	add	r2, sp, #136	; 0x88
 8006a28:	4649      	mov	r1, r9
 8006a2a:	4650      	mov	r0, sl
 8006a2c:	f001 fc94 	bl	8008358 <__ssprint_r>
 8006a30:	2800      	cmp	r0, #0
 8006a32:	f040 80fd 	bne.w	8006c30 <_svfprintf_r+0x1328>
 8006a36:	ac25      	add	r4, sp, #148	; 0x94
 8006a38:	e7af      	b.n	800699a <_svfprintf_r+0x1092>
 8006a3a:	aa22      	add	r2, sp, #136	; 0x88
 8006a3c:	4649      	mov	r1, r9
 8006a3e:	4650      	mov	r0, sl
 8006a40:	f001 fc8a 	bl	8008358 <__ssprint_r>
 8006a44:	2800      	cmp	r0, #0
 8006a46:	f040 80f3 	bne.w	8006c30 <_svfprintf_r+0x1328>
 8006a4a:	ac25      	add	r4, sp, #148	; 0x94
 8006a4c:	e7be      	b.n	80069cc <_svfprintf_r+0x10c4>
 8006a4e:	2010      	movs	r0, #16
 8006a50:	4402      	add	r2, r0
 8006a52:	2b07      	cmp	r3, #7
 8006a54:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 8006a58:	6060      	str	r0, [r4, #4]
 8006a5a:	dd08      	ble.n	8006a6e <_svfprintf_r+0x1166>
 8006a5c:	aa22      	add	r2, sp, #136	; 0x88
 8006a5e:	4649      	mov	r1, r9
 8006a60:	4650      	mov	r0, sl
 8006a62:	f001 fc79 	bl	8008358 <__ssprint_r>
 8006a66:	2800      	cmp	r0, #0
 8006a68:	f040 80e2 	bne.w	8006c30 <_svfprintf_r+0x1328>
 8006a6c:	a925      	add	r1, sp, #148	; 0x94
 8006a6e:	3f10      	subs	r7, #16
 8006a70:	460c      	mov	r4, r1
 8006a72:	e7b4      	b.n	80069de <_svfprintf_r+0x10d6>
 8006a74:	460c      	mov	r4, r1
 8006a76:	e7cb      	b.n	8006a10 <_svfprintf_r+0x1108>
 8006a78:	aa22      	add	r2, sp, #136	; 0x88
 8006a7a:	4649      	mov	r1, r9
 8006a7c:	4650      	mov	r0, sl
 8006a7e:	f001 fc6b 	bl	8008358 <__ssprint_r>
 8006a82:	2800      	cmp	r0, #0
 8006a84:	f040 80d4 	bne.w	8006c30 <_svfprintf_r+0x1328>
 8006a88:	ac25      	add	r4, sp, #148	; 0x94
 8006a8a:	e724      	b.n	80068d6 <_svfprintf_r+0xfce>
 8006a8c:	aa22      	add	r2, sp, #136	; 0x88
 8006a8e:	4649      	mov	r1, r9
 8006a90:	4650      	mov	r0, sl
 8006a92:	f001 fc61 	bl	8008358 <__ssprint_r>
 8006a96:	2800      	cmp	r0, #0
 8006a98:	f040 80ca 	bne.w	8006c30 <_svfprintf_r+0x1328>
 8006a9c:	ac25      	add	r4, sp, #148	; 0x94
 8006a9e:	e732      	b.n	8006906 <_svfprintf_r+0xffe>
 8006aa0:	3210      	adds	r2, #16
 8006aa2:	2b07      	cmp	r3, #7
 8006aa4:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 8006aa8:	6067      	str	r7, [r4, #4]
 8006aaa:	dd08      	ble.n	8006abe <_svfprintf_r+0x11b6>
 8006aac:	aa22      	add	r2, sp, #136	; 0x88
 8006aae:	4649      	mov	r1, r9
 8006ab0:	4650      	mov	r0, sl
 8006ab2:	f001 fc51 	bl	8008358 <__ssprint_r>
 8006ab6:	2800      	cmp	r0, #0
 8006ab8:	f040 80ba 	bne.w	8006c30 <_svfprintf_r+0x1328>
 8006abc:	a925      	add	r1, sp, #148	; 0x94
 8006abe:	3d10      	subs	r5, #16
 8006ac0:	460c      	mov	r4, r1
 8006ac2:	e72c      	b.n	800691e <_svfprintf_r+0x1016>
 8006ac4:	9a05      	ldr	r2, [sp, #20]
 8006ac6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006ac8:	2a01      	cmp	r2, #1
 8006aca:	9a03      	ldr	r2, [sp, #12]
 8006acc:	6022      	str	r2, [r4, #0]
 8006ace:	f107 0701 	add.w	r7, r7, #1
 8006ad2:	f103 0301 	add.w	r3, r3, #1
 8006ad6:	f04f 0201 	mov.w	r2, #1
 8006ada:	e9cd 3723 	strd	r3, r7, [sp, #140]	; 0x8c
 8006ade:	f104 0508 	add.w	r5, r4, #8
 8006ae2:	6062      	str	r2, [r4, #4]
 8006ae4:	dc02      	bgt.n	8006aec <_svfprintf_r+0x11e4>
 8006ae6:	f01b 0f01 	tst.w	fp, #1
 8006aea:	d07b      	beq.n	8006be4 <_svfprintf_r+0x12dc>
 8006aec:	2b07      	cmp	r3, #7
 8006aee:	dd08      	ble.n	8006b02 <_svfprintf_r+0x11fa>
 8006af0:	aa22      	add	r2, sp, #136	; 0x88
 8006af2:	4649      	mov	r1, r9
 8006af4:	4650      	mov	r0, sl
 8006af6:	f001 fc2f 	bl	8008358 <__ssprint_r>
 8006afa:	2800      	cmp	r0, #0
 8006afc:	f040 8098 	bne.w	8006c30 <_svfprintf_r+0x1328>
 8006b00:	ad25      	add	r5, sp, #148	; 0x94
 8006b02:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006b04:	602b      	str	r3, [r5, #0]
 8006b06:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006b08:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006b0a:	606b      	str	r3, [r5, #4]
 8006b0c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8006b0e:	4413      	add	r3, r2
 8006b10:	9324      	str	r3, [sp, #144]	; 0x90
 8006b12:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006b14:	3301      	adds	r3, #1
 8006b16:	2b07      	cmp	r3, #7
 8006b18:	9323      	str	r3, [sp, #140]	; 0x8c
 8006b1a:	dc32      	bgt.n	8006b82 <_svfprintf_r+0x127a>
 8006b1c:	3508      	adds	r5, #8
 8006b1e:	9b05      	ldr	r3, [sp, #20]
 8006b20:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006b24:	1e5c      	subs	r4, r3, #1
 8006b26:	2200      	movs	r2, #0
 8006b28:	2300      	movs	r3, #0
 8006b2a:	e9dd 7623 	ldrd	r7, r6, [sp, #140]	; 0x8c
 8006b2e:	f7f9 fff3 	bl	8000b18 <__aeabi_dcmpeq>
 8006b32:	2800      	cmp	r0, #0
 8006b34:	d12e      	bne.n	8006b94 <_svfprintf_r+0x128c>
 8006b36:	9b03      	ldr	r3, [sp, #12]
 8006b38:	3301      	adds	r3, #1
 8006b3a:	e9c5 3400 	strd	r3, r4, [r5]
 8006b3e:	9b05      	ldr	r3, [sp, #20]
 8006b40:	3701      	adds	r7, #1
 8006b42:	3e01      	subs	r6, #1
 8006b44:	441e      	add	r6, r3
 8006b46:	2f07      	cmp	r7, #7
 8006b48:	e9cd 7623 	strd	r7, r6, [sp, #140]	; 0x8c
 8006b4c:	dd4d      	ble.n	8006bea <_svfprintf_r+0x12e2>
 8006b4e:	aa22      	add	r2, sp, #136	; 0x88
 8006b50:	4649      	mov	r1, r9
 8006b52:	4650      	mov	r0, sl
 8006b54:	f001 fc00 	bl	8008358 <__ssprint_r>
 8006b58:	2800      	cmp	r0, #0
 8006b5a:	d169      	bne.n	8006c30 <_svfprintf_r+0x1328>
 8006b5c:	ad25      	add	r5, sp, #148	; 0x94
 8006b5e:	ab1e      	add	r3, sp, #120	; 0x78
 8006b60:	602b      	str	r3, [r5, #0]
 8006b62:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006b64:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8006b66:	606b      	str	r3, [r5, #4]
 8006b68:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8006b6a:	4413      	add	r3, r2
 8006b6c:	9324      	str	r3, [sp, #144]	; 0x90
 8006b6e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006b70:	3301      	adds	r3, #1
 8006b72:	2b07      	cmp	r3, #7
 8006b74:	9323      	str	r3, [sp, #140]	; 0x8c
 8006b76:	f73f adac 	bgt.w	80066d2 <_svfprintf_r+0xdca>
 8006b7a:	f105 0408 	add.w	r4, r5, #8
 8006b7e:	f7ff baa6 	b.w	80060ce <_svfprintf_r+0x7c6>
 8006b82:	aa22      	add	r2, sp, #136	; 0x88
 8006b84:	4649      	mov	r1, r9
 8006b86:	4650      	mov	r0, sl
 8006b88:	f001 fbe6 	bl	8008358 <__ssprint_r>
 8006b8c:	2800      	cmp	r0, #0
 8006b8e:	d14f      	bne.n	8006c30 <_svfprintf_r+0x1328>
 8006b90:	ad25      	add	r5, sp, #148	; 0x94
 8006b92:	e7c4      	b.n	8006b1e <_svfprintf_r+0x1216>
 8006b94:	2c00      	cmp	r4, #0
 8006b96:	dde2      	ble.n	8006b5e <_svfprintf_r+0x1256>
 8006b98:	4e09      	ldr	r6, [pc, #36]	; (8006bc0 <_svfprintf_r+0x12b8>)
 8006b9a:	2710      	movs	r7, #16
 8006b9c:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 8006ba0:	2c10      	cmp	r4, #16
 8006ba2:	f103 0301 	add.w	r3, r3, #1
 8006ba6:	f105 0108 	add.w	r1, r5, #8
 8006baa:	602e      	str	r6, [r5, #0]
 8006bac:	dc0a      	bgt.n	8006bc4 <_svfprintf_r+0x12bc>
 8006bae:	606c      	str	r4, [r5, #4]
 8006bb0:	2b07      	cmp	r3, #7
 8006bb2:	4414      	add	r4, r2
 8006bb4:	e9cd 3423 	strd	r3, r4, [sp, #140]	; 0x8c
 8006bb8:	dcc9      	bgt.n	8006b4e <_svfprintf_r+0x1246>
 8006bba:	460d      	mov	r5, r1
 8006bbc:	e7cf      	b.n	8006b5e <_svfprintf_r+0x1256>
 8006bbe:	bf00      	nop
 8006bc0:	08009a94 	.word	0x08009a94
 8006bc4:	3210      	adds	r2, #16
 8006bc6:	2b07      	cmp	r3, #7
 8006bc8:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 8006bcc:	606f      	str	r7, [r5, #4]
 8006bce:	dd06      	ble.n	8006bde <_svfprintf_r+0x12d6>
 8006bd0:	aa22      	add	r2, sp, #136	; 0x88
 8006bd2:	4649      	mov	r1, r9
 8006bd4:	4650      	mov	r0, sl
 8006bd6:	f001 fbbf 	bl	8008358 <__ssprint_r>
 8006bda:	bb48      	cbnz	r0, 8006c30 <_svfprintf_r+0x1328>
 8006bdc:	a925      	add	r1, sp, #148	; 0x94
 8006bde:	3c10      	subs	r4, #16
 8006be0:	460d      	mov	r5, r1
 8006be2:	e7db      	b.n	8006b9c <_svfprintf_r+0x1294>
 8006be4:	2b07      	cmp	r3, #7
 8006be6:	ddba      	ble.n	8006b5e <_svfprintf_r+0x1256>
 8006be8:	e7b1      	b.n	8006b4e <_svfprintf_r+0x1246>
 8006bea:	3508      	adds	r5, #8
 8006bec:	e7b7      	b.n	8006b5e <_svfprintf_r+0x1256>
 8006bee:	460c      	mov	r4, r1
 8006bf0:	f7ff ba6d 	b.w	80060ce <_svfprintf_r+0x7c6>
 8006bf4:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	; 0x3c
 8006bf8:	1a9d      	subs	r5, r3, r2
 8006bfa:	2d00      	cmp	r5, #0
 8006bfc:	f77f aa6b 	ble.w	80060d6 <_svfprintf_r+0x7ce>
 8006c00:	4e37      	ldr	r6, [pc, #220]	; (8006ce0 <_svfprintf_r+0x13d8>)
 8006c02:	2710      	movs	r7, #16
 8006c04:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 8006c08:	2d10      	cmp	r5, #16
 8006c0a:	f103 0301 	add.w	r3, r3, #1
 8006c0e:	6026      	str	r6, [r4, #0]
 8006c10:	dc18      	bgt.n	8006c44 <_svfprintf_r+0x133c>
 8006c12:	6065      	str	r5, [r4, #4]
 8006c14:	2b07      	cmp	r3, #7
 8006c16:	4415      	add	r5, r2
 8006c18:	e9cd 3523 	strd	r3, r5, [sp, #140]	; 0x8c
 8006c1c:	f77f aa5b 	ble.w	80060d6 <_svfprintf_r+0x7ce>
 8006c20:	aa22      	add	r2, sp, #136	; 0x88
 8006c22:	4649      	mov	r1, r9
 8006c24:	4650      	mov	r0, sl
 8006c26:	f001 fb97 	bl	8008358 <__ssprint_r>
 8006c2a:	2800      	cmp	r0, #0
 8006c2c:	f43f aa53 	beq.w	80060d6 <_svfprintf_r+0x7ce>
 8006c30:	9b04      	ldr	r3, [sp, #16]
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	f43f a874 	beq.w	8005d20 <_svfprintf_r+0x418>
 8006c38:	4619      	mov	r1, r3
 8006c3a:	4650      	mov	r0, sl
 8006c3c:	f7fe fda4 	bl	8005788 <_free_r>
 8006c40:	f7ff b86e 	b.w	8005d20 <_svfprintf_r+0x418>
 8006c44:	3210      	adds	r2, #16
 8006c46:	2b07      	cmp	r3, #7
 8006c48:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 8006c4c:	6067      	str	r7, [r4, #4]
 8006c4e:	dc02      	bgt.n	8006c56 <_svfprintf_r+0x134e>
 8006c50:	3408      	adds	r4, #8
 8006c52:	3d10      	subs	r5, #16
 8006c54:	e7d6      	b.n	8006c04 <_svfprintf_r+0x12fc>
 8006c56:	aa22      	add	r2, sp, #136	; 0x88
 8006c58:	4649      	mov	r1, r9
 8006c5a:	4650      	mov	r0, sl
 8006c5c:	f001 fb7c 	bl	8008358 <__ssprint_r>
 8006c60:	2800      	cmp	r0, #0
 8006c62:	d1e5      	bne.n	8006c30 <_svfprintf_r+0x1328>
 8006c64:	ac25      	add	r4, sp, #148	; 0x94
 8006c66:	e7f4      	b.n	8006c52 <_svfprintf_r+0x134a>
 8006c68:	9904      	ldr	r1, [sp, #16]
 8006c6a:	4650      	mov	r0, sl
 8006c6c:	f7fe fd8c 	bl	8005788 <_free_r>
 8006c70:	f7ff ba49 	b.w	8006106 <_svfprintf_r+0x7fe>
 8006c74:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	f43f a852 	beq.w	8005d20 <_svfprintf_r+0x418>
 8006c7c:	aa22      	add	r2, sp, #136	; 0x88
 8006c7e:	4649      	mov	r1, r9
 8006c80:	4650      	mov	r0, sl
 8006c82:	f001 fb69 	bl	8008358 <__ssprint_r>
 8006c86:	f7ff b84b 	b.w	8005d20 <_svfprintf_r+0x418>
 8006c8a:	ea55 0206 	orrs.w	r2, r5, r6
 8006c8e:	f8cd b010 	str.w	fp, [sp, #16]
 8006c92:	f43f ab5e 	beq.w	8006352 <_svfprintf_r+0xa4a>
 8006c96:	2b01      	cmp	r3, #1
 8006c98:	f43f abff 	beq.w	800649a <_svfprintf_r+0xb92>
 8006c9c:	2b02      	cmp	r3, #2
 8006c9e:	ab4e      	add	r3, sp, #312	; 0x138
 8006ca0:	9303      	str	r3, [sp, #12]
 8006ca2:	f43f ac4d 	beq.w	8006540 <_svfprintf_r+0xc38>
 8006ca6:	9a03      	ldr	r2, [sp, #12]
 8006ca8:	f005 0307 	and.w	r3, r5, #7
 8006cac:	4611      	mov	r1, r2
 8006cae:	3330      	adds	r3, #48	; 0x30
 8006cb0:	f801 3d01 	strb.w	r3, [r1, #-1]!
 8006cb4:	08ed      	lsrs	r5, r5, #3
 8006cb6:	ea45 7546 	orr.w	r5, r5, r6, lsl #29
 8006cba:	08f6      	lsrs	r6, r6, #3
 8006cbc:	9103      	str	r1, [sp, #12]
 8006cbe:	ea55 0106 	orrs.w	r1, r5, r6
 8006cc2:	d1f0      	bne.n	8006ca6 <_svfprintf_r+0x139e>
 8006cc4:	9904      	ldr	r1, [sp, #16]
 8006cc6:	07c9      	lsls	r1, r1, #31
 8006cc8:	f57f ac2a 	bpl.w	8006520 <_svfprintf_r+0xc18>
 8006ccc:	2b30      	cmp	r3, #48	; 0x30
 8006cce:	f43f ac27 	beq.w	8006520 <_svfprintf_r+0xc18>
 8006cd2:	9903      	ldr	r1, [sp, #12]
 8006cd4:	2330      	movs	r3, #48	; 0x30
 8006cd6:	f801 3c01 	strb.w	r3, [r1, #-1]
 8006cda:	1e93      	subs	r3, r2, #2
 8006cdc:	9303      	str	r3, [sp, #12]
 8006cde:	e41f      	b.n	8006520 <_svfprintf_r+0xc18>
 8006ce0:	08009a84 	.word	0x08009a84

08006ce4 <_fclose_r>:
 8006ce4:	b570      	push	{r4, r5, r6, lr}
 8006ce6:	4606      	mov	r6, r0
 8006ce8:	460c      	mov	r4, r1
 8006cea:	b911      	cbnz	r1, 8006cf2 <_fclose_r+0xe>
 8006cec:	2500      	movs	r5, #0
 8006cee:	4628      	mov	r0, r5
 8006cf0:	bd70      	pop	{r4, r5, r6, pc}
 8006cf2:	b118      	cbz	r0, 8006cfc <_fclose_r+0x18>
 8006cf4:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8006cf6:	b90b      	cbnz	r3, 8006cfc <_fclose_r+0x18>
 8006cf8:	f7fe fbb0 	bl	800545c <__sinit>
 8006cfc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006cfe:	07d8      	lsls	r0, r3, #31
 8006d00:	d405      	bmi.n	8006d0e <_fclose_r+0x2a>
 8006d02:	89a3      	ldrh	r3, [r4, #12]
 8006d04:	0599      	lsls	r1, r3, #22
 8006d06:	d402      	bmi.n	8006d0e <_fclose_r+0x2a>
 8006d08:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006d0a:	f7fe fccb 	bl	80056a4 <__retarget_lock_acquire_recursive>
 8006d0e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006d12:	b93b      	cbnz	r3, 8006d24 <_fclose_r+0x40>
 8006d14:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8006d16:	f015 0501 	ands.w	r5, r5, #1
 8006d1a:	d1e7      	bne.n	8006cec <_fclose_r+0x8>
 8006d1c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006d1e:	f7fe fcc2 	bl	80056a6 <__retarget_lock_release_recursive>
 8006d22:	e7e4      	b.n	8006cee <_fclose_r+0xa>
 8006d24:	4621      	mov	r1, r4
 8006d26:	4630      	mov	r0, r6
 8006d28:	f000 f834 	bl	8006d94 <__sflush_r>
 8006d2c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8006d2e:	4605      	mov	r5, r0
 8006d30:	b133      	cbz	r3, 8006d40 <_fclose_r+0x5c>
 8006d32:	69e1      	ldr	r1, [r4, #28]
 8006d34:	4630      	mov	r0, r6
 8006d36:	4798      	blx	r3
 8006d38:	2800      	cmp	r0, #0
 8006d3a:	bfb8      	it	lt
 8006d3c:	f04f 35ff 	movlt.w	r5, #4294967295	; 0xffffffff
 8006d40:	89a3      	ldrh	r3, [r4, #12]
 8006d42:	061a      	lsls	r2, r3, #24
 8006d44:	d503      	bpl.n	8006d4e <_fclose_r+0x6a>
 8006d46:	6921      	ldr	r1, [r4, #16]
 8006d48:	4630      	mov	r0, r6
 8006d4a:	f7fe fd1d 	bl	8005788 <_free_r>
 8006d4e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8006d50:	b141      	cbz	r1, 8006d64 <_fclose_r+0x80>
 8006d52:	f104 0340 	add.w	r3, r4, #64	; 0x40
 8006d56:	4299      	cmp	r1, r3
 8006d58:	d002      	beq.n	8006d60 <_fclose_r+0x7c>
 8006d5a:	4630      	mov	r0, r6
 8006d5c:	f7fe fd14 	bl	8005788 <_free_r>
 8006d60:	2300      	movs	r3, #0
 8006d62:	6323      	str	r3, [r4, #48]	; 0x30
 8006d64:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8006d66:	b121      	cbz	r1, 8006d72 <_fclose_r+0x8e>
 8006d68:	4630      	mov	r0, r6
 8006d6a:	f7fe fd0d 	bl	8005788 <_free_r>
 8006d6e:	2300      	movs	r3, #0
 8006d70:	6463      	str	r3, [r4, #68]	; 0x44
 8006d72:	f7fe fb67 	bl	8005444 <__sfp_lock_acquire>
 8006d76:	2300      	movs	r3, #0
 8006d78:	81a3      	strh	r3, [r4, #12]
 8006d7a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006d7c:	07db      	lsls	r3, r3, #31
 8006d7e:	d402      	bmi.n	8006d86 <_fclose_r+0xa2>
 8006d80:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006d82:	f7fe fc90 	bl	80056a6 <__retarget_lock_release_recursive>
 8006d86:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006d88:	f7fe fc8b 	bl	80056a2 <__retarget_lock_close_recursive>
 8006d8c:	f7fe fb60 	bl	8005450 <__sfp_lock_release>
 8006d90:	e7ad      	b.n	8006cee <_fclose_r+0xa>
	...

08006d94 <__sflush_r>:
 8006d94:	898b      	ldrh	r3, [r1, #12]
 8006d96:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006d9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d9e:	4605      	mov	r5, r0
 8006da0:	0718      	lsls	r0, r3, #28
 8006da2:	460c      	mov	r4, r1
 8006da4:	d45f      	bmi.n	8006e66 <__sflush_r+0xd2>
 8006da6:	684b      	ldr	r3, [r1, #4]
 8006da8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	818a      	strh	r2, [r1, #12]
 8006db0:	dc05      	bgt.n	8006dbe <__sflush_r+0x2a>
 8006db2:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	dc02      	bgt.n	8006dbe <__sflush_r+0x2a>
 8006db8:	2000      	movs	r0, #0
 8006dba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006dbe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006dc0:	2e00      	cmp	r6, #0
 8006dc2:	d0f9      	beq.n	8006db8 <__sflush_r+0x24>
 8006dc4:	2300      	movs	r3, #0
 8006dc6:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006dca:	682f      	ldr	r7, [r5, #0]
 8006dcc:	69e1      	ldr	r1, [r4, #28]
 8006dce:	602b      	str	r3, [r5, #0]
 8006dd0:	d036      	beq.n	8006e40 <__sflush_r+0xac>
 8006dd2:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8006dd4:	89a3      	ldrh	r3, [r4, #12]
 8006dd6:	075a      	lsls	r2, r3, #29
 8006dd8:	d505      	bpl.n	8006de6 <__sflush_r+0x52>
 8006dda:	6863      	ldr	r3, [r4, #4]
 8006ddc:	1ac0      	subs	r0, r0, r3
 8006dde:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8006de0:	b10b      	cbz	r3, 8006de6 <__sflush_r+0x52>
 8006de2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8006de4:	1ac0      	subs	r0, r0, r3
 8006de6:	2300      	movs	r3, #0
 8006de8:	4602      	mov	r2, r0
 8006dea:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006dec:	69e1      	ldr	r1, [r4, #28]
 8006dee:	4628      	mov	r0, r5
 8006df0:	47b0      	blx	r6
 8006df2:	1c43      	adds	r3, r0, #1
 8006df4:	89a3      	ldrh	r3, [r4, #12]
 8006df6:	d106      	bne.n	8006e06 <__sflush_r+0x72>
 8006df8:	6829      	ldr	r1, [r5, #0]
 8006dfa:	291d      	cmp	r1, #29
 8006dfc:	d82f      	bhi.n	8006e5e <__sflush_r+0xca>
 8006dfe:	4a2b      	ldr	r2, [pc, #172]	; (8006eac <__sflush_r+0x118>)
 8006e00:	410a      	asrs	r2, r1
 8006e02:	07d6      	lsls	r6, r2, #31
 8006e04:	d42b      	bmi.n	8006e5e <__sflush_r+0xca>
 8006e06:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006e0a:	b21b      	sxth	r3, r3
 8006e0c:	2200      	movs	r2, #0
 8006e0e:	6062      	str	r2, [r4, #4]
 8006e10:	04d9      	lsls	r1, r3, #19
 8006e12:	6922      	ldr	r2, [r4, #16]
 8006e14:	81a3      	strh	r3, [r4, #12]
 8006e16:	6022      	str	r2, [r4, #0]
 8006e18:	d504      	bpl.n	8006e24 <__sflush_r+0x90>
 8006e1a:	1c42      	adds	r2, r0, #1
 8006e1c:	d101      	bne.n	8006e22 <__sflush_r+0x8e>
 8006e1e:	682b      	ldr	r3, [r5, #0]
 8006e20:	b903      	cbnz	r3, 8006e24 <__sflush_r+0x90>
 8006e22:	6520      	str	r0, [r4, #80]	; 0x50
 8006e24:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8006e26:	602f      	str	r7, [r5, #0]
 8006e28:	2900      	cmp	r1, #0
 8006e2a:	d0c5      	beq.n	8006db8 <__sflush_r+0x24>
 8006e2c:	f104 0340 	add.w	r3, r4, #64	; 0x40
 8006e30:	4299      	cmp	r1, r3
 8006e32:	d002      	beq.n	8006e3a <__sflush_r+0xa6>
 8006e34:	4628      	mov	r0, r5
 8006e36:	f7fe fca7 	bl	8005788 <_free_r>
 8006e3a:	2000      	movs	r0, #0
 8006e3c:	6320      	str	r0, [r4, #48]	; 0x30
 8006e3e:	e7bc      	b.n	8006dba <__sflush_r+0x26>
 8006e40:	2301      	movs	r3, #1
 8006e42:	4628      	mov	r0, r5
 8006e44:	47b0      	blx	r6
 8006e46:	1c41      	adds	r1, r0, #1
 8006e48:	d1c4      	bne.n	8006dd4 <__sflush_r+0x40>
 8006e4a:	682b      	ldr	r3, [r5, #0]
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d0c1      	beq.n	8006dd4 <__sflush_r+0x40>
 8006e50:	2b1d      	cmp	r3, #29
 8006e52:	d001      	beq.n	8006e58 <__sflush_r+0xc4>
 8006e54:	2b16      	cmp	r3, #22
 8006e56:	d101      	bne.n	8006e5c <__sflush_r+0xc8>
 8006e58:	602f      	str	r7, [r5, #0]
 8006e5a:	e7ad      	b.n	8006db8 <__sflush_r+0x24>
 8006e5c:	89a3      	ldrh	r3, [r4, #12]
 8006e5e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006e62:	81a3      	strh	r3, [r4, #12]
 8006e64:	e7a9      	b.n	8006dba <__sflush_r+0x26>
 8006e66:	690f      	ldr	r7, [r1, #16]
 8006e68:	2f00      	cmp	r7, #0
 8006e6a:	d0a5      	beq.n	8006db8 <__sflush_r+0x24>
 8006e6c:	079b      	lsls	r3, r3, #30
 8006e6e:	680e      	ldr	r6, [r1, #0]
 8006e70:	bf08      	it	eq
 8006e72:	694b      	ldreq	r3, [r1, #20]
 8006e74:	600f      	str	r7, [r1, #0]
 8006e76:	bf18      	it	ne
 8006e78:	2300      	movne	r3, #0
 8006e7a:	eba6 0807 	sub.w	r8, r6, r7
 8006e7e:	608b      	str	r3, [r1, #8]
 8006e80:	f1b8 0f00 	cmp.w	r8, #0
 8006e84:	dd98      	ble.n	8006db8 <__sflush_r+0x24>
 8006e86:	69e1      	ldr	r1, [r4, #28]
 8006e88:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006e8a:	4643      	mov	r3, r8
 8006e8c:	463a      	mov	r2, r7
 8006e8e:	4628      	mov	r0, r5
 8006e90:	47b0      	blx	r6
 8006e92:	2800      	cmp	r0, #0
 8006e94:	dc06      	bgt.n	8006ea4 <__sflush_r+0x110>
 8006e96:	89a3      	ldrh	r3, [r4, #12]
 8006e98:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006e9c:	81a3      	strh	r3, [r4, #12]
 8006e9e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006ea2:	e78a      	b.n	8006dba <__sflush_r+0x26>
 8006ea4:	4407      	add	r7, r0
 8006ea6:	eba8 0800 	sub.w	r8, r8, r0
 8006eaa:	e7e9      	b.n	8006e80 <__sflush_r+0xec>
 8006eac:	dfbffffe 	.word	0xdfbffffe

08006eb0 <_fflush_r>:
 8006eb0:	b538      	push	{r3, r4, r5, lr}
 8006eb2:	460c      	mov	r4, r1
 8006eb4:	4605      	mov	r5, r0
 8006eb6:	b118      	cbz	r0, 8006ec0 <_fflush_r+0x10>
 8006eb8:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8006eba:	b90b      	cbnz	r3, 8006ec0 <_fflush_r+0x10>
 8006ebc:	f7fe face 	bl	800545c <__sinit>
 8006ec0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006ec4:	b1bb      	cbz	r3, 8006ef6 <_fflush_r+0x46>
 8006ec6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006ec8:	07d0      	lsls	r0, r2, #31
 8006eca:	d404      	bmi.n	8006ed6 <_fflush_r+0x26>
 8006ecc:	0599      	lsls	r1, r3, #22
 8006ece:	d402      	bmi.n	8006ed6 <_fflush_r+0x26>
 8006ed0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006ed2:	f7fe fbe7 	bl	80056a4 <__retarget_lock_acquire_recursive>
 8006ed6:	4628      	mov	r0, r5
 8006ed8:	4621      	mov	r1, r4
 8006eda:	f7ff ff5b 	bl	8006d94 <__sflush_r>
 8006ede:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006ee0:	07da      	lsls	r2, r3, #31
 8006ee2:	4605      	mov	r5, r0
 8006ee4:	d405      	bmi.n	8006ef2 <_fflush_r+0x42>
 8006ee6:	89a3      	ldrh	r3, [r4, #12]
 8006ee8:	059b      	lsls	r3, r3, #22
 8006eea:	d402      	bmi.n	8006ef2 <_fflush_r+0x42>
 8006eec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006eee:	f7fe fbda 	bl	80056a6 <__retarget_lock_release_recursive>
 8006ef2:	4628      	mov	r0, r5
 8006ef4:	bd38      	pop	{r3, r4, r5, pc}
 8006ef6:	461d      	mov	r5, r3
 8006ef8:	e7fb      	b.n	8006ef2 <_fflush_r+0x42>

08006efa <strncpy>:
 8006efa:	b510      	push	{r4, lr}
 8006efc:	3901      	subs	r1, #1
 8006efe:	4603      	mov	r3, r0
 8006f00:	b132      	cbz	r2, 8006f10 <strncpy+0x16>
 8006f02:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8006f06:	f803 4b01 	strb.w	r4, [r3], #1
 8006f0a:	3a01      	subs	r2, #1
 8006f0c:	2c00      	cmp	r4, #0
 8006f0e:	d1f7      	bne.n	8006f00 <strncpy+0x6>
 8006f10:	441a      	add	r2, r3
 8006f12:	2100      	movs	r1, #0
 8006f14:	4293      	cmp	r3, r2
 8006f16:	d100      	bne.n	8006f1a <strncpy+0x20>
 8006f18:	bd10      	pop	{r4, pc}
 8006f1a:	f803 1b01 	strb.w	r1, [r3], #1
 8006f1e:	e7f9      	b.n	8006f14 <strncpy+0x1a>

08006f20 <_localeconv_r>:
 8006f20:	4800      	ldr	r0, [pc, #0]	; (8006f24 <_localeconv_r+0x4>)
 8006f22:	4770      	bx	lr
 8006f24:	20000640 	.word	0x20000640

08006f28 <__libc_fini_array>:
 8006f28:	b538      	push	{r3, r4, r5, lr}
 8006f2a:	4d07      	ldr	r5, [pc, #28]	; (8006f48 <__libc_fini_array+0x20>)
 8006f2c:	4c07      	ldr	r4, [pc, #28]	; (8006f4c <__libc_fini_array+0x24>)
 8006f2e:	1b64      	subs	r4, r4, r5
 8006f30:	10a4      	asrs	r4, r4, #2
 8006f32:	b91c      	cbnz	r4, 8006f3c <__libc_fini_array+0x14>
 8006f34:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006f38:	f002 bd30 	b.w	800999c <_fini>
 8006f3c:	3c01      	subs	r4, #1
 8006f3e:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 8006f42:	4798      	blx	r3
 8006f44:	e7f5      	b.n	8006f32 <__libc_fini_array+0xa>
 8006f46:	bf00      	nop
 8006f48:	08009dec 	.word	0x08009dec
 8006f4c:	08009df0 	.word	0x08009df0

08006f50 <frexp>:
 8006f50:	b570      	push	{r4, r5, r6, lr}
 8006f52:	2100      	movs	r1, #0
 8006f54:	ec55 4b10 	vmov	r4, r5, d0
 8006f58:	6001      	str	r1, [r0, #0]
 8006f5a:	4916      	ldr	r1, [pc, #88]	; (8006fb4 <frexp+0x64>)
 8006f5c:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
 8006f60:	428a      	cmp	r2, r1
 8006f62:	4606      	mov	r6, r0
 8006f64:	462b      	mov	r3, r5
 8006f66:	dc22      	bgt.n	8006fae <frexp+0x5e>
 8006f68:	ee10 1a10 	vmov	r1, s0
 8006f6c:	4311      	orrs	r1, r2
 8006f6e:	d01e      	beq.n	8006fae <frexp+0x5e>
 8006f70:	4911      	ldr	r1, [pc, #68]	; (8006fb8 <frexp+0x68>)
 8006f72:	4029      	ands	r1, r5
 8006f74:	b969      	cbnz	r1, 8006f92 <frexp+0x42>
 8006f76:	4b11      	ldr	r3, [pc, #68]	; (8006fbc <frexp+0x6c>)
 8006f78:	2200      	movs	r2, #0
 8006f7a:	ee10 0a10 	vmov	r0, s0
 8006f7e:	4629      	mov	r1, r5
 8006f80:	f7f9 fb62 	bl	8000648 <__aeabi_dmul>
 8006f84:	460b      	mov	r3, r1
 8006f86:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8006f8a:	f06f 0135 	mvn.w	r1, #53	; 0x35
 8006f8e:	4604      	mov	r4, r0
 8006f90:	6031      	str	r1, [r6, #0]
 8006f92:	6831      	ldr	r1, [r6, #0]
 8006f94:	1512      	asrs	r2, r2, #20
 8006f96:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8006f9a:	f2a2 32fe 	subw	r2, r2, #1022	; 0x3fe
 8006f9e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006fa2:	4411      	add	r1, r2
 8006fa4:	f043 557f 	orr.w	r5, r3, #1069547520	; 0x3fc00000
 8006fa8:	6031      	str	r1, [r6, #0]
 8006faa:	f445 1500 	orr.w	r5, r5, #2097152	; 0x200000
 8006fae:	ec45 4b10 	vmov	d0, r4, r5
 8006fb2:	bd70      	pop	{r4, r5, r6, pc}
 8006fb4:	7fefffff 	.word	0x7fefffff
 8006fb8:	7ff00000 	.word	0x7ff00000
 8006fbc:	43500000 	.word	0x43500000

08006fc0 <__register_exitproc>:
 8006fc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006fc4:	f8df a074 	ldr.w	sl, [pc, #116]	; 800703c <__register_exitproc+0x7c>
 8006fc8:	4606      	mov	r6, r0
 8006fca:	f8da 0000 	ldr.w	r0, [sl]
 8006fce:	4698      	mov	r8, r3
 8006fd0:	460f      	mov	r7, r1
 8006fd2:	4691      	mov	r9, r2
 8006fd4:	f7fe fb66 	bl	80056a4 <__retarget_lock_acquire_recursive>
 8006fd8:	4b16      	ldr	r3, [pc, #88]	; (8007034 <__register_exitproc+0x74>)
 8006fda:	681c      	ldr	r4, [r3, #0]
 8006fdc:	b90c      	cbnz	r4, 8006fe2 <__register_exitproc+0x22>
 8006fde:	4c16      	ldr	r4, [pc, #88]	; (8007038 <__register_exitproc+0x78>)
 8006fe0:	601c      	str	r4, [r3, #0]
 8006fe2:	6865      	ldr	r5, [r4, #4]
 8006fe4:	f8da 0000 	ldr.w	r0, [sl]
 8006fe8:	2d1f      	cmp	r5, #31
 8006fea:	dd05      	ble.n	8006ff8 <__register_exitproc+0x38>
 8006fec:	f7fe fb5b 	bl	80056a6 <__retarget_lock_release_recursive>
 8006ff0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006ff4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ff8:	b19e      	cbz	r6, 8007022 <__register_exitproc+0x62>
 8006ffa:	eb04 0185 	add.w	r1, r4, r5, lsl #2
 8006ffe:	2201      	movs	r2, #1
 8007000:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
 8007004:	f8d4 3188 	ldr.w	r3, [r4, #392]	; 0x188
 8007008:	40aa      	lsls	r2, r5
 800700a:	4313      	orrs	r3, r2
 800700c:	f8c4 3188 	str.w	r3, [r4, #392]	; 0x188
 8007010:	2e02      	cmp	r6, #2
 8007012:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
 8007016:	bf02      	ittt	eq
 8007018:	f8d4 318c 	ldreq.w	r3, [r4, #396]	; 0x18c
 800701c:	4313      	orreq	r3, r2
 800701e:	f8c4 318c 	streq.w	r3, [r4, #396]	; 0x18c
 8007022:	1c6b      	adds	r3, r5, #1
 8007024:	3502      	adds	r5, #2
 8007026:	6063      	str	r3, [r4, #4]
 8007028:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
 800702c:	f7fe fb3b 	bl	80056a6 <__retarget_lock_release_recursive>
 8007030:	2000      	movs	r0, #0
 8007032:	e7df      	b.n	8006ff4 <__register_exitproc+0x34>
 8007034:	20000c60 	.word	0x20000c60
 8007038:	20000c64 	.word	0x20000c64
 800703c:	2000054c 	.word	0x2000054c

08007040 <quorem>:
 8007040:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007044:	6903      	ldr	r3, [r0, #16]
 8007046:	690c      	ldr	r4, [r1, #16]
 8007048:	42a3      	cmp	r3, r4
 800704a:	4607      	mov	r7, r0
 800704c:	db7e      	blt.n	800714c <quorem+0x10c>
 800704e:	3c01      	subs	r4, #1
 8007050:	f101 0814 	add.w	r8, r1, #20
 8007054:	f100 0514 	add.w	r5, r0, #20
 8007058:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800705c:	9301      	str	r3, [sp, #4]
 800705e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007062:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007066:	3301      	adds	r3, #1
 8007068:	429a      	cmp	r2, r3
 800706a:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800706e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007072:	fbb2 f6f3 	udiv	r6, r2, r3
 8007076:	d331      	bcc.n	80070dc <quorem+0x9c>
 8007078:	f04f 0e00 	mov.w	lr, #0
 800707c:	4640      	mov	r0, r8
 800707e:	46ac      	mov	ip, r5
 8007080:	46f2      	mov	sl, lr
 8007082:	f850 2b04 	ldr.w	r2, [r0], #4
 8007086:	b293      	uxth	r3, r2
 8007088:	fb06 e303 	mla	r3, r6, r3, lr
 800708c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007090:	0c1a      	lsrs	r2, r3, #16
 8007092:	b29b      	uxth	r3, r3
 8007094:	ebaa 0303 	sub.w	r3, sl, r3
 8007098:	f8dc a000 	ldr.w	sl, [ip]
 800709c:	fa13 f38a 	uxtah	r3, r3, sl
 80070a0:	fb06 220e 	mla	r2, r6, lr, r2
 80070a4:	9300      	str	r3, [sp, #0]
 80070a6:	9b00      	ldr	r3, [sp, #0]
 80070a8:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80070ac:	b292      	uxth	r2, r2
 80070ae:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80070b2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80070b6:	f8bd 3000 	ldrh.w	r3, [sp]
 80070ba:	4581      	cmp	r9, r0
 80070bc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80070c0:	f84c 3b04 	str.w	r3, [ip], #4
 80070c4:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80070c8:	d2db      	bcs.n	8007082 <quorem+0x42>
 80070ca:	f855 300b 	ldr.w	r3, [r5, fp]
 80070ce:	b92b      	cbnz	r3, 80070dc <quorem+0x9c>
 80070d0:	9b01      	ldr	r3, [sp, #4]
 80070d2:	3b04      	subs	r3, #4
 80070d4:	429d      	cmp	r5, r3
 80070d6:	461a      	mov	r2, r3
 80070d8:	d32c      	bcc.n	8007134 <quorem+0xf4>
 80070da:	613c      	str	r4, [r7, #16]
 80070dc:	4638      	mov	r0, r7
 80070de:	f001 f83b 	bl	8008158 <__mcmp>
 80070e2:	2800      	cmp	r0, #0
 80070e4:	db22      	blt.n	800712c <quorem+0xec>
 80070e6:	3601      	adds	r6, #1
 80070e8:	4629      	mov	r1, r5
 80070ea:	2000      	movs	r0, #0
 80070ec:	f858 2b04 	ldr.w	r2, [r8], #4
 80070f0:	f8d1 c000 	ldr.w	ip, [r1]
 80070f4:	b293      	uxth	r3, r2
 80070f6:	1ac3      	subs	r3, r0, r3
 80070f8:	0c12      	lsrs	r2, r2, #16
 80070fa:	fa13 f38c 	uxtah	r3, r3, ip
 80070fe:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8007102:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007106:	b29b      	uxth	r3, r3
 8007108:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800710c:	45c1      	cmp	r9, r8
 800710e:	f841 3b04 	str.w	r3, [r1], #4
 8007112:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007116:	d2e9      	bcs.n	80070ec <quorem+0xac>
 8007118:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800711c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007120:	b922      	cbnz	r2, 800712c <quorem+0xec>
 8007122:	3b04      	subs	r3, #4
 8007124:	429d      	cmp	r5, r3
 8007126:	461a      	mov	r2, r3
 8007128:	d30a      	bcc.n	8007140 <quorem+0x100>
 800712a:	613c      	str	r4, [r7, #16]
 800712c:	4630      	mov	r0, r6
 800712e:	b003      	add	sp, #12
 8007130:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007134:	6812      	ldr	r2, [r2, #0]
 8007136:	3b04      	subs	r3, #4
 8007138:	2a00      	cmp	r2, #0
 800713a:	d1ce      	bne.n	80070da <quorem+0x9a>
 800713c:	3c01      	subs	r4, #1
 800713e:	e7c9      	b.n	80070d4 <quorem+0x94>
 8007140:	6812      	ldr	r2, [r2, #0]
 8007142:	3b04      	subs	r3, #4
 8007144:	2a00      	cmp	r2, #0
 8007146:	d1f0      	bne.n	800712a <quorem+0xea>
 8007148:	3c01      	subs	r4, #1
 800714a:	e7eb      	b.n	8007124 <quorem+0xe4>
 800714c:	2000      	movs	r0, #0
 800714e:	e7ee      	b.n	800712e <quorem+0xee>

08007150 <_dtoa_r>:
 8007150:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007154:	ed2d 8b04 	vpush	{d8-d9}
 8007158:	b093      	sub	sp, #76	; 0x4c
 800715a:	ed8d 0b02 	vstr	d0, [sp, #8]
 800715e:	9107      	str	r1, [sp, #28]
 8007160:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8007162:	9d20      	ldr	r5, [sp, #128]	; 0x80
 8007164:	920a      	str	r2, [sp, #40]	; 0x28
 8007166:	ec57 6b10 	vmov	r6, r7, d0
 800716a:	4604      	mov	r4, r0
 800716c:	930d      	str	r3, [sp, #52]	; 0x34
 800716e:	b141      	cbz	r1, 8007182 <_dtoa_r+0x32>
 8007170:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8007172:	604a      	str	r2, [r1, #4]
 8007174:	2301      	movs	r3, #1
 8007176:	4093      	lsls	r3, r2
 8007178:	608b      	str	r3, [r1, #8]
 800717a:	f000 fde4 	bl	8007d46 <_Bfree>
 800717e:	2300      	movs	r3, #0
 8007180:	63a3      	str	r3, [r4, #56]	; 0x38
 8007182:	1e3b      	subs	r3, r7, #0
 8007184:	bfb9      	ittee	lt
 8007186:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800718a:	9303      	strlt	r3, [sp, #12]
 800718c:	2300      	movge	r3, #0
 800718e:	602b      	strge	r3, [r5, #0]
 8007190:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8007194:	4ba2      	ldr	r3, [pc, #648]	; (8007420 <_dtoa_r+0x2d0>)
 8007196:	bfbc      	itt	lt
 8007198:	2201      	movlt	r2, #1
 800719a:	602a      	strlt	r2, [r5, #0]
 800719c:	ea33 0308 	bics.w	r3, r3, r8
 80071a0:	d11b      	bne.n	80071da <_dtoa_r+0x8a>
 80071a2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80071a4:	f242 730f 	movw	r3, #9999	; 0x270f
 80071a8:	6013      	str	r3, [r2, #0]
 80071aa:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80071ae:	4333      	orrs	r3, r6
 80071b0:	f000 858f 	beq.w	8007cd2 <_dtoa_r+0xb82>
 80071b4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80071b6:	b90b      	cbnz	r3, 80071bc <_dtoa_r+0x6c>
 80071b8:	4b9a      	ldr	r3, [pc, #616]	; (8007424 <_dtoa_r+0x2d4>)
 80071ba:	e027      	b.n	800720c <_dtoa_r+0xbc>
 80071bc:	4b99      	ldr	r3, [pc, #612]	; (8007424 <_dtoa_r+0x2d4>)
 80071be:	9300      	str	r3, [sp, #0]
 80071c0:	3303      	adds	r3, #3
 80071c2:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80071c4:	6013      	str	r3, [r2, #0]
 80071c6:	9800      	ldr	r0, [sp, #0]
 80071c8:	b013      	add	sp, #76	; 0x4c
 80071ca:	ecbd 8b04 	vpop	{d8-d9}
 80071ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071d2:	4b95      	ldr	r3, [pc, #596]	; (8007428 <_dtoa_r+0x2d8>)
 80071d4:	9300      	str	r3, [sp, #0]
 80071d6:	3308      	adds	r3, #8
 80071d8:	e7f3      	b.n	80071c2 <_dtoa_r+0x72>
 80071da:	ed9d 7b02 	vldr	d7, [sp, #8]
 80071de:	2200      	movs	r2, #0
 80071e0:	ec51 0b17 	vmov	r0, r1, d7
 80071e4:	eeb0 8a47 	vmov.f32	s16, s14
 80071e8:	eef0 8a67 	vmov.f32	s17, s15
 80071ec:	2300      	movs	r3, #0
 80071ee:	f7f9 fc93 	bl	8000b18 <__aeabi_dcmpeq>
 80071f2:	4681      	mov	r9, r0
 80071f4:	b160      	cbz	r0, 8007210 <_dtoa_r+0xc0>
 80071f6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80071f8:	2301      	movs	r3, #1
 80071fa:	6013      	str	r3, [r2, #0]
 80071fc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80071fe:	2b00      	cmp	r3, #0
 8007200:	f000 8564 	beq.w	8007ccc <_dtoa_r+0xb7c>
 8007204:	4b89      	ldr	r3, [pc, #548]	; (800742c <_dtoa_r+0x2dc>)
 8007206:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007208:	6013      	str	r3, [r2, #0]
 800720a:	3b01      	subs	r3, #1
 800720c:	9300      	str	r3, [sp, #0]
 800720e:	e7da      	b.n	80071c6 <_dtoa_r+0x76>
 8007210:	aa10      	add	r2, sp, #64	; 0x40
 8007212:	a911      	add	r1, sp, #68	; 0x44
 8007214:	4620      	mov	r0, r4
 8007216:	eeb0 0a48 	vmov.f32	s0, s16
 800721a:	eef0 0a68 	vmov.f32	s1, s17
 800721e:	f001 f841 	bl	80082a4 <__d2b>
 8007222:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8007226:	4682      	mov	sl, r0
 8007228:	2d00      	cmp	r5, #0
 800722a:	d07e      	beq.n	800732a <_dtoa_r+0x1da>
 800722c:	ee18 3a90 	vmov	r3, s17
 8007230:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007234:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8007238:	ec51 0b18 	vmov	r0, r1, d8
 800723c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8007240:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007244:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8007248:	4619      	mov	r1, r3
 800724a:	2200      	movs	r2, #0
 800724c:	4b78      	ldr	r3, [pc, #480]	; (8007430 <_dtoa_r+0x2e0>)
 800724e:	f7f9 f843 	bl	80002d8 <__aeabi_dsub>
 8007252:	a36d      	add	r3, pc, #436	; (adr r3, 8007408 <_dtoa_r+0x2b8>)
 8007254:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007258:	f7f9 f9f6 	bl	8000648 <__aeabi_dmul>
 800725c:	a36c      	add	r3, pc, #432	; (adr r3, 8007410 <_dtoa_r+0x2c0>)
 800725e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007262:	f7f9 f83b 	bl	80002dc <__adddf3>
 8007266:	4606      	mov	r6, r0
 8007268:	4628      	mov	r0, r5
 800726a:	460f      	mov	r7, r1
 800726c:	f7f9 f982 	bl	8000574 <__aeabi_i2d>
 8007270:	a369      	add	r3, pc, #420	; (adr r3, 8007418 <_dtoa_r+0x2c8>)
 8007272:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007276:	f7f9 f9e7 	bl	8000648 <__aeabi_dmul>
 800727a:	4602      	mov	r2, r0
 800727c:	460b      	mov	r3, r1
 800727e:	4630      	mov	r0, r6
 8007280:	4639      	mov	r1, r7
 8007282:	f7f9 f82b 	bl	80002dc <__adddf3>
 8007286:	4606      	mov	r6, r0
 8007288:	460f      	mov	r7, r1
 800728a:	f7f9 fc8d 	bl	8000ba8 <__aeabi_d2iz>
 800728e:	2200      	movs	r2, #0
 8007290:	4683      	mov	fp, r0
 8007292:	2300      	movs	r3, #0
 8007294:	4630      	mov	r0, r6
 8007296:	4639      	mov	r1, r7
 8007298:	f7f9 fc48 	bl	8000b2c <__aeabi_dcmplt>
 800729c:	b148      	cbz	r0, 80072b2 <_dtoa_r+0x162>
 800729e:	4658      	mov	r0, fp
 80072a0:	f7f9 f968 	bl	8000574 <__aeabi_i2d>
 80072a4:	4632      	mov	r2, r6
 80072a6:	463b      	mov	r3, r7
 80072a8:	f7f9 fc36 	bl	8000b18 <__aeabi_dcmpeq>
 80072ac:	b908      	cbnz	r0, 80072b2 <_dtoa_r+0x162>
 80072ae:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 80072b2:	f1bb 0f16 	cmp.w	fp, #22
 80072b6:	d856      	bhi.n	8007366 <_dtoa_r+0x216>
 80072b8:	4b5e      	ldr	r3, [pc, #376]	; (8007434 <_dtoa_r+0x2e4>)
 80072ba:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80072be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072c2:	ec51 0b18 	vmov	r0, r1, d8
 80072c6:	f7f9 fc31 	bl	8000b2c <__aeabi_dcmplt>
 80072ca:	2800      	cmp	r0, #0
 80072cc:	d04d      	beq.n	800736a <_dtoa_r+0x21a>
 80072ce:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 80072d2:	2300      	movs	r3, #0
 80072d4:	930c      	str	r3, [sp, #48]	; 0x30
 80072d6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80072d8:	1b5b      	subs	r3, r3, r5
 80072da:	1e5a      	subs	r2, r3, #1
 80072dc:	bf45      	ittet	mi
 80072de:	f1c3 0301 	rsbmi	r3, r3, #1
 80072e2:	9305      	strmi	r3, [sp, #20]
 80072e4:	2300      	movpl	r3, #0
 80072e6:	2300      	movmi	r3, #0
 80072e8:	9206      	str	r2, [sp, #24]
 80072ea:	bf54      	ite	pl
 80072ec:	9305      	strpl	r3, [sp, #20]
 80072ee:	9306      	strmi	r3, [sp, #24]
 80072f0:	f1bb 0f00 	cmp.w	fp, #0
 80072f4:	db3b      	blt.n	800736e <_dtoa_r+0x21e>
 80072f6:	9b06      	ldr	r3, [sp, #24]
 80072f8:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 80072fc:	445b      	add	r3, fp
 80072fe:	9306      	str	r3, [sp, #24]
 8007300:	2300      	movs	r3, #0
 8007302:	9308      	str	r3, [sp, #32]
 8007304:	9b07      	ldr	r3, [sp, #28]
 8007306:	2b09      	cmp	r3, #9
 8007308:	d868      	bhi.n	80073dc <_dtoa_r+0x28c>
 800730a:	2b05      	cmp	r3, #5
 800730c:	bfc4      	itt	gt
 800730e:	3b04      	subgt	r3, #4
 8007310:	9307      	strgt	r3, [sp, #28]
 8007312:	9b07      	ldr	r3, [sp, #28]
 8007314:	f1a3 0302 	sub.w	r3, r3, #2
 8007318:	bfcc      	ite	gt
 800731a:	2500      	movgt	r5, #0
 800731c:	2501      	movle	r5, #1
 800731e:	2b03      	cmp	r3, #3
 8007320:	d867      	bhi.n	80073f2 <_dtoa_r+0x2a2>
 8007322:	e8df f003 	tbb	[pc, r3]
 8007326:	3b2e      	.short	0x3b2e
 8007328:	5939      	.short	0x5939
 800732a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800732e:	441d      	add	r5, r3
 8007330:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8007334:	2b20      	cmp	r3, #32
 8007336:	bfc1      	itttt	gt
 8007338:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800733c:	fa08 f803 	lslgt.w	r8, r8, r3
 8007340:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8007344:	fa26 f303 	lsrgt.w	r3, r6, r3
 8007348:	bfd6      	itet	le
 800734a:	f1c3 0320 	rsble	r3, r3, #32
 800734e:	ea48 0003 	orrgt.w	r0, r8, r3
 8007352:	fa06 f003 	lslle.w	r0, r6, r3
 8007356:	f7f9 f8fd 	bl	8000554 <__aeabi_ui2d>
 800735a:	2201      	movs	r2, #1
 800735c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8007360:	3d01      	subs	r5, #1
 8007362:	920e      	str	r2, [sp, #56]	; 0x38
 8007364:	e770      	b.n	8007248 <_dtoa_r+0xf8>
 8007366:	2301      	movs	r3, #1
 8007368:	e7b4      	b.n	80072d4 <_dtoa_r+0x184>
 800736a:	900c      	str	r0, [sp, #48]	; 0x30
 800736c:	e7b3      	b.n	80072d6 <_dtoa_r+0x186>
 800736e:	9b05      	ldr	r3, [sp, #20]
 8007370:	eba3 030b 	sub.w	r3, r3, fp
 8007374:	9305      	str	r3, [sp, #20]
 8007376:	f1cb 0300 	rsb	r3, fp, #0
 800737a:	9308      	str	r3, [sp, #32]
 800737c:	2300      	movs	r3, #0
 800737e:	930b      	str	r3, [sp, #44]	; 0x2c
 8007380:	e7c0      	b.n	8007304 <_dtoa_r+0x1b4>
 8007382:	2300      	movs	r3, #0
 8007384:	9309      	str	r3, [sp, #36]	; 0x24
 8007386:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007388:	2b00      	cmp	r3, #0
 800738a:	dc35      	bgt.n	80073f8 <_dtoa_r+0x2a8>
 800738c:	2301      	movs	r3, #1
 800738e:	9301      	str	r3, [sp, #4]
 8007390:	9304      	str	r3, [sp, #16]
 8007392:	461a      	mov	r2, r3
 8007394:	920a      	str	r2, [sp, #40]	; 0x28
 8007396:	e00b      	b.n	80073b0 <_dtoa_r+0x260>
 8007398:	2301      	movs	r3, #1
 800739a:	e7f3      	b.n	8007384 <_dtoa_r+0x234>
 800739c:	2300      	movs	r3, #0
 800739e:	9309      	str	r3, [sp, #36]	; 0x24
 80073a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80073a2:	445b      	add	r3, fp
 80073a4:	9301      	str	r3, [sp, #4]
 80073a6:	3301      	adds	r3, #1
 80073a8:	2b01      	cmp	r3, #1
 80073aa:	9304      	str	r3, [sp, #16]
 80073ac:	bfb8      	it	lt
 80073ae:	2301      	movlt	r3, #1
 80073b0:	2100      	movs	r1, #0
 80073b2:	2204      	movs	r2, #4
 80073b4:	f102 0014 	add.w	r0, r2, #20
 80073b8:	4298      	cmp	r0, r3
 80073ba:	d921      	bls.n	8007400 <_dtoa_r+0x2b0>
 80073bc:	63e1      	str	r1, [r4, #60]	; 0x3c
 80073be:	4620      	mov	r0, r4
 80073c0:	f000 fc9c 	bl	8007cfc <_Balloc>
 80073c4:	9000      	str	r0, [sp, #0]
 80073c6:	2800      	cmp	r0, #0
 80073c8:	d13a      	bne.n	8007440 <_dtoa_r+0x2f0>
 80073ca:	4b1b      	ldr	r3, [pc, #108]	; (8007438 <_dtoa_r+0x2e8>)
 80073cc:	4602      	mov	r2, r0
 80073ce:	f240 11af 	movw	r1, #431	; 0x1af
 80073d2:	481a      	ldr	r0, [pc, #104]	; (800743c <_dtoa_r+0x2ec>)
 80073d4:	f001 f86c 	bl	80084b0 <__assert_func>
 80073d8:	2301      	movs	r3, #1
 80073da:	e7e0      	b.n	800739e <_dtoa_r+0x24e>
 80073dc:	2501      	movs	r5, #1
 80073de:	2300      	movs	r3, #0
 80073e0:	9307      	str	r3, [sp, #28]
 80073e2:	9509      	str	r5, [sp, #36]	; 0x24
 80073e4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80073e8:	9301      	str	r3, [sp, #4]
 80073ea:	9304      	str	r3, [sp, #16]
 80073ec:	2200      	movs	r2, #0
 80073ee:	2312      	movs	r3, #18
 80073f0:	e7d0      	b.n	8007394 <_dtoa_r+0x244>
 80073f2:	2301      	movs	r3, #1
 80073f4:	9309      	str	r3, [sp, #36]	; 0x24
 80073f6:	e7f5      	b.n	80073e4 <_dtoa_r+0x294>
 80073f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80073fa:	9301      	str	r3, [sp, #4]
 80073fc:	9304      	str	r3, [sp, #16]
 80073fe:	e7d7      	b.n	80073b0 <_dtoa_r+0x260>
 8007400:	3101      	adds	r1, #1
 8007402:	0052      	lsls	r2, r2, #1
 8007404:	e7d6      	b.n	80073b4 <_dtoa_r+0x264>
 8007406:	bf00      	nop
 8007408:	636f4361 	.word	0x636f4361
 800740c:	3fd287a7 	.word	0x3fd287a7
 8007410:	8b60c8b3 	.word	0x8b60c8b3
 8007414:	3fc68a28 	.word	0x3fc68a28
 8007418:	509f79fb 	.word	0x509f79fb
 800741c:	3fd34413 	.word	0x3fd34413
 8007420:	7ff00000 	.word	0x7ff00000
 8007424:	08009aad 	.word	0x08009aad
 8007428:	08009aa4 	.word	0x08009aa4
 800742c:	08009a83 	.word	0x08009a83
 8007430:	3ff80000 	.word	0x3ff80000
 8007434:	08009ba0 	.word	0x08009ba0
 8007438:	08009ab1 	.word	0x08009ab1
 800743c:	08009ac2 	.word	0x08009ac2
 8007440:	9b00      	ldr	r3, [sp, #0]
 8007442:	63a3      	str	r3, [r4, #56]	; 0x38
 8007444:	9b04      	ldr	r3, [sp, #16]
 8007446:	2b0e      	cmp	r3, #14
 8007448:	f200 80a8 	bhi.w	800759c <_dtoa_r+0x44c>
 800744c:	2d00      	cmp	r5, #0
 800744e:	f000 80a5 	beq.w	800759c <_dtoa_r+0x44c>
 8007452:	f1bb 0f00 	cmp.w	fp, #0
 8007456:	dd38      	ble.n	80074ca <_dtoa_r+0x37a>
 8007458:	4bbf      	ldr	r3, [pc, #764]	; (8007758 <_dtoa_r+0x608>)
 800745a:	f00b 020f 	and.w	r2, fp, #15
 800745e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007462:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8007466:	e9d3 6700 	ldrd	r6, r7, [r3]
 800746a:	ea4f 182b 	mov.w	r8, fp, asr #4
 800746e:	d019      	beq.n	80074a4 <_dtoa_r+0x354>
 8007470:	4bba      	ldr	r3, [pc, #744]	; (800775c <_dtoa_r+0x60c>)
 8007472:	ec51 0b18 	vmov	r0, r1, d8
 8007476:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800747a:	f7f9 fa0f 	bl	800089c <__aeabi_ddiv>
 800747e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007482:	f008 080f 	and.w	r8, r8, #15
 8007486:	2503      	movs	r5, #3
 8007488:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 800775c <_dtoa_r+0x60c>
 800748c:	f1b8 0f00 	cmp.w	r8, #0
 8007490:	d10a      	bne.n	80074a8 <_dtoa_r+0x358>
 8007492:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007496:	4632      	mov	r2, r6
 8007498:	463b      	mov	r3, r7
 800749a:	f7f9 f9ff 	bl	800089c <__aeabi_ddiv>
 800749e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80074a2:	e02b      	b.n	80074fc <_dtoa_r+0x3ac>
 80074a4:	2502      	movs	r5, #2
 80074a6:	e7ef      	b.n	8007488 <_dtoa_r+0x338>
 80074a8:	f018 0f01 	tst.w	r8, #1
 80074ac:	d008      	beq.n	80074c0 <_dtoa_r+0x370>
 80074ae:	4630      	mov	r0, r6
 80074b0:	4639      	mov	r1, r7
 80074b2:	e9d9 2300 	ldrd	r2, r3, [r9]
 80074b6:	f7f9 f8c7 	bl	8000648 <__aeabi_dmul>
 80074ba:	3501      	adds	r5, #1
 80074bc:	4606      	mov	r6, r0
 80074be:	460f      	mov	r7, r1
 80074c0:	ea4f 0868 	mov.w	r8, r8, asr #1
 80074c4:	f109 0908 	add.w	r9, r9, #8
 80074c8:	e7e0      	b.n	800748c <_dtoa_r+0x33c>
 80074ca:	f000 809f 	beq.w	800760c <_dtoa_r+0x4bc>
 80074ce:	f1cb 0600 	rsb	r6, fp, #0
 80074d2:	4ba1      	ldr	r3, [pc, #644]	; (8007758 <_dtoa_r+0x608>)
 80074d4:	4fa1      	ldr	r7, [pc, #644]	; (800775c <_dtoa_r+0x60c>)
 80074d6:	f006 020f 	and.w	r2, r6, #15
 80074da:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80074de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074e2:	ec51 0b18 	vmov	r0, r1, d8
 80074e6:	f7f9 f8af 	bl	8000648 <__aeabi_dmul>
 80074ea:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80074ee:	1136      	asrs	r6, r6, #4
 80074f0:	2300      	movs	r3, #0
 80074f2:	2502      	movs	r5, #2
 80074f4:	2e00      	cmp	r6, #0
 80074f6:	d17e      	bne.n	80075f6 <_dtoa_r+0x4a6>
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d1d0      	bne.n	800749e <_dtoa_r+0x34e>
 80074fc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80074fe:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8007502:	2b00      	cmp	r3, #0
 8007504:	f000 8084 	beq.w	8007610 <_dtoa_r+0x4c0>
 8007508:	4b95      	ldr	r3, [pc, #596]	; (8007760 <_dtoa_r+0x610>)
 800750a:	2200      	movs	r2, #0
 800750c:	4640      	mov	r0, r8
 800750e:	4649      	mov	r1, r9
 8007510:	f7f9 fb0c 	bl	8000b2c <__aeabi_dcmplt>
 8007514:	2800      	cmp	r0, #0
 8007516:	d07b      	beq.n	8007610 <_dtoa_r+0x4c0>
 8007518:	9b04      	ldr	r3, [sp, #16]
 800751a:	2b00      	cmp	r3, #0
 800751c:	d078      	beq.n	8007610 <_dtoa_r+0x4c0>
 800751e:	9b01      	ldr	r3, [sp, #4]
 8007520:	2b00      	cmp	r3, #0
 8007522:	dd39      	ble.n	8007598 <_dtoa_r+0x448>
 8007524:	4b8f      	ldr	r3, [pc, #572]	; (8007764 <_dtoa_r+0x614>)
 8007526:	2200      	movs	r2, #0
 8007528:	4640      	mov	r0, r8
 800752a:	4649      	mov	r1, r9
 800752c:	f7f9 f88c 	bl	8000648 <__aeabi_dmul>
 8007530:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007534:	9e01      	ldr	r6, [sp, #4]
 8007536:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 800753a:	3501      	adds	r5, #1
 800753c:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8007540:	4628      	mov	r0, r5
 8007542:	f7f9 f817 	bl	8000574 <__aeabi_i2d>
 8007546:	4642      	mov	r2, r8
 8007548:	464b      	mov	r3, r9
 800754a:	f7f9 f87d 	bl	8000648 <__aeabi_dmul>
 800754e:	4b86      	ldr	r3, [pc, #536]	; (8007768 <_dtoa_r+0x618>)
 8007550:	2200      	movs	r2, #0
 8007552:	f7f8 fec3 	bl	80002dc <__adddf3>
 8007556:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800755a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800755e:	9303      	str	r3, [sp, #12]
 8007560:	2e00      	cmp	r6, #0
 8007562:	d158      	bne.n	8007616 <_dtoa_r+0x4c6>
 8007564:	4b81      	ldr	r3, [pc, #516]	; (800776c <_dtoa_r+0x61c>)
 8007566:	2200      	movs	r2, #0
 8007568:	4640      	mov	r0, r8
 800756a:	4649      	mov	r1, r9
 800756c:	f7f8 feb4 	bl	80002d8 <__aeabi_dsub>
 8007570:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007574:	4680      	mov	r8, r0
 8007576:	4689      	mov	r9, r1
 8007578:	f7f9 faf6 	bl	8000b68 <__aeabi_dcmpgt>
 800757c:	2800      	cmp	r0, #0
 800757e:	f040 8295 	bne.w	8007aac <_dtoa_r+0x95c>
 8007582:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8007586:	4640      	mov	r0, r8
 8007588:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800758c:	4649      	mov	r1, r9
 800758e:	f7f9 facd 	bl	8000b2c <__aeabi_dcmplt>
 8007592:	2800      	cmp	r0, #0
 8007594:	f040 8288 	bne.w	8007aa8 <_dtoa_r+0x958>
 8007598:	ed8d 8b02 	vstr	d8, [sp, #8]
 800759c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800759e:	2b00      	cmp	r3, #0
 80075a0:	f2c0 814d 	blt.w	800783e <_dtoa_r+0x6ee>
 80075a4:	f1bb 0f0e 	cmp.w	fp, #14
 80075a8:	f300 8149 	bgt.w	800783e <_dtoa_r+0x6ee>
 80075ac:	4b6a      	ldr	r3, [pc, #424]	; (8007758 <_dtoa_r+0x608>)
 80075ae:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80075b2:	e9d3 8900 	ldrd	r8, r9, [r3]
 80075b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	f280 80db 	bge.w	8007774 <_dtoa_r+0x624>
 80075be:	9b04      	ldr	r3, [sp, #16]
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	f300 80d7 	bgt.w	8007774 <_dtoa_r+0x624>
 80075c6:	f040 826e 	bne.w	8007aa6 <_dtoa_r+0x956>
 80075ca:	4b68      	ldr	r3, [pc, #416]	; (800776c <_dtoa_r+0x61c>)
 80075cc:	2200      	movs	r2, #0
 80075ce:	4640      	mov	r0, r8
 80075d0:	4649      	mov	r1, r9
 80075d2:	f7f9 f839 	bl	8000648 <__aeabi_dmul>
 80075d6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80075da:	f7f9 fabb 	bl	8000b54 <__aeabi_dcmpge>
 80075de:	9e04      	ldr	r6, [sp, #16]
 80075e0:	4637      	mov	r7, r6
 80075e2:	2800      	cmp	r0, #0
 80075e4:	f040 8244 	bne.w	8007a70 <_dtoa_r+0x920>
 80075e8:	9d00      	ldr	r5, [sp, #0]
 80075ea:	2331      	movs	r3, #49	; 0x31
 80075ec:	f805 3b01 	strb.w	r3, [r5], #1
 80075f0:	f10b 0b01 	add.w	fp, fp, #1
 80075f4:	e240      	b.n	8007a78 <_dtoa_r+0x928>
 80075f6:	07f2      	lsls	r2, r6, #31
 80075f8:	d505      	bpl.n	8007606 <_dtoa_r+0x4b6>
 80075fa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80075fe:	f7f9 f823 	bl	8000648 <__aeabi_dmul>
 8007602:	3501      	adds	r5, #1
 8007604:	2301      	movs	r3, #1
 8007606:	1076      	asrs	r6, r6, #1
 8007608:	3708      	adds	r7, #8
 800760a:	e773      	b.n	80074f4 <_dtoa_r+0x3a4>
 800760c:	2502      	movs	r5, #2
 800760e:	e775      	b.n	80074fc <_dtoa_r+0x3ac>
 8007610:	9e04      	ldr	r6, [sp, #16]
 8007612:	465f      	mov	r7, fp
 8007614:	e792      	b.n	800753c <_dtoa_r+0x3ec>
 8007616:	9900      	ldr	r1, [sp, #0]
 8007618:	4b4f      	ldr	r3, [pc, #316]	; (8007758 <_dtoa_r+0x608>)
 800761a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800761e:	4431      	add	r1, r6
 8007620:	9102      	str	r1, [sp, #8]
 8007622:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007624:	eeb0 9a47 	vmov.f32	s18, s14
 8007628:	eef0 9a67 	vmov.f32	s19, s15
 800762c:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007630:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007634:	2900      	cmp	r1, #0
 8007636:	d044      	beq.n	80076c2 <_dtoa_r+0x572>
 8007638:	494d      	ldr	r1, [pc, #308]	; (8007770 <_dtoa_r+0x620>)
 800763a:	2000      	movs	r0, #0
 800763c:	f7f9 f92e 	bl	800089c <__aeabi_ddiv>
 8007640:	ec53 2b19 	vmov	r2, r3, d9
 8007644:	f7f8 fe48 	bl	80002d8 <__aeabi_dsub>
 8007648:	9d00      	ldr	r5, [sp, #0]
 800764a:	ec41 0b19 	vmov	d9, r0, r1
 800764e:	4649      	mov	r1, r9
 8007650:	4640      	mov	r0, r8
 8007652:	f7f9 faa9 	bl	8000ba8 <__aeabi_d2iz>
 8007656:	4606      	mov	r6, r0
 8007658:	f7f8 ff8c 	bl	8000574 <__aeabi_i2d>
 800765c:	4602      	mov	r2, r0
 800765e:	460b      	mov	r3, r1
 8007660:	4640      	mov	r0, r8
 8007662:	4649      	mov	r1, r9
 8007664:	f7f8 fe38 	bl	80002d8 <__aeabi_dsub>
 8007668:	3630      	adds	r6, #48	; 0x30
 800766a:	f805 6b01 	strb.w	r6, [r5], #1
 800766e:	ec53 2b19 	vmov	r2, r3, d9
 8007672:	4680      	mov	r8, r0
 8007674:	4689      	mov	r9, r1
 8007676:	f7f9 fa59 	bl	8000b2c <__aeabi_dcmplt>
 800767a:	2800      	cmp	r0, #0
 800767c:	d164      	bne.n	8007748 <_dtoa_r+0x5f8>
 800767e:	4642      	mov	r2, r8
 8007680:	464b      	mov	r3, r9
 8007682:	4937      	ldr	r1, [pc, #220]	; (8007760 <_dtoa_r+0x610>)
 8007684:	2000      	movs	r0, #0
 8007686:	f7f8 fe27 	bl	80002d8 <__aeabi_dsub>
 800768a:	ec53 2b19 	vmov	r2, r3, d9
 800768e:	f7f9 fa4d 	bl	8000b2c <__aeabi_dcmplt>
 8007692:	2800      	cmp	r0, #0
 8007694:	f040 80b5 	bne.w	8007802 <_dtoa_r+0x6b2>
 8007698:	9b02      	ldr	r3, [sp, #8]
 800769a:	429d      	cmp	r5, r3
 800769c:	f43f af7c 	beq.w	8007598 <_dtoa_r+0x448>
 80076a0:	4b30      	ldr	r3, [pc, #192]	; (8007764 <_dtoa_r+0x614>)
 80076a2:	ec51 0b19 	vmov	r0, r1, d9
 80076a6:	2200      	movs	r2, #0
 80076a8:	f7f8 ffce 	bl	8000648 <__aeabi_dmul>
 80076ac:	4b2d      	ldr	r3, [pc, #180]	; (8007764 <_dtoa_r+0x614>)
 80076ae:	ec41 0b19 	vmov	d9, r0, r1
 80076b2:	2200      	movs	r2, #0
 80076b4:	4640      	mov	r0, r8
 80076b6:	4649      	mov	r1, r9
 80076b8:	f7f8 ffc6 	bl	8000648 <__aeabi_dmul>
 80076bc:	4680      	mov	r8, r0
 80076be:	4689      	mov	r9, r1
 80076c0:	e7c5      	b.n	800764e <_dtoa_r+0x4fe>
 80076c2:	ec51 0b17 	vmov	r0, r1, d7
 80076c6:	f7f8 ffbf 	bl	8000648 <__aeabi_dmul>
 80076ca:	9b02      	ldr	r3, [sp, #8]
 80076cc:	9d00      	ldr	r5, [sp, #0]
 80076ce:	930f      	str	r3, [sp, #60]	; 0x3c
 80076d0:	ec41 0b19 	vmov	d9, r0, r1
 80076d4:	4649      	mov	r1, r9
 80076d6:	4640      	mov	r0, r8
 80076d8:	f7f9 fa66 	bl	8000ba8 <__aeabi_d2iz>
 80076dc:	4606      	mov	r6, r0
 80076de:	f7f8 ff49 	bl	8000574 <__aeabi_i2d>
 80076e2:	3630      	adds	r6, #48	; 0x30
 80076e4:	4602      	mov	r2, r0
 80076e6:	460b      	mov	r3, r1
 80076e8:	4640      	mov	r0, r8
 80076ea:	4649      	mov	r1, r9
 80076ec:	f7f8 fdf4 	bl	80002d8 <__aeabi_dsub>
 80076f0:	f805 6b01 	strb.w	r6, [r5], #1
 80076f4:	9b02      	ldr	r3, [sp, #8]
 80076f6:	429d      	cmp	r5, r3
 80076f8:	4680      	mov	r8, r0
 80076fa:	4689      	mov	r9, r1
 80076fc:	f04f 0200 	mov.w	r2, #0
 8007700:	d124      	bne.n	800774c <_dtoa_r+0x5fc>
 8007702:	4b1b      	ldr	r3, [pc, #108]	; (8007770 <_dtoa_r+0x620>)
 8007704:	ec51 0b19 	vmov	r0, r1, d9
 8007708:	f7f8 fde8 	bl	80002dc <__adddf3>
 800770c:	4602      	mov	r2, r0
 800770e:	460b      	mov	r3, r1
 8007710:	4640      	mov	r0, r8
 8007712:	4649      	mov	r1, r9
 8007714:	f7f9 fa28 	bl	8000b68 <__aeabi_dcmpgt>
 8007718:	2800      	cmp	r0, #0
 800771a:	d172      	bne.n	8007802 <_dtoa_r+0x6b2>
 800771c:	ec53 2b19 	vmov	r2, r3, d9
 8007720:	4913      	ldr	r1, [pc, #76]	; (8007770 <_dtoa_r+0x620>)
 8007722:	2000      	movs	r0, #0
 8007724:	f7f8 fdd8 	bl	80002d8 <__aeabi_dsub>
 8007728:	4602      	mov	r2, r0
 800772a:	460b      	mov	r3, r1
 800772c:	4640      	mov	r0, r8
 800772e:	4649      	mov	r1, r9
 8007730:	f7f9 f9fc 	bl	8000b2c <__aeabi_dcmplt>
 8007734:	2800      	cmp	r0, #0
 8007736:	f43f af2f 	beq.w	8007598 <_dtoa_r+0x448>
 800773a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800773c:	1e6b      	subs	r3, r5, #1
 800773e:	930f      	str	r3, [sp, #60]	; 0x3c
 8007740:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007744:	2b30      	cmp	r3, #48	; 0x30
 8007746:	d0f8      	beq.n	800773a <_dtoa_r+0x5ea>
 8007748:	46bb      	mov	fp, r7
 800774a:	e049      	b.n	80077e0 <_dtoa_r+0x690>
 800774c:	4b05      	ldr	r3, [pc, #20]	; (8007764 <_dtoa_r+0x614>)
 800774e:	f7f8 ff7b 	bl	8000648 <__aeabi_dmul>
 8007752:	4680      	mov	r8, r0
 8007754:	4689      	mov	r9, r1
 8007756:	e7bd      	b.n	80076d4 <_dtoa_r+0x584>
 8007758:	08009ba0 	.word	0x08009ba0
 800775c:	08009b78 	.word	0x08009b78
 8007760:	3ff00000 	.word	0x3ff00000
 8007764:	40240000 	.word	0x40240000
 8007768:	401c0000 	.word	0x401c0000
 800776c:	40140000 	.word	0x40140000
 8007770:	3fe00000 	.word	0x3fe00000
 8007774:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007778:	9d00      	ldr	r5, [sp, #0]
 800777a:	4642      	mov	r2, r8
 800777c:	464b      	mov	r3, r9
 800777e:	4630      	mov	r0, r6
 8007780:	4639      	mov	r1, r7
 8007782:	f7f9 f88b 	bl	800089c <__aeabi_ddiv>
 8007786:	f7f9 fa0f 	bl	8000ba8 <__aeabi_d2iz>
 800778a:	9001      	str	r0, [sp, #4]
 800778c:	f7f8 fef2 	bl	8000574 <__aeabi_i2d>
 8007790:	4642      	mov	r2, r8
 8007792:	464b      	mov	r3, r9
 8007794:	f7f8 ff58 	bl	8000648 <__aeabi_dmul>
 8007798:	4602      	mov	r2, r0
 800779a:	460b      	mov	r3, r1
 800779c:	4630      	mov	r0, r6
 800779e:	4639      	mov	r1, r7
 80077a0:	f7f8 fd9a 	bl	80002d8 <__aeabi_dsub>
 80077a4:	9e01      	ldr	r6, [sp, #4]
 80077a6:	9f04      	ldr	r7, [sp, #16]
 80077a8:	3630      	adds	r6, #48	; 0x30
 80077aa:	f805 6b01 	strb.w	r6, [r5], #1
 80077ae:	9e00      	ldr	r6, [sp, #0]
 80077b0:	1bae      	subs	r6, r5, r6
 80077b2:	42b7      	cmp	r7, r6
 80077b4:	4602      	mov	r2, r0
 80077b6:	460b      	mov	r3, r1
 80077b8:	d134      	bne.n	8007824 <_dtoa_r+0x6d4>
 80077ba:	f7f8 fd8f 	bl	80002dc <__adddf3>
 80077be:	4642      	mov	r2, r8
 80077c0:	464b      	mov	r3, r9
 80077c2:	4606      	mov	r6, r0
 80077c4:	460f      	mov	r7, r1
 80077c6:	f7f9 f9cf 	bl	8000b68 <__aeabi_dcmpgt>
 80077ca:	b9c8      	cbnz	r0, 8007800 <_dtoa_r+0x6b0>
 80077cc:	4642      	mov	r2, r8
 80077ce:	464b      	mov	r3, r9
 80077d0:	4630      	mov	r0, r6
 80077d2:	4639      	mov	r1, r7
 80077d4:	f7f9 f9a0 	bl	8000b18 <__aeabi_dcmpeq>
 80077d8:	b110      	cbz	r0, 80077e0 <_dtoa_r+0x690>
 80077da:	9b01      	ldr	r3, [sp, #4]
 80077dc:	07db      	lsls	r3, r3, #31
 80077de:	d40f      	bmi.n	8007800 <_dtoa_r+0x6b0>
 80077e0:	4651      	mov	r1, sl
 80077e2:	4620      	mov	r0, r4
 80077e4:	f000 faaf 	bl	8007d46 <_Bfree>
 80077e8:	2300      	movs	r3, #0
 80077ea:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80077ec:	702b      	strb	r3, [r5, #0]
 80077ee:	f10b 0301 	add.w	r3, fp, #1
 80077f2:	6013      	str	r3, [r2, #0]
 80077f4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	f43f ace5 	beq.w	80071c6 <_dtoa_r+0x76>
 80077fc:	601d      	str	r5, [r3, #0]
 80077fe:	e4e2      	b.n	80071c6 <_dtoa_r+0x76>
 8007800:	465f      	mov	r7, fp
 8007802:	462b      	mov	r3, r5
 8007804:	461d      	mov	r5, r3
 8007806:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800780a:	2a39      	cmp	r2, #57	; 0x39
 800780c:	d106      	bne.n	800781c <_dtoa_r+0x6cc>
 800780e:	9a00      	ldr	r2, [sp, #0]
 8007810:	429a      	cmp	r2, r3
 8007812:	d1f7      	bne.n	8007804 <_dtoa_r+0x6b4>
 8007814:	9900      	ldr	r1, [sp, #0]
 8007816:	2230      	movs	r2, #48	; 0x30
 8007818:	3701      	adds	r7, #1
 800781a:	700a      	strb	r2, [r1, #0]
 800781c:	781a      	ldrb	r2, [r3, #0]
 800781e:	3201      	adds	r2, #1
 8007820:	701a      	strb	r2, [r3, #0]
 8007822:	e791      	b.n	8007748 <_dtoa_r+0x5f8>
 8007824:	4ba3      	ldr	r3, [pc, #652]	; (8007ab4 <_dtoa_r+0x964>)
 8007826:	2200      	movs	r2, #0
 8007828:	f7f8 ff0e 	bl	8000648 <__aeabi_dmul>
 800782c:	2200      	movs	r2, #0
 800782e:	2300      	movs	r3, #0
 8007830:	4606      	mov	r6, r0
 8007832:	460f      	mov	r7, r1
 8007834:	f7f9 f970 	bl	8000b18 <__aeabi_dcmpeq>
 8007838:	2800      	cmp	r0, #0
 800783a:	d09e      	beq.n	800777a <_dtoa_r+0x62a>
 800783c:	e7d0      	b.n	80077e0 <_dtoa_r+0x690>
 800783e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007840:	2a00      	cmp	r2, #0
 8007842:	f000 80ca 	beq.w	80079da <_dtoa_r+0x88a>
 8007846:	9a07      	ldr	r2, [sp, #28]
 8007848:	2a01      	cmp	r2, #1
 800784a:	f300 80ad 	bgt.w	80079a8 <_dtoa_r+0x858>
 800784e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007850:	2a00      	cmp	r2, #0
 8007852:	f000 80a5 	beq.w	80079a0 <_dtoa_r+0x850>
 8007856:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800785a:	9e08      	ldr	r6, [sp, #32]
 800785c:	9d05      	ldr	r5, [sp, #20]
 800785e:	9a05      	ldr	r2, [sp, #20]
 8007860:	441a      	add	r2, r3
 8007862:	9205      	str	r2, [sp, #20]
 8007864:	9a06      	ldr	r2, [sp, #24]
 8007866:	2101      	movs	r1, #1
 8007868:	441a      	add	r2, r3
 800786a:	4620      	mov	r0, r4
 800786c:	9206      	str	r2, [sp, #24]
 800786e:	f000 fb07 	bl	8007e80 <__i2b>
 8007872:	4607      	mov	r7, r0
 8007874:	b165      	cbz	r5, 8007890 <_dtoa_r+0x740>
 8007876:	9b06      	ldr	r3, [sp, #24]
 8007878:	2b00      	cmp	r3, #0
 800787a:	dd09      	ble.n	8007890 <_dtoa_r+0x740>
 800787c:	42ab      	cmp	r3, r5
 800787e:	9a05      	ldr	r2, [sp, #20]
 8007880:	bfa8      	it	ge
 8007882:	462b      	movge	r3, r5
 8007884:	1ad2      	subs	r2, r2, r3
 8007886:	9205      	str	r2, [sp, #20]
 8007888:	9a06      	ldr	r2, [sp, #24]
 800788a:	1aed      	subs	r5, r5, r3
 800788c:	1ad3      	subs	r3, r2, r3
 800788e:	9306      	str	r3, [sp, #24]
 8007890:	9b08      	ldr	r3, [sp, #32]
 8007892:	b1f3      	cbz	r3, 80078d2 <_dtoa_r+0x782>
 8007894:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007896:	2b00      	cmp	r3, #0
 8007898:	f000 80a3 	beq.w	80079e2 <_dtoa_r+0x892>
 800789c:	2e00      	cmp	r6, #0
 800789e:	dd10      	ble.n	80078c2 <_dtoa_r+0x772>
 80078a0:	4639      	mov	r1, r7
 80078a2:	4632      	mov	r2, r6
 80078a4:	4620      	mov	r0, r4
 80078a6:	f000 fbab 	bl	8008000 <__pow5mult>
 80078aa:	4652      	mov	r2, sl
 80078ac:	4601      	mov	r1, r0
 80078ae:	4607      	mov	r7, r0
 80078b0:	4620      	mov	r0, r4
 80078b2:	f000 fafb 	bl	8007eac <__multiply>
 80078b6:	4651      	mov	r1, sl
 80078b8:	4680      	mov	r8, r0
 80078ba:	4620      	mov	r0, r4
 80078bc:	f000 fa43 	bl	8007d46 <_Bfree>
 80078c0:	46c2      	mov	sl, r8
 80078c2:	9b08      	ldr	r3, [sp, #32]
 80078c4:	1b9a      	subs	r2, r3, r6
 80078c6:	d004      	beq.n	80078d2 <_dtoa_r+0x782>
 80078c8:	4651      	mov	r1, sl
 80078ca:	4620      	mov	r0, r4
 80078cc:	f000 fb98 	bl	8008000 <__pow5mult>
 80078d0:	4682      	mov	sl, r0
 80078d2:	2101      	movs	r1, #1
 80078d4:	4620      	mov	r0, r4
 80078d6:	f000 fad3 	bl	8007e80 <__i2b>
 80078da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80078dc:	2b00      	cmp	r3, #0
 80078de:	4606      	mov	r6, r0
 80078e0:	f340 8081 	ble.w	80079e6 <_dtoa_r+0x896>
 80078e4:	461a      	mov	r2, r3
 80078e6:	4601      	mov	r1, r0
 80078e8:	4620      	mov	r0, r4
 80078ea:	f000 fb89 	bl	8008000 <__pow5mult>
 80078ee:	9b07      	ldr	r3, [sp, #28]
 80078f0:	2b01      	cmp	r3, #1
 80078f2:	4606      	mov	r6, r0
 80078f4:	dd7a      	ble.n	80079ec <_dtoa_r+0x89c>
 80078f6:	f04f 0800 	mov.w	r8, #0
 80078fa:	6933      	ldr	r3, [r6, #16]
 80078fc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007900:	6918      	ldr	r0, [r3, #16]
 8007902:	f000 fa6f 	bl	8007de4 <__hi0bits>
 8007906:	f1c0 0020 	rsb	r0, r0, #32
 800790a:	9b06      	ldr	r3, [sp, #24]
 800790c:	4418      	add	r0, r3
 800790e:	f010 001f 	ands.w	r0, r0, #31
 8007912:	f000 8094 	beq.w	8007a3e <_dtoa_r+0x8ee>
 8007916:	f1c0 0320 	rsb	r3, r0, #32
 800791a:	2b04      	cmp	r3, #4
 800791c:	f340 8085 	ble.w	8007a2a <_dtoa_r+0x8da>
 8007920:	9b05      	ldr	r3, [sp, #20]
 8007922:	f1c0 001c 	rsb	r0, r0, #28
 8007926:	4403      	add	r3, r0
 8007928:	9305      	str	r3, [sp, #20]
 800792a:	9b06      	ldr	r3, [sp, #24]
 800792c:	4403      	add	r3, r0
 800792e:	4405      	add	r5, r0
 8007930:	9306      	str	r3, [sp, #24]
 8007932:	9b05      	ldr	r3, [sp, #20]
 8007934:	2b00      	cmp	r3, #0
 8007936:	dd05      	ble.n	8007944 <_dtoa_r+0x7f4>
 8007938:	4651      	mov	r1, sl
 800793a:	461a      	mov	r2, r3
 800793c:	4620      	mov	r0, r4
 800793e:	f000 fb9f 	bl	8008080 <__lshift>
 8007942:	4682      	mov	sl, r0
 8007944:	9b06      	ldr	r3, [sp, #24]
 8007946:	2b00      	cmp	r3, #0
 8007948:	dd05      	ble.n	8007956 <_dtoa_r+0x806>
 800794a:	4631      	mov	r1, r6
 800794c:	461a      	mov	r2, r3
 800794e:	4620      	mov	r0, r4
 8007950:	f000 fb96 	bl	8008080 <__lshift>
 8007954:	4606      	mov	r6, r0
 8007956:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007958:	2b00      	cmp	r3, #0
 800795a:	d072      	beq.n	8007a42 <_dtoa_r+0x8f2>
 800795c:	4631      	mov	r1, r6
 800795e:	4650      	mov	r0, sl
 8007960:	f000 fbfa 	bl	8008158 <__mcmp>
 8007964:	2800      	cmp	r0, #0
 8007966:	da6c      	bge.n	8007a42 <_dtoa_r+0x8f2>
 8007968:	2300      	movs	r3, #0
 800796a:	4651      	mov	r1, sl
 800796c:	220a      	movs	r2, #10
 800796e:	4620      	mov	r0, r4
 8007970:	f000 f9f2 	bl	8007d58 <__multadd>
 8007974:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007976:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800797a:	4682      	mov	sl, r0
 800797c:	2b00      	cmp	r3, #0
 800797e:	f000 81af 	beq.w	8007ce0 <_dtoa_r+0xb90>
 8007982:	2300      	movs	r3, #0
 8007984:	4639      	mov	r1, r7
 8007986:	220a      	movs	r2, #10
 8007988:	4620      	mov	r0, r4
 800798a:	f000 f9e5 	bl	8007d58 <__multadd>
 800798e:	9b01      	ldr	r3, [sp, #4]
 8007990:	2b00      	cmp	r3, #0
 8007992:	4607      	mov	r7, r0
 8007994:	f300 8096 	bgt.w	8007ac4 <_dtoa_r+0x974>
 8007998:	9b07      	ldr	r3, [sp, #28]
 800799a:	2b02      	cmp	r3, #2
 800799c:	dc59      	bgt.n	8007a52 <_dtoa_r+0x902>
 800799e:	e091      	b.n	8007ac4 <_dtoa_r+0x974>
 80079a0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80079a2:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80079a6:	e758      	b.n	800785a <_dtoa_r+0x70a>
 80079a8:	9b04      	ldr	r3, [sp, #16]
 80079aa:	1e5e      	subs	r6, r3, #1
 80079ac:	9b08      	ldr	r3, [sp, #32]
 80079ae:	42b3      	cmp	r3, r6
 80079b0:	bfbf      	itttt	lt
 80079b2:	9b08      	ldrlt	r3, [sp, #32]
 80079b4:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 80079b6:	9608      	strlt	r6, [sp, #32]
 80079b8:	1af3      	sublt	r3, r6, r3
 80079ba:	bfb4      	ite	lt
 80079bc:	18d2      	addlt	r2, r2, r3
 80079be:	1b9e      	subge	r6, r3, r6
 80079c0:	9b04      	ldr	r3, [sp, #16]
 80079c2:	bfbc      	itt	lt
 80079c4:	920b      	strlt	r2, [sp, #44]	; 0x2c
 80079c6:	2600      	movlt	r6, #0
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	bfb7      	itett	lt
 80079cc:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 80079d0:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 80079d4:	1a9d      	sublt	r5, r3, r2
 80079d6:	2300      	movlt	r3, #0
 80079d8:	e741      	b.n	800785e <_dtoa_r+0x70e>
 80079da:	9e08      	ldr	r6, [sp, #32]
 80079dc:	9d05      	ldr	r5, [sp, #20]
 80079de:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80079e0:	e748      	b.n	8007874 <_dtoa_r+0x724>
 80079e2:	9a08      	ldr	r2, [sp, #32]
 80079e4:	e770      	b.n	80078c8 <_dtoa_r+0x778>
 80079e6:	9b07      	ldr	r3, [sp, #28]
 80079e8:	2b01      	cmp	r3, #1
 80079ea:	dc19      	bgt.n	8007a20 <_dtoa_r+0x8d0>
 80079ec:	9b02      	ldr	r3, [sp, #8]
 80079ee:	b9bb      	cbnz	r3, 8007a20 <_dtoa_r+0x8d0>
 80079f0:	9b03      	ldr	r3, [sp, #12]
 80079f2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80079f6:	b99b      	cbnz	r3, 8007a20 <_dtoa_r+0x8d0>
 80079f8:	9b03      	ldr	r3, [sp, #12]
 80079fa:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80079fe:	0d1b      	lsrs	r3, r3, #20
 8007a00:	051b      	lsls	r3, r3, #20
 8007a02:	b183      	cbz	r3, 8007a26 <_dtoa_r+0x8d6>
 8007a04:	9b05      	ldr	r3, [sp, #20]
 8007a06:	3301      	adds	r3, #1
 8007a08:	9305      	str	r3, [sp, #20]
 8007a0a:	9b06      	ldr	r3, [sp, #24]
 8007a0c:	3301      	adds	r3, #1
 8007a0e:	9306      	str	r3, [sp, #24]
 8007a10:	f04f 0801 	mov.w	r8, #1
 8007a14:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	f47f af6f 	bne.w	80078fa <_dtoa_r+0x7aa>
 8007a1c:	2001      	movs	r0, #1
 8007a1e:	e774      	b.n	800790a <_dtoa_r+0x7ba>
 8007a20:	f04f 0800 	mov.w	r8, #0
 8007a24:	e7f6      	b.n	8007a14 <_dtoa_r+0x8c4>
 8007a26:	4698      	mov	r8, r3
 8007a28:	e7f4      	b.n	8007a14 <_dtoa_r+0x8c4>
 8007a2a:	d082      	beq.n	8007932 <_dtoa_r+0x7e2>
 8007a2c:	9a05      	ldr	r2, [sp, #20]
 8007a2e:	331c      	adds	r3, #28
 8007a30:	441a      	add	r2, r3
 8007a32:	9205      	str	r2, [sp, #20]
 8007a34:	9a06      	ldr	r2, [sp, #24]
 8007a36:	441a      	add	r2, r3
 8007a38:	441d      	add	r5, r3
 8007a3a:	9206      	str	r2, [sp, #24]
 8007a3c:	e779      	b.n	8007932 <_dtoa_r+0x7e2>
 8007a3e:	4603      	mov	r3, r0
 8007a40:	e7f4      	b.n	8007a2c <_dtoa_r+0x8dc>
 8007a42:	9b04      	ldr	r3, [sp, #16]
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	dc37      	bgt.n	8007ab8 <_dtoa_r+0x968>
 8007a48:	9b07      	ldr	r3, [sp, #28]
 8007a4a:	2b02      	cmp	r3, #2
 8007a4c:	dd34      	ble.n	8007ab8 <_dtoa_r+0x968>
 8007a4e:	9b04      	ldr	r3, [sp, #16]
 8007a50:	9301      	str	r3, [sp, #4]
 8007a52:	9b01      	ldr	r3, [sp, #4]
 8007a54:	b963      	cbnz	r3, 8007a70 <_dtoa_r+0x920>
 8007a56:	4631      	mov	r1, r6
 8007a58:	2205      	movs	r2, #5
 8007a5a:	4620      	mov	r0, r4
 8007a5c:	f000 f97c 	bl	8007d58 <__multadd>
 8007a60:	4601      	mov	r1, r0
 8007a62:	4606      	mov	r6, r0
 8007a64:	4650      	mov	r0, sl
 8007a66:	f000 fb77 	bl	8008158 <__mcmp>
 8007a6a:	2800      	cmp	r0, #0
 8007a6c:	f73f adbc 	bgt.w	80075e8 <_dtoa_r+0x498>
 8007a70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a72:	9d00      	ldr	r5, [sp, #0]
 8007a74:	ea6f 0b03 	mvn.w	fp, r3
 8007a78:	f04f 0800 	mov.w	r8, #0
 8007a7c:	4631      	mov	r1, r6
 8007a7e:	4620      	mov	r0, r4
 8007a80:	f000 f961 	bl	8007d46 <_Bfree>
 8007a84:	2f00      	cmp	r7, #0
 8007a86:	f43f aeab 	beq.w	80077e0 <_dtoa_r+0x690>
 8007a8a:	f1b8 0f00 	cmp.w	r8, #0
 8007a8e:	d005      	beq.n	8007a9c <_dtoa_r+0x94c>
 8007a90:	45b8      	cmp	r8, r7
 8007a92:	d003      	beq.n	8007a9c <_dtoa_r+0x94c>
 8007a94:	4641      	mov	r1, r8
 8007a96:	4620      	mov	r0, r4
 8007a98:	f000 f955 	bl	8007d46 <_Bfree>
 8007a9c:	4639      	mov	r1, r7
 8007a9e:	4620      	mov	r0, r4
 8007aa0:	f000 f951 	bl	8007d46 <_Bfree>
 8007aa4:	e69c      	b.n	80077e0 <_dtoa_r+0x690>
 8007aa6:	2600      	movs	r6, #0
 8007aa8:	4637      	mov	r7, r6
 8007aaa:	e7e1      	b.n	8007a70 <_dtoa_r+0x920>
 8007aac:	46bb      	mov	fp, r7
 8007aae:	4637      	mov	r7, r6
 8007ab0:	e59a      	b.n	80075e8 <_dtoa_r+0x498>
 8007ab2:	bf00      	nop
 8007ab4:	40240000 	.word	0x40240000
 8007ab8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	f000 80c7 	beq.w	8007c4e <_dtoa_r+0xafe>
 8007ac0:	9b04      	ldr	r3, [sp, #16]
 8007ac2:	9301      	str	r3, [sp, #4]
 8007ac4:	2d00      	cmp	r5, #0
 8007ac6:	dd05      	ble.n	8007ad4 <_dtoa_r+0x984>
 8007ac8:	4639      	mov	r1, r7
 8007aca:	462a      	mov	r2, r5
 8007acc:	4620      	mov	r0, r4
 8007ace:	f000 fad7 	bl	8008080 <__lshift>
 8007ad2:	4607      	mov	r7, r0
 8007ad4:	f1b8 0f00 	cmp.w	r8, #0
 8007ad8:	d05a      	beq.n	8007b90 <_dtoa_r+0xa40>
 8007ada:	6879      	ldr	r1, [r7, #4]
 8007adc:	4620      	mov	r0, r4
 8007ade:	f000 f90d 	bl	8007cfc <_Balloc>
 8007ae2:	4605      	mov	r5, r0
 8007ae4:	b920      	cbnz	r0, 8007af0 <_dtoa_r+0x9a0>
 8007ae6:	4b82      	ldr	r3, [pc, #520]	; (8007cf0 <_dtoa_r+0xba0>)
 8007ae8:	4602      	mov	r2, r0
 8007aea:	f240 21ef 	movw	r1, #751	; 0x2ef
 8007aee:	e470      	b.n	80073d2 <_dtoa_r+0x282>
 8007af0:	693a      	ldr	r2, [r7, #16]
 8007af2:	3202      	adds	r2, #2
 8007af4:	0092      	lsls	r2, r2, #2
 8007af6:	f107 010c 	add.w	r1, r7, #12
 8007afa:	300c      	adds	r0, #12
 8007afc:	f000 fcca 	bl	8008494 <memcpy>
 8007b00:	2201      	movs	r2, #1
 8007b02:	4629      	mov	r1, r5
 8007b04:	4620      	mov	r0, r4
 8007b06:	f000 fabb 	bl	8008080 <__lshift>
 8007b0a:	9b00      	ldr	r3, [sp, #0]
 8007b0c:	3301      	adds	r3, #1
 8007b0e:	9304      	str	r3, [sp, #16]
 8007b10:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007b14:	4413      	add	r3, r2
 8007b16:	9308      	str	r3, [sp, #32]
 8007b18:	9b02      	ldr	r3, [sp, #8]
 8007b1a:	f003 0301 	and.w	r3, r3, #1
 8007b1e:	46b8      	mov	r8, r7
 8007b20:	9306      	str	r3, [sp, #24]
 8007b22:	4607      	mov	r7, r0
 8007b24:	9b04      	ldr	r3, [sp, #16]
 8007b26:	4631      	mov	r1, r6
 8007b28:	3b01      	subs	r3, #1
 8007b2a:	4650      	mov	r0, sl
 8007b2c:	9301      	str	r3, [sp, #4]
 8007b2e:	f7ff fa87 	bl	8007040 <quorem>
 8007b32:	4641      	mov	r1, r8
 8007b34:	9002      	str	r0, [sp, #8]
 8007b36:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8007b3a:	4650      	mov	r0, sl
 8007b3c:	f000 fb0c 	bl	8008158 <__mcmp>
 8007b40:	463a      	mov	r2, r7
 8007b42:	9005      	str	r0, [sp, #20]
 8007b44:	4631      	mov	r1, r6
 8007b46:	4620      	mov	r0, r4
 8007b48:	f000 fb22 	bl	8008190 <__mdiff>
 8007b4c:	68c2      	ldr	r2, [r0, #12]
 8007b4e:	4605      	mov	r5, r0
 8007b50:	bb02      	cbnz	r2, 8007b94 <_dtoa_r+0xa44>
 8007b52:	4601      	mov	r1, r0
 8007b54:	4650      	mov	r0, sl
 8007b56:	f000 faff 	bl	8008158 <__mcmp>
 8007b5a:	4602      	mov	r2, r0
 8007b5c:	4629      	mov	r1, r5
 8007b5e:	4620      	mov	r0, r4
 8007b60:	9209      	str	r2, [sp, #36]	; 0x24
 8007b62:	f000 f8f0 	bl	8007d46 <_Bfree>
 8007b66:	9b07      	ldr	r3, [sp, #28]
 8007b68:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007b6a:	9d04      	ldr	r5, [sp, #16]
 8007b6c:	ea43 0102 	orr.w	r1, r3, r2
 8007b70:	9b06      	ldr	r3, [sp, #24]
 8007b72:	4319      	orrs	r1, r3
 8007b74:	d110      	bne.n	8007b98 <_dtoa_r+0xa48>
 8007b76:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007b7a:	d029      	beq.n	8007bd0 <_dtoa_r+0xa80>
 8007b7c:	9b05      	ldr	r3, [sp, #20]
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	dd02      	ble.n	8007b88 <_dtoa_r+0xa38>
 8007b82:	9b02      	ldr	r3, [sp, #8]
 8007b84:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8007b88:	9b01      	ldr	r3, [sp, #4]
 8007b8a:	f883 9000 	strb.w	r9, [r3]
 8007b8e:	e775      	b.n	8007a7c <_dtoa_r+0x92c>
 8007b90:	4638      	mov	r0, r7
 8007b92:	e7ba      	b.n	8007b0a <_dtoa_r+0x9ba>
 8007b94:	2201      	movs	r2, #1
 8007b96:	e7e1      	b.n	8007b5c <_dtoa_r+0xa0c>
 8007b98:	9b05      	ldr	r3, [sp, #20]
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	db04      	blt.n	8007ba8 <_dtoa_r+0xa58>
 8007b9e:	9907      	ldr	r1, [sp, #28]
 8007ba0:	430b      	orrs	r3, r1
 8007ba2:	9906      	ldr	r1, [sp, #24]
 8007ba4:	430b      	orrs	r3, r1
 8007ba6:	d120      	bne.n	8007bea <_dtoa_r+0xa9a>
 8007ba8:	2a00      	cmp	r2, #0
 8007baa:	dded      	ble.n	8007b88 <_dtoa_r+0xa38>
 8007bac:	4651      	mov	r1, sl
 8007bae:	2201      	movs	r2, #1
 8007bb0:	4620      	mov	r0, r4
 8007bb2:	f000 fa65 	bl	8008080 <__lshift>
 8007bb6:	4631      	mov	r1, r6
 8007bb8:	4682      	mov	sl, r0
 8007bba:	f000 facd 	bl	8008158 <__mcmp>
 8007bbe:	2800      	cmp	r0, #0
 8007bc0:	dc03      	bgt.n	8007bca <_dtoa_r+0xa7a>
 8007bc2:	d1e1      	bne.n	8007b88 <_dtoa_r+0xa38>
 8007bc4:	f019 0f01 	tst.w	r9, #1
 8007bc8:	d0de      	beq.n	8007b88 <_dtoa_r+0xa38>
 8007bca:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007bce:	d1d8      	bne.n	8007b82 <_dtoa_r+0xa32>
 8007bd0:	9a01      	ldr	r2, [sp, #4]
 8007bd2:	2339      	movs	r3, #57	; 0x39
 8007bd4:	7013      	strb	r3, [r2, #0]
 8007bd6:	462b      	mov	r3, r5
 8007bd8:	461d      	mov	r5, r3
 8007bda:	3b01      	subs	r3, #1
 8007bdc:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007be0:	2a39      	cmp	r2, #57	; 0x39
 8007be2:	d06c      	beq.n	8007cbe <_dtoa_r+0xb6e>
 8007be4:	3201      	adds	r2, #1
 8007be6:	701a      	strb	r2, [r3, #0]
 8007be8:	e748      	b.n	8007a7c <_dtoa_r+0x92c>
 8007bea:	2a00      	cmp	r2, #0
 8007bec:	dd07      	ble.n	8007bfe <_dtoa_r+0xaae>
 8007bee:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007bf2:	d0ed      	beq.n	8007bd0 <_dtoa_r+0xa80>
 8007bf4:	9a01      	ldr	r2, [sp, #4]
 8007bf6:	f109 0301 	add.w	r3, r9, #1
 8007bfa:	7013      	strb	r3, [r2, #0]
 8007bfc:	e73e      	b.n	8007a7c <_dtoa_r+0x92c>
 8007bfe:	9b04      	ldr	r3, [sp, #16]
 8007c00:	9a08      	ldr	r2, [sp, #32]
 8007c02:	f803 9c01 	strb.w	r9, [r3, #-1]
 8007c06:	4293      	cmp	r3, r2
 8007c08:	d043      	beq.n	8007c92 <_dtoa_r+0xb42>
 8007c0a:	4651      	mov	r1, sl
 8007c0c:	2300      	movs	r3, #0
 8007c0e:	220a      	movs	r2, #10
 8007c10:	4620      	mov	r0, r4
 8007c12:	f000 f8a1 	bl	8007d58 <__multadd>
 8007c16:	45b8      	cmp	r8, r7
 8007c18:	4682      	mov	sl, r0
 8007c1a:	f04f 0300 	mov.w	r3, #0
 8007c1e:	f04f 020a 	mov.w	r2, #10
 8007c22:	4641      	mov	r1, r8
 8007c24:	4620      	mov	r0, r4
 8007c26:	d107      	bne.n	8007c38 <_dtoa_r+0xae8>
 8007c28:	f000 f896 	bl	8007d58 <__multadd>
 8007c2c:	4680      	mov	r8, r0
 8007c2e:	4607      	mov	r7, r0
 8007c30:	9b04      	ldr	r3, [sp, #16]
 8007c32:	3301      	adds	r3, #1
 8007c34:	9304      	str	r3, [sp, #16]
 8007c36:	e775      	b.n	8007b24 <_dtoa_r+0x9d4>
 8007c38:	f000 f88e 	bl	8007d58 <__multadd>
 8007c3c:	4639      	mov	r1, r7
 8007c3e:	4680      	mov	r8, r0
 8007c40:	2300      	movs	r3, #0
 8007c42:	220a      	movs	r2, #10
 8007c44:	4620      	mov	r0, r4
 8007c46:	f000 f887 	bl	8007d58 <__multadd>
 8007c4a:	4607      	mov	r7, r0
 8007c4c:	e7f0      	b.n	8007c30 <_dtoa_r+0xae0>
 8007c4e:	9b04      	ldr	r3, [sp, #16]
 8007c50:	9301      	str	r3, [sp, #4]
 8007c52:	9d00      	ldr	r5, [sp, #0]
 8007c54:	4631      	mov	r1, r6
 8007c56:	4650      	mov	r0, sl
 8007c58:	f7ff f9f2 	bl	8007040 <quorem>
 8007c5c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8007c60:	9b00      	ldr	r3, [sp, #0]
 8007c62:	f805 9b01 	strb.w	r9, [r5], #1
 8007c66:	1aea      	subs	r2, r5, r3
 8007c68:	9b01      	ldr	r3, [sp, #4]
 8007c6a:	4293      	cmp	r3, r2
 8007c6c:	dd07      	ble.n	8007c7e <_dtoa_r+0xb2e>
 8007c6e:	4651      	mov	r1, sl
 8007c70:	2300      	movs	r3, #0
 8007c72:	220a      	movs	r2, #10
 8007c74:	4620      	mov	r0, r4
 8007c76:	f000 f86f 	bl	8007d58 <__multadd>
 8007c7a:	4682      	mov	sl, r0
 8007c7c:	e7ea      	b.n	8007c54 <_dtoa_r+0xb04>
 8007c7e:	9b01      	ldr	r3, [sp, #4]
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	bfc8      	it	gt
 8007c84:	461d      	movgt	r5, r3
 8007c86:	9b00      	ldr	r3, [sp, #0]
 8007c88:	bfd8      	it	le
 8007c8a:	2501      	movle	r5, #1
 8007c8c:	441d      	add	r5, r3
 8007c8e:	f04f 0800 	mov.w	r8, #0
 8007c92:	4651      	mov	r1, sl
 8007c94:	2201      	movs	r2, #1
 8007c96:	4620      	mov	r0, r4
 8007c98:	f000 f9f2 	bl	8008080 <__lshift>
 8007c9c:	4631      	mov	r1, r6
 8007c9e:	4682      	mov	sl, r0
 8007ca0:	f000 fa5a 	bl	8008158 <__mcmp>
 8007ca4:	2800      	cmp	r0, #0
 8007ca6:	dc96      	bgt.n	8007bd6 <_dtoa_r+0xa86>
 8007ca8:	d102      	bne.n	8007cb0 <_dtoa_r+0xb60>
 8007caa:	f019 0f01 	tst.w	r9, #1
 8007cae:	d192      	bne.n	8007bd6 <_dtoa_r+0xa86>
 8007cb0:	462b      	mov	r3, r5
 8007cb2:	461d      	mov	r5, r3
 8007cb4:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007cb8:	2a30      	cmp	r2, #48	; 0x30
 8007cba:	d0fa      	beq.n	8007cb2 <_dtoa_r+0xb62>
 8007cbc:	e6de      	b.n	8007a7c <_dtoa_r+0x92c>
 8007cbe:	9a00      	ldr	r2, [sp, #0]
 8007cc0:	429a      	cmp	r2, r3
 8007cc2:	d189      	bne.n	8007bd8 <_dtoa_r+0xa88>
 8007cc4:	f10b 0b01 	add.w	fp, fp, #1
 8007cc8:	2331      	movs	r3, #49	; 0x31
 8007cca:	e796      	b.n	8007bfa <_dtoa_r+0xaaa>
 8007ccc:	4b09      	ldr	r3, [pc, #36]	; (8007cf4 <_dtoa_r+0xba4>)
 8007cce:	f7ff ba9d 	b.w	800720c <_dtoa_r+0xbc>
 8007cd2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	f47f aa7c 	bne.w	80071d2 <_dtoa_r+0x82>
 8007cda:	4b07      	ldr	r3, [pc, #28]	; (8007cf8 <_dtoa_r+0xba8>)
 8007cdc:	f7ff ba96 	b.w	800720c <_dtoa_r+0xbc>
 8007ce0:	9b01      	ldr	r3, [sp, #4]
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	dcb5      	bgt.n	8007c52 <_dtoa_r+0xb02>
 8007ce6:	9b07      	ldr	r3, [sp, #28]
 8007ce8:	2b02      	cmp	r3, #2
 8007cea:	f73f aeb2 	bgt.w	8007a52 <_dtoa_r+0x902>
 8007cee:	e7b0      	b.n	8007c52 <_dtoa_r+0xb02>
 8007cf0:	08009ab1 	.word	0x08009ab1
 8007cf4:	08009a82 	.word	0x08009a82
 8007cf8:	08009aa4 	.word	0x08009aa4

08007cfc <_Balloc>:
 8007cfc:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8007cfe:	b570      	push	{r4, r5, r6, lr}
 8007d00:	4605      	mov	r5, r0
 8007d02:	460c      	mov	r4, r1
 8007d04:	b17b      	cbz	r3, 8007d26 <_Balloc+0x2a>
 8007d06:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8007d08:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8007d0c:	b9a0      	cbnz	r0, 8007d38 <_Balloc+0x3c>
 8007d0e:	2101      	movs	r1, #1
 8007d10:	fa01 f604 	lsl.w	r6, r1, r4
 8007d14:	1d72      	adds	r2, r6, #5
 8007d16:	0092      	lsls	r2, r2, #2
 8007d18:	4628      	mov	r0, r5
 8007d1a:	f000 fbe7 	bl	80084ec <_calloc_r>
 8007d1e:	b148      	cbz	r0, 8007d34 <_Balloc+0x38>
 8007d20:	e9c0 4601 	strd	r4, r6, [r0, #4]
 8007d24:	e00b      	b.n	8007d3e <_Balloc+0x42>
 8007d26:	2221      	movs	r2, #33	; 0x21
 8007d28:	2104      	movs	r1, #4
 8007d2a:	f000 fbdf 	bl	80084ec <_calloc_r>
 8007d2e:	6468      	str	r0, [r5, #68]	; 0x44
 8007d30:	2800      	cmp	r0, #0
 8007d32:	d1e8      	bne.n	8007d06 <_Balloc+0xa>
 8007d34:	2000      	movs	r0, #0
 8007d36:	bd70      	pop	{r4, r5, r6, pc}
 8007d38:	6802      	ldr	r2, [r0, #0]
 8007d3a:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 8007d3e:	2300      	movs	r3, #0
 8007d40:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007d44:	e7f7      	b.n	8007d36 <_Balloc+0x3a>

08007d46 <_Bfree>:
 8007d46:	b131      	cbz	r1, 8007d56 <_Bfree+0x10>
 8007d48:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8007d4a:	684a      	ldr	r2, [r1, #4]
 8007d4c:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8007d50:	6008      	str	r0, [r1, #0]
 8007d52:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8007d56:	4770      	bx	lr

08007d58 <__multadd>:
 8007d58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d5c:	690d      	ldr	r5, [r1, #16]
 8007d5e:	4607      	mov	r7, r0
 8007d60:	460c      	mov	r4, r1
 8007d62:	461e      	mov	r6, r3
 8007d64:	f101 0c14 	add.w	ip, r1, #20
 8007d68:	2000      	movs	r0, #0
 8007d6a:	f8dc 3000 	ldr.w	r3, [ip]
 8007d6e:	b299      	uxth	r1, r3
 8007d70:	fb02 6101 	mla	r1, r2, r1, r6
 8007d74:	0c1e      	lsrs	r6, r3, #16
 8007d76:	0c0b      	lsrs	r3, r1, #16
 8007d78:	fb02 3306 	mla	r3, r2, r6, r3
 8007d7c:	b289      	uxth	r1, r1
 8007d7e:	3001      	adds	r0, #1
 8007d80:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007d84:	4285      	cmp	r5, r0
 8007d86:	f84c 1b04 	str.w	r1, [ip], #4
 8007d8a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007d8e:	dcec      	bgt.n	8007d6a <__multadd+0x12>
 8007d90:	b30e      	cbz	r6, 8007dd6 <__multadd+0x7e>
 8007d92:	68a3      	ldr	r3, [r4, #8]
 8007d94:	42ab      	cmp	r3, r5
 8007d96:	dc19      	bgt.n	8007dcc <__multadd+0x74>
 8007d98:	6861      	ldr	r1, [r4, #4]
 8007d9a:	4638      	mov	r0, r7
 8007d9c:	3101      	adds	r1, #1
 8007d9e:	f7ff ffad 	bl	8007cfc <_Balloc>
 8007da2:	4680      	mov	r8, r0
 8007da4:	b928      	cbnz	r0, 8007db2 <__multadd+0x5a>
 8007da6:	4602      	mov	r2, r0
 8007da8:	4b0c      	ldr	r3, [pc, #48]	; (8007ddc <__multadd+0x84>)
 8007daa:	480d      	ldr	r0, [pc, #52]	; (8007de0 <__multadd+0x88>)
 8007dac:	21ba      	movs	r1, #186	; 0xba
 8007dae:	f000 fb7f 	bl	80084b0 <__assert_func>
 8007db2:	6922      	ldr	r2, [r4, #16]
 8007db4:	3202      	adds	r2, #2
 8007db6:	f104 010c 	add.w	r1, r4, #12
 8007dba:	0092      	lsls	r2, r2, #2
 8007dbc:	300c      	adds	r0, #12
 8007dbe:	f000 fb69 	bl	8008494 <memcpy>
 8007dc2:	4621      	mov	r1, r4
 8007dc4:	4638      	mov	r0, r7
 8007dc6:	f7ff ffbe 	bl	8007d46 <_Bfree>
 8007dca:	4644      	mov	r4, r8
 8007dcc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007dd0:	3501      	adds	r5, #1
 8007dd2:	615e      	str	r6, [r3, #20]
 8007dd4:	6125      	str	r5, [r4, #16]
 8007dd6:	4620      	mov	r0, r4
 8007dd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007ddc:	08009ab1 	.word	0x08009ab1
 8007de0:	08009b1a 	.word	0x08009b1a

08007de4 <__hi0bits>:
 8007de4:	0c03      	lsrs	r3, r0, #16
 8007de6:	041b      	lsls	r3, r3, #16
 8007de8:	b9d3      	cbnz	r3, 8007e20 <__hi0bits+0x3c>
 8007dea:	0400      	lsls	r0, r0, #16
 8007dec:	2310      	movs	r3, #16
 8007dee:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8007df2:	bf04      	itt	eq
 8007df4:	0200      	lsleq	r0, r0, #8
 8007df6:	3308      	addeq	r3, #8
 8007df8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8007dfc:	bf04      	itt	eq
 8007dfe:	0100      	lsleq	r0, r0, #4
 8007e00:	3304      	addeq	r3, #4
 8007e02:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8007e06:	bf04      	itt	eq
 8007e08:	0080      	lsleq	r0, r0, #2
 8007e0a:	3302      	addeq	r3, #2
 8007e0c:	2800      	cmp	r0, #0
 8007e0e:	db05      	blt.n	8007e1c <__hi0bits+0x38>
 8007e10:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007e14:	f103 0301 	add.w	r3, r3, #1
 8007e18:	bf08      	it	eq
 8007e1a:	2320      	moveq	r3, #32
 8007e1c:	4618      	mov	r0, r3
 8007e1e:	4770      	bx	lr
 8007e20:	2300      	movs	r3, #0
 8007e22:	e7e4      	b.n	8007dee <__hi0bits+0xa>

08007e24 <__lo0bits>:
 8007e24:	6803      	ldr	r3, [r0, #0]
 8007e26:	f013 0207 	ands.w	r2, r3, #7
 8007e2a:	d00c      	beq.n	8007e46 <__lo0bits+0x22>
 8007e2c:	07d9      	lsls	r1, r3, #31
 8007e2e:	d422      	bmi.n	8007e76 <__lo0bits+0x52>
 8007e30:	079a      	lsls	r2, r3, #30
 8007e32:	bf49      	itett	mi
 8007e34:	085b      	lsrmi	r3, r3, #1
 8007e36:	089b      	lsrpl	r3, r3, #2
 8007e38:	6003      	strmi	r3, [r0, #0]
 8007e3a:	2201      	movmi	r2, #1
 8007e3c:	bf5c      	itt	pl
 8007e3e:	6003      	strpl	r3, [r0, #0]
 8007e40:	2202      	movpl	r2, #2
 8007e42:	4610      	mov	r0, r2
 8007e44:	4770      	bx	lr
 8007e46:	b299      	uxth	r1, r3
 8007e48:	b909      	cbnz	r1, 8007e4e <__lo0bits+0x2a>
 8007e4a:	0c1b      	lsrs	r3, r3, #16
 8007e4c:	2210      	movs	r2, #16
 8007e4e:	b2d9      	uxtb	r1, r3
 8007e50:	b909      	cbnz	r1, 8007e56 <__lo0bits+0x32>
 8007e52:	3208      	adds	r2, #8
 8007e54:	0a1b      	lsrs	r3, r3, #8
 8007e56:	0719      	lsls	r1, r3, #28
 8007e58:	bf04      	itt	eq
 8007e5a:	091b      	lsreq	r3, r3, #4
 8007e5c:	3204      	addeq	r2, #4
 8007e5e:	0799      	lsls	r1, r3, #30
 8007e60:	bf04      	itt	eq
 8007e62:	089b      	lsreq	r3, r3, #2
 8007e64:	3202      	addeq	r2, #2
 8007e66:	07d9      	lsls	r1, r3, #31
 8007e68:	d403      	bmi.n	8007e72 <__lo0bits+0x4e>
 8007e6a:	085b      	lsrs	r3, r3, #1
 8007e6c:	f102 0201 	add.w	r2, r2, #1
 8007e70:	d003      	beq.n	8007e7a <__lo0bits+0x56>
 8007e72:	6003      	str	r3, [r0, #0]
 8007e74:	e7e5      	b.n	8007e42 <__lo0bits+0x1e>
 8007e76:	2200      	movs	r2, #0
 8007e78:	e7e3      	b.n	8007e42 <__lo0bits+0x1e>
 8007e7a:	2220      	movs	r2, #32
 8007e7c:	e7e1      	b.n	8007e42 <__lo0bits+0x1e>
	...

08007e80 <__i2b>:
 8007e80:	b510      	push	{r4, lr}
 8007e82:	460c      	mov	r4, r1
 8007e84:	2101      	movs	r1, #1
 8007e86:	f7ff ff39 	bl	8007cfc <_Balloc>
 8007e8a:	4602      	mov	r2, r0
 8007e8c:	b928      	cbnz	r0, 8007e9a <__i2b+0x1a>
 8007e8e:	4b05      	ldr	r3, [pc, #20]	; (8007ea4 <__i2b+0x24>)
 8007e90:	4805      	ldr	r0, [pc, #20]	; (8007ea8 <__i2b+0x28>)
 8007e92:	f240 1145 	movw	r1, #325	; 0x145
 8007e96:	f000 fb0b 	bl	80084b0 <__assert_func>
 8007e9a:	2301      	movs	r3, #1
 8007e9c:	6144      	str	r4, [r0, #20]
 8007e9e:	6103      	str	r3, [r0, #16]
 8007ea0:	bd10      	pop	{r4, pc}
 8007ea2:	bf00      	nop
 8007ea4:	08009ab1 	.word	0x08009ab1
 8007ea8:	08009b1a 	.word	0x08009b1a

08007eac <__multiply>:
 8007eac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007eb0:	4691      	mov	r9, r2
 8007eb2:	690a      	ldr	r2, [r1, #16]
 8007eb4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007eb8:	429a      	cmp	r2, r3
 8007eba:	bfb8      	it	lt
 8007ebc:	460b      	movlt	r3, r1
 8007ebe:	460c      	mov	r4, r1
 8007ec0:	bfbc      	itt	lt
 8007ec2:	464c      	movlt	r4, r9
 8007ec4:	4699      	movlt	r9, r3
 8007ec6:	6927      	ldr	r7, [r4, #16]
 8007ec8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007ecc:	68a3      	ldr	r3, [r4, #8]
 8007ece:	6861      	ldr	r1, [r4, #4]
 8007ed0:	eb07 060a 	add.w	r6, r7, sl
 8007ed4:	42b3      	cmp	r3, r6
 8007ed6:	b085      	sub	sp, #20
 8007ed8:	bfb8      	it	lt
 8007eda:	3101      	addlt	r1, #1
 8007edc:	f7ff ff0e 	bl	8007cfc <_Balloc>
 8007ee0:	b930      	cbnz	r0, 8007ef0 <__multiply+0x44>
 8007ee2:	4602      	mov	r2, r0
 8007ee4:	4b44      	ldr	r3, [pc, #272]	; (8007ff8 <__multiply+0x14c>)
 8007ee6:	4845      	ldr	r0, [pc, #276]	; (8007ffc <__multiply+0x150>)
 8007ee8:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8007eec:	f000 fae0 	bl	80084b0 <__assert_func>
 8007ef0:	f100 0514 	add.w	r5, r0, #20
 8007ef4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007ef8:	462b      	mov	r3, r5
 8007efa:	2200      	movs	r2, #0
 8007efc:	4543      	cmp	r3, r8
 8007efe:	d321      	bcc.n	8007f44 <__multiply+0x98>
 8007f00:	f104 0314 	add.w	r3, r4, #20
 8007f04:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007f08:	f109 0314 	add.w	r3, r9, #20
 8007f0c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8007f10:	9202      	str	r2, [sp, #8]
 8007f12:	1b3a      	subs	r2, r7, r4
 8007f14:	3a15      	subs	r2, #21
 8007f16:	f022 0203 	bic.w	r2, r2, #3
 8007f1a:	3204      	adds	r2, #4
 8007f1c:	f104 0115 	add.w	r1, r4, #21
 8007f20:	428f      	cmp	r7, r1
 8007f22:	bf38      	it	cc
 8007f24:	2204      	movcc	r2, #4
 8007f26:	9201      	str	r2, [sp, #4]
 8007f28:	9a02      	ldr	r2, [sp, #8]
 8007f2a:	9303      	str	r3, [sp, #12]
 8007f2c:	429a      	cmp	r2, r3
 8007f2e:	d80c      	bhi.n	8007f4a <__multiply+0x9e>
 8007f30:	2e00      	cmp	r6, #0
 8007f32:	dd03      	ble.n	8007f3c <__multiply+0x90>
 8007f34:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d05b      	beq.n	8007ff4 <__multiply+0x148>
 8007f3c:	6106      	str	r6, [r0, #16]
 8007f3e:	b005      	add	sp, #20
 8007f40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f44:	f843 2b04 	str.w	r2, [r3], #4
 8007f48:	e7d8      	b.n	8007efc <__multiply+0x50>
 8007f4a:	f8b3 a000 	ldrh.w	sl, [r3]
 8007f4e:	f1ba 0f00 	cmp.w	sl, #0
 8007f52:	d024      	beq.n	8007f9e <__multiply+0xf2>
 8007f54:	f104 0e14 	add.w	lr, r4, #20
 8007f58:	46a9      	mov	r9, r5
 8007f5a:	f04f 0c00 	mov.w	ip, #0
 8007f5e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8007f62:	f8d9 1000 	ldr.w	r1, [r9]
 8007f66:	fa1f fb82 	uxth.w	fp, r2
 8007f6a:	b289      	uxth	r1, r1
 8007f6c:	fb0a 110b 	mla	r1, sl, fp, r1
 8007f70:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8007f74:	f8d9 2000 	ldr.w	r2, [r9]
 8007f78:	4461      	add	r1, ip
 8007f7a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007f7e:	fb0a c20b 	mla	r2, sl, fp, ip
 8007f82:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007f86:	b289      	uxth	r1, r1
 8007f88:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007f8c:	4577      	cmp	r7, lr
 8007f8e:	f849 1b04 	str.w	r1, [r9], #4
 8007f92:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007f96:	d8e2      	bhi.n	8007f5e <__multiply+0xb2>
 8007f98:	9a01      	ldr	r2, [sp, #4]
 8007f9a:	f845 c002 	str.w	ip, [r5, r2]
 8007f9e:	9a03      	ldr	r2, [sp, #12]
 8007fa0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007fa4:	3304      	adds	r3, #4
 8007fa6:	f1b9 0f00 	cmp.w	r9, #0
 8007faa:	d021      	beq.n	8007ff0 <__multiply+0x144>
 8007fac:	6829      	ldr	r1, [r5, #0]
 8007fae:	f104 0c14 	add.w	ip, r4, #20
 8007fb2:	46ae      	mov	lr, r5
 8007fb4:	f04f 0a00 	mov.w	sl, #0
 8007fb8:	f8bc b000 	ldrh.w	fp, [ip]
 8007fbc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007fc0:	fb09 220b 	mla	r2, r9, fp, r2
 8007fc4:	4452      	add	r2, sl
 8007fc6:	b289      	uxth	r1, r1
 8007fc8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007fcc:	f84e 1b04 	str.w	r1, [lr], #4
 8007fd0:	f85c 1b04 	ldr.w	r1, [ip], #4
 8007fd4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007fd8:	f8be 1000 	ldrh.w	r1, [lr]
 8007fdc:	fb09 110a 	mla	r1, r9, sl, r1
 8007fe0:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8007fe4:	4567      	cmp	r7, ip
 8007fe6:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007fea:	d8e5      	bhi.n	8007fb8 <__multiply+0x10c>
 8007fec:	9a01      	ldr	r2, [sp, #4]
 8007fee:	50a9      	str	r1, [r5, r2]
 8007ff0:	3504      	adds	r5, #4
 8007ff2:	e799      	b.n	8007f28 <__multiply+0x7c>
 8007ff4:	3e01      	subs	r6, #1
 8007ff6:	e79b      	b.n	8007f30 <__multiply+0x84>
 8007ff8:	08009ab1 	.word	0x08009ab1
 8007ffc:	08009b1a 	.word	0x08009b1a

08008000 <__pow5mult>:
 8008000:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008004:	4615      	mov	r5, r2
 8008006:	f012 0203 	ands.w	r2, r2, #3
 800800a:	4606      	mov	r6, r0
 800800c:	460f      	mov	r7, r1
 800800e:	d007      	beq.n	8008020 <__pow5mult+0x20>
 8008010:	4c1a      	ldr	r4, [pc, #104]	; (800807c <__pow5mult+0x7c>)
 8008012:	3a01      	subs	r2, #1
 8008014:	2300      	movs	r3, #0
 8008016:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800801a:	f7ff fe9d 	bl	8007d58 <__multadd>
 800801e:	4607      	mov	r7, r0
 8008020:	10ad      	asrs	r5, r5, #2
 8008022:	d027      	beq.n	8008074 <__pow5mult+0x74>
 8008024:	6c34      	ldr	r4, [r6, #64]	; 0x40
 8008026:	b944      	cbnz	r4, 800803a <__pow5mult+0x3a>
 8008028:	f240 2171 	movw	r1, #625	; 0x271
 800802c:	4630      	mov	r0, r6
 800802e:	f7ff ff27 	bl	8007e80 <__i2b>
 8008032:	2300      	movs	r3, #0
 8008034:	6430      	str	r0, [r6, #64]	; 0x40
 8008036:	4604      	mov	r4, r0
 8008038:	6003      	str	r3, [r0, #0]
 800803a:	f04f 0900 	mov.w	r9, #0
 800803e:	07eb      	lsls	r3, r5, #31
 8008040:	d50a      	bpl.n	8008058 <__pow5mult+0x58>
 8008042:	4639      	mov	r1, r7
 8008044:	4622      	mov	r2, r4
 8008046:	4630      	mov	r0, r6
 8008048:	f7ff ff30 	bl	8007eac <__multiply>
 800804c:	4639      	mov	r1, r7
 800804e:	4680      	mov	r8, r0
 8008050:	4630      	mov	r0, r6
 8008052:	f7ff fe78 	bl	8007d46 <_Bfree>
 8008056:	4647      	mov	r7, r8
 8008058:	106d      	asrs	r5, r5, #1
 800805a:	d00b      	beq.n	8008074 <__pow5mult+0x74>
 800805c:	6820      	ldr	r0, [r4, #0]
 800805e:	b938      	cbnz	r0, 8008070 <__pow5mult+0x70>
 8008060:	4622      	mov	r2, r4
 8008062:	4621      	mov	r1, r4
 8008064:	4630      	mov	r0, r6
 8008066:	f7ff ff21 	bl	8007eac <__multiply>
 800806a:	6020      	str	r0, [r4, #0]
 800806c:	f8c0 9000 	str.w	r9, [r0]
 8008070:	4604      	mov	r4, r0
 8008072:	e7e4      	b.n	800803e <__pow5mult+0x3e>
 8008074:	4638      	mov	r0, r7
 8008076:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800807a:	bf00      	nop
 800807c:	08009c68 	.word	0x08009c68

08008080 <__lshift>:
 8008080:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008084:	460c      	mov	r4, r1
 8008086:	6849      	ldr	r1, [r1, #4]
 8008088:	6923      	ldr	r3, [r4, #16]
 800808a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800808e:	68a3      	ldr	r3, [r4, #8]
 8008090:	4607      	mov	r7, r0
 8008092:	4691      	mov	r9, r2
 8008094:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008098:	f108 0601 	add.w	r6, r8, #1
 800809c:	42b3      	cmp	r3, r6
 800809e:	db0b      	blt.n	80080b8 <__lshift+0x38>
 80080a0:	4638      	mov	r0, r7
 80080a2:	f7ff fe2b 	bl	8007cfc <_Balloc>
 80080a6:	4605      	mov	r5, r0
 80080a8:	b948      	cbnz	r0, 80080be <__lshift+0x3e>
 80080aa:	4602      	mov	r2, r0
 80080ac:	4b28      	ldr	r3, [pc, #160]	; (8008150 <__lshift+0xd0>)
 80080ae:	4829      	ldr	r0, [pc, #164]	; (8008154 <__lshift+0xd4>)
 80080b0:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 80080b4:	f000 f9fc 	bl	80084b0 <__assert_func>
 80080b8:	3101      	adds	r1, #1
 80080ba:	005b      	lsls	r3, r3, #1
 80080bc:	e7ee      	b.n	800809c <__lshift+0x1c>
 80080be:	2300      	movs	r3, #0
 80080c0:	f100 0114 	add.w	r1, r0, #20
 80080c4:	f100 0210 	add.w	r2, r0, #16
 80080c8:	4618      	mov	r0, r3
 80080ca:	4553      	cmp	r3, sl
 80080cc:	db33      	blt.n	8008136 <__lshift+0xb6>
 80080ce:	6920      	ldr	r0, [r4, #16]
 80080d0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80080d4:	f104 0314 	add.w	r3, r4, #20
 80080d8:	f019 091f 	ands.w	r9, r9, #31
 80080dc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80080e0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80080e4:	d02b      	beq.n	800813e <__lshift+0xbe>
 80080e6:	f1c9 0e20 	rsb	lr, r9, #32
 80080ea:	468a      	mov	sl, r1
 80080ec:	2200      	movs	r2, #0
 80080ee:	6818      	ldr	r0, [r3, #0]
 80080f0:	fa00 f009 	lsl.w	r0, r0, r9
 80080f4:	4310      	orrs	r0, r2
 80080f6:	f84a 0b04 	str.w	r0, [sl], #4
 80080fa:	f853 2b04 	ldr.w	r2, [r3], #4
 80080fe:	459c      	cmp	ip, r3
 8008100:	fa22 f20e 	lsr.w	r2, r2, lr
 8008104:	d8f3      	bhi.n	80080ee <__lshift+0x6e>
 8008106:	ebac 0304 	sub.w	r3, ip, r4
 800810a:	3b15      	subs	r3, #21
 800810c:	f023 0303 	bic.w	r3, r3, #3
 8008110:	3304      	adds	r3, #4
 8008112:	f104 0015 	add.w	r0, r4, #21
 8008116:	4584      	cmp	ip, r0
 8008118:	bf38      	it	cc
 800811a:	2304      	movcc	r3, #4
 800811c:	50ca      	str	r2, [r1, r3]
 800811e:	b10a      	cbz	r2, 8008124 <__lshift+0xa4>
 8008120:	f108 0602 	add.w	r6, r8, #2
 8008124:	3e01      	subs	r6, #1
 8008126:	4638      	mov	r0, r7
 8008128:	612e      	str	r6, [r5, #16]
 800812a:	4621      	mov	r1, r4
 800812c:	f7ff fe0b 	bl	8007d46 <_Bfree>
 8008130:	4628      	mov	r0, r5
 8008132:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008136:	f842 0f04 	str.w	r0, [r2, #4]!
 800813a:	3301      	adds	r3, #1
 800813c:	e7c5      	b.n	80080ca <__lshift+0x4a>
 800813e:	3904      	subs	r1, #4
 8008140:	f853 2b04 	ldr.w	r2, [r3], #4
 8008144:	f841 2f04 	str.w	r2, [r1, #4]!
 8008148:	459c      	cmp	ip, r3
 800814a:	d8f9      	bhi.n	8008140 <__lshift+0xc0>
 800814c:	e7ea      	b.n	8008124 <__lshift+0xa4>
 800814e:	bf00      	nop
 8008150:	08009ab1 	.word	0x08009ab1
 8008154:	08009b1a 	.word	0x08009b1a

08008158 <__mcmp>:
 8008158:	b530      	push	{r4, r5, lr}
 800815a:	6902      	ldr	r2, [r0, #16]
 800815c:	690c      	ldr	r4, [r1, #16]
 800815e:	1b12      	subs	r2, r2, r4
 8008160:	d10e      	bne.n	8008180 <__mcmp+0x28>
 8008162:	f100 0314 	add.w	r3, r0, #20
 8008166:	3114      	adds	r1, #20
 8008168:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800816c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008170:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008174:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008178:	42a5      	cmp	r5, r4
 800817a:	d003      	beq.n	8008184 <__mcmp+0x2c>
 800817c:	d305      	bcc.n	800818a <__mcmp+0x32>
 800817e:	2201      	movs	r2, #1
 8008180:	4610      	mov	r0, r2
 8008182:	bd30      	pop	{r4, r5, pc}
 8008184:	4283      	cmp	r3, r0
 8008186:	d3f3      	bcc.n	8008170 <__mcmp+0x18>
 8008188:	e7fa      	b.n	8008180 <__mcmp+0x28>
 800818a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800818e:	e7f7      	b.n	8008180 <__mcmp+0x28>

08008190 <__mdiff>:
 8008190:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008194:	460c      	mov	r4, r1
 8008196:	4606      	mov	r6, r0
 8008198:	4611      	mov	r1, r2
 800819a:	4620      	mov	r0, r4
 800819c:	4690      	mov	r8, r2
 800819e:	f7ff ffdb 	bl	8008158 <__mcmp>
 80081a2:	1e05      	subs	r5, r0, #0
 80081a4:	d110      	bne.n	80081c8 <__mdiff+0x38>
 80081a6:	4629      	mov	r1, r5
 80081a8:	4630      	mov	r0, r6
 80081aa:	f7ff fda7 	bl	8007cfc <_Balloc>
 80081ae:	b930      	cbnz	r0, 80081be <__mdiff+0x2e>
 80081b0:	4b3a      	ldr	r3, [pc, #232]	; (800829c <__mdiff+0x10c>)
 80081b2:	4602      	mov	r2, r0
 80081b4:	f240 2137 	movw	r1, #567	; 0x237
 80081b8:	4839      	ldr	r0, [pc, #228]	; (80082a0 <__mdiff+0x110>)
 80081ba:	f000 f979 	bl	80084b0 <__assert_func>
 80081be:	2301      	movs	r3, #1
 80081c0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80081c4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081c8:	bfa4      	itt	ge
 80081ca:	4643      	movge	r3, r8
 80081cc:	46a0      	movge	r8, r4
 80081ce:	4630      	mov	r0, r6
 80081d0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80081d4:	bfa6      	itte	ge
 80081d6:	461c      	movge	r4, r3
 80081d8:	2500      	movge	r5, #0
 80081da:	2501      	movlt	r5, #1
 80081dc:	f7ff fd8e 	bl	8007cfc <_Balloc>
 80081e0:	b920      	cbnz	r0, 80081ec <__mdiff+0x5c>
 80081e2:	4b2e      	ldr	r3, [pc, #184]	; (800829c <__mdiff+0x10c>)
 80081e4:	4602      	mov	r2, r0
 80081e6:	f240 2145 	movw	r1, #581	; 0x245
 80081ea:	e7e5      	b.n	80081b8 <__mdiff+0x28>
 80081ec:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80081f0:	6926      	ldr	r6, [r4, #16]
 80081f2:	60c5      	str	r5, [r0, #12]
 80081f4:	f104 0914 	add.w	r9, r4, #20
 80081f8:	f108 0514 	add.w	r5, r8, #20
 80081fc:	f100 0e14 	add.w	lr, r0, #20
 8008200:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8008204:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008208:	f108 0210 	add.w	r2, r8, #16
 800820c:	46f2      	mov	sl, lr
 800820e:	2100      	movs	r1, #0
 8008210:	f859 3b04 	ldr.w	r3, [r9], #4
 8008214:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008218:	fa11 f88b 	uxtah	r8, r1, fp
 800821c:	b299      	uxth	r1, r3
 800821e:	0c1b      	lsrs	r3, r3, #16
 8008220:	eba8 0801 	sub.w	r8, r8, r1
 8008224:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008228:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800822c:	fa1f f888 	uxth.w	r8, r8
 8008230:	1419      	asrs	r1, r3, #16
 8008232:	454e      	cmp	r6, r9
 8008234:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008238:	f84a 3b04 	str.w	r3, [sl], #4
 800823c:	d8e8      	bhi.n	8008210 <__mdiff+0x80>
 800823e:	1b33      	subs	r3, r6, r4
 8008240:	3b15      	subs	r3, #21
 8008242:	f023 0303 	bic.w	r3, r3, #3
 8008246:	3304      	adds	r3, #4
 8008248:	3415      	adds	r4, #21
 800824a:	42a6      	cmp	r6, r4
 800824c:	bf38      	it	cc
 800824e:	2304      	movcc	r3, #4
 8008250:	441d      	add	r5, r3
 8008252:	4473      	add	r3, lr
 8008254:	469e      	mov	lr, r3
 8008256:	462e      	mov	r6, r5
 8008258:	4566      	cmp	r6, ip
 800825a:	d30e      	bcc.n	800827a <__mdiff+0xea>
 800825c:	f10c 0203 	add.w	r2, ip, #3
 8008260:	1b52      	subs	r2, r2, r5
 8008262:	f022 0203 	bic.w	r2, r2, #3
 8008266:	3d03      	subs	r5, #3
 8008268:	45ac      	cmp	ip, r5
 800826a:	bf38      	it	cc
 800826c:	2200      	movcc	r2, #0
 800826e:	4413      	add	r3, r2
 8008270:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8008274:	b17a      	cbz	r2, 8008296 <__mdiff+0x106>
 8008276:	6107      	str	r7, [r0, #16]
 8008278:	e7a4      	b.n	80081c4 <__mdiff+0x34>
 800827a:	f856 8b04 	ldr.w	r8, [r6], #4
 800827e:	fa11 f288 	uxtah	r2, r1, r8
 8008282:	1414      	asrs	r4, r2, #16
 8008284:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8008288:	b292      	uxth	r2, r2
 800828a:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800828e:	f84e 2b04 	str.w	r2, [lr], #4
 8008292:	1421      	asrs	r1, r4, #16
 8008294:	e7e0      	b.n	8008258 <__mdiff+0xc8>
 8008296:	3f01      	subs	r7, #1
 8008298:	e7ea      	b.n	8008270 <__mdiff+0xe0>
 800829a:	bf00      	nop
 800829c:	08009ab1 	.word	0x08009ab1
 80082a0:	08009b1a 	.word	0x08009b1a

080082a4 <__d2b>:
 80082a4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80082a8:	460f      	mov	r7, r1
 80082aa:	2101      	movs	r1, #1
 80082ac:	ec59 8b10 	vmov	r8, r9, d0
 80082b0:	4616      	mov	r6, r2
 80082b2:	f7ff fd23 	bl	8007cfc <_Balloc>
 80082b6:	4604      	mov	r4, r0
 80082b8:	b930      	cbnz	r0, 80082c8 <__d2b+0x24>
 80082ba:	4602      	mov	r2, r0
 80082bc:	4b24      	ldr	r3, [pc, #144]	; (8008350 <__d2b+0xac>)
 80082be:	4825      	ldr	r0, [pc, #148]	; (8008354 <__d2b+0xb0>)
 80082c0:	f240 310f 	movw	r1, #783	; 0x30f
 80082c4:	f000 f8f4 	bl	80084b0 <__assert_func>
 80082c8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80082cc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80082d0:	bb2d      	cbnz	r5, 800831e <__d2b+0x7a>
 80082d2:	9301      	str	r3, [sp, #4]
 80082d4:	f1b8 0300 	subs.w	r3, r8, #0
 80082d8:	d026      	beq.n	8008328 <__d2b+0x84>
 80082da:	4668      	mov	r0, sp
 80082dc:	9300      	str	r3, [sp, #0]
 80082de:	f7ff fda1 	bl	8007e24 <__lo0bits>
 80082e2:	e9dd 1200 	ldrd	r1, r2, [sp]
 80082e6:	b1e8      	cbz	r0, 8008324 <__d2b+0x80>
 80082e8:	f1c0 0320 	rsb	r3, r0, #32
 80082ec:	fa02 f303 	lsl.w	r3, r2, r3
 80082f0:	430b      	orrs	r3, r1
 80082f2:	40c2      	lsrs	r2, r0
 80082f4:	6163      	str	r3, [r4, #20]
 80082f6:	9201      	str	r2, [sp, #4]
 80082f8:	9b01      	ldr	r3, [sp, #4]
 80082fa:	61a3      	str	r3, [r4, #24]
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	bf14      	ite	ne
 8008300:	2202      	movne	r2, #2
 8008302:	2201      	moveq	r2, #1
 8008304:	6122      	str	r2, [r4, #16]
 8008306:	b1bd      	cbz	r5, 8008338 <__d2b+0x94>
 8008308:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800830c:	4405      	add	r5, r0
 800830e:	603d      	str	r5, [r7, #0]
 8008310:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008314:	6030      	str	r0, [r6, #0]
 8008316:	4620      	mov	r0, r4
 8008318:	b003      	add	sp, #12
 800831a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800831e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008322:	e7d6      	b.n	80082d2 <__d2b+0x2e>
 8008324:	6161      	str	r1, [r4, #20]
 8008326:	e7e7      	b.n	80082f8 <__d2b+0x54>
 8008328:	a801      	add	r0, sp, #4
 800832a:	f7ff fd7b 	bl	8007e24 <__lo0bits>
 800832e:	9b01      	ldr	r3, [sp, #4]
 8008330:	6163      	str	r3, [r4, #20]
 8008332:	3020      	adds	r0, #32
 8008334:	2201      	movs	r2, #1
 8008336:	e7e5      	b.n	8008304 <__d2b+0x60>
 8008338:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800833c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008340:	6038      	str	r0, [r7, #0]
 8008342:	6918      	ldr	r0, [r3, #16]
 8008344:	f7ff fd4e 	bl	8007de4 <__hi0bits>
 8008348:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800834c:	e7e2      	b.n	8008314 <__d2b+0x70>
 800834e:	bf00      	nop
 8008350:	08009ab1 	.word	0x08009ab1
 8008354:	08009b1a 	.word	0x08009b1a

08008358 <__ssprint_r>:
 8008358:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800835c:	6813      	ldr	r3, [r2, #0]
 800835e:	9301      	str	r3, [sp, #4]
 8008360:	6893      	ldr	r3, [r2, #8]
 8008362:	4680      	mov	r8, r0
 8008364:	460c      	mov	r4, r1
 8008366:	4617      	mov	r7, r2
 8008368:	2b00      	cmp	r3, #0
 800836a:	d157      	bne.n	800841c <__ssprint_r+0xc4>
 800836c:	2000      	movs	r0, #0
 800836e:	2300      	movs	r3, #0
 8008370:	607b      	str	r3, [r7, #4]
 8008372:	b003      	add	sp, #12
 8008374:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008378:	9b01      	ldr	r3, [sp, #4]
 800837a:	e9d3 ab00 	ldrd	sl, fp, [r3]
 800837e:	3308      	adds	r3, #8
 8008380:	9301      	str	r3, [sp, #4]
 8008382:	68a6      	ldr	r6, [r4, #8]
 8008384:	6820      	ldr	r0, [r4, #0]
 8008386:	f1bb 0f00 	cmp.w	fp, #0
 800838a:	d0f5      	beq.n	8008378 <__ssprint_r+0x20>
 800838c:	45b3      	cmp	fp, r6
 800838e:	d32d      	bcc.n	80083ec <__ssprint_r+0x94>
 8008390:	89a2      	ldrh	r2, [r4, #12]
 8008392:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008396:	d029      	beq.n	80083ec <__ssprint_r+0x94>
 8008398:	6921      	ldr	r1, [r4, #16]
 800839a:	6965      	ldr	r5, [r4, #20]
 800839c:	eba0 0901 	sub.w	r9, r0, r1
 80083a0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80083a4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80083a8:	f109 0001 	add.w	r0, r9, #1
 80083ac:	106d      	asrs	r5, r5, #1
 80083ae:	4458      	add	r0, fp
 80083b0:	4285      	cmp	r5, r0
 80083b2:	bf38      	it	cc
 80083b4:	4605      	movcc	r5, r0
 80083b6:	0553      	lsls	r3, r2, #21
 80083b8:	d534      	bpl.n	8008424 <__ssprint_r+0xcc>
 80083ba:	4629      	mov	r1, r5
 80083bc:	4640      	mov	r0, r8
 80083be:	f7fc fd8d 	bl	8004edc <_malloc_r>
 80083c2:	4606      	mov	r6, r0
 80083c4:	2800      	cmp	r0, #0
 80083c6:	d038      	beq.n	800843a <__ssprint_r+0xe2>
 80083c8:	464a      	mov	r2, r9
 80083ca:	6921      	ldr	r1, [r4, #16]
 80083cc:	f000 f862 	bl	8008494 <memcpy>
 80083d0:	89a2      	ldrh	r2, [r4, #12]
 80083d2:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 80083d6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80083da:	81a2      	strh	r2, [r4, #12]
 80083dc:	6126      	str	r6, [r4, #16]
 80083de:	6165      	str	r5, [r4, #20]
 80083e0:	444e      	add	r6, r9
 80083e2:	eba5 0509 	sub.w	r5, r5, r9
 80083e6:	6026      	str	r6, [r4, #0]
 80083e8:	60a5      	str	r5, [r4, #8]
 80083ea:	465e      	mov	r6, fp
 80083ec:	455e      	cmp	r6, fp
 80083ee:	bf28      	it	cs
 80083f0:	465e      	movcs	r6, fp
 80083f2:	4632      	mov	r2, r6
 80083f4:	4651      	mov	r1, sl
 80083f6:	6820      	ldr	r0, [r4, #0]
 80083f8:	f000 f82b 	bl	8008452 <memmove>
 80083fc:	68a2      	ldr	r2, [r4, #8]
 80083fe:	1b92      	subs	r2, r2, r6
 8008400:	60a2      	str	r2, [r4, #8]
 8008402:	6822      	ldr	r2, [r4, #0]
 8008404:	4432      	add	r2, r6
 8008406:	6022      	str	r2, [r4, #0]
 8008408:	68ba      	ldr	r2, [r7, #8]
 800840a:	eba2 030b 	sub.w	r3, r2, fp
 800840e:	44da      	add	sl, fp
 8008410:	60bb      	str	r3, [r7, #8]
 8008412:	2b00      	cmp	r3, #0
 8008414:	d0aa      	beq.n	800836c <__ssprint_r+0x14>
 8008416:	f04f 0b00 	mov.w	fp, #0
 800841a:	e7b2      	b.n	8008382 <__ssprint_r+0x2a>
 800841c:	f04f 0a00 	mov.w	sl, #0
 8008420:	46d3      	mov	fp, sl
 8008422:	e7ae      	b.n	8008382 <__ssprint_r+0x2a>
 8008424:	462a      	mov	r2, r5
 8008426:	4640      	mov	r0, r8
 8008428:	f000 f8a8 	bl	800857c <_realloc_r>
 800842c:	4606      	mov	r6, r0
 800842e:	2800      	cmp	r0, #0
 8008430:	d1d4      	bne.n	80083dc <__ssprint_r+0x84>
 8008432:	6921      	ldr	r1, [r4, #16]
 8008434:	4640      	mov	r0, r8
 8008436:	f7fd f9a7 	bl	8005788 <_free_r>
 800843a:	230c      	movs	r3, #12
 800843c:	f8c8 3000 	str.w	r3, [r8]
 8008440:	89a3      	ldrh	r3, [r4, #12]
 8008442:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008446:	81a3      	strh	r3, [r4, #12]
 8008448:	2300      	movs	r3, #0
 800844a:	60bb      	str	r3, [r7, #8]
 800844c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008450:	e78d      	b.n	800836e <__ssprint_r+0x16>

08008452 <memmove>:
 8008452:	4288      	cmp	r0, r1
 8008454:	b510      	push	{r4, lr}
 8008456:	eb01 0402 	add.w	r4, r1, r2
 800845a:	d902      	bls.n	8008462 <memmove+0x10>
 800845c:	4284      	cmp	r4, r0
 800845e:	4623      	mov	r3, r4
 8008460:	d807      	bhi.n	8008472 <memmove+0x20>
 8008462:	1e43      	subs	r3, r0, #1
 8008464:	42a1      	cmp	r1, r4
 8008466:	d008      	beq.n	800847a <memmove+0x28>
 8008468:	f811 2b01 	ldrb.w	r2, [r1], #1
 800846c:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008470:	e7f8      	b.n	8008464 <memmove+0x12>
 8008472:	4402      	add	r2, r0
 8008474:	4601      	mov	r1, r0
 8008476:	428a      	cmp	r2, r1
 8008478:	d100      	bne.n	800847c <memmove+0x2a>
 800847a:	bd10      	pop	{r4, pc}
 800847c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008480:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008484:	e7f7      	b.n	8008476 <memmove+0x24>
	...

08008488 <__locale_mb_cur_max>:
 8008488:	4b01      	ldr	r3, [pc, #4]	; (8008490 <__locale_mb_cur_max+0x8>)
 800848a:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
 800848e:	4770      	bx	lr
 8008490:	20000550 	.word	0x20000550

08008494 <memcpy>:
 8008494:	440a      	add	r2, r1
 8008496:	4291      	cmp	r1, r2
 8008498:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800849c:	d100      	bne.n	80084a0 <memcpy+0xc>
 800849e:	4770      	bx	lr
 80084a0:	b510      	push	{r4, lr}
 80084a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80084a6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80084aa:	4291      	cmp	r1, r2
 80084ac:	d1f9      	bne.n	80084a2 <memcpy+0xe>
 80084ae:	bd10      	pop	{r4, pc}

080084b0 <__assert_func>:
 80084b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80084b2:	4614      	mov	r4, r2
 80084b4:	461a      	mov	r2, r3
 80084b6:	4b09      	ldr	r3, [pc, #36]	; (80084dc <__assert_func+0x2c>)
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	4605      	mov	r5, r0
 80084bc:	68d8      	ldr	r0, [r3, #12]
 80084be:	b14c      	cbz	r4, 80084d4 <__assert_func+0x24>
 80084c0:	4b07      	ldr	r3, [pc, #28]	; (80084e0 <__assert_func+0x30>)
 80084c2:	9100      	str	r1, [sp, #0]
 80084c4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80084c8:	4906      	ldr	r1, [pc, #24]	; (80084e4 <__assert_func+0x34>)
 80084ca:	462b      	mov	r3, r5
 80084cc:	f000 fa0c 	bl	80088e8 <fiprintf>
 80084d0:	f001 f92d 	bl	800972e <abort>
 80084d4:	4b04      	ldr	r3, [pc, #16]	; (80084e8 <__assert_func+0x38>)
 80084d6:	461c      	mov	r4, r3
 80084d8:	e7f3      	b.n	80084c2 <__assert_func+0x12>
 80084da:	bf00      	nop
 80084dc:	20000548 	.word	0x20000548
 80084e0:	08009c7e 	.word	0x08009c7e
 80084e4:	08009c8b 	.word	0x08009c8b
 80084e8:	08009cb9 	.word	0x08009cb9

080084ec <_calloc_r>:
 80084ec:	b538      	push	{r3, r4, r5, lr}
 80084ee:	fba1 1502 	umull	r1, r5, r1, r2
 80084f2:	b92d      	cbnz	r5, 8008500 <_calloc_r+0x14>
 80084f4:	f7fc fcf2 	bl	8004edc <_malloc_r>
 80084f8:	4604      	mov	r4, r0
 80084fa:	b938      	cbnz	r0, 800850c <_calloc_r+0x20>
 80084fc:	4620      	mov	r0, r4
 80084fe:	bd38      	pop	{r3, r4, r5, pc}
 8008500:	f7fd f8a4 	bl	800564c <__errno>
 8008504:	230c      	movs	r3, #12
 8008506:	6003      	str	r3, [r0, #0]
 8008508:	2400      	movs	r4, #0
 800850a:	e7f7      	b.n	80084fc <_calloc_r+0x10>
 800850c:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8008510:	f022 0203 	bic.w	r2, r2, #3
 8008514:	3a04      	subs	r2, #4
 8008516:	2a24      	cmp	r2, #36	; 0x24
 8008518:	d819      	bhi.n	800854e <_calloc_r+0x62>
 800851a:	2a13      	cmp	r2, #19
 800851c:	d915      	bls.n	800854a <_calloc_r+0x5e>
 800851e:	2a1b      	cmp	r2, #27
 8008520:	e9c0 5500 	strd	r5, r5, [r0]
 8008524:	d806      	bhi.n	8008534 <_calloc_r+0x48>
 8008526:	f100 0308 	add.w	r3, r0, #8
 800852a:	2200      	movs	r2, #0
 800852c:	e9c3 2200 	strd	r2, r2, [r3]
 8008530:	609a      	str	r2, [r3, #8]
 8008532:	e7e3      	b.n	80084fc <_calloc_r+0x10>
 8008534:	2a24      	cmp	r2, #36	; 0x24
 8008536:	e9c0 5502 	strd	r5, r5, [r0, #8]
 800853a:	bf11      	iteee	ne
 800853c:	f100 0310 	addne.w	r3, r0, #16
 8008540:	6105      	streq	r5, [r0, #16]
 8008542:	f100 0318 	addeq.w	r3, r0, #24
 8008546:	6145      	streq	r5, [r0, #20]
 8008548:	e7ef      	b.n	800852a <_calloc_r+0x3e>
 800854a:	4603      	mov	r3, r0
 800854c:	e7ed      	b.n	800852a <_calloc_r+0x3e>
 800854e:	4629      	mov	r1, r5
 8008550:	f7fd f81d 	bl	800558e <memset>
 8008554:	e7d2      	b.n	80084fc <_calloc_r+0x10>

08008556 <__ascii_mbtowc>:
 8008556:	b082      	sub	sp, #8
 8008558:	b901      	cbnz	r1, 800855c <__ascii_mbtowc+0x6>
 800855a:	a901      	add	r1, sp, #4
 800855c:	b142      	cbz	r2, 8008570 <__ascii_mbtowc+0x1a>
 800855e:	b14b      	cbz	r3, 8008574 <__ascii_mbtowc+0x1e>
 8008560:	7813      	ldrb	r3, [r2, #0]
 8008562:	600b      	str	r3, [r1, #0]
 8008564:	7812      	ldrb	r2, [r2, #0]
 8008566:	1e10      	subs	r0, r2, #0
 8008568:	bf18      	it	ne
 800856a:	2001      	movne	r0, #1
 800856c:	b002      	add	sp, #8
 800856e:	4770      	bx	lr
 8008570:	4610      	mov	r0, r2
 8008572:	e7fb      	b.n	800856c <__ascii_mbtowc+0x16>
 8008574:	f06f 0001 	mvn.w	r0, #1
 8008578:	e7f8      	b.n	800856c <__ascii_mbtowc+0x16>
	...

0800857c <_realloc_r>:
 800857c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008580:	4682      	mov	sl, r0
 8008582:	460c      	mov	r4, r1
 8008584:	b929      	cbnz	r1, 8008592 <_realloc_r+0x16>
 8008586:	4611      	mov	r1, r2
 8008588:	b003      	add	sp, #12
 800858a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800858e:	f7fc bca5 	b.w	8004edc <_malloc_r>
 8008592:	9201      	str	r2, [sp, #4]
 8008594:	f7fc fedc 	bl	8005350 <__malloc_lock>
 8008598:	9a01      	ldr	r2, [sp, #4]
 800859a:	f854 5c04 	ldr.w	r5, [r4, #-4]
 800859e:	f102 080b 	add.w	r8, r2, #11
 80085a2:	f1b8 0f16 	cmp.w	r8, #22
 80085a6:	d90b      	bls.n	80085c0 <_realloc_r+0x44>
 80085a8:	f038 0807 	bics.w	r8, r8, #7
 80085ac:	d50a      	bpl.n	80085c4 <_realloc_r+0x48>
 80085ae:	230c      	movs	r3, #12
 80085b0:	f8ca 3000 	str.w	r3, [sl]
 80085b4:	f04f 0b00 	mov.w	fp, #0
 80085b8:	4658      	mov	r0, fp
 80085ba:	b003      	add	sp, #12
 80085bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085c0:	f04f 0810 	mov.w	r8, #16
 80085c4:	4590      	cmp	r8, r2
 80085c6:	d3f2      	bcc.n	80085ae <_realloc_r+0x32>
 80085c8:	f025 0603 	bic.w	r6, r5, #3
 80085cc:	45b0      	cmp	r8, r6
 80085ce:	f1a4 0908 	sub.w	r9, r4, #8
 80085d2:	f340 8170 	ble.w	80088b6 <_realloc_r+0x33a>
 80085d6:	499c      	ldr	r1, [pc, #624]	; (8008848 <_realloc_r+0x2cc>)
 80085d8:	f8d1 c008 	ldr.w	ip, [r1, #8]
 80085dc:	eb09 0306 	add.w	r3, r9, r6
 80085e0:	459c      	cmp	ip, r3
 80085e2:	6859      	ldr	r1, [r3, #4]
 80085e4:	d005      	beq.n	80085f2 <_realloc_r+0x76>
 80085e6:	f021 0001 	bic.w	r0, r1, #1
 80085ea:	4418      	add	r0, r3
 80085ec:	6840      	ldr	r0, [r0, #4]
 80085ee:	07c7      	lsls	r7, r0, #31
 80085f0:	d447      	bmi.n	8008682 <_realloc_r+0x106>
 80085f2:	f021 0103 	bic.w	r1, r1, #3
 80085f6:	459c      	cmp	ip, r3
 80085f8:	eb06 0701 	add.w	r7, r6, r1
 80085fc:	d119      	bne.n	8008632 <_realloc_r+0xb6>
 80085fe:	f108 0010 	add.w	r0, r8, #16
 8008602:	42b8      	cmp	r0, r7
 8008604:	dc3f      	bgt.n	8008686 <_realloc_r+0x10a>
 8008606:	eb09 0308 	add.w	r3, r9, r8
 800860a:	4a8f      	ldr	r2, [pc, #572]	; (8008848 <_realloc_r+0x2cc>)
 800860c:	eba7 0708 	sub.w	r7, r7, r8
 8008610:	f047 0701 	orr.w	r7, r7, #1
 8008614:	6093      	str	r3, [r2, #8]
 8008616:	605f      	str	r7, [r3, #4]
 8008618:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800861c:	f003 0301 	and.w	r3, r3, #1
 8008620:	ea43 0308 	orr.w	r3, r3, r8
 8008624:	f844 3c04 	str.w	r3, [r4, #-4]
 8008628:	4650      	mov	r0, sl
 800862a:	f7fc fe97 	bl	800535c <__malloc_unlock>
 800862e:	46a3      	mov	fp, r4
 8008630:	e7c2      	b.n	80085b8 <_realloc_r+0x3c>
 8008632:	45b8      	cmp	r8, r7
 8008634:	dc27      	bgt.n	8008686 <_realloc_r+0x10a>
 8008636:	e9d3 3202 	ldrd	r3, r2, [r3, #8]
 800863a:	60da      	str	r2, [r3, #12]
 800863c:	6093      	str	r3, [r2, #8]
 800863e:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8008642:	eba7 0008 	sub.w	r0, r7, r8
 8008646:	280f      	cmp	r0, #15
 8008648:	f003 0301 	and.w	r3, r3, #1
 800864c:	eb09 0207 	add.w	r2, r9, r7
 8008650:	f240 8133 	bls.w	80088ba <_realloc_r+0x33e>
 8008654:	eb09 0108 	add.w	r1, r9, r8
 8008658:	ea48 0303 	orr.w	r3, r8, r3
 800865c:	f040 0001 	orr.w	r0, r0, #1
 8008660:	f8c9 3004 	str.w	r3, [r9, #4]
 8008664:	6048      	str	r0, [r1, #4]
 8008666:	6853      	ldr	r3, [r2, #4]
 8008668:	f043 0301 	orr.w	r3, r3, #1
 800866c:	6053      	str	r3, [r2, #4]
 800866e:	3108      	adds	r1, #8
 8008670:	4650      	mov	r0, sl
 8008672:	f7fd f889 	bl	8005788 <_free_r>
 8008676:	4650      	mov	r0, sl
 8008678:	f7fc fe70 	bl	800535c <__malloc_unlock>
 800867c:	f109 0b08 	add.w	fp, r9, #8
 8008680:	e79a      	b.n	80085b8 <_realloc_r+0x3c>
 8008682:	2100      	movs	r1, #0
 8008684:	460b      	mov	r3, r1
 8008686:	07e8      	lsls	r0, r5, #31
 8008688:	f100 80c6 	bmi.w	8008818 <_realloc_r+0x29c>
 800868c:	f854 5c08 	ldr.w	r5, [r4, #-8]
 8008690:	eba9 0505 	sub.w	r5, r9, r5
 8008694:	6868      	ldr	r0, [r5, #4]
 8008696:	f020 0003 	bic.w	r0, r0, #3
 800869a:	eb00 0b06 	add.w	fp, r0, r6
 800869e:	2b00      	cmp	r3, #0
 80086a0:	f000 8086 	beq.w	80087b0 <_realloc_r+0x234>
 80086a4:	459c      	cmp	ip, r3
 80086a6:	eb01 070b 	add.w	r7, r1, fp
 80086aa:	d149      	bne.n	8008740 <_realloc_r+0x1c4>
 80086ac:	f108 0310 	add.w	r3, r8, #16
 80086b0:	42bb      	cmp	r3, r7
 80086b2:	dc7d      	bgt.n	80087b0 <_realloc_r+0x234>
 80086b4:	46ab      	mov	fp, r5
 80086b6:	68eb      	ldr	r3, [r5, #12]
 80086b8:	f85b 2f08 	ldr.w	r2, [fp, #8]!
 80086bc:	60d3      	str	r3, [r2, #12]
 80086be:	609a      	str	r2, [r3, #8]
 80086c0:	1f32      	subs	r2, r6, #4
 80086c2:	2a24      	cmp	r2, #36	; 0x24
 80086c4:	d837      	bhi.n	8008736 <_realloc_r+0x1ba>
 80086c6:	2a13      	cmp	r2, #19
 80086c8:	d933      	bls.n	8008732 <_realloc_r+0x1b6>
 80086ca:	6823      	ldr	r3, [r4, #0]
 80086cc:	60ab      	str	r3, [r5, #8]
 80086ce:	6863      	ldr	r3, [r4, #4]
 80086d0:	60eb      	str	r3, [r5, #12]
 80086d2:	2a1b      	cmp	r2, #27
 80086d4:	d81b      	bhi.n	800870e <_realloc_r+0x192>
 80086d6:	3408      	adds	r4, #8
 80086d8:	f105 0310 	add.w	r3, r5, #16
 80086dc:	6822      	ldr	r2, [r4, #0]
 80086de:	601a      	str	r2, [r3, #0]
 80086e0:	6862      	ldr	r2, [r4, #4]
 80086e2:	605a      	str	r2, [r3, #4]
 80086e4:	68a2      	ldr	r2, [r4, #8]
 80086e6:	609a      	str	r2, [r3, #8]
 80086e8:	eb05 0308 	add.w	r3, r5, r8
 80086ec:	4a56      	ldr	r2, [pc, #344]	; (8008848 <_realloc_r+0x2cc>)
 80086ee:	eba7 0708 	sub.w	r7, r7, r8
 80086f2:	f047 0701 	orr.w	r7, r7, #1
 80086f6:	6093      	str	r3, [r2, #8]
 80086f8:	605f      	str	r7, [r3, #4]
 80086fa:	686b      	ldr	r3, [r5, #4]
 80086fc:	f003 0301 	and.w	r3, r3, #1
 8008700:	ea43 0308 	orr.w	r3, r3, r8
 8008704:	606b      	str	r3, [r5, #4]
 8008706:	4650      	mov	r0, sl
 8008708:	f7fc fe28 	bl	800535c <__malloc_unlock>
 800870c:	e754      	b.n	80085b8 <_realloc_r+0x3c>
 800870e:	68a3      	ldr	r3, [r4, #8]
 8008710:	612b      	str	r3, [r5, #16]
 8008712:	68e3      	ldr	r3, [r4, #12]
 8008714:	616b      	str	r3, [r5, #20]
 8008716:	2a24      	cmp	r2, #36	; 0x24
 8008718:	bf01      	itttt	eq
 800871a:	6923      	ldreq	r3, [r4, #16]
 800871c:	61ab      	streq	r3, [r5, #24]
 800871e:	6962      	ldreq	r2, [r4, #20]
 8008720:	61ea      	streq	r2, [r5, #28]
 8008722:	bf19      	ittee	ne
 8008724:	3410      	addne	r4, #16
 8008726:	f105 0318 	addne.w	r3, r5, #24
 800872a:	f105 0320 	addeq.w	r3, r5, #32
 800872e:	3418      	addeq	r4, #24
 8008730:	e7d4      	b.n	80086dc <_realloc_r+0x160>
 8008732:	465b      	mov	r3, fp
 8008734:	e7d2      	b.n	80086dc <_realloc_r+0x160>
 8008736:	4621      	mov	r1, r4
 8008738:	4658      	mov	r0, fp
 800873a:	f7ff fe8a 	bl	8008452 <memmove>
 800873e:	e7d3      	b.n	80086e8 <_realloc_r+0x16c>
 8008740:	45b8      	cmp	r8, r7
 8008742:	dc35      	bgt.n	80087b0 <_realloc_r+0x234>
 8008744:	e9d3 3202 	ldrd	r3, r2, [r3, #8]
 8008748:	4628      	mov	r0, r5
 800874a:	60da      	str	r2, [r3, #12]
 800874c:	6093      	str	r3, [r2, #8]
 800874e:	f850 2f08 	ldr.w	r2, [r0, #8]!
 8008752:	68eb      	ldr	r3, [r5, #12]
 8008754:	60d3      	str	r3, [r2, #12]
 8008756:	609a      	str	r2, [r3, #8]
 8008758:	1f32      	subs	r2, r6, #4
 800875a:	2a24      	cmp	r2, #36	; 0x24
 800875c:	d824      	bhi.n	80087a8 <_realloc_r+0x22c>
 800875e:	2a13      	cmp	r2, #19
 8008760:	d908      	bls.n	8008774 <_realloc_r+0x1f8>
 8008762:	6823      	ldr	r3, [r4, #0]
 8008764:	60ab      	str	r3, [r5, #8]
 8008766:	6863      	ldr	r3, [r4, #4]
 8008768:	60eb      	str	r3, [r5, #12]
 800876a:	2a1b      	cmp	r2, #27
 800876c:	d80a      	bhi.n	8008784 <_realloc_r+0x208>
 800876e:	3408      	adds	r4, #8
 8008770:	f105 0010 	add.w	r0, r5, #16
 8008774:	6823      	ldr	r3, [r4, #0]
 8008776:	6003      	str	r3, [r0, #0]
 8008778:	6863      	ldr	r3, [r4, #4]
 800877a:	6043      	str	r3, [r0, #4]
 800877c:	68a3      	ldr	r3, [r4, #8]
 800877e:	6083      	str	r3, [r0, #8]
 8008780:	46a9      	mov	r9, r5
 8008782:	e75c      	b.n	800863e <_realloc_r+0xc2>
 8008784:	68a3      	ldr	r3, [r4, #8]
 8008786:	612b      	str	r3, [r5, #16]
 8008788:	68e3      	ldr	r3, [r4, #12]
 800878a:	616b      	str	r3, [r5, #20]
 800878c:	2a24      	cmp	r2, #36	; 0x24
 800878e:	bf01      	itttt	eq
 8008790:	6923      	ldreq	r3, [r4, #16]
 8008792:	61ab      	streq	r3, [r5, #24]
 8008794:	6963      	ldreq	r3, [r4, #20]
 8008796:	61eb      	streq	r3, [r5, #28]
 8008798:	bf19      	ittee	ne
 800879a:	3410      	addne	r4, #16
 800879c:	f105 0018 	addne.w	r0, r5, #24
 80087a0:	f105 0020 	addeq.w	r0, r5, #32
 80087a4:	3418      	addeq	r4, #24
 80087a6:	e7e5      	b.n	8008774 <_realloc_r+0x1f8>
 80087a8:	4621      	mov	r1, r4
 80087aa:	f7ff fe52 	bl	8008452 <memmove>
 80087ae:	e7e7      	b.n	8008780 <_realloc_r+0x204>
 80087b0:	45d8      	cmp	r8, fp
 80087b2:	dc31      	bgt.n	8008818 <_realloc_r+0x29c>
 80087b4:	4628      	mov	r0, r5
 80087b6:	68eb      	ldr	r3, [r5, #12]
 80087b8:	f850 2f08 	ldr.w	r2, [r0, #8]!
 80087bc:	60d3      	str	r3, [r2, #12]
 80087be:	609a      	str	r2, [r3, #8]
 80087c0:	1f32      	subs	r2, r6, #4
 80087c2:	2a24      	cmp	r2, #36	; 0x24
 80087c4:	d824      	bhi.n	8008810 <_realloc_r+0x294>
 80087c6:	2a13      	cmp	r2, #19
 80087c8:	d908      	bls.n	80087dc <_realloc_r+0x260>
 80087ca:	6823      	ldr	r3, [r4, #0]
 80087cc:	60ab      	str	r3, [r5, #8]
 80087ce:	6863      	ldr	r3, [r4, #4]
 80087d0:	60eb      	str	r3, [r5, #12]
 80087d2:	2a1b      	cmp	r2, #27
 80087d4:	d80a      	bhi.n	80087ec <_realloc_r+0x270>
 80087d6:	3408      	adds	r4, #8
 80087d8:	f105 0010 	add.w	r0, r5, #16
 80087dc:	6823      	ldr	r3, [r4, #0]
 80087de:	6003      	str	r3, [r0, #0]
 80087e0:	6863      	ldr	r3, [r4, #4]
 80087e2:	6043      	str	r3, [r0, #4]
 80087e4:	68a3      	ldr	r3, [r4, #8]
 80087e6:	6083      	str	r3, [r0, #8]
 80087e8:	465f      	mov	r7, fp
 80087ea:	e7c9      	b.n	8008780 <_realloc_r+0x204>
 80087ec:	68a3      	ldr	r3, [r4, #8]
 80087ee:	612b      	str	r3, [r5, #16]
 80087f0:	68e3      	ldr	r3, [r4, #12]
 80087f2:	616b      	str	r3, [r5, #20]
 80087f4:	2a24      	cmp	r2, #36	; 0x24
 80087f6:	bf01      	itttt	eq
 80087f8:	6923      	ldreq	r3, [r4, #16]
 80087fa:	61ab      	streq	r3, [r5, #24]
 80087fc:	6963      	ldreq	r3, [r4, #20]
 80087fe:	61eb      	streq	r3, [r5, #28]
 8008800:	bf19      	ittee	ne
 8008802:	3410      	addne	r4, #16
 8008804:	f105 0018 	addne.w	r0, r5, #24
 8008808:	f105 0020 	addeq.w	r0, r5, #32
 800880c:	3418      	addeq	r4, #24
 800880e:	e7e5      	b.n	80087dc <_realloc_r+0x260>
 8008810:	4621      	mov	r1, r4
 8008812:	f7ff fe1e 	bl	8008452 <memmove>
 8008816:	e7e7      	b.n	80087e8 <_realloc_r+0x26c>
 8008818:	4611      	mov	r1, r2
 800881a:	4650      	mov	r0, sl
 800881c:	f7fc fb5e 	bl	8004edc <_malloc_r>
 8008820:	4683      	mov	fp, r0
 8008822:	2800      	cmp	r0, #0
 8008824:	f43f af6f 	beq.w	8008706 <_realloc_r+0x18a>
 8008828:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800882c:	f023 0301 	bic.w	r3, r3, #1
 8008830:	444b      	add	r3, r9
 8008832:	f1a0 0208 	sub.w	r2, r0, #8
 8008836:	4293      	cmp	r3, r2
 8008838:	d108      	bne.n	800884c <_realloc_r+0x2d0>
 800883a:	f850 7c04 	ldr.w	r7, [r0, #-4]
 800883e:	f027 0703 	bic.w	r7, r7, #3
 8008842:	4437      	add	r7, r6
 8008844:	e6fb      	b.n	800863e <_realloc_r+0xc2>
 8008846:	bf00      	nop
 8008848:	2000000c 	.word	0x2000000c
 800884c:	1f32      	subs	r2, r6, #4
 800884e:	2a24      	cmp	r2, #36	; 0x24
 8008850:	d82d      	bhi.n	80088ae <_realloc_r+0x332>
 8008852:	2a13      	cmp	r2, #19
 8008854:	d928      	bls.n	80088a8 <_realloc_r+0x32c>
 8008856:	6823      	ldr	r3, [r4, #0]
 8008858:	6003      	str	r3, [r0, #0]
 800885a:	6863      	ldr	r3, [r4, #4]
 800885c:	6043      	str	r3, [r0, #4]
 800885e:	2a1b      	cmp	r2, #27
 8008860:	d80e      	bhi.n	8008880 <_realloc_r+0x304>
 8008862:	f104 0208 	add.w	r2, r4, #8
 8008866:	f100 0308 	add.w	r3, r0, #8
 800886a:	6811      	ldr	r1, [r2, #0]
 800886c:	6019      	str	r1, [r3, #0]
 800886e:	6851      	ldr	r1, [r2, #4]
 8008870:	6059      	str	r1, [r3, #4]
 8008872:	6892      	ldr	r2, [r2, #8]
 8008874:	609a      	str	r2, [r3, #8]
 8008876:	4621      	mov	r1, r4
 8008878:	4650      	mov	r0, sl
 800887a:	f7fc ff85 	bl	8005788 <_free_r>
 800887e:	e742      	b.n	8008706 <_realloc_r+0x18a>
 8008880:	68a3      	ldr	r3, [r4, #8]
 8008882:	6083      	str	r3, [r0, #8]
 8008884:	68e3      	ldr	r3, [r4, #12]
 8008886:	60c3      	str	r3, [r0, #12]
 8008888:	2a24      	cmp	r2, #36	; 0x24
 800888a:	bf01      	itttt	eq
 800888c:	6923      	ldreq	r3, [r4, #16]
 800888e:	6103      	streq	r3, [r0, #16]
 8008890:	6961      	ldreq	r1, [r4, #20]
 8008892:	6141      	streq	r1, [r0, #20]
 8008894:	bf19      	ittee	ne
 8008896:	f104 0210 	addne.w	r2, r4, #16
 800889a:	f100 0310 	addne.w	r3, r0, #16
 800889e:	f104 0218 	addeq.w	r2, r4, #24
 80088a2:	f100 0318 	addeq.w	r3, r0, #24
 80088a6:	e7e0      	b.n	800886a <_realloc_r+0x2ee>
 80088a8:	4603      	mov	r3, r0
 80088aa:	4622      	mov	r2, r4
 80088ac:	e7dd      	b.n	800886a <_realloc_r+0x2ee>
 80088ae:	4621      	mov	r1, r4
 80088b0:	f7ff fdcf 	bl	8008452 <memmove>
 80088b4:	e7df      	b.n	8008876 <_realloc_r+0x2fa>
 80088b6:	4637      	mov	r7, r6
 80088b8:	e6c1      	b.n	800863e <_realloc_r+0xc2>
 80088ba:	431f      	orrs	r7, r3
 80088bc:	f8c9 7004 	str.w	r7, [r9, #4]
 80088c0:	6853      	ldr	r3, [r2, #4]
 80088c2:	f043 0301 	orr.w	r3, r3, #1
 80088c6:	6053      	str	r3, [r2, #4]
 80088c8:	e6d5      	b.n	8008676 <_realloc_r+0xfa>
 80088ca:	bf00      	nop

080088cc <__ascii_wctomb>:
 80088cc:	b149      	cbz	r1, 80088e2 <__ascii_wctomb+0x16>
 80088ce:	2aff      	cmp	r2, #255	; 0xff
 80088d0:	bf85      	ittet	hi
 80088d2:	238a      	movhi	r3, #138	; 0x8a
 80088d4:	6003      	strhi	r3, [r0, #0]
 80088d6:	700a      	strbls	r2, [r1, #0]
 80088d8:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 80088dc:	bf98      	it	ls
 80088de:	2001      	movls	r0, #1
 80088e0:	4770      	bx	lr
 80088e2:	4608      	mov	r0, r1
 80088e4:	4770      	bx	lr
	...

080088e8 <fiprintf>:
 80088e8:	b40e      	push	{r1, r2, r3}
 80088ea:	b503      	push	{r0, r1, lr}
 80088ec:	4601      	mov	r1, r0
 80088ee:	ab03      	add	r3, sp, #12
 80088f0:	4805      	ldr	r0, [pc, #20]	; (8008908 <fiprintf+0x20>)
 80088f2:	f853 2b04 	ldr.w	r2, [r3], #4
 80088f6:	6800      	ldr	r0, [r0, #0]
 80088f8:	9301      	str	r3, [sp, #4]
 80088fa:	f000 f839 	bl	8008970 <_vfiprintf_r>
 80088fe:	b002      	add	sp, #8
 8008900:	f85d eb04 	ldr.w	lr, [sp], #4
 8008904:	b003      	add	sp, #12
 8008906:	4770      	bx	lr
 8008908:	20000548 	.word	0x20000548

0800890c <__sprint_r>:
 800890c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008910:	6893      	ldr	r3, [r2, #8]
 8008912:	4680      	mov	r8, r0
 8008914:	460f      	mov	r7, r1
 8008916:	4614      	mov	r4, r2
 8008918:	b343      	cbz	r3, 800896c <__sprint_r+0x60>
 800891a:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 800891c:	049d      	lsls	r5, r3, #18
 800891e:	d522      	bpl.n	8008966 <__sprint_r+0x5a>
 8008920:	6815      	ldr	r5, [r2, #0]
 8008922:	3508      	adds	r5, #8
 8008924:	e955 b602 	ldrd	fp, r6, [r5, #-8]
 8008928:	f04f 0900 	mov.w	r9, #0
 800892c:	ea4f 0a96 	mov.w	sl, r6, lsr #2
 8008930:	45ca      	cmp	sl, r9
 8008932:	dc0d      	bgt.n	8008950 <__sprint_r+0x44>
 8008934:	68a3      	ldr	r3, [r4, #8]
 8008936:	f026 0603 	bic.w	r6, r6, #3
 800893a:	1b98      	subs	r0, r3, r6
 800893c:	60a0      	str	r0, [r4, #8]
 800893e:	3508      	adds	r5, #8
 8008940:	2800      	cmp	r0, #0
 8008942:	d1ef      	bne.n	8008924 <__sprint_r+0x18>
 8008944:	2300      	movs	r3, #0
 8008946:	60a3      	str	r3, [r4, #8]
 8008948:	2300      	movs	r3, #0
 800894a:	6063      	str	r3, [r4, #4]
 800894c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008950:	f85b 1029 	ldr.w	r1, [fp, r9, lsl #2]
 8008954:	463a      	mov	r2, r7
 8008956:	4640      	mov	r0, r8
 8008958:	f000 febf 	bl	80096da <_fputwc_r>
 800895c:	1c43      	adds	r3, r0, #1
 800895e:	d0f1      	beq.n	8008944 <__sprint_r+0x38>
 8008960:	f109 0901 	add.w	r9, r9, #1
 8008964:	e7e4      	b.n	8008930 <__sprint_r+0x24>
 8008966:	f000 fcd5 	bl	8009314 <__sfvwrite_r>
 800896a:	e7eb      	b.n	8008944 <__sprint_r+0x38>
 800896c:	4618      	mov	r0, r3
 800896e:	e7eb      	b.n	8008948 <__sprint_r+0x3c>

08008970 <_vfiprintf_r>:
 8008970:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008974:	ed2d 8b02 	vpush	{d8}
 8008978:	b0bb      	sub	sp, #236	; 0xec
 800897a:	460f      	mov	r7, r1
 800897c:	9201      	str	r2, [sp, #4]
 800897e:	461d      	mov	r5, r3
 8008980:	461c      	mov	r4, r3
 8008982:	4681      	mov	r9, r0
 8008984:	b118      	cbz	r0, 800898e <_vfiprintf_r+0x1e>
 8008986:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8008988:	b90b      	cbnz	r3, 800898e <_vfiprintf_r+0x1e>
 800898a:	f7fc fd67 	bl	800545c <__sinit>
 800898e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008990:	07d8      	lsls	r0, r3, #31
 8008992:	d405      	bmi.n	80089a0 <_vfiprintf_r+0x30>
 8008994:	89bb      	ldrh	r3, [r7, #12]
 8008996:	0599      	lsls	r1, r3, #22
 8008998:	d402      	bmi.n	80089a0 <_vfiprintf_r+0x30>
 800899a:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800899c:	f7fc fe82 	bl	80056a4 <__retarget_lock_acquire_recursive>
 80089a0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80089a4:	049a      	lsls	r2, r3, #18
 80089a6:	d406      	bmi.n	80089b6 <_vfiprintf_r+0x46>
 80089a8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80089ac:	81bb      	strh	r3, [r7, #12]
 80089ae:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80089b0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80089b4:	667b      	str	r3, [r7, #100]	; 0x64
 80089b6:	89bb      	ldrh	r3, [r7, #12]
 80089b8:	071e      	lsls	r6, r3, #28
 80089ba:	d501      	bpl.n	80089c0 <_vfiprintf_r+0x50>
 80089bc:	693b      	ldr	r3, [r7, #16]
 80089be:	b9bb      	cbnz	r3, 80089f0 <_vfiprintf_r+0x80>
 80089c0:	4639      	mov	r1, r7
 80089c2:	4648      	mov	r0, r9
 80089c4:	f000 fdf0 	bl	80095a8 <__swsetup_r>
 80089c8:	b190      	cbz	r0, 80089f0 <_vfiprintf_r+0x80>
 80089ca:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80089cc:	07d8      	lsls	r0, r3, #31
 80089ce:	d508      	bpl.n	80089e2 <_vfiprintf_r+0x72>
 80089d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80089d4:	9302      	str	r3, [sp, #8]
 80089d6:	9802      	ldr	r0, [sp, #8]
 80089d8:	b03b      	add	sp, #236	; 0xec
 80089da:	ecbd 8b02 	vpop	{d8}
 80089de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80089e2:	89bb      	ldrh	r3, [r7, #12]
 80089e4:	0599      	lsls	r1, r3, #22
 80089e6:	d4f3      	bmi.n	80089d0 <_vfiprintf_r+0x60>
 80089e8:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80089ea:	f7fc fe5c 	bl	80056a6 <__retarget_lock_release_recursive>
 80089ee:	e7ef      	b.n	80089d0 <_vfiprintf_r+0x60>
 80089f0:	89bb      	ldrh	r3, [r7, #12]
 80089f2:	f003 021a 	and.w	r2, r3, #26
 80089f6:	2a0a      	cmp	r2, #10
 80089f8:	d116      	bne.n	8008a28 <_vfiprintf_r+0xb8>
 80089fa:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80089fe:	2a00      	cmp	r2, #0
 8008a00:	db12      	blt.n	8008a28 <_vfiprintf_r+0xb8>
 8008a02:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8008a04:	07d2      	lsls	r2, r2, #31
 8008a06:	d404      	bmi.n	8008a12 <_vfiprintf_r+0xa2>
 8008a08:	059e      	lsls	r6, r3, #22
 8008a0a:	d402      	bmi.n	8008a12 <_vfiprintf_r+0xa2>
 8008a0c:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8008a0e:	f7fc fe4a 	bl	80056a6 <__retarget_lock_release_recursive>
 8008a12:	9a01      	ldr	r2, [sp, #4]
 8008a14:	462b      	mov	r3, r5
 8008a16:	4639      	mov	r1, r7
 8008a18:	4648      	mov	r0, r9
 8008a1a:	b03b      	add	sp, #236	; 0xec
 8008a1c:	ecbd 8b02 	vpop	{d8}
 8008a20:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a24:	f000 bc36 	b.w	8009294 <__sbprintf>
 8008a28:	2300      	movs	r3, #0
 8008a2a:	e9cd 330f 	strd	r3, r3, [sp, #60]	; 0x3c
 8008a2e:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8008a32:	ae11      	add	r6, sp, #68	; 0x44
 8008a34:	ee08 3a10 	vmov	s16, r3
 8008a38:	960e      	str	r6, [sp, #56]	; 0x38
 8008a3a:	9307      	str	r3, [sp, #28]
 8008a3c:	9302      	str	r3, [sp, #8]
 8008a3e:	9b01      	ldr	r3, [sp, #4]
 8008a40:	461d      	mov	r5, r3
 8008a42:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008a46:	b10a      	cbz	r2, 8008a4c <_vfiprintf_r+0xdc>
 8008a48:	2a25      	cmp	r2, #37	; 0x25
 8008a4a:	d1f9      	bne.n	8008a40 <_vfiprintf_r+0xd0>
 8008a4c:	9b01      	ldr	r3, [sp, #4]
 8008a4e:	ebb5 0803 	subs.w	r8, r5, r3
 8008a52:	d00d      	beq.n	8008a70 <_vfiprintf_r+0x100>
 8008a54:	e9c6 3800 	strd	r3, r8, [r6]
 8008a58:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008a5a:	4443      	add	r3, r8
 8008a5c:	9310      	str	r3, [sp, #64]	; 0x40
 8008a5e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008a60:	3301      	adds	r3, #1
 8008a62:	2b07      	cmp	r3, #7
 8008a64:	930f      	str	r3, [sp, #60]	; 0x3c
 8008a66:	dc76      	bgt.n	8008b56 <_vfiprintf_r+0x1e6>
 8008a68:	3608      	adds	r6, #8
 8008a6a:	9b02      	ldr	r3, [sp, #8]
 8008a6c:	4443      	add	r3, r8
 8008a6e:	9302      	str	r3, [sp, #8]
 8008a70:	782b      	ldrb	r3, [r5, #0]
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	f000 83d0 	beq.w	8009218 <_vfiprintf_r+0x8a8>
 8008a78:	2300      	movs	r3, #0
 8008a7a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008a7e:	3501      	adds	r5, #1
 8008a80:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
 8008a84:	9200      	str	r2, [sp, #0]
 8008a86:	9303      	str	r3, [sp, #12]
 8008a88:	469a      	mov	sl, r3
 8008a8a:	462a      	mov	r2, r5
 8008a8c:	f812 3b01 	ldrb.w	r3, [r2], #1
 8008a90:	9201      	str	r2, [sp, #4]
 8008a92:	f1a3 0220 	sub.w	r2, r3, #32
 8008a96:	2a5a      	cmp	r2, #90	; 0x5a
 8008a98:	f200 831c 	bhi.w	80090d4 <_vfiprintf_r+0x764>
 8008a9c:	e8df f012 	tbh	[pc, r2, lsl #1]
 8008aa0:	031a007e 	.word	0x031a007e
 8008aa4:	0086031a 	.word	0x0086031a
 8008aa8:	031a031a 	.word	0x031a031a
 8008aac:	0065031a 	.word	0x0065031a
 8008ab0:	031a031a 	.word	0x031a031a
 8008ab4:	00930089 	.word	0x00930089
 8008ab8:	0090031a 	.word	0x0090031a
 8008abc:	031a0095 	.word	0x031a0095
 8008ac0:	00b300b0 	.word	0x00b300b0
 8008ac4:	00b300b3 	.word	0x00b300b3
 8008ac8:	00b300b3 	.word	0x00b300b3
 8008acc:	00b300b3 	.word	0x00b300b3
 8008ad0:	00b300b3 	.word	0x00b300b3
 8008ad4:	031a031a 	.word	0x031a031a
 8008ad8:	031a031a 	.word	0x031a031a
 8008adc:	031a031a 	.word	0x031a031a
 8008ae0:	031a031a 	.word	0x031a031a
 8008ae4:	00dd031a 	.word	0x00dd031a
 8008ae8:	031a00eb 	.word	0x031a00eb
 8008aec:	031a031a 	.word	0x031a031a
 8008af0:	031a031a 	.word	0x031a031a
 8008af4:	031a031a 	.word	0x031a031a
 8008af8:	031a031a 	.word	0x031a031a
 8008afc:	013b031a 	.word	0x013b031a
 8008b00:	031a031a 	.word	0x031a031a
 8008b04:	0180031a 	.word	0x0180031a
 8008b08:	025e031a 	.word	0x025e031a
 8008b0c:	031a031a 	.word	0x031a031a
 8008b10:	031a027e 	.word	0x031a027e
 8008b14:	031a031a 	.word	0x031a031a
 8008b18:	031a031a 	.word	0x031a031a
 8008b1c:	031a031a 	.word	0x031a031a
 8008b20:	031a031a 	.word	0x031a031a
 8008b24:	00dd031a 	.word	0x00dd031a
 8008b28:	031a00ed 	.word	0x031a00ed
 8008b2c:	031a031a 	.word	0x031a031a
 8008b30:	00ed00c3 	.word	0x00ed00c3
 8008b34:	031a00d7 	.word	0x031a00d7
 8008b38:	031a00d0 	.word	0x031a00d0
 8008b3c:	013d0119 	.word	0x013d0119
 8008b40:	00d70172 	.word	0x00d70172
 8008b44:	0180031a 	.word	0x0180031a
 8008b48:	0260007c 	.word	0x0260007c
 8008b4c:	031a031a 	.word	0x031a031a
 8008b50:	031a029a 	.word	0x031a029a
 8008b54:	007c      	.short	0x007c
 8008b56:	aa0e      	add	r2, sp, #56	; 0x38
 8008b58:	4639      	mov	r1, r7
 8008b5a:	4648      	mov	r0, r9
 8008b5c:	f7ff fed6 	bl	800890c <__sprint_r>
 8008b60:	2800      	cmp	r0, #0
 8008b62:	f040 8338 	bne.w	80091d6 <_vfiprintf_r+0x866>
 8008b66:	ae11      	add	r6, sp, #68	; 0x44
 8008b68:	e77f      	b.n	8008a6a <_vfiprintf_r+0xfa>
 8008b6a:	4648      	mov	r0, r9
 8008b6c:	f7fe f9d8 	bl	8006f20 <_localeconv_r>
 8008b70:	6843      	ldr	r3, [r0, #4]
 8008b72:	4618      	mov	r0, r3
 8008b74:	ee08 3a10 	vmov	s16, r3
 8008b78:	f7f7 fb52 	bl	8000220 <strlen>
 8008b7c:	9007      	str	r0, [sp, #28]
 8008b7e:	4648      	mov	r0, r9
 8008b80:	f7fe f9ce 	bl	8006f20 <_localeconv_r>
 8008b84:	6883      	ldr	r3, [r0, #8]
 8008b86:	9306      	str	r3, [sp, #24]
 8008b88:	9b07      	ldr	r3, [sp, #28]
 8008b8a:	b12b      	cbz	r3, 8008b98 <_vfiprintf_r+0x228>
 8008b8c:	9b06      	ldr	r3, [sp, #24]
 8008b8e:	b11b      	cbz	r3, 8008b98 <_vfiprintf_r+0x228>
 8008b90:	781b      	ldrb	r3, [r3, #0]
 8008b92:	b10b      	cbz	r3, 8008b98 <_vfiprintf_r+0x228>
 8008b94:	f44a 6a80 	orr.w	sl, sl, #1024	; 0x400
 8008b98:	9d01      	ldr	r5, [sp, #4]
 8008b9a:	e776      	b.n	8008a8a <_vfiprintf_r+0x11a>
 8008b9c:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d1f9      	bne.n	8008b98 <_vfiprintf_r+0x228>
 8008ba4:	2320      	movs	r3, #32
 8008ba6:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
 8008baa:	e7f5      	b.n	8008b98 <_vfiprintf_r+0x228>
 8008bac:	f04a 0a01 	orr.w	sl, sl, #1
 8008bb0:	e7f2      	b.n	8008b98 <_vfiprintf_r+0x228>
 8008bb2:	f854 3b04 	ldr.w	r3, [r4], #4
 8008bb6:	9303      	str	r3, [sp, #12]
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	daed      	bge.n	8008b98 <_vfiprintf_r+0x228>
 8008bbc:	425b      	negs	r3, r3
 8008bbe:	9303      	str	r3, [sp, #12]
 8008bc0:	f04a 0a04 	orr.w	sl, sl, #4
 8008bc4:	e7e8      	b.n	8008b98 <_vfiprintf_r+0x228>
 8008bc6:	232b      	movs	r3, #43	; 0x2b
 8008bc8:	e7ed      	b.n	8008ba6 <_vfiprintf_r+0x236>
 8008bca:	9a01      	ldr	r2, [sp, #4]
 8008bcc:	f812 3b01 	ldrb.w	r3, [r2], #1
 8008bd0:	2b2a      	cmp	r3, #42	; 0x2a
 8008bd2:	d112      	bne.n	8008bfa <_vfiprintf_r+0x28a>
 8008bd4:	f854 3b04 	ldr.w	r3, [r4], #4
 8008bd8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008bdc:	e9cd 3200 	strd	r3, r2, [sp]
 8008be0:	e7da      	b.n	8008b98 <_vfiprintf_r+0x228>
 8008be2:	9b00      	ldr	r3, [sp, #0]
 8008be4:	200a      	movs	r0, #10
 8008be6:	fb00 1303 	mla	r3, r0, r3, r1
 8008bea:	9300      	str	r3, [sp, #0]
 8008bec:	f812 3b01 	ldrb.w	r3, [r2], #1
 8008bf0:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8008bf4:	2909      	cmp	r1, #9
 8008bf6:	d9f4      	bls.n	8008be2 <_vfiprintf_r+0x272>
 8008bf8:	e74a      	b.n	8008a90 <_vfiprintf_r+0x120>
 8008bfa:	2100      	movs	r1, #0
 8008bfc:	9100      	str	r1, [sp, #0]
 8008bfe:	e7f7      	b.n	8008bf0 <_vfiprintf_r+0x280>
 8008c00:	f04a 0a80 	orr.w	sl, sl, #128	; 0x80
 8008c04:	e7c8      	b.n	8008b98 <_vfiprintf_r+0x228>
 8008c06:	2100      	movs	r1, #0
 8008c08:	9a01      	ldr	r2, [sp, #4]
 8008c0a:	9103      	str	r1, [sp, #12]
 8008c0c:	9903      	ldr	r1, [sp, #12]
 8008c0e:	3b30      	subs	r3, #48	; 0x30
 8008c10:	200a      	movs	r0, #10
 8008c12:	fb00 3301 	mla	r3, r0, r1, r3
 8008c16:	9303      	str	r3, [sp, #12]
 8008c18:	f812 3b01 	ldrb.w	r3, [r2], #1
 8008c1c:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8008c20:	2909      	cmp	r1, #9
 8008c22:	d9f3      	bls.n	8008c0c <_vfiprintf_r+0x29c>
 8008c24:	e734      	b.n	8008a90 <_vfiprintf_r+0x120>
 8008c26:	9b01      	ldr	r3, [sp, #4]
 8008c28:	781b      	ldrb	r3, [r3, #0]
 8008c2a:	2b68      	cmp	r3, #104	; 0x68
 8008c2c:	bf01      	itttt	eq
 8008c2e:	9b01      	ldreq	r3, [sp, #4]
 8008c30:	3301      	addeq	r3, #1
 8008c32:	9301      	streq	r3, [sp, #4]
 8008c34:	f44a 7a00 	orreq.w	sl, sl, #512	; 0x200
 8008c38:	bf18      	it	ne
 8008c3a:	f04a 0a40 	orrne.w	sl, sl, #64	; 0x40
 8008c3e:	e7ab      	b.n	8008b98 <_vfiprintf_r+0x228>
 8008c40:	9b01      	ldr	r3, [sp, #4]
 8008c42:	781b      	ldrb	r3, [r3, #0]
 8008c44:	2b6c      	cmp	r3, #108	; 0x6c
 8008c46:	d105      	bne.n	8008c54 <_vfiprintf_r+0x2e4>
 8008c48:	9b01      	ldr	r3, [sp, #4]
 8008c4a:	3301      	adds	r3, #1
 8008c4c:	9301      	str	r3, [sp, #4]
 8008c4e:	f04a 0a20 	orr.w	sl, sl, #32
 8008c52:	e7a1      	b.n	8008b98 <_vfiprintf_r+0x228>
 8008c54:	f04a 0a10 	orr.w	sl, sl, #16
 8008c58:	e79e      	b.n	8008b98 <_vfiprintf_r+0x228>
 8008c5a:	46a0      	mov	r8, r4
 8008c5c:	f858 3b04 	ldr.w	r3, [r8], #4
 8008c60:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
 8008c64:	2300      	movs	r3, #0
 8008c66:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
 8008c6a:	2201      	movs	r2, #1
 8008c6c:	9200      	str	r2, [sp, #0]
 8008c6e:	461d      	mov	r5, r3
 8008c70:	f10d 0b84 	add.w	fp, sp, #132	; 0x84
 8008c74:	e0a9      	b.n	8008dca <_vfiprintf_r+0x45a>
 8008c76:	f04a 0a10 	orr.w	sl, sl, #16
 8008c7a:	f01a 0f20 	tst.w	sl, #32
 8008c7e:	d011      	beq.n	8008ca4 <_vfiprintf_r+0x334>
 8008c80:	3407      	adds	r4, #7
 8008c82:	f024 0307 	bic.w	r3, r4, #7
 8008c86:	4698      	mov	r8, r3
 8008c88:	685d      	ldr	r5, [r3, #4]
 8008c8a:	f858 4b08 	ldr.w	r4, [r8], #8
 8008c8e:	2d00      	cmp	r5, #0
 8008c90:	da06      	bge.n	8008ca0 <_vfiprintf_r+0x330>
 8008c92:	4264      	negs	r4, r4
 8008c94:	f04f 032d 	mov.w	r3, #45	; 0x2d
 8008c98:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
 8008c9c:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
 8008ca0:	2301      	movs	r3, #1
 8008ca2:	e04a      	b.n	8008d3a <_vfiprintf_r+0x3ca>
 8008ca4:	46a0      	mov	r8, r4
 8008ca6:	f01a 0f10 	tst.w	sl, #16
 8008caa:	f858 5b04 	ldr.w	r5, [r8], #4
 8008cae:	d002      	beq.n	8008cb6 <_vfiprintf_r+0x346>
 8008cb0:	462c      	mov	r4, r5
 8008cb2:	17ed      	asrs	r5, r5, #31
 8008cb4:	e7eb      	b.n	8008c8e <_vfiprintf_r+0x31e>
 8008cb6:	f01a 0f40 	tst.w	sl, #64	; 0x40
 8008cba:	d003      	beq.n	8008cc4 <_vfiprintf_r+0x354>
 8008cbc:	b22c      	sxth	r4, r5
 8008cbe:	f345 35c0 	sbfx	r5, r5, #15, #1
 8008cc2:	e7e4      	b.n	8008c8e <_vfiprintf_r+0x31e>
 8008cc4:	f41a 7f00 	tst.w	sl, #512	; 0x200
 8008cc8:	d0f2      	beq.n	8008cb0 <_vfiprintf_r+0x340>
 8008cca:	b26c      	sxtb	r4, r5
 8008ccc:	f345 15c0 	sbfx	r5, r5, #7, #1
 8008cd0:	e7dd      	b.n	8008c8e <_vfiprintf_r+0x31e>
 8008cd2:	f01a 0f20 	tst.w	sl, #32
 8008cd6:	f104 0804 	add.w	r8, r4, #4
 8008cda:	d007      	beq.n	8008cec <_vfiprintf_r+0x37c>
 8008cdc:	9a02      	ldr	r2, [sp, #8]
 8008cde:	6823      	ldr	r3, [r4, #0]
 8008ce0:	9902      	ldr	r1, [sp, #8]
 8008ce2:	17d2      	asrs	r2, r2, #31
 8008ce4:	e9c3 1200 	strd	r1, r2, [r3]
 8008ce8:	4644      	mov	r4, r8
 8008cea:	e6a8      	b.n	8008a3e <_vfiprintf_r+0xce>
 8008cec:	f01a 0f10 	tst.w	sl, #16
 8008cf0:	d003      	beq.n	8008cfa <_vfiprintf_r+0x38a>
 8008cf2:	6823      	ldr	r3, [r4, #0]
 8008cf4:	9a02      	ldr	r2, [sp, #8]
 8008cf6:	601a      	str	r2, [r3, #0]
 8008cf8:	e7f6      	b.n	8008ce8 <_vfiprintf_r+0x378>
 8008cfa:	f01a 0f40 	tst.w	sl, #64	; 0x40
 8008cfe:	d003      	beq.n	8008d08 <_vfiprintf_r+0x398>
 8008d00:	6823      	ldr	r3, [r4, #0]
 8008d02:	9a02      	ldr	r2, [sp, #8]
 8008d04:	801a      	strh	r2, [r3, #0]
 8008d06:	e7ef      	b.n	8008ce8 <_vfiprintf_r+0x378>
 8008d08:	f41a 7f00 	tst.w	sl, #512	; 0x200
 8008d0c:	d0f1      	beq.n	8008cf2 <_vfiprintf_r+0x382>
 8008d0e:	6823      	ldr	r3, [r4, #0]
 8008d10:	9a02      	ldr	r2, [sp, #8]
 8008d12:	701a      	strb	r2, [r3, #0]
 8008d14:	e7e8      	b.n	8008ce8 <_vfiprintf_r+0x378>
 8008d16:	f04a 0a10 	orr.w	sl, sl, #16
 8008d1a:	f01a 0320 	ands.w	r3, sl, #32
 8008d1e:	d01f      	beq.n	8008d60 <_vfiprintf_r+0x3f0>
 8008d20:	3407      	adds	r4, #7
 8008d22:	f024 0307 	bic.w	r3, r4, #7
 8008d26:	4698      	mov	r8, r3
 8008d28:	685d      	ldr	r5, [r3, #4]
 8008d2a:	f858 4b08 	ldr.w	r4, [r8], #8
 8008d2e:	f42a 6a80 	bic.w	sl, sl, #1024	; 0x400
 8008d32:	2300      	movs	r3, #0
 8008d34:	2200      	movs	r2, #0
 8008d36:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
 8008d3a:	9a00      	ldr	r2, [sp, #0]
 8008d3c:	3201      	adds	r2, #1
 8008d3e:	f000 8278 	beq.w	8009232 <_vfiprintf_r+0x8c2>
 8008d42:	f02a 0280 	bic.w	r2, sl, #128	; 0x80
 8008d46:	9204      	str	r2, [sp, #16]
 8008d48:	ea54 0205 	orrs.w	r2, r4, r5
 8008d4c:	f040 8277 	bne.w	800923e <_vfiprintf_r+0x8ce>
 8008d50:	9a00      	ldr	r2, [sp, #0]
 8008d52:	2a00      	cmp	r2, #0
 8008d54:	f000 81b3 	beq.w	80090be <_vfiprintf_r+0x74e>
 8008d58:	2b01      	cmp	r3, #1
 8008d5a:	f040 8273 	bne.w	8009244 <_vfiprintf_r+0x8d4>
 8008d5e:	e151      	b.n	8009004 <_vfiprintf_r+0x694>
 8008d60:	46a0      	mov	r8, r4
 8008d62:	f01a 0510 	ands.w	r5, sl, #16
 8008d66:	f858 4b04 	ldr.w	r4, [r8], #4
 8008d6a:	d001      	beq.n	8008d70 <_vfiprintf_r+0x400>
 8008d6c:	461d      	mov	r5, r3
 8008d6e:	e7de      	b.n	8008d2e <_vfiprintf_r+0x3be>
 8008d70:	f01a 0340 	ands.w	r3, sl, #64	; 0x40
 8008d74:	d001      	beq.n	8008d7a <_vfiprintf_r+0x40a>
 8008d76:	b2a4      	uxth	r4, r4
 8008d78:	e7d9      	b.n	8008d2e <_vfiprintf_r+0x3be>
 8008d7a:	f41a 7500 	ands.w	r5, sl, #512	; 0x200
 8008d7e:	d0d6      	beq.n	8008d2e <_vfiprintf_r+0x3be>
 8008d80:	b2e4      	uxtb	r4, r4
 8008d82:	e7f3      	b.n	8008d6c <_vfiprintf_r+0x3fc>
 8008d84:	46a0      	mov	r8, r4
 8008d86:	f647 0330 	movw	r3, #30768	; 0x7830
 8008d8a:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 8008d8e:	f858 4b04 	ldr.w	r4, [r8], #4
 8008d92:	4b9f      	ldr	r3, [pc, #636]	; (8009010 <_vfiprintf_r+0x6a0>)
 8008d94:	9305      	str	r3, [sp, #20]
 8008d96:	2500      	movs	r5, #0
 8008d98:	f04a 0a02 	orr.w	sl, sl, #2
 8008d9c:	2302      	movs	r3, #2
 8008d9e:	e7c9      	b.n	8008d34 <_vfiprintf_r+0x3c4>
 8008da0:	9b00      	ldr	r3, [sp, #0]
 8008da2:	46a0      	mov	r8, r4
 8008da4:	2500      	movs	r5, #0
 8008da6:	1c5c      	adds	r4, r3, #1
 8008da8:	f858 bb04 	ldr.w	fp, [r8], #4
 8008dac:	f88d 5033 	strb.w	r5, [sp, #51]	; 0x33
 8008db0:	f000 80cf 	beq.w	8008f52 <_vfiprintf_r+0x5e2>
 8008db4:	461a      	mov	r2, r3
 8008db6:	4629      	mov	r1, r5
 8008db8:	4658      	mov	r0, fp
 8008dba:	f7f7 fa39 	bl	8000230 <memchr>
 8008dbe:	2800      	cmp	r0, #0
 8008dc0:	f000 8192 	beq.w	80090e8 <_vfiprintf_r+0x778>
 8008dc4:	eba0 030b 	sub.w	r3, r0, fp
 8008dc8:	9300      	str	r3, [sp, #0]
 8008dca:	9b00      	ldr	r3, [sp, #0]
 8008dcc:	f89d 2033 	ldrb.w	r2, [sp, #51]	; 0x33
 8008dd0:	42ab      	cmp	r3, r5
 8008dd2:	bfb8      	it	lt
 8008dd4:	462b      	movlt	r3, r5
 8008dd6:	9304      	str	r3, [sp, #16]
 8008dd8:	b10a      	cbz	r2, 8008dde <_vfiprintf_r+0x46e>
 8008dda:	3301      	adds	r3, #1
 8008ddc:	9304      	str	r3, [sp, #16]
 8008dde:	f01a 0302 	ands.w	r3, sl, #2
 8008de2:	9308      	str	r3, [sp, #32]
 8008de4:	bf1e      	ittt	ne
 8008de6:	9b04      	ldrne	r3, [sp, #16]
 8008de8:	3302      	addne	r3, #2
 8008dea:	9304      	strne	r3, [sp, #16]
 8008dec:	f01a 0384 	ands.w	r3, sl, #132	; 0x84
 8008df0:	9309      	str	r3, [sp, #36]	; 0x24
 8008df2:	d11f      	bne.n	8008e34 <_vfiprintf_r+0x4c4>
 8008df4:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 8008df8:	1a9c      	subs	r4, r3, r2
 8008dfa:	2c00      	cmp	r4, #0
 8008dfc:	dd1a      	ble.n	8008e34 <_vfiprintf_r+0x4c4>
 8008dfe:	4b85      	ldr	r3, [pc, #532]	; (8009014 <_vfiprintf_r+0x6a4>)
 8008e00:	6033      	str	r3, [r6, #0]
 8008e02:	e9dd 2c0f 	ldrd	r2, ip, [sp, #60]	; 0x3c
 8008e06:	2c10      	cmp	r4, #16
 8008e08:	f102 0201 	add.w	r2, r2, #1
 8008e0c:	f106 0008 	add.w	r0, r6, #8
 8008e10:	f300 816c 	bgt.w	80090ec <_vfiprintf_r+0x77c>
 8008e14:	6074      	str	r4, [r6, #4]
 8008e16:	2a07      	cmp	r2, #7
 8008e18:	4464      	add	r4, ip
 8008e1a:	e9cd 240f 	strd	r2, r4, [sp, #60]	; 0x3c
 8008e1e:	f340 8178 	ble.w	8009112 <_vfiprintf_r+0x7a2>
 8008e22:	aa0e      	add	r2, sp, #56	; 0x38
 8008e24:	4639      	mov	r1, r7
 8008e26:	4648      	mov	r0, r9
 8008e28:	f7ff fd70 	bl	800890c <__sprint_r>
 8008e2c:	2800      	cmp	r0, #0
 8008e2e:	f040 81d2 	bne.w	80091d6 <_vfiprintf_r+0x866>
 8008e32:	ae11      	add	r6, sp, #68	; 0x44
 8008e34:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
 8008e38:	e9dd 210f 	ldrd	r2, r1, [sp, #60]	; 0x3c
 8008e3c:	b160      	cbz	r0, 8008e58 <_vfiprintf_r+0x4e8>
 8008e3e:	f10d 0033 	add.w	r0, sp, #51	; 0x33
 8008e42:	3201      	adds	r2, #1
 8008e44:	6030      	str	r0, [r6, #0]
 8008e46:	2001      	movs	r0, #1
 8008e48:	4401      	add	r1, r0
 8008e4a:	2a07      	cmp	r2, #7
 8008e4c:	e9cd 210f 	strd	r2, r1, [sp, #60]	; 0x3c
 8008e50:	6070      	str	r0, [r6, #4]
 8008e52:	f300 8160 	bgt.w	8009116 <_vfiprintf_r+0x7a6>
 8008e56:	3608      	adds	r6, #8
 8008e58:	9b08      	ldr	r3, [sp, #32]
 8008e5a:	e9dd 210f 	ldrd	r2, r1, [sp, #60]	; 0x3c
 8008e5e:	b15b      	cbz	r3, 8008e78 <_vfiprintf_r+0x508>
 8008e60:	a80d      	add	r0, sp, #52	; 0x34
 8008e62:	3201      	adds	r2, #1
 8008e64:	6030      	str	r0, [r6, #0]
 8008e66:	2002      	movs	r0, #2
 8008e68:	4401      	add	r1, r0
 8008e6a:	2a07      	cmp	r2, #7
 8008e6c:	e9cd 210f 	strd	r2, r1, [sp, #60]	; 0x3c
 8008e70:	6070      	str	r0, [r6, #4]
 8008e72:	f300 8159 	bgt.w	8009128 <_vfiprintf_r+0x7b8>
 8008e76:	3608      	adds	r6, #8
 8008e78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e7a:	2b80      	cmp	r3, #128	; 0x80
 8008e7c:	d11f      	bne.n	8008ebe <_vfiprintf_r+0x54e>
 8008e7e:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 8008e82:	1a9c      	subs	r4, r3, r2
 8008e84:	2c00      	cmp	r4, #0
 8008e86:	dd1a      	ble.n	8008ebe <_vfiprintf_r+0x54e>
 8008e88:	4b63      	ldr	r3, [pc, #396]	; (8009018 <_vfiprintf_r+0x6a8>)
 8008e8a:	6033      	str	r3, [r6, #0]
 8008e8c:	e9dd 2c0f 	ldrd	r2, ip, [sp, #60]	; 0x3c
 8008e90:	2c10      	cmp	r4, #16
 8008e92:	f102 0201 	add.w	r2, r2, #1
 8008e96:	f106 0008 	add.w	r0, r6, #8
 8008e9a:	f300 814e 	bgt.w	800913a <_vfiprintf_r+0x7ca>
 8008e9e:	6074      	str	r4, [r6, #4]
 8008ea0:	2a07      	cmp	r2, #7
 8008ea2:	4464      	add	r4, ip
 8008ea4:	e9cd 240f 	strd	r2, r4, [sp, #60]	; 0x3c
 8008ea8:	f340 815a 	ble.w	8009160 <_vfiprintf_r+0x7f0>
 8008eac:	aa0e      	add	r2, sp, #56	; 0x38
 8008eae:	4639      	mov	r1, r7
 8008eb0:	4648      	mov	r0, r9
 8008eb2:	f7ff fd2b 	bl	800890c <__sprint_r>
 8008eb6:	2800      	cmp	r0, #0
 8008eb8:	f040 818d 	bne.w	80091d6 <_vfiprintf_r+0x866>
 8008ebc:	ae11      	add	r6, sp, #68	; 0x44
 8008ebe:	9b00      	ldr	r3, [sp, #0]
 8008ec0:	1aec      	subs	r4, r5, r3
 8008ec2:	2c00      	cmp	r4, #0
 8008ec4:	dd1b      	ble.n	8008efe <_vfiprintf_r+0x58e>
 8008ec6:	4d54      	ldr	r5, [pc, #336]	; (8009018 <_vfiprintf_r+0x6a8>)
 8008ec8:	2310      	movs	r3, #16
 8008eca:	e9dd 210f 	ldrd	r2, r1, [sp, #60]	; 0x3c
 8008ece:	2c10      	cmp	r4, #16
 8008ed0:	f102 0201 	add.w	r2, r2, #1
 8008ed4:	f106 0008 	add.w	r0, r6, #8
 8008ed8:	6035      	str	r5, [r6, #0]
 8008eda:	f300 8143 	bgt.w	8009164 <_vfiprintf_r+0x7f4>
 8008ede:	6074      	str	r4, [r6, #4]
 8008ee0:	2a07      	cmp	r2, #7
 8008ee2:	440c      	add	r4, r1
 8008ee4:	e9cd 240f 	strd	r2, r4, [sp, #60]	; 0x3c
 8008ee8:	f340 814d 	ble.w	8009186 <_vfiprintf_r+0x816>
 8008eec:	aa0e      	add	r2, sp, #56	; 0x38
 8008eee:	4639      	mov	r1, r7
 8008ef0:	4648      	mov	r0, r9
 8008ef2:	f7ff fd0b 	bl	800890c <__sprint_r>
 8008ef6:	2800      	cmp	r0, #0
 8008ef8:	f040 816d 	bne.w	80091d6 <_vfiprintf_r+0x866>
 8008efc:	ae11      	add	r6, sp, #68	; 0x44
 8008efe:	9b00      	ldr	r3, [sp, #0]
 8008f00:	9a00      	ldr	r2, [sp, #0]
 8008f02:	6073      	str	r3, [r6, #4]
 8008f04:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008f06:	f8c6 b000 	str.w	fp, [r6]
 8008f0a:	4413      	add	r3, r2
 8008f0c:	9310      	str	r3, [sp, #64]	; 0x40
 8008f0e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008f10:	3301      	adds	r3, #1
 8008f12:	2b07      	cmp	r3, #7
 8008f14:	930f      	str	r3, [sp, #60]	; 0x3c
 8008f16:	f300 8138 	bgt.w	800918a <_vfiprintf_r+0x81a>
 8008f1a:	f106 0308 	add.w	r3, r6, #8
 8008f1e:	f01a 0f04 	tst.w	sl, #4
 8008f22:	f040 813a 	bne.w	800919a <_vfiprintf_r+0x82a>
 8008f26:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8008f2a:	9904      	ldr	r1, [sp, #16]
 8008f2c:	428a      	cmp	r2, r1
 8008f2e:	bfac      	ite	ge
 8008f30:	189b      	addge	r3, r3, r2
 8008f32:	185b      	addlt	r3, r3, r1
 8008f34:	9302      	str	r3, [sp, #8]
 8008f36:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008f38:	b13b      	cbz	r3, 8008f4a <_vfiprintf_r+0x5da>
 8008f3a:	aa0e      	add	r2, sp, #56	; 0x38
 8008f3c:	4639      	mov	r1, r7
 8008f3e:	4648      	mov	r0, r9
 8008f40:	f7ff fce4 	bl	800890c <__sprint_r>
 8008f44:	2800      	cmp	r0, #0
 8008f46:	f040 8146 	bne.w	80091d6 <_vfiprintf_r+0x866>
 8008f4a:	2300      	movs	r3, #0
 8008f4c:	930f      	str	r3, [sp, #60]	; 0x3c
 8008f4e:	ae11      	add	r6, sp, #68	; 0x44
 8008f50:	e6ca      	b.n	8008ce8 <_vfiprintf_r+0x378>
 8008f52:	4658      	mov	r0, fp
 8008f54:	f7f7 f964 	bl	8000220 <strlen>
 8008f58:	9000      	str	r0, [sp, #0]
 8008f5a:	e736      	b.n	8008dca <_vfiprintf_r+0x45a>
 8008f5c:	f04a 0a10 	orr.w	sl, sl, #16
 8008f60:	f01a 0320 	ands.w	r3, sl, #32
 8008f64:	d008      	beq.n	8008f78 <_vfiprintf_r+0x608>
 8008f66:	3407      	adds	r4, #7
 8008f68:	f024 0307 	bic.w	r3, r4, #7
 8008f6c:	4698      	mov	r8, r3
 8008f6e:	685d      	ldr	r5, [r3, #4]
 8008f70:	f858 4b08 	ldr.w	r4, [r8], #8
 8008f74:	2301      	movs	r3, #1
 8008f76:	e6dd      	b.n	8008d34 <_vfiprintf_r+0x3c4>
 8008f78:	46a0      	mov	r8, r4
 8008f7a:	f01a 0510 	ands.w	r5, sl, #16
 8008f7e:	f858 4b04 	ldr.w	r4, [r8], #4
 8008f82:	d001      	beq.n	8008f88 <_vfiprintf_r+0x618>
 8008f84:	461d      	mov	r5, r3
 8008f86:	e7f5      	b.n	8008f74 <_vfiprintf_r+0x604>
 8008f88:	f01a 0340 	ands.w	r3, sl, #64	; 0x40
 8008f8c:	d001      	beq.n	8008f92 <_vfiprintf_r+0x622>
 8008f8e:	b2a4      	uxth	r4, r4
 8008f90:	e7f0      	b.n	8008f74 <_vfiprintf_r+0x604>
 8008f92:	f41a 7500 	ands.w	r5, sl, #512	; 0x200
 8008f96:	d0ed      	beq.n	8008f74 <_vfiprintf_r+0x604>
 8008f98:	b2e4      	uxtb	r4, r4
 8008f9a:	e7f3      	b.n	8008f84 <_vfiprintf_r+0x614>
 8008f9c:	4a1f      	ldr	r2, [pc, #124]	; (800901c <_vfiprintf_r+0x6ac>)
 8008f9e:	9205      	str	r2, [sp, #20]
 8008fa0:	f01a 0220 	ands.w	r2, sl, #32
 8008fa4:	d018      	beq.n	8008fd8 <_vfiprintf_r+0x668>
 8008fa6:	3407      	adds	r4, #7
 8008fa8:	f024 0207 	bic.w	r2, r4, #7
 8008fac:	4690      	mov	r8, r2
 8008fae:	6855      	ldr	r5, [r2, #4]
 8008fb0:	f858 4b08 	ldr.w	r4, [r8], #8
 8008fb4:	f01a 0f01 	tst.w	sl, #1
 8008fb8:	d009      	beq.n	8008fce <_vfiprintf_r+0x65e>
 8008fba:	ea54 0205 	orrs.w	r2, r4, r5
 8008fbe:	bf1f      	itttt	ne
 8008fc0:	2230      	movne	r2, #48	; 0x30
 8008fc2:	f88d 2034 	strbne.w	r2, [sp, #52]	; 0x34
 8008fc6:	f88d 3035 	strbne.w	r3, [sp, #53]	; 0x35
 8008fca:	f04a 0a02 	orrne.w	sl, sl, #2
 8008fce:	f42a 6a80 	bic.w	sl, sl, #1024	; 0x400
 8008fd2:	e6e3      	b.n	8008d9c <_vfiprintf_r+0x42c>
 8008fd4:	4a0e      	ldr	r2, [pc, #56]	; (8009010 <_vfiprintf_r+0x6a0>)
 8008fd6:	e7e2      	b.n	8008f9e <_vfiprintf_r+0x62e>
 8008fd8:	46a0      	mov	r8, r4
 8008fda:	f01a 0510 	ands.w	r5, sl, #16
 8008fde:	f858 4b04 	ldr.w	r4, [r8], #4
 8008fe2:	d001      	beq.n	8008fe8 <_vfiprintf_r+0x678>
 8008fe4:	4615      	mov	r5, r2
 8008fe6:	e7e5      	b.n	8008fb4 <_vfiprintf_r+0x644>
 8008fe8:	f01a 0240 	ands.w	r2, sl, #64	; 0x40
 8008fec:	d001      	beq.n	8008ff2 <_vfiprintf_r+0x682>
 8008fee:	b2a4      	uxth	r4, r4
 8008ff0:	e7e0      	b.n	8008fb4 <_vfiprintf_r+0x644>
 8008ff2:	f41a 7500 	ands.w	r5, sl, #512	; 0x200
 8008ff6:	d0dd      	beq.n	8008fb4 <_vfiprintf_r+0x644>
 8008ff8:	b2e4      	uxtb	r4, r4
 8008ffa:	e7f3      	b.n	8008fe4 <_vfiprintf_r+0x674>
 8008ffc:	2c0a      	cmp	r4, #10
 8008ffe:	f175 0300 	sbcs.w	r3, r5, #0
 8009002:	d20d      	bcs.n	8009020 <_vfiprintf_r+0x6b0>
 8009004:	3430      	adds	r4, #48	; 0x30
 8009006:	f88d 40e7 	strb.w	r4, [sp, #231]	; 0xe7
 800900a:	f10d 0be7 	add.w	fp, sp, #231	; 0xe7
 800900e:	e135      	b.n	800927c <_vfiprintf_r+0x90c>
 8009010:	08009a60 	.word	0x08009a60
 8009014:	08009dbb 	.word	0x08009dbb
 8009018:	08009dcb 	.word	0x08009dcb
 800901c:	08009a71 	.word	0x08009a71
 8009020:	ab3a      	add	r3, sp, #232	; 0xe8
 8009022:	9308      	str	r3, [sp, #32]
 8009024:	9b04      	ldr	r3, [sp, #16]
 8009026:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800902a:	f04f 0a00 	mov.w	sl, #0
 800902e:	9309      	str	r3, [sp, #36]	; 0x24
 8009030:	220a      	movs	r2, #10
 8009032:	2300      	movs	r3, #0
 8009034:	4620      	mov	r0, r4
 8009036:	4629      	mov	r1, r5
 8009038:	f7f7 fdde 	bl	8000bf8 <__aeabi_uldivmod>
 800903c:	9b08      	ldr	r3, [sp, #32]
 800903e:	3230      	adds	r2, #48	; 0x30
 8009040:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
 8009044:	f803 2c01 	strb.w	r2, [r3, #-1]
 8009048:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800904a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800904e:	f10a 0a01 	add.w	sl, sl, #1
 8009052:	b1d3      	cbz	r3, 800908a <_vfiprintf_r+0x71a>
 8009054:	9b06      	ldr	r3, [sp, #24]
 8009056:	781a      	ldrb	r2, [r3, #0]
 8009058:	4552      	cmp	r2, sl
 800905a:	d116      	bne.n	800908a <_vfiprintf_r+0x71a>
 800905c:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8009060:	d013      	beq.n	800908a <_vfiprintf_r+0x71a>
 8009062:	2c0a      	cmp	r4, #10
 8009064:	f175 0200 	sbcs.w	r2, r5, #0
 8009068:	d30f      	bcc.n	800908a <_vfiprintf_r+0x71a>
 800906a:	9b07      	ldr	r3, [sp, #28]
 800906c:	ebab 0b03 	sub.w	fp, fp, r3
 8009070:	461a      	mov	r2, r3
 8009072:	ee18 1a10 	vmov	r1, s16
 8009076:	4658      	mov	r0, fp
 8009078:	f7fd ff3f 	bl	8006efa <strncpy>
 800907c:	9b06      	ldr	r3, [sp, #24]
 800907e:	785a      	ldrb	r2, [r3, #1]
 8009080:	b16a      	cbz	r2, 800909e <_vfiprintf_r+0x72e>
 8009082:	3301      	adds	r3, #1
 8009084:	9306      	str	r3, [sp, #24]
 8009086:	f04f 0a00 	mov.w	sl, #0
 800908a:	2c0a      	cmp	r4, #10
 800908c:	f175 0500 	sbcs.w	r5, r5, #0
 8009090:	f0c0 80f4 	bcc.w	800927c <_vfiprintf_r+0x90c>
 8009094:	e9dd 450a 	ldrd	r4, r5, [sp, #40]	; 0x28
 8009098:	f8cd b020 	str.w	fp, [sp, #32]
 800909c:	e7c8      	b.n	8009030 <_vfiprintf_r+0x6c0>
 800909e:	4692      	mov	sl, r2
 80090a0:	e7f3      	b.n	800908a <_vfiprintf_r+0x71a>
 80090a2:	f004 020f 	and.w	r2, r4, #15
 80090a6:	9b05      	ldr	r3, [sp, #20]
 80090a8:	0924      	lsrs	r4, r4, #4
 80090aa:	5c9a      	ldrb	r2, [r3, r2]
 80090ac:	f80b 2d01 	strb.w	r2, [fp, #-1]!
 80090b0:	ea44 7405 	orr.w	r4, r4, r5, lsl #28
 80090b4:	092d      	lsrs	r5, r5, #4
 80090b6:	ea54 0205 	orrs.w	r2, r4, r5
 80090ba:	d1f2      	bne.n	80090a2 <_vfiprintf_r+0x732>
 80090bc:	e0de      	b.n	800927c <_vfiprintf_r+0x90c>
 80090be:	b933      	cbnz	r3, 80090ce <_vfiprintf_r+0x75e>
 80090c0:	f01a 0f01 	tst.w	sl, #1
 80090c4:	d003      	beq.n	80090ce <_vfiprintf_r+0x75e>
 80090c6:	2330      	movs	r3, #48	; 0x30
 80090c8:	f88d 30e7 	strb.w	r3, [sp, #231]	; 0xe7
 80090cc:	e79d      	b.n	800900a <_vfiprintf_r+0x69a>
 80090ce:	f10d 0be8 	add.w	fp, sp, #232	; 0xe8
 80090d2:	e0d3      	b.n	800927c <_vfiprintf_r+0x90c>
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	f000 809f 	beq.w	8009218 <_vfiprintf_r+0x8a8>
 80090da:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
 80090de:	2300      	movs	r3, #0
 80090e0:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
 80090e4:	46a0      	mov	r8, r4
 80090e6:	e5c0      	b.n	8008c6a <_vfiprintf_r+0x2fa>
 80090e8:	4605      	mov	r5, r0
 80090ea:	e66e      	b.n	8008dca <_vfiprintf_r+0x45a>
 80090ec:	2110      	movs	r1, #16
 80090ee:	6071      	str	r1, [r6, #4]
 80090f0:	2a07      	cmp	r2, #7
 80090f2:	4461      	add	r1, ip
 80090f4:	e9cd 210f 	strd	r2, r1, [sp, #60]	; 0x3c
 80090f8:	dd08      	ble.n	800910c <_vfiprintf_r+0x79c>
 80090fa:	aa0e      	add	r2, sp, #56	; 0x38
 80090fc:	4639      	mov	r1, r7
 80090fe:	4648      	mov	r0, r9
 8009100:	f7ff fc04 	bl	800890c <__sprint_r>
 8009104:	2800      	cmp	r0, #0
 8009106:	d166      	bne.n	80091d6 <_vfiprintf_r+0x866>
 8009108:	4b60      	ldr	r3, [pc, #384]	; (800928c <_vfiprintf_r+0x91c>)
 800910a:	a811      	add	r0, sp, #68	; 0x44
 800910c:	3c10      	subs	r4, #16
 800910e:	4606      	mov	r6, r0
 8009110:	e676      	b.n	8008e00 <_vfiprintf_r+0x490>
 8009112:	4606      	mov	r6, r0
 8009114:	e68e      	b.n	8008e34 <_vfiprintf_r+0x4c4>
 8009116:	aa0e      	add	r2, sp, #56	; 0x38
 8009118:	4639      	mov	r1, r7
 800911a:	4648      	mov	r0, r9
 800911c:	f7ff fbf6 	bl	800890c <__sprint_r>
 8009120:	2800      	cmp	r0, #0
 8009122:	d158      	bne.n	80091d6 <_vfiprintf_r+0x866>
 8009124:	ae11      	add	r6, sp, #68	; 0x44
 8009126:	e697      	b.n	8008e58 <_vfiprintf_r+0x4e8>
 8009128:	aa0e      	add	r2, sp, #56	; 0x38
 800912a:	4639      	mov	r1, r7
 800912c:	4648      	mov	r0, r9
 800912e:	f7ff fbed 	bl	800890c <__sprint_r>
 8009132:	2800      	cmp	r0, #0
 8009134:	d14f      	bne.n	80091d6 <_vfiprintf_r+0x866>
 8009136:	ae11      	add	r6, sp, #68	; 0x44
 8009138:	e69e      	b.n	8008e78 <_vfiprintf_r+0x508>
 800913a:	2110      	movs	r1, #16
 800913c:	6071      	str	r1, [r6, #4]
 800913e:	2a07      	cmp	r2, #7
 8009140:	4461      	add	r1, ip
 8009142:	e9cd 210f 	strd	r2, r1, [sp, #60]	; 0x3c
 8009146:	dd08      	ble.n	800915a <_vfiprintf_r+0x7ea>
 8009148:	aa0e      	add	r2, sp, #56	; 0x38
 800914a:	4639      	mov	r1, r7
 800914c:	4648      	mov	r0, r9
 800914e:	f7ff fbdd 	bl	800890c <__sprint_r>
 8009152:	2800      	cmp	r0, #0
 8009154:	d13f      	bne.n	80091d6 <_vfiprintf_r+0x866>
 8009156:	4b4e      	ldr	r3, [pc, #312]	; (8009290 <_vfiprintf_r+0x920>)
 8009158:	a811      	add	r0, sp, #68	; 0x44
 800915a:	3c10      	subs	r4, #16
 800915c:	4606      	mov	r6, r0
 800915e:	e694      	b.n	8008e8a <_vfiprintf_r+0x51a>
 8009160:	4606      	mov	r6, r0
 8009162:	e6ac      	b.n	8008ebe <_vfiprintf_r+0x54e>
 8009164:	3110      	adds	r1, #16
 8009166:	2a07      	cmp	r2, #7
 8009168:	e9cd 210f 	strd	r2, r1, [sp, #60]	; 0x3c
 800916c:	6073      	str	r3, [r6, #4]
 800916e:	dd07      	ble.n	8009180 <_vfiprintf_r+0x810>
 8009170:	aa0e      	add	r2, sp, #56	; 0x38
 8009172:	4639      	mov	r1, r7
 8009174:	4648      	mov	r0, r9
 8009176:	f7ff fbc9 	bl	800890c <__sprint_r>
 800917a:	bb60      	cbnz	r0, 80091d6 <_vfiprintf_r+0x866>
 800917c:	a811      	add	r0, sp, #68	; 0x44
 800917e:	2310      	movs	r3, #16
 8009180:	3c10      	subs	r4, #16
 8009182:	4606      	mov	r6, r0
 8009184:	e6a1      	b.n	8008eca <_vfiprintf_r+0x55a>
 8009186:	4606      	mov	r6, r0
 8009188:	e6b9      	b.n	8008efe <_vfiprintf_r+0x58e>
 800918a:	aa0e      	add	r2, sp, #56	; 0x38
 800918c:	4639      	mov	r1, r7
 800918e:	4648      	mov	r0, r9
 8009190:	f7ff fbbc 	bl	800890c <__sprint_r>
 8009194:	b9f8      	cbnz	r0, 80091d6 <_vfiprintf_r+0x866>
 8009196:	ab11      	add	r3, sp, #68	; 0x44
 8009198:	e6c1      	b.n	8008f1e <_vfiprintf_r+0x5ae>
 800919a:	e9dd 2103 	ldrd	r2, r1, [sp, #12]
 800919e:	1a54      	subs	r4, r2, r1
 80091a0:	2c00      	cmp	r4, #0
 80091a2:	f77f aec0 	ble.w	8008f26 <_vfiprintf_r+0x5b6>
 80091a6:	4d39      	ldr	r5, [pc, #228]	; (800928c <_vfiprintf_r+0x91c>)
 80091a8:	2610      	movs	r6, #16
 80091aa:	e9dd 210f 	ldrd	r2, r1, [sp, #60]	; 0x3c
 80091ae:	2c10      	cmp	r4, #16
 80091b0:	f102 0201 	add.w	r2, r2, #1
 80091b4:	601d      	str	r5, [r3, #0]
 80091b6:	dc1d      	bgt.n	80091f4 <_vfiprintf_r+0x884>
 80091b8:	605c      	str	r4, [r3, #4]
 80091ba:	2a07      	cmp	r2, #7
 80091bc:	440c      	add	r4, r1
 80091be:	e9cd 240f 	strd	r2, r4, [sp, #60]	; 0x3c
 80091c2:	f77f aeb0 	ble.w	8008f26 <_vfiprintf_r+0x5b6>
 80091c6:	aa0e      	add	r2, sp, #56	; 0x38
 80091c8:	4639      	mov	r1, r7
 80091ca:	4648      	mov	r0, r9
 80091cc:	f7ff fb9e 	bl	800890c <__sprint_r>
 80091d0:	2800      	cmp	r0, #0
 80091d2:	f43f aea8 	beq.w	8008f26 <_vfiprintf_r+0x5b6>
 80091d6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80091d8:	07d9      	lsls	r1, r3, #31
 80091da:	d405      	bmi.n	80091e8 <_vfiprintf_r+0x878>
 80091dc:	89bb      	ldrh	r3, [r7, #12]
 80091de:	059a      	lsls	r2, r3, #22
 80091e0:	d402      	bmi.n	80091e8 <_vfiprintf_r+0x878>
 80091e2:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80091e4:	f7fc fa5f 	bl	80056a6 <__retarget_lock_release_recursive>
 80091e8:	89bb      	ldrh	r3, [r7, #12]
 80091ea:	065b      	lsls	r3, r3, #25
 80091ec:	f57f abf3 	bpl.w	80089d6 <_vfiprintf_r+0x66>
 80091f0:	f7ff bbee 	b.w	80089d0 <_vfiprintf_r+0x60>
 80091f4:	3110      	adds	r1, #16
 80091f6:	2a07      	cmp	r2, #7
 80091f8:	e9cd 210f 	strd	r2, r1, [sp, #60]	; 0x3c
 80091fc:	605e      	str	r6, [r3, #4]
 80091fe:	dc02      	bgt.n	8009206 <_vfiprintf_r+0x896>
 8009200:	3308      	adds	r3, #8
 8009202:	3c10      	subs	r4, #16
 8009204:	e7d1      	b.n	80091aa <_vfiprintf_r+0x83a>
 8009206:	aa0e      	add	r2, sp, #56	; 0x38
 8009208:	4639      	mov	r1, r7
 800920a:	4648      	mov	r0, r9
 800920c:	f7ff fb7e 	bl	800890c <__sprint_r>
 8009210:	2800      	cmp	r0, #0
 8009212:	d1e0      	bne.n	80091d6 <_vfiprintf_r+0x866>
 8009214:	ab11      	add	r3, sp, #68	; 0x44
 8009216:	e7f4      	b.n	8009202 <_vfiprintf_r+0x892>
 8009218:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800921a:	b913      	cbnz	r3, 8009222 <_vfiprintf_r+0x8b2>
 800921c:	2300      	movs	r3, #0
 800921e:	930f      	str	r3, [sp, #60]	; 0x3c
 8009220:	e7d9      	b.n	80091d6 <_vfiprintf_r+0x866>
 8009222:	aa0e      	add	r2, sp, #56	; 0x38
 8009224:	4639      	mov	r1, r7
 8009226:	4648      	mov	r0, r9
 8009228:	f7ff fb70 	bl	800890c <__sprint_r>
 800922c:	2800      	cmp	r0, #0
 800922e:	d0f5      	beq.n	800921c <_vfiprintf_r+0x8ac>
 8009230:	e7d1      	b.n	80091d6 <_vfiprintf_r+0x866>
 8009232:	ea54 0205 	orrs.w	r2, r4, r5
 8009236:	f8cd a010 	str.w	sl, [sp, #16]
 800923a:	f43f ad8d 	beq.w	8008d58 <_vfiprintf_r+0x3e8>
 800923e:	2b01      	cmp	r3, #1
 8009240:	f43f aedc 	beq.w	8008ffc <_vfiprintf_r+0x68c>
 8009244:	2b02      	cmp	r3, #2
 8009246:	f10d 0be8 	add.w	fp, sp, #232	; 0xe8
 800924a:	f43f af2a 	beq.w	80090a2 <_vfiprintf_r+0x732>
 800924e:	f004 0207 	and.w	r2, r4, #7
 8009252:	08e4      	lsrs	r4, r4, #3
 8009254:	ea44 7445 	orr.w	r4, r4, r5, lsl #29
 8009258:	08ed      	lsrs	r5, r5, #3
 800925a:	3230      	adds	r2, #48	; 0x30
 800925c:	ea54 0005 	orrs.w	r0, r4, r5
 8009260:	4659      	mov	r1, fp
 8009262:	f80b 2d01 	strb.w	r2, [fp, #-1]!
 8009266:	d1f2      	bne.n	800924e <_vfiprintf_r+0x8de>
 8009268:	9b04      	ldr	r3, [sp, #16]
 800926a:	07d8      	lsls	r0, r3, #31
 800926c:	d506      	bpl.n	800927c <_vfiprintf_r+0x90c>
 800926e:	2a30      	cmp	r2, #48	; 0x30
 8009270:	d004      	beq.n	800927c <_vfiprintf_r+0x90c>
 8009272:	2230      	movs	r2, #48	; 0x30
 8009274:	f80b 2c01 	strb.w	r2, [fp, #-1]
 8009278:	f1a1 0b02 	sub.w	fp, r1, #2
 800927c:	ab3a      	add	r3, sp, #232	; 0xe8
 800927e:	eba3 030b 	sub.w	r3, r3, fp
 8009282:	9d00      	ldr	r5, [sp, #0]
 8009284:	f8dd a010 	ldr.w	sl, [sp, #16]
 8009288:	9300      	str	r3, [sp, #0]
 800928a:	e59e      	b.n	8008dca <_vfiprintf_r+0x45a>
 800928c:	08009dbb 	.word	0x08009dbb
 8009290:	08009dcb 	.word	0x08009dcb

08009294 <__sbprintf>:
 8009294:	b570      	push	{r4, r5, r6, lr}
 8009296:	460c      	mov	r4, r1
 8009298:	8989      	ldrh	r1, [r1, #12]
 800929a:	f5ad 6d8e 	sub.w	sp, sp, #1136	; 0x470
 800929e:	f021 0102 	bic.w	r1, r1, #2
 80092a2:	f8ad 1014 	strh.w	r1, [sp, #20]
 80092a6:	6e61      	ldr	r1, [r4, #100]	; 0x64
 80092a8:	911b      	str	r1, [sp, #108]	; 0x6c
 80092aa:	89e1      	ldrh	r1, [r4, #14]
 80092ac:	f8ad 1016 	strh.w	r1, [sp, #22]
 80092b0:	69e1      	ldr	r1, [r4, #28]
 80092b2:	9109      	str	r1, [sp, #36]	; 0x24
 80092b4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80092b6:	910b      	str	r1, [sp, #44]	; 0x2c
 80092b8:	a91c      	add	r1, sp, #112	; 0x70
 80092ba:	9102      	str	r1, [sp, #8]
 80092bc:	9106      	str	r1, [sp, #24]
 80092be:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80092c2:	4606      	mov	r6, r0
 80092c4:	9104      	str	r1, [sp, #16]
 80092c6:	9107      	str	r1, [sp, #28]
 80092c8:	a818      	add	r0, sp, #96	; 0x60
 80092ca:	2100      	movs	r1, #0
 80092cc:	e9cd 3200 	strd	r3, r2, [sp]
 80092d0:	9108      	str	r1, [sp, #32]
 80092d2:	f7fc f9e5 	bl	80056a0 <__retarget_lock_init_recursive>
 80092d6:	e9dd 3200 	ldrd	r3, r2, [sp]
 80092da:	a902      	add	r1, sp, #8
 80092dc:	4630      	mov	r0, r6
 80092de:	f7ff fb47 	bl	8008970 <_vfiprintf_r>
 80092e2:	1e05      	subs	r5, r0, #0
 80092e4:	db07      	blt.n	80092f6 <__sbprintf+0x62>
 80092e6:	a902      	add	r1, sp, #8
 80092e8:	4630      	mov	r0, r6
 80092ea:	f7fd fde1 	bl	8006eb0 <_fflush_r>
 80092ee:	2800      	cmp	r0, #0
 80092f0:	bf18      	it	ne
 80092f2:	f04f 35ff 	movne.w	r5, #4294967295	; 0xffffffff
 80092f6:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 80092fa:	9818      	ldr	r0, [sp, #96]	; 0x60
 80092fc:	065b      	lsls	r3, r3, #25
 80092fe:	bf42      	ittt	mi
 8009300:	89a3      	ldrhmi	r3, [r4, #12]
 8009302:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
 8009306:	81a3      	strhmi	r3, [r4, #12]
 8009308:	f7fc f9cb 	bl	80056a2 <__retarget_lock_close_recursive>
 800930c:	4628      	mov	r0, r5
 800930e:	f50d 6d8e 	add.w	sp, sp, #1136	; 0x470
 8009312:	bd70      	pop	{r4, r5, r6, pc}

08009314 <__sfvwrite_r>:
 8009314:	6893      	ldr	r3, [r2, #8]
 8009316:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800931a:	4606      	mov	r6, r0
 800931c:	460c      	mov	r4, r1
 800931e:	4691      	mov	r9, r2
 8009320:	b91b      	cbnz	r3, 800932a <__sfvwrite_r+0x16>
 8009322:	2000      	movs	r0, #0
 8009324:	b003      	add	sp, #12
 8009326:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800932a:	898b      	ldrh	r3, [r1, #12]
 800932c:	0718      	lsls	r0, r3, #28
 800932e:	d54f      	bpl.n	80093d0 <__sfvwrite_r+0xbc>
 8009330:	690b      	ldr	r3, [r1, #16]
 8009332:	2b00      	cmp	r3, #0
 8009334:	d04c      	beq.n	80093d0 <__sfvwrite_r+0xbc>
 8009336:	89a3      	ldrh	r3, [r4, #12]
 8009338:	f8d9 8000 	ldr.w	r8, [r9]
 800933c:	f013 0702 	ands.w	r7, r3, #2
 8009340:	d16b      	bne.n	800941a <__sfvwrite_r+0x106>
 8009342:	f013 0301 	ands.w	r3, r3, #1
 8009346:	f000 809b 	beq.w	8009480 <__sfvwrite_r+0x16c>
 800934a:	4638      	mov	r0, r7
 800934c:	46ba      	mov	sl, r7
 800934e:	46bb      	mov	fp, r7
 8009350:	f1bb 0f00 	cmp.w	fp, #0
 8009354:	f000 8102 	beq.w	800955c <__sfvwrite_r+0x248>
 8009358:	b950      	cbnz	r0, 8009370 <__sfvwrite_r+0x5c>
 800935a:	465a      	mov	r2, fp
 800935c:	210a      	movs	r1, #10
 800935e:	4650      	mov	r0, sl
 8009360:	f7f6 ff66 	bl	8000230 <memchr>
 8009364:	2800      	cmp	r0, #0
 8009366:	f000 80ff 	beq.w	8009568 <__sfvwrite_r+0x254>
 800936a:	3001      	adds	r0, #1
 800936c:	eba0 070a 	sub.w	r7, r0, sl
 8009370:	6820      	ldr	r0, [r4, #0]
 8009372:	6921      	ldr	r1, [r4, #16]
 8009374:	68a5      	ldr	r5, [r4, #8]
 8009376:	6963      	ldr	r3, [r4, #20]
 8009378:	455f      	cmp	r7, fp
 800937a:	463a      	mov	r2, r7
 800937c:	bf28      	it	cs
 800937e:	465a      	movcs	r2, fp
 8009380:	4288      	cmp	r0, r1
 8009382:	f240 80f4 	bls.w	800956e <__sfvwrite_r+0x25a>
 8009386:	441d      	add	r5, r3
 8009388:	42aa      	cmp	r2, r5
 800938a:	f340 80f0 	ble.w	800956e <__sfvwrite_r+0x25a>
 800938e:	4651      	mov	r1, sl
 8009390:	462a      	mov	r2, r5
 8009392:	f7ff f85e 	bl	8008452 <memmove>
 8009396:	6823      	ldr	r3, [r4, #0]
 8009398:	442b      	add	r3, r5
 800939a:	6023      	str	r3, [r4, #0]
 800939c:	4621      	mov	r1, r4
 800939e:	4630      	mov	r0, r6
 80093a0:	f7fd fd86 	bl	8006eb0 <_fflush_r>
 80093a4:	2800      	cmp	r0, #0
 80093a6:	d166      	bne.n	8009476 <__sfvwrite_r+0x162>
 80093a8:	1b7f      	subs	r7, r7, r5
 80093aa:	f040 80f8 	bne.w	800959e <__sfvwrite_r+0x28a>
 80093ae:	4621      	mov	r1, r4
 80093b0:	4630      	mov	r0, r6
 80093b2:	f7fd fd7d 	bl	8006eb0 <_fflush_r>
 80093b6:	2800      	cmp	r0, #0
 80093b8:	d15d      	bne.n	8009476 <__sfvwrite_r+0x162>
 80093ba:	f8d9 3008 	ldr.w	r3, [r9, #8]
 80093be:	1b5b      	subs	r3, r3, r5
 80093c0:	44aa      	add	sl, r5
 80093c2:	ebab 0b05 	sub.w	fp, fp, r5
 80093c6:	f8c9 3008 	str.w	r3, [r9, #8]
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d1c0      	bne.n	8009350 <__sfvwrite_r+0x3c>
 80093ce:	e7a8      	b.n	8009322 <__sfvwrite_r+0xe>
 80093d0:	4621      	mov	r1, r4
 80093d2:	4630      	mov	r0, r6
 80093d4:	f000 f8e8 	bl	80095a8 <__swsetup_r>
 80093d8:	2800      	cmp	r0, #0
 80093da:	d0ac      	beq.n	8009336 <__sfvwrite_r+0x22>
 80093dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80093e0:	e7a0      	b.n	8009324 <__sfvwrite_r+0x10>
 80093e2:	e9d8 a500 	ldrd	sl, r5, [r8]
 80093e6:	f108 0808 	add.w	r8, r8, #8
 80093ea:	f8d4 b024 	ldr.w	fp, [r4, #36]	; 0x24
 80093ee:	69e1      	ldr	r1, [r4, #28]
 80093f0:	2d00      	cmp	r5, #0
 80093f2:	d0f6      	beq.n	80093e2 <__sfvwrite_r+0xce>
 80093f4:	42bd      	cmp	r5, r7
 80093f6:	462b      	mov	r3, r5
 80093f8:	4652      	mov	r2, sl
 80093fa:	bf28      	it	cs
 80093fc:	463b      	movcs	r3, r7
 80093fe:	4630      	mov	r0, r6
 8009400:	47d8      	blx	fp
 8009402:	2800      	cmp	r0, #0
 8009404:	dd37      	ble.n	8009476 <__sfvwrite_r+0x162>
 8009406:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800940a:	1a1b      	subs	r3, r3, r0
 800940c:	4482      	add	sl, r0
 800940e:	1a2d      	subs	r5, r5, r0
 8009410:	f8c9 3008 	str.w	r3, [r9, #8]
 8009414:	2b00      	cmp	r3, #0
 8009416:	d1e8      	bne.n	80093ea <__sfvwrite_r+0xd6>
 8009418:	e783      	b.n	8009322 <__sfvwrite_r+0xe>
 800941a:	f04f 0a00 	mov.w	sl, #0
 800941e:	4f61      	ldr	r7, [pc, #388]	; (80095a4 <__sfvwrite_r+0x290>)
 8009420:	4655      	mov	r5, sl
 8009422:	e7e2      	b.n	80093ea <__sfvwrite_r+0xd6>
 8009424:	e9d8 7a00 	ldrd	r7, sl, [r8]
 8009428:	f108 0808 	add.w	r8, r8, #8
 800942c:	6820      	ldr	r0, [r4, #0]
 800942e:	68a2      	ldr	r2, [r4, #8]
 8009430:	f1ba 0f00 	cmp.w	sl, #0
 8009434:	d0f6      	beq.n	8009424 <__sfvwrite_r+0x110>
 8009436:	89a3      	ldrh	r3, [r4, #12]
 8009438:	0599      	lsls	r1, r3, #22
 800943a:	d563      	bpl.n	8009504 <__sfvwrite_r+0x1f0>
 800943c:	4552      	cmp	r2, sl
 800943e:	d836      	bhi.n	80094ae <__sfvwrite_r+0x19a>
 8009440:	f413 6f90 	tst.w	r3, #1152	; 0x480
 8009444:	d033      	beq.n	80094ae <__sfvwrite_r+0x19a>
 8009446:	6921      	ldr	r1, [r4, #16]
 8009448:	6965      	ldr	r5, [r4, #20]
 800944a:	eba0 0b01 	sub.w	fp, r0, r1
 800944e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009452:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009456:	f10b 0201 	add.w	r2, fp, #1
 800945a:	106d      	asrs	r5, r5, #1
 800945c:	4452      	add	r2, sl
 800945e:	4295      	cmp	r5, r2
 8009460:	bf38      	it	cc
 8009462:	4615      	movcc	r5, r2
 8009464:	055b      	lsls	r3, r3, #21
 8009466:	d53d      	bpl.n	80094e4 <__sfvwrite_r+0x1d0>
 8009468:	4629      	mov	r1, r5
 800946a:	4630      	mov	r0, r6
 800946c:	f7fb fd36 	bl	8004edc <_malloc_r>
 8009470:	b948      	cbnz	r0, 8009486 <__sfvwrite_r+0x172>
 8009472:	230c      	movs	r3, #12
 8009474:	6033      	str	r3, [r6, #0]
 8009476:	89a3      	ldrh	r3, [r4, #12]
 8009478:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800947c:	81a3      	strh	r3, [r4, #12]
 800947e:	e7ad      	b.n	80093dc <__sfvwrite_r+0xc8>
 8009480:	461f      	mov	r7, r3
 8009482:	469a      	mov	sl, r3
 8009484:	e7d2      	b.n	800942c <__sfvwrite_r+0x118>
 8009486:	465a      	mov	r2, fp
 8009488:	6921      	ldr	r1, [r4, #16]
 800948a:	9001      	str	r0, [sp, #4]
 800948c:	f7ff f802 	bl	8008494 <memcpy>
 8009490:	89a2      	ldrh	r2, [r4, #12]
 8009492:	9b01      	ldr	r3, [sp, #4]
 8009494:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 8009498:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800949c:	81a2      	strh	r2, [r4, #12]
 800949e:	6123      	str	r3, [r4, #16]
 80094a0:	6165      	str	r5, [r4, #20]
 80094a2:	445b      	add	r3, fp
 80094a4:	eba5 050b 	sub.w	r5, r5, fp
 80094a8:	6023      	str	r3, [r4, #0]
 80094aa:	4652      	mov	r2, sl
 80094ac:	60a5      	str	r5, [r4, #8]
 80094ae:	4552      	cmp	r2, sl
 80094b0:	bf28      	it	cs
 80094b2:	4652      	movcs	r2, sl
 80094b4:	6820      	ldr	r0, [r4, #0]
 80094b6:	9201      	str	r2, [sp, #4]
 80094b8:	4639      	mov	r1, r7
 80094ba:	f7fe ffca 	bl	8008452 <memmove>
 80094be:	68a3      	ldr	r3, [r4, #8]
 80094c0:	9a01      	ldr	r2, [sp, #4]
 80094c2:	1a9b      	subs	r3, r3, r2
 80094c4:	60a3      	str	r3, [r4, #8]
 80094c6:	6823      	ldr	r3, [r4, #0]
 80094c8:	4413      	add	r3, r2
 80094ca:	4655      	mov	r5, sl
 80094cc:	6023      	str	r3, [r4, #0]
 80094ce:	f8d9 3008 	ldr.w	r3, [r9, #8]
 80094d2:	1b5b      	subs	r3, r3, r5
 80094d4:	442f      	add	r7, r5
 80094d6:	ebaa 0a05 	sub.w	sl, sl, r5
 80094da:	f8c9 3008 	str.w	r3, [r9, #8]
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d1a4      	bne.n	800942c <__sfvwrite_r+0x118>
 80094e2:	e71e      	b.n	8009322 <__sfvwrite_r+0xe>
 80094e4:	462a      	mov	r2, r5
 80094e6:	4630      	mov	r0, r6
 80094e8:	f7ff f848 	bl	800857c <_realloc_r>
 80094ec:	4603      	mov	r3, r0
 80094ee:	2800      	cmp	r0, #0
 80094f0:	d1d5      	bne.n	800949e <__sfvwrite_r+0x18a>
 80094f2:	6921      	ldr	r1, [r4, #16]
 80094f4:	4630      	mov	r0, r6
 80094f6:	f7fc f947 	bl	8005788 <_free_r>
 80094fa:	89a3      	ldrh	r3, [r4, #12]
 80094fc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009500:	81a3      	strh	r3, [r4, #12]
 8009502:	e7b6      	b.n	8009472 <__sfvwrite_r+0x15e>
 8009504:	6923      	ldr	r3, [r4, #16]
 8009506:	4283      	cmp	r3, r0
 8009508:	d302      	bcc.n	8009510 <__sfvwrite_r+0x1fc>
 800950a:	6961      	ldr	r1, [r4, #20]
 800950c:	4551      	cmp	r1, sl
 800950e:	d915      	bls.n	800953c <__sfvwrite_r+0x228>
 8009510:	4552      	cmp	r2, sl
 8009512:	bf28      	it	cs
 8009514:	4652      	movcs	r2, sl
 8009516:	4639      	mov	r1, r7
 8009518:	4615      	mov	r5, r2
 800951a:	f7fe ff9a 	bl	8008452 <memmove>
 800951e:	68a3      	ldr	r3, [r4, #8]
 8009520:	6822      	ldr	r2, [r4, #0]
 8009522:	1b5b      	subs	r3, r3, r5
 8009524:	442a      	add	r2, r5
 8009526:	60a3      	str	r3, [r4, #8]
 8009528:	6022      	str	r2, [r4, #0]
 800952a:	2b00      	cmp	r3, #0
 800952c:	d1cf      	bne.n	80094ce <__sfvwrite_r+0x1ba>
 800952e:	4621      	mov	r1, r4
 8009530:	4630      	mov	r0, r6
 8009532:	f7fd fcbd 	bl	8006eb0 <_fflush_r>
 8009536:	2800      	cmp	r0, #0
 8009538:	d0c9      	beq.n	80094ce <__sfvwrite_r+0x1ba>
 800953a:	e79c      	b.n	8009476 <__sfvwrite_r+0x162>
 800953c:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8009540:	459a      	cmp	sl, r3
 8009542:	bf38      	it	cc
 8009544:	4653      	movcc	r3, sl
 8009546:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8009548:	fb93 f3f1 	sdiv	r3, r3, r1
 800954c:	463a      	mov	r2, r7
 800954e:	434b      	muls	r3, r1
 8009550:	4630      	mov	r0, r6
 8009552:	69e1      	ldr	r1, [r4, #28]
 8009554:	47a8      	blx	r5
 8009556:	1e05      	subs	r5, r0, #0
 8009558:	dcb9      	bgt.n	80094ce <__sfvwrite_r+0x1ba>
 800955a:	e78c      	b.n	8009476 <__sfvwrite_r+0x162>
 800955c:	e9d8 ab00 	ldrd	sl, fp, [r8]
 8009560:	2000      	movs	r0, #0
 8009562:	f108 0808 	add.w	r8, r8, #8
 8009566:	e6f3      	b.n	8009350 <__sfvwrite_r+0x3c>
 8009568:	f10b 0701 	add.w	r7, fp, #1
 800956c:	e700      	b.n	8009370 <__sfvwrite_r+0x5c>
 800956e:	4293      	cmp	r3, r2
 8009570:	dc08      	bgt.n	8009584 <__sfvwrite_r+0x270>
 8009572:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8009574:	69e1      	ldr	r1, [r4, #28]
 8009576:	4652      	mov	r2, sl
 8009578:	4630      	mov	r0, r6
 800957a:	47a8      	blx	r5
 800957c:	1e05      	subs	r5, r0, #0
 800957e:	f73f af13 	bgt.w	80093a8 <__sfvwrite_r+0x94>
 8009582:	e778      	b.n	8009476 <__sfvwrite_r+0x162>
 8009584:	4651      	mov	r1, sl
 8009586:	9201      	str	r2, [sp, #4]
 8009588:	f7fe ff63 	bl	8008452 <memmove>
 800958c:	9a01      	ldr	r2, [sp, #4]
 800958e:	68a3      	ldr	r3, [r4, #8]
 8009590:	1a9b      	subs	r3, r3, r2
 8009592:	60a3      	str	r3, [r4, #8]
 8009594:	6823      	ldr	r3, [r4, #0]
 8009596:	4413      	add	r3, r2
 8009598:	6023      	str	r3, [r4, #0]
 800959a:	4615      	mov	r5, r2
 800959c:	e704      	b.n	80093a8 <__sfvwrite_r+0x94>
 800959e:	2001      	movs	r0, #1
 80095a0:	e70b      	b.n	80093ba <__sfvwrite_r+0xa6>
 80095a2:	bf00      	nop
 80095a4:	7ffffc00 	.word	0x7ffffc00

080095a8 <__swsetup_r>:
 80095a8:	b538      	push	{r3, r4, r5, lr}
 80095aa:	4b2a      	ldr	r3, [pc, #168]	; (8009654 <__swsetup_r+0xac>)
 80095ac:	4605      	mov	r5, r0
 80095ae:	6818      	ldr	r0, [r3, #0]
 80095b0:	460c      	mov	r4, r1
 80095b2:	b118      	cbz	r0, 80095bc <__swsetup_r+0x14>
 80095b4:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80095b6:	b90b      	cbnz	r3, 80095bc <__swsetup_r+0x14>
 80095b8:	f7fb ff50 	bl	800545c <__sinit>
 80095bc:	89a3      	ldrh	r3, [r4, #12]
 80095be:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80095c2:	0718      	lsls	r0, r3, #28
 80095c4:	d422      	bmi.n	800960c <__swsetup_r+0x64>
 80095c6:	06d9      	lsls	r1, r3, #27
 80095c8:	d407      	bmi.n	80095da <__swsetup_r+0x32>
 80095ca:	2309      	movs	r3, #9
 80095cc:	602b      	str	r3, [r5, #0]
 80095ce:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80095d2:	81a3      	strh	r3, [r4, #12]
 80095d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80095d8:	e034      	b.n	8009644 <__swsetup_r+0x9c>
 80095da:	0758      	lsls	r0, r3, #29
 80095dc:	d512      	bpl.n	8009604 <__swsetup_r+0x5c>
 80095de:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80095e0:	b141      	cbz	r1, 80095f4 <__swsetup_r+0x4c>
 80095e2:	f104 0340 	add.w	r3, r4, #64	; 0x40
 80095e6:	4299      	cmp	r1, r3
 80095e8:	d002      	beq.n	80095f0 <__swsetup_r+0x48>
 80095ea:	4628      	mov	r0, r5
 80095ec:	f7fc f8cc 	bl	8005788 <_free_r>
 80095f0:	2300      	movs	r3, #0
 80095f2:	6323      	str	r3, [r4, #48]	; 0x30
 80095f4:	89a3      	ldrh	r3, [r4, #12]
 80095f6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80095fa:	81a3      	strh	r3, [r4, #12]
 80095fc:	2300      	movs	r3, #0
 80095fe:	6063      	str	r3, [r4, #4]
 8009600:	6923      	ldr	r3, [r4, #16]
 8009602:	6023      	str	r3, [r4, #0]
 8009604:	89a3      	ldrh	r3, [r4, #12]
 8009606:	f043 0308 	orr.w	r3, r3, #8
 800960a:	81a3      	strh	r3, [r4, #12]
 800960c:	6923      	ldr	r3, [r4, #16]
 800960e:	b94b      	cbnz	r3, 8009624 <__swsetup_r+0x7c>
 8009610:	89a3      	ldrh	r3, [r4, #12]
 8009612:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009616:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800961a:	d003      	beq.n	8009624 <__swsetup_r+0x7c>
 800961c:	4621      	mov	r1, r4
 800961e:	4628      	mov	r0, r5
 8009620:	f000 f8ca 	bl	80097b8 <__smakebuf_r>
 8009624:	89a0      	ldrh	r0, [r4, #12]
 8009626:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800962a:	f010 0301 	ands.w	r3, r0, #1
 800962e:	d00a      	beq.n	8009646 <__swsetup_r+0x9e>
 8009630:	2300      	movs	r3, #0
 8009632:	60a3      	str	r3, [r4, #8]
 8009634:	6963      	ldr	r3, [r4, #20]
 8009636:	425b      	negs	r3, r3
 8009638:	61a3      	str	r3, [r4, #24]
 800963a:	6923      	ldr	r3, [r4, #16]
 800963c:	b943      	cbnz	r3, 8009650 <__swsetup_r+0xa8>
 800963e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009642:	d1c4      	bne.n	80095ce <__swsetup_r+0x26>
 8009644:	bd38      	pop	{r3, r4, r5, pc}
 8009646:	0781      	lsls	r1, r0, #30
 8009648:	bf58      	it	pl
 800964a:	6963      	ldrpl	r3, [r4, #20]
 800964c:	60a3      	str	r3, [r4, #8]
 800964e:	e7f4      	b.n	800963a <__swsetup_r+0x92>
 8009650:	2000      	movs	r0, #0
 8009652:	e7f7      	b.n	8009644 <__swsetup_r+0x9c>
 8009654:	20000548 	.word	0x20000548

08009658 <__fputwc>:
 8009658:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800965c:	4680      	mov	r8, r0
 800965e:	460e      	mov	r6, r1
 8009660:	4615      	mov	r5, r2
 8009662:	f7fe ff11 	bl	8008488 <__locale_mb_cur_max>
 8009666:	2801      	cmp	r0, #1
 8009668:	d11c      	bne.n	80096a4 <__fputwc+0x4c>
 800966a:	1e73      	subs	r3, r6, #1
 800966c:	2bfe      	cmp	r3, #254	; 0xfe
 800966e:	d819      	bhi.n	80096a4 <__fputwc+0x4c>
 8009670:	f88d 6004 	strb.w	r6, [sp, #4]
 8009674:	4604      	mov	r4, r0
 8009676:	2700      	movs	r7, #0
 8009678:	f10d 0904 	add.w	r9, sp, #4
 800967c:	42a7      	cmp	r7, r4
 800967e:	d020      	beq.n	80096c2 <__fputwc+0x6a>
 8009680:	68ab      	ldr	r3, [r5, #8]
 8009682:	f817 1009 	ldrb.w	r1, [r7, r9]
 8009686:	3b01      	subs	r3, #1
 8009688:	2b00      	cmp	r3, #0
 800968a:	60ab      	str	r3, [r5, #8]
 800968c:	da04      	bge.n	8009698 <__fputwc+0x40>
 800968e:	69aa      	ldr	r2, [r5, #24]
 8009690:	4293      	cmp	r3, r2
 8009692:	db1a      	blt.n	80096ca <__fputwc+0x72>
 8009694:	290a      	cmp	r1, #10
 8009696:	d018      	beq.n	80096ca <__fputwc+0x72>
 8009698:	682b      	ldr	r3, [r5, #0]
 800969a:	1c5a      	adds	r2, r3, #1
 800969c:	602a      	str	r2, [r5, #0]
 800969e:	7019      	strb	r1, [r3, #0]
 80096a0:	3701      	adds	r7, #1
 80096a2:	e7eb      	b.n	800967c <__fputwc+0x24>
 80096a4:	a901      	add	r1, sp, #4
 80096a6:	f105 035c 	add.w	r3, r5, #92	; 0x5c
 80096aa:	4632      	mov	r2, r6
 80096ac:	4640      	mov	r0, r8
 80096ae:	f000 f845 	bl	800973c <_wcrtomb_r>
 80096b2:	1c41      	adds	r1, r0, #1
 80096b4:	4604      	mov	r4, r0
 80096b6:	d1de      	bne.n	8009676 <__fputwc+0x1e>
 80096b8:	89ab      	ldrh	r3, [r5, #12]
 80096ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80096be:	81ab      	strh	r3, [r5, #12]
 80096c0:	4606      	mov	r6, r0
 80096c2:	4630      	mov	r0, r6
 80096c4:	b003      	add	sp, #12
 80096c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80096ca:	462a      	mov	r2, r5
 80096cc:	4640      	mov	r0, r8
 80096ce:	f000 f8af 	bl	8009830 <__swbuf_r>
 80096d2:	1c42      	adds	r2, r0, #1
 80096d4:	d1e4      	bne.n	80096a0 <__fputwc+0x48>
 80096d6:	4606      	mov	r6, r0
 80096d8:	e7f3      	b.n	80096c2 <__fputwc+0x6a>

080096da <_fputwc_r>:
 80096da:	6e53      	ldr	r3, [r2, #100]	; 0x64
 80096dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80096de:	4614      	mov	r4, r2
 80096e0:	07da      	lsls	r2, r3, #31
 80096e2:	4605      	mov	r5, r0
 80096e4:	d407      	bmi.n	80096f6 <_fputwc_r+0x1c>
 80096e6:	89a3      	ldrh	r3, [r4, #12]
 80096e8:	059b      	lsls	r3, r3, #22
 80096ea:	d404      	bmi.n	80096f6 <_fputwc_r+0x1c>
 80096ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80096ee:	9101      	str	r1, [sp, #4]
 80096f0:	f7fb ffd8 	bl	80056a4 <__retarget_lock_acquire_recursive>
 80096f4:	9901      	ldr	r1, [sp, #4]
 80096f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80096fa:	0498      	lsls	r0, r3, #18
 80096fc:	d406      	bmi.n	800970c <_fputwc_r+0x32>
 80096fe:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8009702:	81a3      	strh	r3, [r4, #12]
 8009704:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009706:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800970a:	6663      	str	r3, [r4, #100]	; 0x64
 800970c:	4622      	mov	r2, r4
 800970e:	4628      	mov	r0, r5
 8009710:	f7ff ffa2 	bl	8009658 <__fputwc>
 8009714:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009716:	07da      	lsls	r2, r3, #31
 8009718:	4605      	mov	r5, r0
 800971a:	d405      	bmi.n	8009728 <_fputwc_r+0x4e>
 800971c:	89a3      	ldrh	r3, [r4, #12]
 800971e:	059b      	lsls	r3, r3, #22
 8009720:	d402      	bmi.n	8009728 <_fputwc_r+0x4e>
 8009722:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009724:	f7fb ffbf 	bl	80056a6 <__retarget_lock_release_recursive>
 8009728:	4628      	mov	r0, r5
 800972a:	b003      	add	sp, #12
 800972c:	bd30      	pop	{r4, r5, pc}

0800972e <abort>:
 800972e:	b508      	push	{r3, lr}
 8009730:	2006      	movs	r0, #6
 8009732:	f000 f8ef 	bl	8009914 <raise>
 8009736:	2001      	movs	r0, #1
 8009738:	f7f7 fea0 	bl	800147c <_exit>

0800973c <_wcrtomb_r>:
 800973c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800973e:	4c09      	ldr	r4, [pc, #36]	; (8009764 <_wcrtomb_r+0x28>)
 8009740:	b085      	sub	sp, #20
 8009742:	f8d4 70e0 	ldr.w	r7, [r4, #224]	; 0xe0
 8009746:	4605      	mov	r5, r0
 8009748:	461e      	mov	r6, r3
 800974a:	b909      	cbnz	r1, 8009750 <_wcrtomb_r+0x14>
 800974c:	460a      	mov	r2, r1
 800974e:	a901      	add	r1, sp, #4
 8009750:	47b8      	blx	r7
 8009752:	1c43      	adds	r3, r0, #1
 8009754:	bf01      	itttt	eq
 8009756:	2300      	moveq	r3, #0
 8009758:	6033      	streq	r3, [r6, #0]
 800975a:	238a      	moveq	r3, #138	; 0x8a
 800975c:	602b      	streq	r3, [r5, #0]
 800975e:	b005      	add	sp, #20
 8009760:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009762:	bf00      	nop
 8009764:	20000550 	.word	0x20000550

08009768 <__swhatbuf_r>:
 8009768:	b570      	push	{r4, r5, r6, lr}
 800976a:	460c      	mov	r4, r1
 800976c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009770:	2900      	cmp	r1, #0
 8009772:	b096      	sub	sp, #88	; 0x58
 8009774:	4615      	mov	r5, r2
 8009776:	461e      	mov	r6, r3
 8009778:	da07      	bge.n	800978a <__swhatbuf_r+0x22>
 800977a:	89a1      	ldrh	r1, [r4, #12]
 800977c:	f011 0180 	ands.w	r1, r1, #128	; 0x80
 8009780:	d017      	beq.n	80097b2 <__swhatbuf_r+0x4a>
 8009782:	2100      	movs	r1, #0
 8009784:	2340      	movs	r3, #64	; 0x40
 8009786:	4608      	mov	r0, r1
 8009788:	e00f      	b.n	80097aa <__swhatbuf_r+0x42>
 800978a:	466a      	mov	r2, sp
 800978c:	f000 f8ca 	bl	8009924 <_fstat_r>
 8009790:	2800      	cmp	r0, #0
 8009792:	dbf2      	blt.n	800977a <__swhatbuf_r+0x12>
 8009794:	9901      	ldr	r1, [sp, #4]
 8009796:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800979a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800979e:	4259      	negs	r1, r3
 80097a0:	4159      	adcs	r1, r3
 80097a2:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80097a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80097aa:	6031      	str	r1, [r6, #0]
 80097ac:	602b      	str	r3, [r5, #0]
 80097ae:	b016      	add	sp, #88	; 0x58
 80097b0:	bd70      	pop	{r4, r5, r6, pc}
 80097b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80097b6:	e7e6      	b.n	8009786 <__swhatbuf_r+0x1e>

080097b8 <__smakebuf_r>:
 80097b8:	898b      	ldrh	r3, [r1, #12]
 80097ba:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80097bc:	079d      	lsls	r5, r3, #30
 80097be:	4606      	mov	r6, r0
 80097c0:	460c      	mov	r4, r1
 80097c2:	d507      	bpl.n	80097d4 <__smakebuf_r+0x1c>
 80097c4:	f104 0343 	add.w	r3, r4, #67	; 0x43
 80097c8:	6023      	str	r3, [r4, #0]
 80097ca:	6123      	str	r3, [r4, #16]
 80097cc:	2301      	movs	r3, #1
 80097ce:	6163      	str	r3, [r4, #20]
 80097d0:	b002      	add	sp, #8
 80097d2:	bd70      	pop	{r4, r5, r6, pc}
 80097d4:	ab01      	add	r3, sp, #4
 80097d6:	466a      	mov	r2, sp
 80097d8:	f7ff ffc6 	bl	8009768 <__swhatbuf_r>
 80097dc:	9900      	ldr	r1, [sp, #0]
 80097de:	4605      	mov	r5, r0
 80097e0:	4630      	mov	r0, r6
 80097e2:	f7fb fb7b 	bl	8004edc <_malloc_r>
 80097e6:	b948      	cbnz	r0, 80097fc <__smakebuf_r+0x44>
 80097e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80097ec:	059a      	lsls	r2, r3, #22
 80097ee:	d4ef      	bmi.n	80097d0 <__smakebuf_r+0x18>
 80097f0:	f023 0303 	bic.w	r3, r3, #3
 80097f4:	f043 0302 	orr.w	r3, r3, #2
 80097f8:	81a3      	strh	r3, [r4, #12]
 80097fa:	e7e3      	b.n	80097c4 <__smakebuf_r+0xc>
 80097fc:	89a3      	ldrh	r3, [r4, #12]
 80097fe:	6020      	str	r0, [r4, #0]
 8009800:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009804:	81a3      	strh	r3, [r4, #12]
 8009806:	9b00      	ldr	r3, [sp, #0]
 8009808:	6163      	str	r3, [r4, #20]
 800980a:	9b01      	ldr	r3, [sp, #4]
 800980c:	6120      	str	r0, [r4, #16]
 800980e:	b15b      	cbz	r3, 8009828 <__smakebuf_r+0x70>
 8009810:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009814:	4630      	mov	r0, r6
 8009816:	f000 f897 	bl	8009948 <_isatty_r>
 800981a:	b128      	cbz	r0, 8009828 <__smakebuf_r+0x70>
 800981c:	89a3      	ldrh	r3, [r4, #12]
 800981e:	f023 0303 	bic.w	r3, r3, #3
 8009822:	f043 0301 	orr.w	r3, r3, #1
 8009826:	81a3      	strh	r3, [r4, #12]
 8009828:	89a3      	ldrh	r3, [r4, #12]
 800982a:	431d      	orrs	r5, r3
 800982c:	81a5      	strh	r5, [r4, #12]
 800982e:	e7cf      	b.n	80097d0 <__smakebuf_r+0x18>

08009830 <__swbuf_r>:
 8009830:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009832:	460e      	mov	r6, r1
 8009834:	4614      	mov	r4, r2
 8009836:	4605      	mov	r5, r0
 8009838:	b118      	cbz	r0, 8009842 <__swbuf_r+0x12>
 800983a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800983c:	b90b      	cbnz	r3, 8009842 <__swbuf_r+0x12>
 800983e:	f7fb fe0d 	bl	800545c <__sinit>
 8009842:	69a3      	ldr	r3, [r4, #24]
 8009844:	60a3      	str	r3, [r4, #8]
 8009846:	89a3      	ldrh	r3, [r4, #12]
 8009848:	0719      	lsls	r1, r3, #28
 800984a:	d529      	bpl.n	80098a0 <__swbuf_r+0x70>
 800984c:	6923      	ldr	r3, [r4, #16]
 800984e:	b33b      	cbz	r3, 80098a0 <__swbuf_r+0x70>
 8009850:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009854:	b2f6      	uxtb	r6, r6
 8009856:	049a      	lsls	r2, r3, #18
 8009858:	4637      	mov	r7, r6
 800985a:	d52a      	bpl.n	80098b2 <__swbuf_r+0x82>
 800985c:	6823      	ldr	r3, [r4, #0]
 800985e:	6922      	ldr	r2, [r4, #16]
 8009860:	1a98      	subs	r0, r3, r2
 8009862:	6963      	ldr	r3, [r4, #20]
 8009864:	4283      	cmp	r3, r0
 8009866:	dc04      	bgt.n	8009872 <__swbuf_r+0x42>
 8009868:	4621      	mov	r1, r4
 800986a:	4628      	mov	r0, r5
 800986c:	f7fd fb20 	bl	8006eb0 <_fflush_r>
 8009870:	b9e0      	cbnz	r0, 80098ac <__swbuf_r+0x7c>
 8009872:	68a3      	ldr	r3, [r4, #8]
 8009874:	3b01      	subs	r3, #1
 8009876:	60a3      	str	r3, [r4, #8]
 8009878:	6823      	ldr	r3, [r4, #0]
 800987a:	1c5a      	adds	r2, r3, #1
 800987c:	6022      	str	r2, [r4, #0]
 800987e:	701e      	strb	r6, [r3, #0]
 8009880:	6962      	ldr	r2, [r4, #20]
 8009882:	1c43      	adds	r3, r0, #1
 8009884:	429a      	cmp	r2, r3
 8009886:	d004      	beq.n	8009892 <__swbuf_r+0x62>
 8009888:	89a3      	ldrh	r3, [r4, #12]
 800988a:	07db      	lsls	r3, r3, #31
 800988c:	d506      	bpl.n	800989c <__swbuf_r+0x6c>
 800988e:	2e0a      	cmp	r6, #10
 8009890:	d104      	bne.n	800989c <__swbuf_r+0x6c>
 8009892:	4621      	mov	r1, r4
 8009894:	4628      	mov	r0, r5
 8009896:	f7fd fb0b 	bl	8006eb0 <_fflush_r>
 800989a:	b938      	cbnz	r0, 80098ac <__swbuf_r+0x7c>
 800989c:	4638      	mov	r0, r7
 800989e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80098a0:	4621      	mov	r1, r4
 80098a2:	4628      	mov	r0, r5
 80098a4:	f7ff fe80 	bl	80095a8 <__swsetup_r>
 80098a8:	2800      	cmp	r0, #0
 80098aa:	d0d1      	beq.n	8009850 <__swbuf_r+0x20>
 80098ac:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80098b0:	e7f4      	b.n	800989c <__swbuf_r+0x6c>
 80098b2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80098b6:	81a3      	strh	r3, [r4, #12]
 80098b8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80098ba:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80098be:	6663      	str	r3, [r4, #100]	; 0x64
 80098c0:	e7cc      	b.n	800985c <__swbuf_r+0x2c>

080098c2 <_raise_r>:
 80098c2:	291f      	cmp	r1, #31
 80098c4:	b538      	push	{r3, r4, r5, lr}
 80098c6:	4604      	mov	r4, r0
 80098c8:	460d      	mov	r5, r1
 80098ca:	d904      	bls.n	80098d6 <_raise_r+0x14>
 80098cc:	2316      	movs	r3, #22
 80098ce:	6003      	str	r3, [r0, #0]
 80098d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80098d4:	bd38      	pop	{r3, r4, r5, pc}
 80098d6:	f8d0 2118 	ldr.w	r2, [r0, #280]	; 0x118
 80098da:	b112      	cbz	r2, 80098e2 <_raise_r+0x20>
 80098dc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80098e0:	b94b      	cbnz	r3, 80098f6 <_raise_r+0x34>
 80098e2:	4620      	mov	r0, r4
 80098e4:	f000 f852 	bl	800998c <_getpid_r>
 80098e8:	462a      	mov	r2, r5
 80098ea:	4601      	mov	r1, r0
 80098ec:	4620      	mov	r0, r4
 80098ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80098f2:	f000 b839 	b.w	8009968 <_kill_r>
 80098f6:	2b01      	cmp	r3, #1
 80098f8:	d00a      	beq.n	8009910 <_raise_r+0x4e>
 80098fa:	1c59      	adds	r1, r3, #1
 80098fc:	d103      	bne.n	8009906 <_raise_r+0x44>
 80098fe:	2316      	movs	r3, #22
 8009900:	6003      	str	r3, [r0, #0]
 8009902:	2001      	movs	r0, #1
 8009904:	e7e6      	b.n	80098d4 <_raise_r+0x12>
 8009906:	2400      	movs	r4, #0
 8009908:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800990c:	4628      	mov	r0, r5
 800990e:	4798      	blx	r3
 8009910:	2000      	movs	r0, #0
 8009912:	e7df      	b.n	80098d4 <_raise_r+0x12>

08009914 <raise>:
 8009914:	4b02      	ldr	r3, [pc, #8]	; (8009920 <raise+0xc>)
 8009916:	4601      	mov	r1, r0
 8009918:	6818      	ldr	r0, [r3, #0]
 800991a:	f7ff bfd2 	b.w	80098c2 <_raise_r>
 800991e:	bf00      	nop
 8009920:	20000548 	.word	0x20000548

08009924 <_fstat_r>:
 8009924:	b538      	push	{r3, r4, r5, lr}
 8009926:	4d07      	ldr	r5, [pc, #28]	; (8009944 <_fstat_r+0x20>)
 8009928:	2300      	movs	r3, #0
 800992a:	4604      	mov	r4, r0
 800992c:	4608      	mov	r0, r1
 800992e:	4611      	mov	r1, r2
 8009930:	602b      	str	r3, [r5, #0]
 8009932:	f7f7 fdd6 	bl	80014e2 <_fstat>
 8009936:	1c43      	adds	r3, r0, #1
 8009938:	d102      	bne.n	8009940 <_fstat_r+0x1c>
 800993a:	682b      	ldr	r3, [r5, #0]
 800993c:	b103      	cbz	r3, 8009940 <_fstat_r+0x1c>
 800993e:	6023      	str	r3, [r4, #0]
 8009940:	bd38      	pop	{r3, r4, r5, pc}
 8009942:	bf00      	nop
 8009944:	20000c58 	.word	0x20000c58

08009948 <_isatty_r>:
 8009948:	b538      	push	{r3, r4, r5, lr}
 800994a:	4d06      	ldr	r5, [pc, #24]	; (8009964 <_isatty_r+0x1c>)
 800994c:	2300      	movs	r3, #0
 800994e:	4604      	mov	r4, r0
 8009950:	4608      	mov	r0, r1
 8009952:	602b      	str	r3, [r5, #0]
 8009954:	f7f7 fdd5 	bl	8001502 <_isatty>
 8009958:	1c43      	adds	r3, r0, #1
 800995a:	d102      	bne.n	8009962 <_isatty_r+0x1a>
 800995c:	682b      	ldr	r3, [r5, #0]
 800995e:	b103      	cbz	r3, 8009962 <_isatty_r+0x1a>
 8009960:	6023      	str	r3, [r4, #0]
 8009962:	bd38      	pop	{r3, r4, r5, pc}
 8009964:	20000c58 	.word	0x20000c58

08009968 <_kill_r>:
 8009968:	b538      	push	{r3, r4, r5, lr}
 800996a:	4d07      	ldr	r5, [pc, #28]	; (8009988 <_kill_r+0x20>)
 800996c:	2300      	movs	r3, #0
 800996e:	4604      	mov	r4, r0
 8009970:	4608      	mov	r0, r1
 8009972:	4611      	mov	r1, r2
 8009974:	602b      	str	r3, [r5, #0]
 8009976:	f7f7 fd71 	bl	800145c <_kill>
 800997a:	1c43      	adds	r3, r0, #1
 800997c:	d102      	bne.n	8009984 <_kill_r+0x1c>
 800997e:	682b      	ldr	r3, [r5, #0]
 8009980:	b103      	cbz	r3, 8009984 <_kill_r+0x1c>
 8009982:	6023      	str	r3, [r4, #0]
 8009984:	bd38      	pop	{r3, r4, r5, pc}
 8009986:	bf00      	nop
 8009988:	20000c58 	.word	0x20000c58

0800998c <_getpid_r>:
 800998c:	f7f7 bd5e 	b.w	800144c <_getpid>

08009990 <_init>:
 8009990:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009992:	bf00      	nop
 8009994:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009996:	bc08      	pop	{r3}
 8009998:	469e      	mov	lr, r3
 800999a:	4770      	bx	lr

0800999c <_fini>:
 800999c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800999e:	bf00      	nop
 80099a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80099a2:	bc08      	pop	{r3}
 80099a4:	469e      	mov	lr, r3
 80099a6:	4770      	bx	lr
