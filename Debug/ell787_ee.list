
ell787_ee.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008ff8  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000041c  080091d8  080091d8  000191d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080095f4  080095f4  000206bc  2**0
                  CONTENTS
  4 .ARM          00000008  080095f4  080095f4  000195f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080095fc  080095fc  000206bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080095fc  080095fc  000195fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009604  08009604  00019604  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000006bc  20000000  08009608  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000658  200006bc  08009cc4  000206bc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000d14  08009cc4  00020d14  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000206bc  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000206ec  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000cbba  00000000  00000000  0002072f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002084  00000000  00000000  0002d2e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000940  00000000  00000000  0002f370  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000006fe  00000000  00000000  0002fcb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022e14  00000000  00000000  000303ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000bc36  00000000  00000000  000531c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d4fde  00000000  00000000  0005edf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003774  00000000  00000000  00133dd8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  0013754c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200006bc 	.word	0x200006bc
 80001fc:	00000000 	.word	0x00000000
 8000200:	080091c0 	.word	0x080091c0

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200006c0 	.word	0x200006c0
 800021c:	080091c0 	.word	0x080091c0

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_uldivmod>:
 8000bf8:	b953      	cbnz	r3, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfa:	b94a      	cbnz	r2, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfc:	2900      	cmp	r1, #0
 8000bfe:	bf08      	it	eq
 8000c00:	2800      	cmpeq	r0, #0
 8000c02:	bf1c      	itt	ne
 8000c04:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c08:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c0c:	f000 b970 	b.w	8000ef0 <__aeabi_idiv0>
 8000c10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c18:	f000 f806 	bl	8000c28 <__udivmoddi4>
 8000c1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c24:	b004      	add	sp, #16
 8000c26:	4770      	bx	lr

08000c28 <__udivmoddi4>:
 8000c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c2c:	9e08      	ldr	r6, [sp, #32]
 8000c2e:	460d      	mov	r5, r1
 8000c30:	4604      	mov	r4, r0
 8000c32:	460f      	mov	r7, r1
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d14a      	bne.n	8000cce <__udivmoddi4+0xa6>
 8000c38:	428a      	cmp	r2, r1
 8000c3a:	4694      	mov	ip, r2
 8000c3c:	d965      	bls.n	8000d0a <__udivmoddi4+0xe2>
 8000c3e:	fab2 f382 	clz	r3, r2
 8000c42:	b143      	cbz	r3, 8000c56 <__udivmoddi4+0x2e>
 8000c44:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c48:	f1c3 0220 	rsb	r2, r3, #32
 8000c4c:	409f      	lsls	r7, r3
 8000c4e:	fa20 f202 	lsr.w	r2, r0, r2
 8000c52:	4317      	orrs	r7, r2
 8000c54:	409c      	lsls	r4, r3
 8000c56:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c5a:	fa1f f58c 	uxth.w	r5, ip
 8000c5e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c62:	0c22      	lsrs	r2, r4, #16
 8000c64:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c68:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c6c:	fb01 f005 	mul.w	r0, r1, r5
 8000c70:	4290      	cmp	r0, r2
 8000c72:	d90a      	bls.n	8000c8a <__udivmoddi4+0x62>
 8000c74:	eb1c 0202 	adds.w	r2, ip, r2
 8000c78:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000c7c:	f080 811c 	bcs.w	8000eb8 <__udivmoddi4+0x290>
 8000c80:	4290      	cmp	r0, r2
 8000c82:	f240 8119 	bls.w	8000eb8 <__udivmoddi4+0x290>
 8000c86:	3902      	subs	r1, #2
 8000c88:	4462      	add	r2, ip
 8000c8a:	1a12      	subs	r2, r2, r0
 8000c8c:	b2a4      	uxth	r4, r4
 8000c8e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c92:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c96:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c9a:	fb00 f505 	mul.w	r5, r0, r5
 8000c9e:	42a5      	cmp	r5, r4
 8000ca0:	d90a      	bls.n	8000cb8 <__udivmoddi4+0x90>
 8000ca2:	eb1c 0404 	adds.w	r4, ip, r4
 8000ca6:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000caa:	f080 8107 	bcs.w	8000ebc <__udivmoddi4+0x294>
 8000cae:	42a5      	cmp	r5, r4
 8000cb0:	f240 8104 	bls.w	8000ebc <__udivmoddi4+0x294>
 8000cb4:	4464      	add	r4, ip
 8000cb6:	3802      	subs	r0, #2
 8000cb8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000cbc:	1b64      	subs	r4, r4, r5
 8000cbe:	2100      	movs	r1, #0
 8000cc0:	b11e      	cbz	r6, 8000cca <__udivmoddi4+0xa2>
 8000cc2:	40dc      	lsrs	r4, r3
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	e9c6 4300 	strd	r4, r3, [r6]
 8000cca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cce:	428b      	cmp	r3, r1
 8000cd0:	d908      	bls.n	8000ce4 <__udivmoddi4+0xbc>
 8000cd2:	2e00      	cmp	r6, #0
 8000cd4:	f000 80ed 	beq.w	8000eb2 <__udivmoddi4+0x28a>
 8000cd8:	2100      	movs	r1, #0
 8000cda:	e9c6 0500 	strd	r0, r5, [r6]
 8000cde:	4608      	mov	r0, r1
 8000ce0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ce4:	fab3 f183 	clz	r1, r3
 8000ce8:	2900      	cmp	r1, #0
 8000cea:	d149      	bne.n	8000d80 <__udivmoddi4+0x158>
 8000cec:	42ab      	cmp	r3, r5
 8000cee:	d302      	bcc.n	8000cf6 <__udivmoddi4+0xce>
 8000cf0:	4282      	cmp	r2, r0
 8000cf2:	f200 80f8 	bhi.w	8000ee6 <__udivmoddi4+0x2be>
 8000cf6:	1a84      	subs	r4, r0, r2
 8000cf8:	eb65 0203 	sbc.w	r2, r5, r3
 8000cfc:	2001      	movs	r0, #1
 8000cfe:	4617      	mov	r7, r2
 8000d00:	2e00      	cmp	r6, #0
 8000d02:	d0e2      	beq.n	8000cca <__udivmoddi4+0xa2>
 8000d04:	e9c6 4700 	strd	r4, r7, [r6]
 8000d08:	e7df      	b.n	8000cca <__udivmoddi4+0xa2>
 8000d0a:	b902      	cbnz	r2, 8000d0e <__udivmoddi4+0xe6>
 8000d0c:	deff      	udf	#255	; 0xff
 8000d0e:	fab2 f382 	clz	r3, r2
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	f040 8090 	bne.w	8000e38 <__udivmoddi4+0x210>
 8000d18:	1a8a      	subs	r2, r1, r2
 8000d1a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d1e:	fa1f fe8c 	uxth.w	lr, ip
 8000d22:	2101      	movs	r1, #1
 8000d24:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d28:	fb07 2015 	mls	r0, r7, r5, r2
 8000d2c:	0c22      	lsrs	r2, r4, #16
 8000d2e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d32:	fb0e f005 	mul.w	r0, lr, r5
 8000d36:	4290      	cmp	r0, r2
 8000d38:	d908      	bls.n	8000d4c <__udivmoddi4+0x124>
 8000d3a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d3e:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000d42:	d202      	bcs.n	8000d4a <__udivmoddi4+0x122>
 8000d44:	4290      	cmp	r0, r2
 8000d46:	f200 80cb 	bhi.w	8000ee0 <__udivmoddi4+0x2b8>
 8000d4a:	4645      	mov	r5, r8
 8000d4c:	1a12      	subs	r2, r2, r0
 8000d4e:	b2a4      	uxth	r4, r4
 8000d50:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d54:	fb07 2210 	mls	r2, r7, r0, r2
 8000d58:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d5c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d60:	45a6      	cmp	lr, r4
 8000d62:	d908      	bls.n	8000d76 <__udivmoddi4+0x14e>
 8000d64:	eb1c 0404 	adds.w	r4, ip, r4
 8000d68:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000d6c:	d202      	bcs.n	8000d74 <__udivmoddi4+0x14c>
 8000d6e:	45a6      	cmp	lr, r4
 8000d70:	f200 80bb 	bhi.w	8000eea <__udivmoddi4+0x2c2>
 8000d74:	4610      	mov	r0, r2
 8000d76:	eba4 040e 	sub.w	r4, r4, lr
 8000d7a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d7e:	e79f      	b.n	8000cc0 <__udivmoddi4+0x98>
 8000d80:	f1c1 0720 	rsb	r7, r1, #32
 8000d84:	408b      	lsls	r3, r1
 8000d86:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d8a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d8e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d92:	fa20 f307 	lsr.w	r3, r0, r7
 8000d96:	40fd      	lsrs	r5, r7
 8000d98:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d9c:	4323      	orrs	r3, r4
 8000d9e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000da2:	fa1f fe8c 	uxth.w	lr, ip
 8000da6:	fb09 5518 	mls	r5, r9, r8, r5
 8000daa:	0c1c      	lsrs	r4, r3, #16
 8000dac:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000db0:	fb08 f50e 	mul.w	r5, r8, lr
 8000db4:	42a5      	cmp	r5, r4
 8000db6:	fa02 f201 	lsl.w	r2, r2, r1
 8000dba:	fa00 f001 	lsl.w	r0, r0, r1
 8000dbe:	d90b      	bls.n	8000dd8 <__udivmoddi4+0x1b0>
 8000dc0:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000dc8:	f080 8088 	bcs.w	8000edc <__udivmoddi4+0x2b4>
 8000dcc:	42a5      	cmp	r5, r4
 8000dce:	f240 8085 	bls.w	8000edc <__udivmoddi4+0x2b4>
 8000dd2:	f1a8 0802 	sub.w	r8, r8, #2
 8000dd6:	4464      	add	r4, ip
 8000dd8:	1b64      	subs	r4, r4, r5
 8000dda:	b29d      	uxth	r5, r3
 8000ddc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000de0:	fb09 4413 	mls	r4, r9, r3, r4
 8000de4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000de8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000dec:	45a6      	cmp	lr, r4
 8000dee:	d908      	bls.n	8000e02 <__udivmoddi4+0x1da>
 8000df0:	eb1c 0404 	adds.w	r4, ip, r4
 8000df4:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000df8:	d26c      	bcs.n	8000ed4 <__udivmoddi4+0x2ac>
 8000dfa:	45a6      	cmp	lr, r4
 8000dfc:	d96a      	bls.n	8000ed4 <__udivmoddi4+0x2ac>
 8000dfe:	3b02      	subs	r3, #2
 8000e00:	4464      	add	r4, ip
 8000e02:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e06:	fba3 9502 	umull	r9, r5, r3, r2
 8000e0a:	eba4 040e 	sub.w	r4, r4, lr
 8000e0e:	42ac      	cmp	r4, r5
 8000e10:	46c8      	mov	r8, r9
 8000e12:	46ae      	mov	lr, r5
 8000e14:	d356      	bcc.n	8000ec4 <__udivmoddi4+0x29c>
 8000e16:	d053      	beq.n	8000ec0 <__udivmoddi4+0x298>
 8000e18:	b156      	cbz	r6, 8000e30 <__udivmoddi4+0x208>
 8000e1a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e1e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e22:	fa04 f707 	lsl.w	r7, r4, r7
 8000e26:	40ca      	lsrs	r2, r1
 8000e28:	40cc      	lsrs	r4, r1
 8000e2a:	4317      	orrs	r7, r2
 8000e2c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e30:	4618      	mov	r0, r3
 8000e32:	2100      	movs	r1, #0
 8000e34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e38:	f1c3 0120 	rsb	r1, r3, #32
 8000e3c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e40:	fa20 f201 	lsr.w	r2, r0, r1
 8000e44:	fa25 f101 	lsr.w	r1, r5, r1
 8000e48:	409d      	lsls	r5, r3
 8000e4a:	432a      	orrs	r2, r5
 8000e4c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e50:	fa1f fe8c 	uxth.w	lr, ip
 8000e54:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e58:	fb07 1510 	mls	r5, r7, r0, r1
 8000e5c:	0c11      	lsrs	r1, r2, #16
 8000e5e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e62:	fb00 f50e 	mul.w	r5, r0, lr
 8000e66:	428d      	cmp	r5, r1
 8000e68:	fa04 f403 	lsl.w	r4, r4, r3
 8000e6c:	d908      	bls.n	8000e80 <__udivmoddi4+0x258>
 8000e6e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e72:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000e76:	d22f      	bcs.n	8000ed8 <__udivmoddi4+0x2b0>
 8000e78:	428d      	cmp	r5, r1
 8000e7a:	d92d      	bls.n	8000ed8 <__udivmoddi4+0x2b0>
 8000e7c:	3802      	subs	r0, #2
 8000e7e:	4461      	add	r1, ip
 8000e80:	1b49      	subs	r1, r1, r5
 8000e82:	b292      	uxth	r2, r2
 8000e84:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e88:	fb07 1115 	mls	r1, r7, r5, r1
 8000e8c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e90:	fb05 f10e 	mul.w	r1, r5, lr
 8000e94:	4291      	cmp	r1, r2
 8000e96:	d908      	bls.n	8000eaa <__udivmoddi4+0x282>
 8000e98:	eb1c 0202 	adds.w	r2, ip, r2
 8000e9c:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000ea0:	d216      	bcs.n	8000ed0 <__udivmoddi4+0x2a8>
 8000ea2:	4291      	cmp	r1, r2
 8000ea4:	d914      	bls.n	8000ed0 <__udivmoddi4+0x2a8>
 8000ea6:	3d02      	subs	r5, #2
 8000ea8:	4462      	add	r2, ip
 8000eaa:	1a52      	subs	r2, r2, r1
 8000eac:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000eb0:	e738      	b.n	8000d24 <__udivmoddi4+0xfc>
 8000eb2:	4631      	mov	r1, r6
 8000eb4:	4630      	mov	r0, r6
 8000eb6:	e708      	b.n	8000cca <__udivmoddi4+0xa2>
 8000eb8:	4639      	mov	r1, r7
 8000eba:	e6e6      	b.n	8000c8a <__udivmoddi4+0x62>
 8000ebc:	4610      	mov	r0, r2
 8000ebe:	e6fb      	b.n	8000cb8 <__udivmoddi4+0x90>
 8000ec0:	4548      	cmp	r0, r9
 8000ec2:	d2a9      	bcs.n	8000e18 <__udivmoddi4+0x1f0>
 8000ec4:	ebb9 0802 	subs.w	r8, r9, r2
 8000ec8:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000ecc:	3b01      	subs	r3, #1
 8000ece:	e7a3      	b.n	8000e18 <__udivmoddi4+0x1f0>
 8000ed0:	4645      	mov	r5, r8
 8000ed2:	e7ea      	b.n	8000eaa <__udivmoddi4+0x282>
 8000ed4:	462b      	mov	r3, r5
 8000ed6:	e794      	b.n	8000e02 <__udivmoddi4+0x1da>
 8000ed8:	4640      	mov	r0, r8
 8000eda:	e7d1      	b.n	8000e80 <__udivmoddi4+0x258>
 8000edc:	46d0      	mov	r8, sl
 8000ede:	e77b      	b.n	8000dd8 <__udivmoddi4+0x1b0>
 8000ee0:	3d02      	subs	r5, #2
 8000ee2:	4462      	add	r2, ip
 8000ee4:	e732      	b.n	8000d4c <__udivmoddi4+0x124>
 8000ee6:	4608      	mov	r0, r1
 8000ee8:	e70a      	b.n	8000d00 <__udivmoddi4+0xd8>
 8000eea:	4464      	add	r4, ip
 8000eec:	3802      	subs	r0, #2
 8000eee:	e742      	b.n	8000d76 <__udivmoddi4+0x14e>

08000ef0 <__aeabi_idiv0>:
 8000ef0:	4770      	bx	lr
 8000ef2:	bf00      	nop

08000ef4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ef8:	f000 fb73 	bl	80015e2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000efc:	f000 f848 	bl	8000f90 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f00:	f000 f90e 	bl	8001120 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000f04:	f000 f8dc 	bl	80010c0 <MX_USART3_UART_Init>

  /* USER CODE BEGIN 2 */
  wifi_init();
 8000f08:	f003 fb90 	bl	800462c <wifi_init>
  HAL_Delay(2000);
 8000f0c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000f10:	f000 fbc4 	bl	800169c <HAL_Delay>
#if defined WIFI_UART_COM
  wifi_start();
  HAL_Delay(2000);
#endif

  wifi_rst();
 8000f14:	f003 fb30 	bl	8004578 <wifi_rst>
  HAL_Delay(5000);
 8000f18:	f241 3088 	movw	r0, #5000	; 0x1388
 8000f1c:	f000 fbbe 	bl	800169c <HAL_Delay>

  Wifi_Uart_t.log_buf(&Wifi_Uart_t.WiFi_Rx[0], &Wifi_Uart_t.WiFi_Rx_len);
 8000f20:	4b16      	ldr	r3, [pc, #88]	; (8000f7c <main+0x88>)
 8000f22:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8000f26:	4916      	ldr	r1, [pc, #88]	; (8000f80 <main+0x8c>)
 8000f28:	4816      	ldr	r0, [pc, #88]	; (8000f84 <main+0x90>)
 8000f2a:	4798      	blx	r3
  Wifi_Uart_t.log_clr(&Wifi_Uart_t.WiFi_Rx[0], &Wifi_Uart_t.WiFi_Rx_len);
 8000f2c:	4b13      	ldr	r3, [pc, #76]	; (8000f7c <main+0x88>)
 8000f2e:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8000f32:	4913      	ldr	r1, [pc, #76]	; (8000f80 <main+0x8c>)
 8000f34:	4813      	ldr	r0, [pc, #76]	; (8000f84 <main+0x90>)
 8000f36:	4798      	blx	r3
#if defined WIFI_VERSION
  wifi_version();
  HAL_Delay(2000);
#endif

  wifi_mode(WIFI_ST_AP_MODE);
 8000f38:	2002      	movs	r0, #2
 8000f3a:	f003 fad9 	bl	80044f0 <wifi_mode>
  HAL_Delay(2000);
 8000f3e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000f42:	f000 fbab 	bl	800169c <HAL_Delay>
  wifi_ap_connect("Vikrant", "123456789");
 8000f46:	4910      	ldr	r1, [pc, #64]	; (8000f88 <main+0x94>)
 8000f48:	4810      	ldr	r0, [pc, #64]	; (8000f8c <main+0x98>)
 8000f4a:	f003 faeb 	bl	8004524 <wifi_ap_connect>
  HAL_Delay(8000);
 8000f4e:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 8000f52:	f000 fba3 	bl	800169c <HAL_Delay>
  wifi_mac_add();
 8000f56:	f003 fb27 	bl	80045a8 <wifi_mac_add>
  HAL_Delay(5000);
 8000f5a:	f241 3088 	movw	r0, #5000	; 0x1388
 8000f5e:	f000 fb9d 	bl	800169c <HAL_Delay>
  tcp_server_conn();
 8000f62:	f003 fb39 	bl	80045d8 <tcp_server_conn>
  HAL_Delay(5000);
 8000f66:	f241 3088 	movw	r0, #5000	; 0x1388
 8000f6a:	f000 fb97 	bl	800169c <HAL_Delay>

  Wifi_Uart_t.log_buf(&Wifi_Uart_t.WiFi_Rx[0], &Wifi_Uart_t.WiFi_Rx_len);
 8000f6e:	4b03      	ldr	r3, [pc, #12]	; (8000f7c <main+0x88>)
 8000f70:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8000f74:	4902      	ldr	r1, [pc, #8]	; (8000f80 <main+0x8c>)
 8000f76:	4803      	ldr	r0, [pc, #12]	; (8000f84 <main+0x90>)
 8000f78:	4798      	blx	r3

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000f7a:	e7fe      	b.n	8000f7a <main+0x86>
 8000f7c:	200007e8 	.word	0x200007e8
 8000f80:	200009f8 	.word	0x200009f8
 8000f84:	200007f4 	.word	0x200007f4
 8000f88:	080091d8 	.word	0x080091d8
 8000f8c:	080091e4 	.word	0x080091e4

08000f90 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b0b4      	sub	sp, #208	; 0xd0
 8000f94:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f96:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000f9a:	2230      	movs	r2, #48	; 0x30
 8000f9c:	2100      	movs	r1, #0
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	f003 ff0d 	bl	8004dbe <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fa4:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000fa8:	2200      	movs	r2, #0
 8000faa:	601a      	str	r2, [r3, #0]
 8000fac:	605a      	str	r2, [r3, #4]
 8000fae:	609a      	str	r2, [r3, #8]
 8000fb0:	60da      	str	r2, [r3, #12]
 8000fb2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000fb4:	f107 030c 	add.w	r3, r7, #12
 8000fb8:	2280      	movs	r2, #128	; 0x80
 8000fba:	2100      	movs	r1, #0
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	f003 fefe 	bl	8004dbe <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000fc2:	f000 fee9 	bl	8001d98 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fc6:	4b3b      	ldr	r3, [pc, #236]	; (80010b4 <SystemClock_Config+0x124>)
 8000fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fca:	4a3a      	ldr	r2, [pc, #232]	; (80010b4 <SystemClock_Config+0x124>)
 8000fcc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fd0:	6413      	str	r3, [r2, #64]	; 0x40
 8000fd2:	4b38      	ldr	r3, [pc, #224]	; (80010b4 <SystemClock_Config+0x124>)
 8000fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fda:	60bb      	str	r3, [r7, #8]
 8000fdc:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000fde:	4b36      	ldr	r3, [pc, #216]	; (80010b8 <SystemClock_Config+0x128>)
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000fe6:	4a34      	ldr	r2, [pc, #208]	; (80010b8 <SystemClock_Config+0x128>)
 8000fe8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fec:	6013      	str	r3, [r2, #0]
 8000fee:	4b32      	ldr	r3, [pc, #200]	; (80010b8 <SystemClock_Config+0x128>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000ff6:	607b      	str	r3, [r7, #4]
 8000ff8:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000ffa:	2303      	movs	r3, #3
 8000ffc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001000:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001004:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001008:	2301      	movs	r3, #1
 800100a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800100e:	2310      	movs	r3, #16
 8001010:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001014:	2302      	movs	r3, #2
 8001016:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800101a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800101e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001022:	2304      	movs	r3, #4
 8001024:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 216;
 8001028:	23d8      	movs	r3, #216	; 0xd8
 800102a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800102e:	2302      	movs	r3, #2
 8001030:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8001034:	2309      	movs	r3, #9
 8001036:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800103a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800103e:	4618      	mov	r0, r3
 8001040:	f000 feba 	bl	8001db8 <HAL_RCC_OscConfig>
 8001044:	4603      	mov	r3, r0
 8001046:	2b00      	cmp	r3, #0
 8001048:	d001      	beq.n	800104e <SystemClock_Config+0xbe>
  {
    Error_Handler();
 800104a:	f000 f90b 	bl	8001264 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800104e:	230f      	movs	r3, #15
 8001050:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001054:	2300      	movs	r3, #0
 8001056:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800105a:	2300      	movs	r3, #0
 800105c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001060:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001064:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001068:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800106c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001070:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001074:	2100      	movs	r1, #0
 8001076:	4618      	mov	r0, r3
 8001078:	f001 f942 	bl	8002300 <HAL_RCC_ClockConfig>
 800107c:	4603      	mov	r3, r0
 800107e:	2b00      	cmp	r3, #0
 8001080:	d001      	beq.n	8001086 <SystemClock_Config+0xf6>
  {
    Error_Handler();
 8001082:	f000 f8ef 	bl	8001264 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_USART3
 8001086:	4b0d      	ldr	r3, [pc, #52]	; (80010bc <SystemClock_Config+0x12c>)
 8001088:	60fb      	str	r3, [r7, #12]
                              |RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800108a:	2300      	movs	r3, #0
 800108c:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800108e:	2300      	movs	r3, #0
 8001090:	653b      	str	r3, [r7, #80]	; 0x50
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8001092:	2300      	movs	r3, #0
 8001094:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001098:	f107 030c 	add.w	r3, r7, #12
 800109c:	4618      	mov	r0, r3
 800109e:	f001 fb55 	bl	800274c <HAL_RCCEx_PeriphCLKConfig>
 80010a2:	4603      	mov	r3, r0
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d001      	beq.n	80010ac <SystemClock_Config+0x11c>
  {
    Error_Handler();
 80010a8:	f000 f8dc 	bl	8001264 <Error_Handler>
  }
}
 80010ac:	bf00      	nop
 80010ae:	37d0      	adds	r7, #208	; 0xd0
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}
 80010b4:	40023800 	.word	0x40023800
 80010b8:	40007000 	.word	0x40007000
 80010bc:	00200180 	.word	0x00200180

080010c0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80010c4:	4b14      	ldr	r3, [pc, #80]	; (8001118 <MX_USART3_UART_Init+0x58>)
 80010c6:	4a15      	ldr	r2, [pc, #84]	; (800111c <MX_USART3_UART_Init+0x5c>)
 80010c8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80010ca:	4b13      	ldr	r3, [pc, #76]	; (8001118 <MX_USART3_UART_Init+0x58>)
 80010cc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80010d0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80010d2:	4b11      	ldr	r3, [pc, #68]	; (8001118 <MX_USART3_UART_Init+0x58>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80010d8:	4b0f      	ldr	r3, [pc, #60]	; (8001118 <MX_USART3_UART_Init+0x58>)
 80010da:	2200      	movs	r2, #0
 80010dc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80010de:	4b0e      	ldr	r3, [pc, #56]	; (8001118 <MX_USART3_UART_Init+0x58>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80010e4:	4b0c      	ldr	r3, [pc, #48]	; (8001118 <MX_USART3_UART_Init+0x58>)
 80010e6:	220c      	movs	r2, #12
 80010e8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010ea:	4b0b      	ldr	r3, [pc, #44]	; (8001118 <MX_USART3_UART_Init+0x58>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80010f0:	4b09      	ldr	r3, [pc, #36]	; (8001118 <MX_USART3_UART_Init+0x58>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80010f6:	4b08      	ldr	r3, [pc, #32]	; (8001118 <MX_USART3_UART_Init+0x58>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80010fc:	4b06      	ldr	r3, [pc, #24]	; (8001118 <MX_USART3_UART_Init+0x58>)
 80010fe:	2200      	movs	r2, #0
 8001100:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001102:	4805      	ldr	r0, [pc, #20]	; (8001118 <MX_USART3_UART_Init+0x58>)
 8001104:	f001 fe6c 	bl	8002de0 <HAL_UART_Init>
 8001108:	4603      	mov	r3, r0
 800110a:	2b00      	cmp	r3, #0
 800110c:	d001      	beq.n	8001112 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800110e:	f000 f8a9 	bl	8001264 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001112:	bf00      	nop
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	200006d8 	.word	0x200006d8
 800111c:	40004800 	.word	0x40004800

08001120 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b08c      	sub	sp, #48	; 0x30
 8001124:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001126:	f107 031c 	add.w	r3, r7, #28
 800112a:	2200      	movs	r2, #0
 800112c:	601a      	str	r2, [r3, #0]
 800112e:	605a      	str	r2, [r3, #4]
 8001130:	609a      	str	r2, [r3, #8]
 8001132:	60da      	str	r2, [r3, #12]
 8001134:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001136:	4b47      	ldr	r3, [pc, #284]	; (8001254 <MX_GPIO_Init+0x134>)
 8001138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800113a:	4a46      	ldr	r2, [pc, #280]	; (8001254 <MX_GPIO_Init+0x134>)
 800113c:	f043 0304 	orr.w	r3, r3, #4
 8001140:	6313      	str	r3, [r2, #48]	; 0x30
 8001142:	4b44      	ldr	r3, [pc, #272]	; (8001254 <MX_GPIO_Init+0x134>)
 8001144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001146:	f003 0304 	and.w	r3, r3, #4
 800114a:	61bb      	str	r3, [r7, #24]
 800114c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800114e:	4b41      	ldr	r3, [pc, #260]	; (8001254 <MX_GPIO_Init+0x134>)
 8001150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001152:	4a40      	ldr	r2, [pc, #256]	; (8001254 <MX_GPIO_Init+0x134>)
 8001154:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001158:	6313      	str	r3, [r2, #48]	; 0x30
 800115a:	4b3e      	ldr	r3, [pc, #248]	; (8001254 <MX_GPIO_Init+0x134>)
 800115c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800115e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001162:	617b      	str	r3, [r7, #20]
 8001164:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001166:	4b3b      	ldr	r3, [pc, #236]	; (8001254 <MX_GPIO_Init+0x134>)
 8001168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800116a:	4a3a      	ldr	r2, [pc, #232]	; (8001254 <MX_GPIO_Init+0x134>)
 800116c:	f043 0302 	orr.w	r3, r3, #2
 8001170:	6313      	str	r3, [r2, #48]	; 0x30
 8001172:	4b38      	ldr	r3, [pc, #224]	; (8001254 <MX_GPIO_Init+0x134>)
 8001174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001176:	f003 0302 	and.w	r3, r3, #2
 800117a:	613b      	str	r3, [r7, #16]
 800117c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800117e:	4b35      	ldr	r3, [pc, #212]	; (8001254 <MX_GPIO_Init+0x134>)
 8001180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001182:	4a34      	ldr	r2, [pc, #208]	; (8001254 <MX_GPIO_Init+0x134>)
 8001184:	f043 0308 	orr.w	r3, r3, #8
 8001188:	6313      	str	r3, [r2, #48]	; 0x30
 800118a:	4b32      	ldr	r3, [pc, #200]	; (8001254 <MX_GPIO_Init+0x134>)
 800118c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800118e:	f003 0308 	and.w	r3, r3, #8
 8001192:	60fb      	str	r3, [r7, #12]
 8001194:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001196:	4b2f      	ldr	r3, [pc, #188]	; (8001254 <MX_GPIO_Init+0x134>)
 8001198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800119a:	4a2e      	ldr	r2, [pc, #184]	; (8001254 <MX_GPIO_Init+0x134>)
 800119c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80011a0:	6313      	str	r3, [r2, #48]	; 0x30
 80011a2:	4b2c      	ldr	r3, [pc, #176]	; (8001254 <MX_GPIO_Init+0x134>)
 80011a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80011aa:	60bb      	str	r3, [r7, #8]
 80011ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011ae:	4b29      	ldr	r3, [pc, #164]	; (8001254 <MX_GPIO_Init+0x134>)
 80011b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011b2:	4a28      	ldr	r2, [pc, #160]	; (8001254 <MX_GPIO_Init+0x134>)
 80011b4:	f043 0301 	orr.w	r3, r3, #1
 80011b8:	6313      	str	r3, [r2, #48]	; 0x30
 80011ba:	4b26      	ldr	r3, [pc, #152]	; (8001254 <MX_GPIO_Init+0x134>)
 80011bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011be:	f003 0301 	and.w	r3, r3, #1
 80011c2:	607b      	str	r3, [r7, #4]
 80011c4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80011c6:	2200      	movs	r2, #0
 80011c8:	f244 0181 	movw	r1, #16513	; 0x4081
 80011cc:	4822      	ldr	r0, [pc, #136]	; (8001258 <MX_GPIO_Init+0x138>)
 80011ce:	f000 fdc9 	bl	8001d64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80011d2:	2200      	movs	r2, #0
 80011d4:	2140      	movs	r1, #64	; 0x40
 80011d6:	4821      	ldr	r0, [pc, #132]	; (800125c <MX_GPIO_Init+0x13c>)
 80011d8:	f000 fdc4 	bl	8001d64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80011dc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80011e2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80011e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e8:	2300      	movs	r3, #0
 80011ea:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80011ec:	f107 031c 	add.w	r3, r7, #28
 80011f0:	4619      	mov	r1, r3
 80011f2:	481b      	ldr	r0, [pc, #108]	; (8001260 <MX_GPIO_Init+0x140>)
 80011f4:	f000 fc1a 	bl	8001a2c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80011f8:	f244 0381 	movw	r3, #16513	; 0x4081
 80011fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011fe:	2301      	movs	r3, #1
 8001200:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001202:	2300      	movs	r3, #0
 8001204:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001206:	2300      	movs	r3, #0
 8001208:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800120a:	f107 031c 	add.w	r3, r7, #28
 800120e:	4619      	mov	r1, r3
 8001210:	4811      	ldr	r0, [pc, #68]	; (8001258 <MX_GPIO_Init+0x138>)
 8001212:	f000 fc0b 	bl	8001a2c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001216:	2340      	movs	r3, #64	; 0x40
 8001218:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800121a:	2301      	movs	r3, #1
 800121c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800121e:	2300      	movs	r3, #0
 8001220:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001222:	2300      	movs	r3, #0
 8001224:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001226:	f107 031c 	add.w	r3, r7, #28
 800122a:	4619      	mov	r1, r3
 800122c:	480b      	ldr	r0, [pc, #44]	; (800125c <MX_GPIO_Init+0x13c>)
 800122e:	f000 fbfd 	bl	8001a2c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001232:	2380      	movs	r3, #128	; 0x80
 8001234:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001236:	2300      	movs	r3, #0
 8001238:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800123a:	2300      	movs	r3, #0
 800123c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800123e:	f107 031c 	add.w	r3, r7, #28
 8001242:	4619      	mov	r1, r3
 8001244:	4805      	ldr	r0, [pc, #20]	; (800125c <MX_GPIO_Init+0x13c>)
 8001246:	f000 fbf1 	bl	8001a2c <HAL_GPIO_Init>

}
 800124a:	bf00      	nop
 800124c:	3730      	adds	r7, #48	; 0x30
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}
 8001252:	bf00      	nop
 8001254:	40023800 	.word	0x40023800
 8001258:	40020400 	.word	0x40020400
 800125c:	40021800 	.word	0x40021800
 8001260:	40020800 	.word	0x40020800

08001264 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001264:	b480      	push	{r7}
 8001266:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001268:	b672      	cpsid	i
}
 800126a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800126c:	e7fe      	b.n	800126c <Error_Handler+0x8>
	...

08001270 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001270:	b480      	push	{r7}
 8001272:	b083      	sub	sp, #12
 8001274:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001276:	4b0f      	ldr	r3, [pc, #60]	; (80012b4 <HAL_MspInit+0x44>)
 8001278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800127a:	4a0e      	ldr	r2, [pc, #56]	; (80012b4 <HAL_MspInit+0x44>)
 800127c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001280:	6413      	str	r3, [r2, #64]	; 0x40
 8001282:	4b0c      	ldr	r3, [pc, #48]	; (80012b4 <HAL_MspInit+0x44>)
 8001284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001286:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800128a:	607b      	str	r3, [r7, #4]
 800128c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800128e:	4b09      	ldr	r3, [pc, #36]	; (80012b4 <HAL_MspInit+0x44>)
 8001290:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001292:	4a08      	ldr	r2, [pc, #32]	; (80012b4 <HAL_MspInit+0x44>)
 8001294:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001298:	6453      	str	r3, [r2, #68]	; 0x44
 800129a:	4b06      	ldr	r3, [pc, #24]	; (80012b4 <HAL_MspInit+0x44>)
 800129c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800129e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012a2:	603b      	str	r3, [r7, #0]
 80012a4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012a6:	bf00      	nop
 80012a8:	370c      	adds	r7, #12
 80012aa:	46bd      	mov	sp, r7
 80012ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b0:	4770      	bx	lr
 80012b2:	bf00      	nop
 80012b4:	40023800 	.word	0x40023800

080012b8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b08c      	sub	sp, #48	; 0x30
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012c0:	f107 031c 	add.w	r3, r7, #28
 80012c4:	2200      	movs	r2, #0
 80012c6:	601a      	str	r2, [r3, #0]
 80012c8:	605a      	str	r2, [r3, #4]
 80012ca:	609a      	str	r2, [r3, #8]
 80012cc:	60da      	str	r2, [r3, #12]
 80012ce:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	4a32      	ldr	r2, [pc, #200]	; (80013a0 <HAL_UART_MspInit+0xe8>)
 80012d6:	4293      	cmp	r3, r2
 80012d8:	d130      	bne.n	800133c <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80012da:	4b32      	ldr	r3, [pc, #200]	; (80013a4 <HAL_UART_MspInit+0xec>)
 80012dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012de:	4a31      	ldr	r2, [pc, #196]	; (80013a4 <HAL_UART_MspInit+0xec>)
 80012e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012e4:	6413      	str	r3, [r2, #64]	; 0x40
 80012e6:	4b2f      	ldr	r3, [pc, #188]	; (80013a4 <HAL_UART_MspInit+0xec>)
 80012e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012ee:	61bb      	str	r3, [r7, #24]
 80012f0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80012f2:	4b2c      	ldr	r3, [pc, #176]	; (80013a4 <HAL_UART_MspInit+0xec>)
 80012f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f6:	4a2b      	ldr	r2, [pc, #172]	; (80013a4 <HAL_UART_MspInit+0xec>)
 80012f8:	f043 0308 	orr.w	r3, r3, #8
 80012fc:	6313      	str	r3, [r2, #48]	; 0x30
 80012fe:	4b29      	ldr	r3, [pc, #164]	; (80013a4 <HAL_UART_MspInit+0xec>)
 8001300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001302:	f003 0308 	and.w	r3, r3, #8
 8001306:	617b      	str	r3, [r7, #20]
 8001308:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800130a:	2360      	movs	r3, #96	; 0x60
 800130c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800130e:	2302      	movs	r3, #2
 8001310:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001312:	2300      	movs	r3, #0
 8001314:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001316:	2303      	movs	r3, #3
 8001318:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800131a:	2307      	movs	r3, #7
 800131c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800131e:	f107 031c 	add.w	r3, r7, #28
 8001322:	4619      	mov	r1, r3
 8001324:	4820      	ldr	r0, [pc, #128]	; (80013a8 <HAL_UART_MspInit+0xf0>)
 8001326:	f000 fb81 	bl	8001a2c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800132a:	2200      	movs	r2, #0
 800132c:	2100      	movs	r1, #0
 800132e:	2026      	movs	r0, #38	; 0x26
 8001330:	f000 fab3 	bl	800189a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001334:	2026      	movs	r0, #38	; 0x26
 8001336:	f000 facc 	bl	80018d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800133a:	e02d      	b.n	8001398 <HAL_UART_MspInit+0xe0>
  else if(huart->Instance==USART3)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	4a1a      	ldr	r2, [pc, #104]	; (80013ac <HAL_UART_MspInit+0xf4>)
 8001342:	4293      	cmp	r3, r2
 8001344:	d128      	bne.n	8001398 <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001346:	4b17      	ldr	r3, [pc, #92]	; (80013a4 <HAL_UART_MspInit+0xec>)
 8001348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800134a:	4a16      	ldr	r2, [pc, #88]	; (80013a4 <HAL_UART_MspInit+0xec>)
 800134c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001350:	6413      	str	r3, [r2, #64]	; 0x40
 8001352:	4b14      	ldr	r3, [pc, #80]	; (80013a4 <HAL_UART_MspInit+0xec>)
 8001354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001356:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800135a:	613b      	str	r3, [r7, #16]
 800135c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800135e:	4b11      	ldr	r3, [pc, #68]	; (80013a4 <HAL_UART_MspInit+0xec>)
 8001360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001362:	4a10      	ldr	r2, [pc, #64]	; (80013a4 <HAL_UART_MspInit+0xec>)
 8001364:	f043 0308 	orr.w	r3, r3, #8
 8001368:	6313      	str	r3, [r2, #48]	; 0x30
 800136a:	4b0e      	ldr	r3, [pc, #56]	; (80013a4 <HAL_UART_MspInit+0xec>)
 800136c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800136e:	f003 0308 	and.w	r3, r3, #8
 8001372:	60fb      	str	r3, [r7, #12]
 8001374:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001376:	f44f 7340 	mov.w	r3, #768	; 0x300
 800137a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800137c:	2302      	movs	r3, #2
 800137e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001380:	2300      	movs	r3, #0
 8001382:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001384:	2303      	movs	r3, #3
 8001386:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001388:	2307      	movs	r3, #7
 800138a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800138c:	f107 031c 	add.w	r3, r7, #28
 8001390:	4619      	mov	r1, r3
 8001392:	4805      	ldr	r0, [pc, #20]	; (80013a8 <HAL_UART_MspInit+0xf0>)
 8001394:	f000 fb4a 	bl	8001a2c <HAL_GPIO_Init>
}
 8001398:	bf00      	nop
 800139a:	3730      	adds	r7, #48	; 0x30
 800139c:	46bd      	mov	sp, r7
 800139e:	bd80      	pop	{r7, pc}
 80013a0:	40004400 	.word	0x40004400
 80013a4:	40023800 	.word	0x40023800
 80013a8:	40020c00 	.word	0x40020c00
 80013ac:	40004800 	.word	0x40004800

080013b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013b0:	b480      	push	{r7}
 80013b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80013b4:	e7fe      	b.n	80013b4 <NMI_Handler+0x4>

080013b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013b6:	b480      	push	{r7}
 80013b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013ba:	e7fe      	b.n	80013ba <HardFault_Handler+0x4>

080013bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013bc:	b480      	push	{r7}
 80013be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013c0:	e7fe      	b.n	80013c0 <MemManage_Handler+0x4>

080013c2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013c2:	b480      	push	{r7}
 80013c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013c6:	e7fe      	b.n	80013c6 <BusFault_Handler+0x4>

080013c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013c8:	b480      	push	{r7}
 80013ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013cc:	e7fe      	b.n	80013cc <UsageFault_Handler+0x4>

080013ce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013ce:	b480      	push	{r7}
 80013d0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013d2:	bf00      	nop
 80013d4:	46bd      	mov	sp, r7
 80013d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013da:	4770      	bx	lr

080013dc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013dc:	b480      	push	{r7}
 80013de:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013e0:	bf00      	nop
 80013e2:	46bd      	mov	sp, r7
 80013e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e8:	4770      	bx	lr

080013ea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013ea:	b480      	push	{r7}
 80013ec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013ee:	bf00      	nop
 80013f0:	46bd      	mov	sp, r7
 80013f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f6:	4770      	bx	lr

080013f8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013fc:	f000 f92e 	bl	800165c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001400:	bf00      	nop
 8001402:	bd80      	pop	{r7, pc}

08001404 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&wifi_uart);
 8001408:	4802      	ldr	r0, [pc, #8]	; (8001414 <USART2_IRQHandler+0x10>)
 800140a:	f001 fe19 	bl	8003040 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800140e:	bf00      	nop
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	20000764 	.word	0x20000764

08001418 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001418:	b480      	push	{r7}
 800141a:	af00      	add	r7, sp, #0
	return 1;
 800141c:	2301      	movs	r3, #1
}
 800141e:	4618      	mov	r0, r3
 8001420:	46bd      	mov	sp, r7
 8001422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001426:	4770      	bx	lr

08001428 <_kill>:

int _kill(int pid, int sig)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b082      	sub	sp, #8
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
 8001430:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001432:	f003 fd23 	bl	8004e7c <__errno>
 8001436:	4603      	mov	r3, r0
 8001438:	2216      	movs	r2, #22
 800143a:	601a      	str	r2, [r3, #0]
	return -1;
 800143c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001440:	4618      	mov	r0, r3
 8001442:	3708      	adds	r7, #8
 8001444:	46bd      	mov	sp, r7
 8001446:	bd80      	pop	{r7, pc}

08001448 <_exit>:

void _exit (int status)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b082      	sub	sp, #8
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001450:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001454:	6878      	ldr	r0, [r7, #4]
 8001456:	f7ff ffe7 	bl	8001428 <_kill>
	while (1) {}		/* Make sure we hang here */
 800145a:	e7fe      	b.n	800145a <_exit+0x12>

0800145c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b086      	sub	sp, #24
 8001460:	af00      	add	r7, sp, #0
 8001462:	60f8      	str	r0, [r7, #12]
 8001464:	60b9      	str	r1, [r7, #8]
 8001466:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001468:	2300      	movs	r3, #0
 800146a:	617b      	str	r3, [r7, #20]
 800146c:	e00a      	b.n	8001484 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800146e:	f3af 8000 	nop.w
 8001472:	4601      	mov	r1, r0
 8001474:	68bb      	ldr	r3, [r7, #8]
 8001476:	1c5a      	adds	r2, r3, #1
 8001478:	60ba      	str	r2, [r7, #8]
 800147a:	b2ca      	uxtb	r2, r1
 800147c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800147e:	697b      	ldr	r3, [r7, #20]
 8001480:	3301      	adds	r3, #1
 8001482:	617b      	str	r3, [r7, #20]
 8001484:	697a      	ldr	r2, [r7, #20]
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	429a      	cmp	r2, r3
 800148a:	dbf0      	blt.n	800146e <_read+0x12>
	}

return len;
 800148c:	687b      	ldr	r3, [r7, #4]
}
 800148e:	4618      	mov	r0, r3
 8001490:	3718      	adds	r7, #24
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}

08001496 <_close>:
	}
	return len;
}

int _close(int file)
{
 8001496:	b480      	push	{r7}
 8001498:	b083      	sub	sp, #12
 800149a:	af00      	add	r7, sp, #0
 800149c:	6078      	str	r0, [r7, #4]
	return -1;
 800149e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80014a2:	4618      	mov	r0, r3
 80014a4:	370c      	adds	r7, #12
 80014a6:	46bd      	mov	sp, r7
 80014a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ac:	4770      	bx	lr

080014ae <_fstat>:


int _fstat(int file, struct stat *st)
{
 80014ae:	b480      	push	{r7}
 80014b0:	b083      	sub	sp, #12
 80014b2:	af00      	add	r7, sp, #0
 80014b4:	6078      	str	r0, [r7, #4]
 80014b6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80014be:	605a      	str	r2, [r3, #4]
	return 0;
 80014c0:	2300      	movs	r3, #0
}
 80014c2:	4618      	mov	r0, r3
 80014c4:	370c      	adds	r7, #12
 80014c6:	46bd      	mov	sp, r7
 80014c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014cc:	4770      	bx	lr

080014ce <_isatty>:

int _isatty(int file)
{
 80014ce:	b480      	push	{r7}
 80014d0:	b083      	sub	sp, #12
 80014d2:	af00      	add	r7, sp, #0
 80014d4:	6078      	str	r0, [r7, #4]
	return 1;
 80014d6:	2301      	movs	r3, #1
}
 80014d8:	4618      	mov	r0, r3
 80014da:	370c      	adds	r7, #12
 80014dc:	46bd      	mov	sp, r7
 80014de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e2:	4770      	bx	lr

080014e4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80014e4:	b480      	push	{r7}
 80014e6:	b085      	sub	sp, #20
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	60f8      	str	r0, [r7, #12]
 80014ec:	60b9      	str	r1, [r7, #8]
 80014ee:	607a      	str	r2, [r7, #4]
	return 0;
 80014f0:	2300      	movs	r3, #0
}
 80014f2:	4618      	mov	r0, r3
 80014f4:	3714      	adds	r7, #20
 80014f6:	46bd      	mov	sp, r7
 80014f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fc:	4770      	bx	lr
	...

08001500 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b086      	sub	sp, #24
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001508:	4a14      	ldr	r2, [pc, #80]	; (800155c <_sbrk+0x5c>)
 800150a:	4b15      	ldr	r3, [pc, #84]	; (8001560 <_sbrk+0x60>)
 800150c:	1ad3      	subs	r3, r2, r3
 800150e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001510:	697b      	ldr	r3, [r7, #20]
 8001512:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001514:	4b13      	ldr	r3, [pc, #76]	; (8001564 <_sbrk+0x64>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	2b00      	cmp	r3, #0
 800151a:	d102      	bne.n	8001522 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800151c:	4b11      	ldr	r3, [pc, #68]	; (8001564 <_sbrk+0x64>)
 800151e:	4a12      	ldr	r2, [pc, #72]	; (8001568 <_sbrk+0x68>)
 8001520:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001522:	4b10      	ldr	r3, [pc, #64]	; (8001564 <_sbrk+0x64>)
 8001524:	681a      	ldr	r2, [r3, #0]
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	4413      	add	r3, r2
 800152a:	693a      	ldr	r2, [r7, #16]
 800152c:	429a      	cmp	r2, r3
 800152e:	d207      	bcs.n	8001540 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001530:	f003 fca4 	bl	8004e7c <__errno>
 8001534:	4603      	mov	r3, r0
 8001536:	220c      	movs	r2, #12
 8001538:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800153a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800153e:	e009      	b.n	8001554 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001540:	4b08      	ldr	r3, [pc, #32]	; (8001564 <_sbrk+0x64>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001546:	4b07      	ldr	r3, [pc, #28]	; (8001564 <_sbrk+0x64>)
 8001548:	681a      	ldr	r2, [r3, #0]
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	4413      	add	r3, r2
 800154e:	4a05      	ldr	r2, [pc, #20]	; (8001564 <_sbrk+0x64>)
 8001550:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001552:	68fb      	ldr	r3, [r7, #12]
}
 8001554:	4618      	mov	r0, r3
 8001556:	3718      	adds	r7, #24
 8001558:	46bd      	mov	sp, r7
 800155a:	bd80      	pop	{r7, pc}
 800155c:	20040000 	.word	0x20040000
 8001560:	00000400 	.word	0x00000400
 8001564:	2000075c 	.word	0x2000075c
 8001568:	20000d18 	.word	0x20000d18

0800156c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800156c:	b480      	push	{r7}
 800156e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001570:	4b06      	ldr	r3, [pc, #24]	; (800158c <SystemInit+0x20>)
 8001572:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001576:	4a05      	ldr	r2, [pc, #20]	; (800158c <SystemInit+0x20>)
 8001578:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800157c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001580:	bf00      	nop
 8001582:	46bd      	mov	sp, r7
 8001584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001588:	4770      	bx	lr
 800158a:	bf00      	nop
 800158c:	e000ed00 	.word	0xe000ed00

08001590 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001590:	f8df d034 	ldr.w	sp, [pc, #52]	; 80015c8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001594:	480d      	ldr	r0, [pc, #52]	; (80015cc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001596:	490e      	ldr	r1, [pc, #56]	; (80015d0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001598:	4a0e      	ldr	r2, [pc, #56]	; (80015d4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800159a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800159c:	e002      	b.n	80015a4 <LoopCopyDataInit>

0800159e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800159e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015a2:	3304      	adds	r3, #4

080015a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015a8:	d3f9      	bcc.n	800159e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015aa:	4a0b      	ldr	r2, [pc, #44]	; (80015d8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80015ac:	4c0b      	ldr	r4, [pc, #44]	; (80015dc <LoopFillZerobss+0x26>)
  movs r3, #0
 80015ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015b0:	e001      	b.n	80015b6 <LoopFillZerobss>

080015b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015b4:	3204      	adds	r2, #4

080015b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015b8:	d3fb      	bcc.n	80015b2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80015ba:	f7ff ffd7 	bl	800156c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80015be:	f003 fc63 	bl	8004e88 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80015c2:	f7ff fc97 	bl	8000ef4 <main>
  bx  lr    
 80015c6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80015c8:	20040000 	.word	0x20040000
  ldr r0, =_sdata
 80015cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015d0:	200006bc 	.word	0x200006bc
  ldr r2, =_sidata
 80015d4:	08009608 	.word	0x08009608
  ldr r2, =_sbss
 80015d8:	200006bc 	.word	0x200006bc
  ldr r4, =_ebss
 80015dc:	20000d14 	.word	0x20000d14

080015e0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80015e0:	e7fe      	b.n	80015e0 <ADC_IRQHandler>

080015e2 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015e2:	b580      	push	{r7, lr}
 80015e4:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015e6:	2003      	movs	r0, #3
 80015e8:	f000 f94c 	bl	8001884 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015ec:	2000      	movs	r0, #0
 80015ee:	f000 f805 	bl	80015fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015f2:	f7ff fe3d 	bl	8001270 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015f6:	2300      	movs	r3, #0
}
 80015f8:	4618      	mov	r0, r3
 80015fa:	bd80      	pop	{r7, pc}

080015fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b082      	sub	sp, #8
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001604:	4b12      	ldr	r3, [pc, #72]	; (8001650 <HAL_InitTick+0x54>)
 8001606:	681a      	ldr	r2, [r3, #0]
 8001608:	4b12      	ldr	r3, [pc, #72]	; (8001654 <HAL_InitTick+0x58>)
 800160a:	781b      	ldrb	r3, [r3, #0]
 800160c:	4619      	mov	r1, r3
 800160e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001612:	fbb3 f3f1 	udiv	r3, r3, r1
 8001616:	fbb2 f3f3 	udiv	r3, r2, r3
 800161a:	4618      	mov	r0, r3
 800161c:	f000 f967 	bl	80018ee <HAL_SYSTICK_Config>
 8001620:	4603      	mov	r3, r0
 8001622:	2b00      	cmp	r3, #0
 8001624:	d001      	beq.n	800162a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001626:	2301      	movs	r3, #1
 8001628:	e00e      	b.n	8001648 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	2b0f      	cmp	r3, #15
 800162e:	d80a      	bhi.n	8001646 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001630:	2200      	movs	r2, #0
 8001632:	6879      	ldr	r1, [r7, #4]
 8001634:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001638:	f000 f92f 	bl	800189a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800163c:	4a06      	ldr	r2, [pc, #24]	; (8001658 <HAL_InitTick+0x5c>)
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001642:	2300      	movs	r3, #0
 8001644:	e000      	b.n	8001648 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001646:	2301      	movs	r3, #1
}
 8001648:	4618      	mov	r0, r3
 800164a:	3708      	adds	r7, #8
 800164c:	46bd      	mov	sp, r7
 800164e:	bd80      	pop	{r7, pc}
 8001650:	20000000 	.word	0x20000000
 8001654:	20000008 	.word	0x20000008
 8001658:	20000004 	.word	0x20000004

0800165c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800165c:	b480      	push	{r7}
 800165e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001660:	4b06      	ldr	r3, [pc, #24]	; (800167c <HAL_IncTick+0x20>)
 8001662:	781b      	ldrb	r3, [r3, #0]
 8001664:	461a      	mov	r2, r3
 8001666:	4b06      	ldr	r3, [pc, #24]	; (8001680 <HAL_IncTick+0x24>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	4413      	add	r3, r2
 800166c:	4a04      	ldr	r2, [pc, #16]	; (8001680 <HAL_IncTick+0x24>)
 800166e:	6013      	str	r3, [r2, #0]
}
 8001670:	bf00      	nop
 8001672:	46bd      	mov	sp, r7
 8001674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001678:	4770      	bx	lr
 800167a:	bf00      	nop
 800167c:	20000008 	.word	0x20000008
 8001680:	20000760 	.word	0x20000760

08001684 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001684:	b480      	push	{r7}
 8001686:	af00      	add	r7, sp, #0
  return uwTick;
 8001688:	4b03      	ldr	r3, [pc, #12]	; (8001698 <HAL_GetTick+0x14>)
 800168a:	681b      	ldr	r3, [r3, #0]
}
 800168c:	4618      	mov	r0, r3
 800168e:	46bd      	mov	sp, r7
 8001690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001694:	4770      	bx	lr
 8001696:	bf00      	nop
 8001698:	20000760 	.word	0x20000760

0800169c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b084      	sub	sp, #16
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80016a4:	f7ff ffee 	bl	8001684 <HAL_GetTick>
 80016a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80016b4:	d005      	beq.n	80016c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80016b6:	4b0a      	ldr	r3, [pc, #40]	; (80016e0 <HAL_Delay+0x44>)
 80016b8:	781b      	ldrb	r3, [r3, #0]
 80016ba:	461a      	mov	r2, r3
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	4413      	add	r3, r2
 80016c0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80016c2:	bf00      	nop
 80016c4:	f7ff ffde 	bl	8001684 <HAL_GetTick>
 80016c8:	4602      	mov	r2, r0
 80016ca:	68bb      	ldr	r3, [r7, #8]
 80016cc:	1ad3      	subs	r3, r2, r3
 80016ce:	68fa      	ldr	r2, [r7, #12]
 80016d0:	429a      	cmp	r2, r3
 80016d2:	d8f7      	bhi.n	80016c4 <HAL_Delay+0x28>
  {
  }
}
 80016d4:	bf00      	nop
 80016d6:	bf00      	nop
 80016d8:	3710      	adds	r7, #16
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}
 80016de:	bf00      	nop
 80016e0:	20000008 	.word	0x20000008

080016e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016e4:	b480      	push	{r7}
 80016e6:	b085      	sub	sp, #20
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	f003 0307 	and.w	r3, r3, #7
 80016f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016f4:	4b0b      	ldr	r3, [pc, #44]	; (8001724 <__NVIC_SetPriorityGrouping+0x40>)
 80016f6:	68db      	ldr	r3, [r3, #12]
 80016f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016fa:	68ba      	ldr	r2, [r7, #8]
 80016fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001700:	4013      	ands	r3, r2
 8001702:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001708:	68bb      	ldr	r3, [r7, #8]
 800170a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800170c:	4b06      	ldr	r3, [pc, #24]	; (8001728 <__NVIC_SetPriorityGrouping+0x44>)
 800170e:	4313      	orrs	r3, r2
 8001710:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001712:	4a04      	ldr	r2, [pc, #16]	; (8001724 <__NVIC_SetPriorityGrouping+0x40>)
 8001714:	68bb      	ldr	r3, [r7, #8]
 8001716:	60d3      	str	r3, [r2, #12]
}
 8001718:	bf00      	nop
 800171a:	3714      	adds	r7, #20
 800171c:	46bd      	mov	sp, r7
 800171e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001722:	4770      	bx	lr
 8001724:	e000ed00 	.word	0xe000ed00
 8001728:	05fa0000 	.word	0x05fa0000

0800172c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800172c:	b480      	push	{r7}
 800172e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001730:	4b04      	ldr	r3, [pc, #16]	; (8001744 <__NVIC_GetPriorityGrouping+0x18>)
 8001732:	68db      	ldr	r3, [r3, #12]
 8001734:	0a1b      	lsrs	r3, r3, #8
 8001736:	f003 0307 	and.w	r3, r3, #7
}
 800173a:	4618      	mov	r0, r3
 800173c:	46bd      	mov	sp, r7
 800173e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001742:	4770      	bx	lr
 8001744:	e000ed00 	.word	0xe000ed00

08001748 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001748:	b480      	push	{r7}
 800174a:	b083      	sub	sp, #12
 800174c:	af00      	add	r7, sp, #0
 800174e:	4603      	mov	r3, r0
 8001750:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001752:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001756:	2b00      	cmp	r3, #0
 8001758:	db0b      	blt.n	8001772 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800175a:	79fb      	ldrb	r3, [r7, #7]
 800175c:	f003 021f 	and.w	r2, r3, #31
 8001760:	4907      	ldr	r1, [pc, #28]	; (8001780 <__NVIC_EnableIRQ+0x38>)
 8001762:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001766:	095b      	lsrs	r3, r3, #5
 8001768:	2001      	movs	r0, #1
 800176a:	fa00 f202 	lsl.w	r2, r0, r2
 800176e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001772:	bf00      	nop
 8001774:	370c      	adds	r7, #12
 8001776:	46bd      	mov	sp, r7
 8001778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177c:	4770      	bx	lr
 800177e:	bf00      	nop
 8001780:	e000e100 	.word	0xe000e100

08001784 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001784:	b480      	push	{r7}
 8001786:	b083      	sub	sp, #12
 8001788:	af00      	add	r7, sp, #0
 800178a:	4603      	mov	r3, r0
 800178c:	6039      	str	r1, [r7, #0]
 800178e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001790:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001794:	2b00      	cmp	r3, #0
 8001796:	db0a      	blt.n	80017ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	b2da      	uxtb	r2, r3
 800179c:	490c      	ldr	r1, [pc, #48]	; (80017d0 <__NVIC_SetPriority+0x4c>)
 800179e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017a2:	0112      	lsls	r2, r2, #4
 80017a4:	b2d2      	uxtb	r2, r2
 80017a6:	440b      	add	r3, r1
 80017a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017ac:	e00a      	b.n	80017c4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	b2da      	uxtb	r2, r3
 80017b2:	4908      	ldr	r1, [pc, #32]	; (80017d4 <__NVIC_SetPriority+0x50>)
 80017b4:	79fb      	ldrb	r3, [r7, #7]
 80017b6:	f003 030f 	and.w	r3, r3, #15
 80017ba:	3b04      	subs	r3, #4
 80017bc:	0112      	lsls	r2, r2, #4
 80017be:	b2d2      	uxtb	r2, r2
 80017c0:	440b      	add	r3, r1
 80017c2:	761a      	strb	r2, [r3, #24]
}
 80017c4:	bf00      	nop
 80017c6:	370c      	adds	r7, #12
 80017c8:	46bd      	mov	sp, r7
 80017ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ce:	4770      	bx	lr
 80017d0:	e000e100 	.word	0xe000e100
 80017d4:	e000ed00 	.word	0xe000ed00

080017d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017d8:	b480      	push	{r7}
 80017da:	b089      	sub	sp, #36	; 0x24
 80017dc:	af00      	add	r7, sp, #0
 80017de:	60f8      	str	r0, [r7, #12]
 80017e0:	60b9      	str	r1, [r7, #8]
 80017e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	f003 0307 	and.w	r3, r3, #7
 80017ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017ec:	69fb      	ldr	r3, [r7, #28]
 80017ee:	f1c3 0307 	rsb	r3, r3, #7
 80017f2:	2b04      	cmp	r3, #4
 80017f4:	bf28      	it	cs
 80017f6:	2304      	movcs	r3, #4
 80017f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017fa:	69fb      	ldr	r3, [r7, #28]
 80017fc:	3304      	adds	r3, #4
 80017fe:	2b06      	cmp	r3, #6
 8001800:	d902      	bls.n	8001808 <NVIC_EncodePriority+0x30>
 8001802:	69fb      	ldr	r3, [r7, #28]
 8001804:	3b03      	subs	r3, #3
 8001806:	e000      	b.n	800180a <NVIC_EncodePriority+0x32>
 8001808:	2300      	movs	r3, #0
 800180a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800180c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001810:	69bb      	ldr	r3, [r7, #24]
 8001812:	fa02 f303 	lsl.w	r3, r2, r3
 8001816:	43da      	mvns	r2, r3
 8001818:	68bb      	ldr	r3, [r7, #8]
 800181a:	401a      	ands	r2, r3
 800181c:	697b      	ldr	r3, [r7, #20]
 800181e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001820:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001824:	697b      	ldr	r3, [r7, #20]
 8001826:	fa01 f303 	lsl.w	r3, r1, r3
 800182a:	43d9      	mvns	r1, r3
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001830:	4313      	orrs	r3, r2
         );
}
 8001832:	4618      	mov	r0, r3
 8001834:	3724      	adds	r7, #36	; 0x24
 8001836:	46bd      	mov	sp, r7
 8001838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183c:	4770      	bx	lr
	...

08001840 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b082      	sub	sp, #8
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	3b01      	subs	r3, #1
 800184c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001850:	d301      	bcc.n	8001856 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001852:	2301      	movs	r3, #1
 8001854:	e00f      	b.n	8001876 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001856:	4a0a      	ldr	r2, [pc, #40]	; (8001880 <SysTick_Config+0x40>)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	3b01      	subs	r3, #1
 800185c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800185e:	210f      	movs	r1, #15
 8001860:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001864:	f7ff ff8e 	bl	8001784 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001868:	4b05      	ldr	r3, [pc, #20]	; (8001880 <SysTick_Config+0x40>)
 800186a:	2200      	movs	r2, #0
 800186c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800186e:	4b04      	ldr	r3, [pc, #16]	; (8001880 <SysTick_Config+0x40>)
 8001870:	2207      	movs	r2, #7
 8001872:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001874:	2300      	movs	r3, #0
}
 8001876:	4618      	mov	r0, r3
 8001878:	3708      	adds	r7, #8
 800187a:	46bd      	mov	sp, r7
 800187c:	bd80      	pop	{r7, pc}
 800187e:	bf00      	nop
 8001880:	e000e010 	.word	0xe000e010

08001884 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b082      	sub	sp, #8
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800188c:	6878      	ldr	r0, [r7, #4]
 800188e:	f7ff ff29 	bl	80016e4 <__NVIC_SetPriorityGrouping>
}
 8001892:	bf00      	nop
 8001894:	3708      	adds	r7, #8
 8001896:	46bd      	mov	sp, r7
 8001898:	bd80      	pop	{r7, pc}

0800189a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800189a:	b580      	push	{r7, lr}
 800189c:	b086      	sub	sp, #24
 800189e:	af00      	add	r7, sp, #0
 80018a0:	4603      	mov	r3, r0
 80018a2:	60b9      	str	r1, [r7, #8]
 80018a4:	607a      	str	r2, [r7, #4]
 80018a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80018a8:	2300      	movs	r3, #0
 80018aa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80018ac:	f7ff ff3e 	bl	800172c <__NVIC_GetPriorityGrouping>
 80018b0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018b2:	687a      	ldr	r2, [r7, #4]
 80018b4:	68b9      	ldr	r1, [r7, #8]
 80018b6:	6978      	ldr	r0, [r7, #20]
 80018b8:	f7ff ff8e 	bl	80017d8 <NVIC_EncodePriority>
 80018bc:	4602      	mov	r2, r0
 80018be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018c2:	4611      	mov	r1, r2
 80018c4:	4618      	mov	r0, r3
 80018c6:	f7ff ff5d 	bl	8001784 <__NVIC_SetPriority>
}
 80018ca:	bf00      	nop
 80018cc:	3718      	adds	r7, #24
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd80      	pop	{r7, pc}

080018d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018d2:	b580      	push	{r7, lr}
 80018d4:	b082      	sub	sp, #8
 80018d6:	af00      	add	r7, sp, #0
 80018d8:	4603      	mov	r3, r0
 80018da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80018dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018e0:	4618      	mov	r0, r3
 80018e2:	f7ff ff31 	bl	8001748 <__NVIC_EnableIRQ>
}
 80018e6:	bf00      	nop
 80018e8:	3708      	adds	r7, #8
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bd80      	pop	{r7, pc}

080018ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018ee:	b580      	push	{r7, lr}
 80018f0:	b082      	sub	sp, #8
 80018f2:	af00      	add	r7, sp, #0
 80018f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018f6:	6878      	ldr	r0, [r7, #4]
 80018f8:	f7ff ffa2 	bl	8001840 <SysTick_Config>
 80018fc:	4603      	mov	r3, r0
}
 80018fe:	4618      	mov	r0, r3
 8001900:	3708      	adds	r7, #8
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}

08001906 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001906:	b580      	push	{r7, lr}
 8001908:	b084      	sub	sp, #16
 800190a:	af00      	add	r7, sp, #0
 800190c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001912:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001914:	f7ff feb6 	bl	8001684 <HAL_GetTick>
 8001918:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001920:	b2db      	uxtb	r3, r3
 8001922:	2b02      	cmp	r3, #2
 8001924:	d008      	beq.n	8001938 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	2280      	movs	r2, #128	; 0x80
 800192a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	2200      	movs	r2, #0
 8001930:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001934:	2301      	movs	r3, #1
 8001936:	e052      	b.n	80019de <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	681a      	ldr	r2, [r3, #0]
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f022 0216 	bic.w	r2, r2, #22
 8001946:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	695a      	ldr	r2, [r3, #20]
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001956:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800195c:	2b00      	cmp	r3, #0
 800195e:	d103      	bne.n	8001968 <HAL_DMA_Abort+0x62>
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001964:	2b00      	cmp	r3, #0
 8001966:	d007      	beq.n	8001978 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	681a      	ldr	r2, [r3, #0]
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f022 0208 	bic.w	r2, r2, #8
 8001976:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	681a      	ldr	r2, [r3, #0]
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f022 0201 	bic.w	r2, r2, #1
 8001986:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001988:	e013      	b.n	80019b2 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800198a:	f7ff fe7b 	bl	8001684 <HAL_GetTick>
 800198e:	4602      	mov	r2, r0
 8001990:	68bb      	ldr	r3, [r7, #8]
 8001992:	1ad3      	subs	r3, r2, r3
 8001994:	2b05      	cmp	r3, #5
 8001996:	d90c      	bls.n	80019b2 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	2220      	movs	r2, #32
 800199c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	2203      	movs	r2, #3
 80019a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	2200      	movs	r2, #0
 80019aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 80019ae:	2303      	movs	r3, #3
 80019b0:	e015      	b.n	80019de <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f003 0301 	and.w	r3, r3, #1
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d1e4      	bne.n	800198a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019c4:	223f      	movs	r2, #63	; 0x3f
 80019c6:	409a      	lsls	r2, r3
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	2201      	movs	r2, #1
 80019d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	2200      	movs	r2, #0
 80019d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 80019dc:	2300      	movs	r3, #0
}
 80019de:	4618      	mov	r0, r3
 80019e0:	3710      	adds	r7, #16
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}

080019e6 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80019e6:	b480      	push	{r7}
 80019e8:	b083      	sub	sp, #12
 80019ea:	af00      	add	r7, sp, #0
 80019ec:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80019f4:	b2db      	uxtb	r3, r3
 80019f6:	2b02      	cmp	r3, #2
 80019f8:	d004      	beq.n	8001a04 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	2280      	movs	r2, #128	; 0x80
 80019fe:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001a00:	2301      	movs	r3, #1
 8001a02:	e00c      	b.n	8001a1e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	2205      	movs	r2, #5
 8001a08:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	681a      	ldr	r2, [r3, #0]
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f022 0201 	bic.w	r2, r2, #1
 8001a1a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001a1c:	2300      	movs	r3, #0
}
 8001a1e:	4618      	mov	r0, r3
 8001a20:	370c      	adds	r7, #12
 8001a22:	46bd      	mov	sp, r7
 8001a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a28:	4770      	bx	lr
	...

08001a2c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	b089      	sub	sp, #36	; 0x24
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
 8001a34:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001a36:	2300      	movs	r3, #0
 8001a38:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001a42:	2300      	movs	r3, #0
 8001a44:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001a46:	2300      	movs	r3, #0
 8001a48:	61fb      	str	r3, [r7, #28]
 8001a4a:	e169      	b.n	8001d20 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001a4c:	2201      	movs	r2, #1
 8001a4e:	69fb      	ldr	r3, [r7, #28]
 8001a50:	fa02 f303 	lsl.w	r3, r2, r3
 8001a54:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	697a      	ldr	r2, [r7, #20]
 8001a5c:	4013      	ands	r3, r2
 8001a5e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001a60:	693a      	ldr	r2, [r7, #16]
 8001a62:	697b      	ldr	r3, [r7, #20]
 8001a64:	429a      	cmp	r2, r3
 8001a66:	f040 8158 	bne.w	8001d1a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	685b      	ldr	r3, [r3, #4]
 8001a6e:	f003 0303 	and.w	r3, r3, #3
 8001a72:	2b01      	cmp	r3, #1
 8001a74:	d005      	beq.n	8001a82 <HAL_GPIO_Init+0x56>
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	685b      	ldr	r3, [r3, #4]
 8001a7a:	f003 0303 	and.w	r3, r3, #3
 8001a7e:	2b02      	cmp	r3, #2
 8001a80:	d130      	bne.n	8001ae4 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	689b      	ldr	r3, [r3, #8]
 8001a86:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001a88:	69fb      	ldr	r3, [r7, #28]
 8001a8a:	005b      	lsls	r3, r3, #1
 8001a8c:	2203      	movs	r2, #3
 8001a8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a92:	43db      	mvns	r3, r3
 8001a94:	69ba      	ldr	r2, [r7, #24]
 8001a96:	4013      	ands	r3, r2
 8001a98:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	68da      	ldr	r2, [r3, #12]
 8001a9e:	69fb      	ldr	r3, [r7, #28]
 8001aa0:	005b      	lsls	r3, r3, #1
 8001aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa6:	69ba      	ldr	r2, [r7, #24]
 8001aa8:	4313      	orrs	r3, r2
 8001aaa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	69ba      	ldr	r2, [r7, #24]
 8001ab0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	685b      	ldr	r3, [r3, #4]
 8001ab6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ab8:	2201      	movs	r2, #1
 8001aba:	69fb      	ldr	r3, [r7, #28]
 8001abc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac0:	43db      	mvns	r3, r3
 8001ac2:	69ba      	ldr	r2, [r7, #24]
 8001ac4:	4013      	ands	r3, r2
 8001ac6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	091b      	lsrs	r3, r3, #4
 8001ace:	f003 0201 	and.w	r2, r3, #1
 8001ad2:	69fb      	ldr	r3, [r7, #28]
 8001ad4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad8:	69ba      	ldr	r2, [r7, #24]
 8001ada:	4313      	orrs	r3, r2
 8001adc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	69ba      	ldr	r2, [r7, #24]
 8001ae2:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	685b      	ldr	r3, [r3, #4]
 8001ae8:	f003 0303 	and.w	r3, r3, #3
 8001aec:	2b03      	cmp	r3, #3
 8001aee:	d017      	beq.n	8001b20 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	68db      	ldr	r3, [r3, #12]
 8001af4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001af6:	69fb      	ldr	r3, [r7, #28]
 8001af8:	005b      	lsls	r3, r3, #1
 8001afa:	2203      	movs	r2, #3
 8001afc:	fa02 f303 	lsl.w	r3, r2, r3
 8001b00:	43db      	mvns	r3, r3
 8001b02:	69ba      	ldr	r2, [r7, #24]
 8001b04:	4013      	ands	r3, r2
 8001b06:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	689a      	ldr	r2, [r3, #8]
 8001b0c:	69fb      	ldr	r3, [r7, #28]
 8001b0e:	005b      	lsls	r3, r3, #1
 8001b10:	fa02 f303 	lsl.w	r3, r2, r3
 8001b14:	69ba      	ldr	r2, [r7, #24]
 8001b16:	4313      	orrs	r3, r2
 8001b18:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	69ba      	ldr	r2, [r7, #24]
 8001b1e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	685b      	ldr	r3, [r3, #4]
 8001b24:	f003 0303 	and.w	r3, r3, #3
 8001b28:	2b02      	cmp	r3, #2
 8001b2a:	d123      	bne.n	8001b74 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001b2c:	69fb      	ldr	r3, [r7, #28]
 8001b2e:	08da      	lsrs	r2, r3, #3
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	3208      	adds	r2, #8
 8001b34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b38:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001b3a:	69fb      	ldr	r3, [r7, #28]
 8001b3c:	f003 0307 	and.w	r3, r3, #7
 8001b40:	009b      	lsls	r3, r3, #2
 8001b42:	220f      	movs	r2, #15
 8001b44:	fa02 f303 	lsl.w	r3, r2, r3
 8001b48:	43db      	mvns	r3, r3
 8001b4a:	69ba      	ldr	r2, [r7, #24]
 8001b4c:	4013      	ands	r3, r2
 8001b4e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	691a      	ldr	r2, [r3, #16]
 8001b54:	69fb      	ldr	r3, [r7, #28]
 8001b56:	f003 0307 	and.w	r3, r3, #7
 8001b5a:	009b      	lsls	r3, r3, #2
 8001b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b60:	69ba      	ldr	r2, [r7, #24]
 8001b62:	4313      	orrs	r3, r2
 8001b64:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001b66:	69fb      	ldr	r3, [r7, #28]
 8001b68:	08da      	lsrs	r2, r3, #3
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	3208      	adds	r2, #8
 8001b6e:	69b9      	ldr	r1, [r7, #24]
 8001b70:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001b7a:	69fb      	ldr	r3, [r7, #28]
 8001b7c:	005b      	lsls	r3, r3, #1
 8001b7e:	2203      	movs	r2, #3
 8001b80:	fa02 f303 	lsl.w	r3, r2, r3
 8001b84:	43db      	mvns	r3, r3
 8001b86:	69ba      	ldr	r2, [r7, #24]
 8001b88:	4013      	ands	r3, r2
 8001b8a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	685b      	ldr	r3, [r3, #4]
 8001b90:	f003 0203 	and.w	r2, r3, #3
 8001b94:	69fb      	ldr	r3, [r7, #28]
 8001b96:	005b      	lsls	r3, r3, #1
 8001b98:	fa02 f303 	lsl.w	r3, r2, r3
 8001b9c:	69ba      	ldr	r2, [r7, #24]
 8001b9e:	4313      	orrs	r3, r2
 8001ba0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	69ba      	ldr	r2, [r7, #24]
 8001ba6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	685b      	ldr	r3, [r3, #4]
 8001bac:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	f000 80b2 	beq.w	8001d1a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bb6:	4b60      	ldr	r3, [pc, #384]	; (8001d38 <HAL_GPIO_Init+0x30c>)
 8001bb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bba:	4a5f      	ldr	r2, [pc, #380]	; (8001d38 <HAL_GPIO_Init+0x30c>)
 8001bbc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bc0:	6453      	str	r3, [r2, #68]	; 0x44
 8001bc2:	4b5d      	ldr	r3, [pc, #372]	; (8001d38 <HAL_GPIO_Init+0x30c>)
 8001bc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bc6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bca:	60fb      	str	r3, [r7, #12]
 8001bcc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001bce:	4a5b      	ldr	r2, [pc, #364]	; (8001d3c <HAL_GPIO_Init+0x310>)
 8001bd0:	69fb      	ldr	r3, [r7, #28]
 8001bd2:	089b      	lsrs	r3, r3, #2
 8001bd4:	3302      	adds	r3, #2
 8001bd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bda:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001bdc:	69fb      	ldr	r3, [r7, #28]
 8001bde:	f003 0303 	and.w	r3, r3, #3
 8001be2:	009b      	lsls	r3, r3, #2
 8001be4:	220f      	movs	r2, #15
 8001be6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bea:	43db      	mvns	r3, r3
 8001bec:	69ba      	ldr	r2, [r7, #24]
 8001bee:	4013      	ands	r3, r2
 8001bf0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	4a52      	ldr	r2, [pc, #328]	; (8001d40 <HAL_GPIO_Init+0x314>)
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d02b      	beq.n	8001c52 <HAL_GPIO_Init+0x226>
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	4a51      	ldr	r2, [pc, #324]	; (8001d44 <HAL_GPIO_Init+0x318>)
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d025      	beq.n	8001c4e <HAL_GPIO_Init+0x222>
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	4a50      	ldr	r2, [pc, #320]	; (8001d48 <HAL_GPIO_Init+0x31c>)
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d01f      	beq.n	8001c4a <HAL_GPIO_Init+0x21e>
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	4a4f      	ldr	r2, [pc, #316]	; (8001d4c <HAL_GPIO_Init+0x320>)
 8001c0e:	4293      	cmp	r3, r2
 8001c10:	d019      	beq.n	8001c46 <HAL_GPIO_Init+0x21a>
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	4a4e      	ldr	r2, [pc, #312]	; (8001d50 <HAL_GPIO_Init+0x324>)
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d013      	beq.n	8001c42 <HAL_GPIO_Init+0x216>
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	4a4d      	ldr	r2, [pc, #308]	; (8001d54 <HAL_GPIO_Init+0x328>)
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	d00d      	beq.n	8001c3e <HAL_GPIO_Init+0x212>
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	4a4c      	ldr	r2, [pc, #304]	; (8001d58 <HAL_GPIO_Init+0x32c>)
 8001c26:	4293      	cmp	r3, r2
 8001c28:	d007      	beq.n	8001c3a <HAL_GPIO_Init+0x20e>
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	4a4b      	ldr	r2, [pc, #300]	; (8001d5c <HAL_GPIO_Init+0x330>)
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d101      	bne.n	8001c36 <HAL_GPIO_Init+0x20a>
 8001c32:	2307      	movs	r3, #7
 8001c34:	e00e      	b.n	8001c54 <HAL_GPIO_Init+0x228>
 8001c36:	2308      	movs	r3, #8
 8001c38:	e00c      	b.n	8001c54 <HAL_GPIO_Init+0x228>
 8001c3a:	2306      	movs	r3, #6
 8001c3c:	e00a      	b.n	8001c54 <HAL_GPIO_Init+0x228>
 8001c3e:	2305      	movs	r3, #5
 8001c40:	e008      	b.n	8001c54 <HAL_GPIO_Init+0x228>
 8001c42:	2304      	movs	r3, #4
 8001c44:	e006      	b.n	8001c54 <HAL_GPIO_Init+0x228>
 8001c46:	2303      	movs	r3, #3
 8001c48:	e004      	b.n	8001c54 <HAL_GPIO_Init+0x228>
 8001c4a:	2302      	movs	r3, #2
 8001c4c:	e002      	b.n	8001c54 <HAL_GPIO_Init+0x228>
 8001c4e:	2301      	movs	r3, #1
 8001c50:	e000      	b.n	8001c54 <HAL_GPIO_Init+0x228>
 8001c52:	2300      	movs	r3, #0
 8001c54:	69fa      	ldr	r2, [r7, #28]
 8001c56:	f002 0203 	and.w	r2, r2, #3
 8001c5a:	0092      	lsls	r2, r2, #2
 8001c5c:	4093      	lsls	r3, r2
 8001c5e:	69ba      	ldr	r2, [r7, #24]
 8001c60:	4313      	orrs	r3, r2
 8001c62:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001c64:	4935      	ldr	r1, [pc, #212]	; (8001d3c <HAL_GPIO_Init+0x310>)
 8001c66:	69fb      	ldr	r3, [r7, #28]
 8001c68:	089b      	lsrs	r3, r3, #2
 8001c6a:	3302      	adds	r3, #2
 8001c6c:	69ba      	ldr	r2, [r7, #24]
 8001c6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c72:	4b3b      	ldr	r3, [pc, #236]	; (8001d60 <HAL_GPIO_Init+0x334>)
 8001c74:	689b      	ldr	r3, [r3, #8]
 8001c76:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c78:	693b      	ldr	r3, [r7, #16]
 8001c7a:	43db      	mvns	r3, r3
 8001c7c:	69ba      	ldr	r2, [r7, #24]
 8001c7e:	4013      	ands	r3, r2
 8001c80:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	685b      	ldr	r3, [r3, #4]
 8001c86:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d003      	beq.n	8001c96 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001c8e:	69ba      	ldr	r2, [r7, #24]
 8001c90:	693b      	ldr	r3, [r7, #16]
 8001c92:	4313      	orrs	r3, r2
 8001c94:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001c96:	4a32      	ldr	r2, [pc, #200]	; (8001d60 <HAL_GPIO_Init+0x334>)
 8001c98:	69bb      	ldr	r3, [r7, #24]
 8001c9a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c9c:	4b30      	ldr	r3, [pc, #192]	; (8001d60 <HAL_GPIO_Init+0x334>)
 8001c9e:	68db      	ldr	r3, [r3, #12]
 8001ca0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ca2:	693b      	ldr	r3, [r7, #16]
 8001ca4:	43db      	mvns	r3, r3
 8001ca6:	69ba      	ldr	r2, [r7, #24]
 8001ca8:	4013      	ands	r3, r2
 8001caa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	685b      	ldr	r3, [r3, #4]
 8001cb0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d003      	beq.n	8001cc0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001cb8:	69ba      	ldr	r2, [r7, #24]
 8001cba:	693b      	ldr	r3, [r7, #16]
 8001cbc:	4313      	orrs	r3, r2
 8001cbe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001cc0:	4a27      	ldr	r2, [pc, #156]	; (8001d60 <HAL_GPIO_Init+0x334>)
 8001cc2:	69bb      	ldr	r3, [r7, #24]
 8001cc4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001cc6:	4b26      	ldr	r3, [pc, #152]	; (8001d60 <HAL_GPIO_Init+0x334>)
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ccc:	693b      	ldr	r3, [r7, #16]
 8001cce:	43db      	mvns	r3, r3
 8001cd0:	69ba      	ldr	r2, [r7, #24]
 8001cd2:	4013      	ands	r3, r2
 8001cd4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	685b      	ldr	r3, [r3, #4]
 8001cda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d003      	beq.n	8001cea <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001ce2:	69ba      	ldr	r2, [r7, #24]
 8001ce4:	693b      	ldr	r3, [r7, #16]
 8001ce6:	4313      	orrs	r3, r2
 8001ce8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001cea:	4a1d      	ldr	r2, [pc, #116]	; (8001d60 <HAL_GPIO_Init+0x334>)
 8001cec:	69bb      	ldr	r3, [r7, #24]
 8001cee:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001cf0:	4b1b      	ldr	r3, [pc, #108]	; (8001d60 <HAL_GPIO_Init+0x334>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cf6:	693b      	ldr	r3, [r7, #16]
 8001cf8:	43db      	mvns	r3, r3
 8001cfa:	69ba      	ldr	r2, [r7, #24]
 8001cfc:	4013      	ands	r3, r2
 8001cfe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d003      	beq.n	8001d14 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001d0c:	69ba      	ldr	r2, [r7, #24]
 8001d0e:	693b      	ldr	r3, [r7, #16]
 8001d10:	4313      	orrs	r3, r2
 8001d12:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001d14:	4a12      	ldr	r2, [pc, #72]	; (8001d60 <HAL_GPIO_Init+0x334>)
 8001d16:	69bb      	ldr	r3, [r7, #24]
 8001d18:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001d1a:	69fb      	ldr	r3, [r7, #28]
 8001d1c:	3301      	adds	r3, #1
 8001d1e:	61fb      	str	r3, [r7, #28]
 8001d20:	69fb      	ldr	r3, [r7, #28]
 8001d22:	2b0f      	cmp	r3, #15
 8001d24:	f67f ae92 	bls.w	8001a4c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001d28:	bf00      	nop
 8001d2a:	bf00      	nop
 8001d2c:	3724      	adds	r7, #36	; 0x24
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d34:	4770      	bx	lr
 8001d36:	bf00      	nop
 8001d38:	40023800 	.word	0x40023800
 8001d3c:	40013800 	.word	0x40013800
 8001d40:	40020000 	.word	0x40020000
 8001d44:	40020400 	.word	0x40020400
 8001d48:	40020800 	.word	0x40020800
 8001d4c:	40020c00 	.word	0x40020c00
 8001d50:	40021000 	.word	0x40021000
 8001d54:	40021400 	.word	0x40021400
 8001d58:	40021800 	.word	0x40021800
 8001d5c:	40021c00 	.word	0x40021c00
 8001d60:	40013c00 	.word	0x40013c00

08001d64 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d64:	b480      	push	{r7}
 8001d66:	b083      	sub	sp, #12
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
 8001d6c:	460b      	mov	r3, r1
 8001d6e:	807b      	strh	r3, [r7, #2]
 8001d70:	4613      	mov	r3, r2
 8001d72:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d74:	787b      	ldrb	r3, [r7, #1]
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d003      	beq.n	8001d82 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d7a:	887a      	ldrh	r2, [r7, #2]
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001d80:	e003      	b.n	8001d8a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001d82:	887b      	ldrh	r3, [r7, #2]
 8001d84:	041a      	lsls	r2, r3, #16
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	619a      	str	r2, [r3, #24]
}
 8001d8a:	bf00      	nop
 8001d8c:	370c      	adds	r7, #12
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d94:	4770      	bx	lr
	...

08001d98 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001d9c:	4b05      	ldr	r3, [pc, #20]	; (8001db4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	4a04      	ldr	r2, [pc, #16]	; (8001db4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001da2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001da6:	6013      	str	r3, [r2, #0]
}
 8001da8:	bf00      	nop
 8001daa:	46bd      	mov	sp, r7
 8001dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db0:	4770      	bx	lr
 8001db2:	bf00      	nop
 8001db4:	40007000 	.word	0x40007000

08001db8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b086      	sub	sp, #24
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d101      	bne.n	8001dce <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001dca:	2301      	movs	r3, #1
 8001dcc:	e291      	b.n	80022f2 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f003 0301 	and.w	r3, r3, #1
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	f000 8087 	beq.w	8001eea <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001ddc:	4b96      	ldr	r3, [pc, #600]	; (8002038 <HAL_RCC_OscConfig+0x280>)
 8001dde:	689b      	ldr	r3, [r3, #8]
 8001de0:	f003 030c 	and.w	r3, r3, #12
 8001de4:	2b04      	cmp	r3, #4
 8001de6:	d00c      	beq.n	8001e02 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001de8:	4b93      	ldr	r3, [pc, #588]	; (8002038 <HAL_RCC_OscConfig+0x280>)
 8001dea:	689b      	ldr	r3, [r3, #8]
 8001dec:	f003 030c 	and.w	r3, r3, #12
 8001df0:	2b08      	cmp	r3, #8
 8001df2:	d112      	bne.n	8001e1a <HAL_RCC_OscConfig+0x62>
 8001df4:	4b90      	ldr	r3, [pc, #576]	; (8002038 <HAL_RCC_OscConfig+0x280>)
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001dfc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001e00:	d10b      	bne.n	8001e1a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e02:	4b8d      	ldr	r3, [pc, #564]	; (8002038 <HAL_RCC_OscConfig+0x280>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d06c      	beq.n	8001ee8 <HAL_RCC_OscConfig+0x130>
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	685b      	ldr	r3, [r3, #4]
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d168      	bne.n	8001ee8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001e16:	2301      	movs	r3, #1
 8001e18:	e26b      	b.n	80022f2 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	685b      	ldr	r3, [r3, #4]
 8001e1e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e22:	d106      	bne.n	8001e32 <HAL_RCC_OscConfig+0x7a>
 8001e24:	4b84      	ldr	r3, [pc, #528]	; (8002038 <HAL_RCC_OscConfig+0x280>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4a83      	ldr	r2, [pc, #524]	; (8002038 <HAL_RCC_OscConfig+0x280>)
 8001e2a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e2e:	6013      	str	r3, [r2, #0]
 8001e30:	e02e      	b.n	8001e90 <HAL_RCC_OscConfig+0xd8>
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	685b      	ldr	r3, [r3, #4]
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d10c      	bne.n	8001e54 <HAL_RCC_OscConfig+0x9c>
 8001e3a:	4b7f      	ldr	r3, [pc, #508]	; (8002038 <HAL_RCC_OscConfig+0x280>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	4a7e      	ldr	r2, [pc, #504]	; (8002038 <HAL_RCC_OscConfig+0x280>)
 8001e40:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e44:	6013      	str	r3, [r2, #0]
 8001e46:	4b7c      	ldr	r3, [pc, #496]	; (8002038 <HAL_RCC_OscConfig+0x280>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	4a7b      	ldr	r2, [pc, #492]	; (8002038 <HAL_RCC_OscConfig+0x280>)
 8001e4c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e50:	6013      	str	r3, [r2, #0]
 8001e52:	e01d      	b.n	8001e90 <HAL_RCC_OscConfig+0xd8>
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	685b      	ldr	r3, [r3, #4]
 8001e58:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e5c:	d10c      	bne.n	8001e78 <HAL_RCC_OscConfig+0xc0>
 8001e5e:	4b76      	ldr	r3, [pc, #472]	; (8002038 <HAL_RCC_OscConfig+0x280>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	4a75      	ldr	r2, [pc, #468]	; (8002038 <HAL_RCC_OscConfig+0x280>)
 8001e64:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e68:	6013      	str	r3, [r2, #0]
 8001e6a:	4b73      	ldr	r3, [pc, #460]	; (8002038 <HAL_RCC_OscConfig+0x280>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	4a72      	ldr	r2, [pc, #456]	; (8002038 <HAL_RCC_OscConfig+0x280>)
 8001e70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e74:	6013      	str	r3, [r2, #0]
 8001e76:	e00b      	b.n	8001e90 <HAL_RCC_OscConfig+0xd8>
 8001e78:	4b6f      	ldr	r3, [pc, #444]	; (8002038 <HAL_RCC_OscConfig+0x280>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4a6e      	ldr	r2, [pc, #440]	; (8002038 <HAL_RCC_OscConfig+0x280>)
 8001e7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e82:	6013      	str	r3, [r2, #0]
 8001e84:	4b6c      	ldr	r3, [pc, #432]	; (8002038 <HAL_RCC_OscConfig+0x280>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	4a6b      	ldr	r2, [pc, #428]	; (8002038 <HAL_RCC_OscConfig+0x280>)
 8001e8a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e8e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	685b      	ldr	r3, [r3, #4]
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d013      	beq.n	8001ec0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e98:	f7ff fbf4 	bl	8001684 <HAL_GetTick>
 8001e9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e9e:	e008      	b.n	8001eb2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ea0:	f7ff fbf0 	bl	8001684 <HAL_GetTick>
 8001ea4:	4602      	mov	r2, r0
 8001ea6:	693b      	ldr	r3, [r7, #16]
 8001ea8:	1ad3      	subs	r3, r2, r3
 8001eaa:	2b64      	cmp	r3, #100	; 0x64
 8001eac:	d901      	bls.n	8001eb2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001eae:	2303      	movs	r3, #3
 8001eb0:	e21f      	b.n	80022f2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001eb2:	4b61      	ldr	r3, [pc, #388]	; (8002038 <HAL_RCC_OscConfig+0x280>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d0f0      	beq.n	8001ea0 <HAL_RCC_OscConfig+0xe8>
 8001ebe:	e014      	b.n	8001eea <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ec0:	f7ff fbe0 	bl	8001684 <HAL_GetTick>
 8001ec4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ec6:	e008      	b.n	8001eda <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ec8:	f7ff fbdc 	bl	8001684 <HAL_GetTick>
 8001ecc:	4602      	mov	r2, r0
 8001ece:	693b      	ldr	r3, [r7, #16]
 8001ed0:	1ad3      	subs	r3, r2, r3
 8001ed2:	2b64      	cmp	r3, #100	; 0x64
 8001ed4:	d901      	bls.n	8001eda <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001ed6:	2303      	movs	r3, #3
 8001ed8:	e20b      	b.n	80022f2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001eda:	4b57      	ldr	r3, [pc, #348]	; (8002038 <HAL_RCC_OscConfig+0x280>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d1f0      	bne.n	8001ec8 <HAL_RCC_OscConfig+0x110>
 8001ee6:	e000      	b.n	8001eea <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ee8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f003 0302 	and.w	r3, r3, #2
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d069      	beq.n	8001fca <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001ef6:	4b50      	ldr	r3, [pc, #320]	; (8002038 <HAL_RCC_OscConfig+0x280>)
 8001ef8:	689b      	ldr	r3, [r3, #8]
 8001efa:	f003 030c 	and.w	r3, r3, #12
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d00b      	beq.n	8001f1a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f02:	4b4d      	ldr	r3, [pc, #308]	; (8002038 <HAL_RCC_OscConfig+0x280>)
 8001f04:	689b      	ldr	r3, [r3, #8]
 8001f06:	f003 030c 	and.w	r3, r3, #12
 8001f0a:	2b08      	cmp	r3, #8
 8001f0c:	d11c      	bne.n	8001f48 <HAL_RCC_OscConfig+0x190>
 8001f0e:	4b4a      	ldr	r3, [pc, #296]	; (8002038 <HAL_RCC_OscConfig+0x280>)
 8001f10:	685b      	ldr	r3, [r3, #4]
 8001f12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d116      	bne.n	8001f48 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f1a:	4b47      	ldr	r3, [pc, #284]	; (8002038 <HAL_RCC_OscConfig+0x280>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f003 0302 	and.w	r3, r3, #2
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d005      	beq.n	8001f32 <HAL_RCC_OscConfig+0x17a>
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	68db      	ldr	r3, [r3, #12]
 8001f2a:	2b01      	cmp	r3, #1
 8001f2c:	d001      	beq.n	8001f32 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001f2e:	2301      	movs	r3, #1
 8001f30:	e1df      	b.n	80022f2 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f32:	4b41      	ldr	r3, [pc, #260]	; (8002038 <HAL_RCC_OscConfig+0x280>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	691b      	ldr	r3, [r3, #16]
 8001f3e:	00db      	lsls	r3, r3, #3
 8001f40:	493d      	ldr	r1, [pc, #244]	; (8002038 <HAL_RCC_OscConfig+0x280>)
 8001f42:	4313      	orrs	r3, r2
 8001f44:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f46:	e040      	b.n	8001fca <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	68db      	ldr	r3, [r3, #12]
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d023      	beq.n	8001f98 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f50:	4b39      	ldr	r3, [pc, #228]	; (8002038 <HAL_RCC_OscConfig+0x280>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4a38      	ldr	r2, [pc, #224]	; (8002038 <HAL_RCC_OscConfig+0x280>)
 8001f56:	f043 0301 	orr.w	r3, r3, #1
 8001f5a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f5c:	f7ff fb92 	bl	8001684 <HAL_GetTick>
 8001f60:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f62:	e008      	b.n	8001f76 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f64:	f7ff fb8e 	bl	8001684 <HAL_GetTick>
 8001f68:	4602      	mov	r2, r0
 8001f6a:	693b      	ldr	r3, [r7, #16]
 8001f6c:	1ad3      	subs	r3, r2, r3
 8001f6e:	2b02      	cmp	r3, #2
 8001f70:	d901      	bls.n	8001f76 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001f72:	2303      	movs	r3, #3
 8001f74:	e1bd      	b.n	80022f2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f76:	4b30      	ldr	r3, [pc, #192]	; (8002038 <HAL_RCC_OscConfig+0x280>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f003 0302 	and.w	r3, r3, #2
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d0f0      	beq.n	8001f64 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f82:	4b2d      	ldr	r3, [pc, #180]	; (8002038 <HAL_RCC_OscConfig+0x280>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	691b      	ldr	r3, [r3, #16]
 8001f8e:	00db      	lsls	r3, r3, #3
 8001f90:	4929      	ldr	r1, [pc, #164]	; (8002038 <HAL_RCC_OscConfig+0x280>)
 8001f92:	4313      	orrs	r3, r2
 8001f94:	600b      	str	r3, [r1, #0]
 8001f96:	e018      	b.n	8001fca <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f98:	4b27      	ldr	r3, [pc, #156]	; (8002038 <HAL_RCC_OscConfig+0x280>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4a26      	ldr	r2, [pc, #152]	; (8002038 <HAL_RCC_OscConfig+0x280>)
 8001f9e:	f023 0301 	bic.w	r3, r3, #1
 8001fa2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fa4:	f7ff fb6e 	bl	8001684 <HAL_GetTick>
 8001fa8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001faa:	e008      	b.n	8001fbe <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001fac:	f7ff fb6a 	bl	8001684 <HAL_GetTick>
 8001fb0:	4602      	mov	r2, r0
 8001fb2:	693b      	ldr	r3, [r7, #16]
 8001fb4:	1ad3      	subs	r3, r2, r3
 8001fb6:	2b02      	cmp	r3, #2
 8001fb8:	d901      	bls.n	8001fbe <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001fba:	2303      	movs	r3, #3
 8001fbc:	e199      	b.n	80022f2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fbe:	4b1e      	ldr	r3, [pc, #120]	; (8002038 <HAL_RCC_OscConfig+0x280>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f003 0302 	and.w	r3, r3, #2
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d1f0      	bne.n	8001fac <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f003 0308 	and.w	r3, r3, #8
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d038      	beq.n	8002048 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	695b      	ldr	r3, [r3, #20]
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d019      	beq.n	8002012 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001fde:	4b16      	ldr	r3, [pc, #88]	; (8002038 <HAL_RCC_OscConfig+0x280>)
 8001fe0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001fe2:	4a15      	ldr	r2, [pc, #84]	; (8002038 <HAL_RCC_OscConfig+0x280>)
 8001fe4:	f043 0301 	orr.w	r3, r3, #1
 8001fe8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fea:	f7ff fb4b 	bl	8001684 <HAL_GetTick>
 8001fee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ff0:	e008      	b.n	8002004 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ff2:	f7ff fb47 	bl	8001684 <HAL_GetTick>
 8001ff6:	4602      	mov	r2, r0
 8001ff8:	693b      	ldr	r3, [r7, #16]
 8001ffa:	1ad3      	subs	r3, r2, r3
 8001ffc:	2b02      	cmp	r3, #2
 8001ffe:	d901      	bls.n	8002004 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002000:	2303      	movs	r3, #3
 8002002:	e176      	b.n	80022f2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002004:	4b0c      	ldr	r3, [pc, #48]	; (8002038 <HAL_RCC_OscConfig+0x280>)
 8002006:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002008:	f003 0302 	and.w	r3, r3, #2
 800200c:	2b00      	cmp	r3, #0
 800200e:	d0f0      	beq.n	8001ff2 <HAL_RCC_OscConfig+0x23a>
 8002010:	e01a      	b.n	8002048 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002012:	4b09      	ldr	r3, [pc, #36]	; (8002038 <HAL_RCC_OscConfig+0x280>)
 8002014:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002016:	4a08      	ldr	r2, [pc, #32]	; (8002038 <HAL_RCC_OscConfig+0x280>)
 8002018:	f023 0301 	bic.w	r3, r3, #1
 800201c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800201e:	f7ff fb31 	bl	8001684 <HAL_GetTick>
 8002022:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002024:	e00a      	b.n	800203c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002026:	f7ff fb2d 	bl	8001684 <HAL_GetTick>
 800202a:	4602      	mov	r2, r0
 800202c:	693b      	ldr	r3, [r7, #16]
 800202e:	1ad3      	subs	r3, r2, r3
 8002030:	2b02      	cmp	r3, #2
 8002032:	d903      	bls.n	800203c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002034:	2303      	movs	r3, #3
 8002036:	e15c      	b.n	80022f2 <HAL_RCC_OscConfig+0x53a>
 8002038:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800203c:	4b91      	ldr	r3, [pc, #580]	; (8002284 <HAL_RCC_OscConfig+0x4cc>)
 800203e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002040:	f003 0302 	and.w	r3, r3, #2
 8002044:	2b00      	cmp	r3, #0
 8002046:	d1ee      	bne.n	8002026 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f003 0304 	and.w	r3, r3, #4
 8002050:	2b00      	cmp	r3, #0
 8002052:	f000 80a4 	beq.w	800219e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002056:	4b8b      	ldr	r3, [pc, #556]	; (8002284 <HAL_RCC_OscConfig+0x4cc>)
 8002058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800205a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800205e:	2b00      	cmp	r3, #0
 8002060:	d10d      	bne.n	800207e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002062:	4b88      	ldr	r3, [pc, #544]	; (8002284 <HAL_RCC_OscConfig+0x4cc>)
 8002064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002066:	4a87      	ldr	r2, [pc, #540]	; (8002284 <HAL_RCC_OscConfig+0x4cc>)
 8002068:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800206c:	6413      	str	r3, [r2, #64]	; 0x40
 800206e:	4b85      	ldr	r3, [pc, #532]	; (8002284 <HAL_RCC_OscConfig+0x4cc>)
 8002070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002072:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002076:	60bb      	str	r3, [r7, #8]
 8002078:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800207a:	2301      	movs	r3, #1
 800207c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800207e:	4b82      	ldr	r3, [pc, #520]	; (8002288 <HAL_RCC_OscConfig+0x4d0>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002086:	2b00      	cmp	r3, #0
 8002088:	d118      	bne.n	80020bc <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800208a:	4b7f      	ldr	r3, [pc, #508]	; (8002288 <HAL_RCC_OscConfig+0x4d0>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	4a7e      	ldr	r2, [pc, #504]	; (8002288 <HAL_RCC_OscConfig+0x4d0>)
 8002090:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002094:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002096:	f7ff faf5 	bl	8001684 <HAL_GetTick>
 800209a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800209c:	e008      	b.n	80020b0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800209e:	f7ff faf1 	bl	8001684 <HAL_GetTick>
 80020a2:	4602      	mov	r2, r0
 80020a4:	693b      	ldr	r3, [r7, #16]
 80020a6:	1ad3      	subs	r3, r2, r3
 80020a8:	2b64      	cmp	r3, #100	; 0x64
 80020aa:	d901      	bls.n	80020b0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80020ac:	2303      	movs	r3, #3
 80020ae:	e120      	b.n	80022f2 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80020b0:	4b75      	ldr	r3, [pc, #468]	; (8002288 <HAL_RCC_OscConfig+0x4d0>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d0f0      	beq.n	800209e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	689b      	ldr	r3, [r3, #8]
 80020c0:	2b01      	cmp	r3, #1
 80020c2:	d106      	bne.n	80020d2 <HAL_RCC_OscConfig+0x31a>
 80020c4:	4b6f      	ldr	r3, [pc, #444]	; (8002284 <HAL_RCC_OscConfig+0x4cc>)
 80020c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020c8:	4a6e      	ldr	r2, [pc, #440]	; (8002284 <HAL_RCC_OscConfig+0x4cc>)
 80020ca:	f043 0301 	orr.w	r3, r3, #1
 80020ce:	6713      	str	r3, [r2, #112]	; 0x70
 80020d0:	e02d      	b.n	800212e <HAL_RCC_OscConfig+0x376>
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	689b      	ldr	r3, [r3, #8]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d10c      	bne.n	80020f4 <HAL_RCC_OscConfig+0x33c>
 80020da:	4b6a      	ldr	r3, [pc, #424]	; (8002284 <HAL_RCC_OscConfig+0x4cc>)
 80020dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020de:	4a69      	ldr	r2, [pc, #420]	; (8002284 <HAL_RCC_OscConfig+0x4cc>)
 80020e0:	f023 0301 	bic.w	r3, r3, #1
 80020e4:	6713      	str	r3, [r2, #112]	; 0x70
 80020e6:	4b67      	ldr	r3, [pc, #412]	; (8002284 <HAL_RCC_OscConfig+0x4cc>)
 80020e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020ea:	4a66      	ldr	r2, [pc, #408]	; (8002284 <HAL_RCC_OscConfig+0x4cc>)
 80020ec:	f023 0304 	bic.w	r3, r3, #4
 80020f0:	6713      	str	r3, [r2, #112]	; 0x70
 80020f2:	e01c      	b.n	800212e <HAL_RCC_OscConfig+0x376>
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	689b      	ldr	r3, [r3, #8]
 80020f8:	2b05      	cmp	r3, #5
 80020fa:	d10c      	bne.n	8002116 <HAL_RCC_OscConfig+0x35e>
 80020fc:	4b61      	ldr	r3, [pc, #388]	; (8002284 <HAL_RCC_OscConfig+0x4cc>)
 80020fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002100:	4a60      	ldr	r2, [pc, #384]	; (8002284 <HAL_RCC_OscConfig+0x4cc>)
 8002102:	f043 0304 	orr.w	r3, r3, #4
 8002106:	6713      	str	r3, [r2, #112]	; 0x70
 8002108:	4b5e      	ldr	r3, [pc, #376]	; (8002284 <HAL_RCC_OscConfig+0x4cc>)
 800210a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800210c:	4a5d      	ldr	r2, [pc, #372]	; (8002284 <HAL_RCC_OscConfig+0x4cc>)
 800210e:	f043 0301 	orr.w	r3, r3, #1
 8002112:	6713      	str	r3, [r2, #112]	; 0x70
 8002114:	e00b      	b.n	800212e <HAL_RCC_OscConfig+0x376>
 8002116:	4b5b      	ldr	r3, [pc, #364]	; (8002284 <HAL_RCC_OscConfig+0x4cc>)
 8002118:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800211a:	4a5a      	ldr	r2, [pc, #360]	; (8002284 <HAL_RCC_OscConfig+0x4cc>)
 800211c:	f023 0301 	bic.w	r3, r3, #1
 8002120:	6713      	str	r3, [r2, #112]	; 0x70
 8002122:	4b58      	ldr	r3, [pc, #352]	; (8002284 <HAL_RCC_OscConfig+0x4cc>)
 8002124:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002126:	4a57      	ldr	r2, [pc, #348]	; (8002284 <HAL_RCC_OscConfig+0x4cc>)
 8002128:	f023 0304 	bic.w	r3, r3, #4
 800212c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	689b      	ldr	r3, [r3, #8]
 8002132:	2b00      	cmp	r3, #0
 8002134:	d015      	beq.n	8002162 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002136:	f7ff faa5 	bl	8001684 <HAL_GetTick>
 800213a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800213c:	e00a      	b.n	8002154 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800213e:	f7ff faa1 	bl	8001684 <HAL_GetTick>
 8002142:	4602      	mov	r2, r0
 8002144:	693b      	ldr	r3, [r7, #16]
 8002146:	1ad3      	subs	r3, r2, r3
 8002148:	f241 3288 	movw	r2, #5000	; 0x1388
 800214c:	4293      	cmp	r3, r2
 800214e:	d901      	bls.n	8002154 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002150:	2303      	movs	r3, #3
 8002152:	e0ce      	b.n	80022f2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002154:	4b4b      	ldr	r3, [pc, #300]	; (8002284 <HAL_RCC_OscConfig+0x4cc>)
 8002156:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002158:	f003 0302 	and.w	r3, r3, #2
 800215c:	2b00      	cmp	r3, #0
 800215e:	d0ee      	beq.n	800213e <HAL_RCC_OscConfig+0x386>
 8002160:	e014      	b.n	800218c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002162:	f7ff fa8f 	bl	8001684 <HAL_GetTick>
 8002166:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002168:	e00a      	b.n	8002180 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800216a:	f7ff fa8b 	bl	8001684 <HAL_GetTick>
 800216e:	4602      	mov	r2, r0
 8002170:	693b      	ldr	r3, [r7, #16]
 8002172:	1ad3      	subs	r3, r2, r3
 8002174:	f241 3288 	movw	r2, #5000	; 0x1388
 8002178:	4293      	cmp	r3, r2
 800217a:	d901      	bls.n	8002180 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800217c:	2303      	movs	r3, #3
 800217e:	e0b8      	b.n	80022f2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002180:	4b40      	ldr	r3, [pc, #256]	; (8002284 <HAL_RCC_OscConfig+0x4cc>)
 8002182:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002184:	f003 0302 	and.w	r3, r3, #2
 8002188:	2b00      	cmp	r3, #0
 800218a:	d1ee      	bne.n	800216a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800218c:	7dfb      	ldrb	r3, [r7, #23]
 800218e:	2b01      	cmp	r3, #1
 8002190:	d105      	bne.n	800219e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002192:	4b3c      	ldr	r3, [pc, #240]	; (8002284 <HAL_RCC_OscConfig+0x4cc>)
 8002194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002196:	4a3b      	ldr	r2, [pc, #236]	; (8002284 <HAL_RCC_OscConfig+0x4cc>)
 8002198:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800219c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	699b      	ldr	r3, [r3, #24]
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	f000 80a4 	beq.w	80022f0 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80021a8:	4b36      	ldr	r3, [pc, #216]	; (8002284 <HAL_RCC_OscConfig+0x4cc>)
 80021aa:	689b      	ldr	r3, [r3, #8]
 80021ac:	f003 030c 	and.w	r3, r3, #12
 80021b0:	2b08      	cmp	r3, #8
 80021b2:	d06b      	beq.n	800228c <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	699b      	ldr	r3, [r3, #24]
 80021b8:	2b02      	cmp	r3, #2
 80021ba:	d149      	bne.n	8002250 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021bc:	4b31      	ldr	r3, [pc, #196]	; (8002284 <HAL_RCC_OscConfig+0x4cc>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4a30      	ldr	r2, [pc, #192]	; (8002284 <HAL_RCC_OscConfig+0x4cc>)
 80021c2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80021c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021c8:	f7ff fa5c 	bl	8001684 <HAL_GetTick>
 80021cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021ce:	e008      	b.n	80021e2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021d0:	f7ff fa58 	bl	8001684 <HAL_GetTick>
 80021d4:	4602      	mov	r2, r0
 80021d6:	693b      	ldr	r3, [r7, #16]
 80021d8:	1ad3      	subs	r3, r2, r3
 80021da:	2b02      	cmp	r3, #2
 80021dc:	d901      	bls.n	80021e2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80021de:	2303      	movs	r3, #3
 80021e0:	e087      	b.n	80022f2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021e2:	4b28      	ldr	r3, [pc, #160]	; (8002284 <HAL_RCC_OscConfig+0x4cc>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d1f0      	bne.n	80021d0 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	69da      	ldr	r2, [r3, #28]
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6a1b      	ldr	r3, [r3, #32]
 80021f6:	431a      	orrs	r2, r3
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021fc:	019b      	lsls	r3, r3, #6
 80021fe:	431a      	orrs	r2, r3
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002204:	085b      	lsrs	r3, r3, #1
 8002206:	3b01      	subs	r3, #1
 8002208:	041b      	lsls	r3, r3, #16
 800220a:	431a      	orrs	r2, r3
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002210:	061b      	lsls	r3, r3, #24
 8002212:	4313      	orrs	r3, r2
 8002214:	4a1b      	ldr	r2, [pc, #108]	; (8002284 <HAL_RCC_OscConfig+0x4cc>)
 8002216:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800221a:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800221c:	4b19      	ldr	r3, [pc, #100]	; (8002284 <HAL_RCC_OscConfig+0x4cc>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4a18      	ldr	r2, [pc, #96]	; (8002284 <HAL_RCC_OscConfig+0x4cc>)
 8002222:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002226:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002228:	f7ff fa2c 	bl	8001684 <HAL_GetTick>
 800222c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800222e:	e008      	b.n	8002242 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002230:	f7ff fa28 	bl	8001684 <HAL_GetTick>
 8002234:	4602      	mov	r2, r0
 8002236:	693b      	ldr	r3, [r7, #16]
 8002238:	1ad3      	subs	r3, r2, r3
 800223a:	2b02      	cmp	r3, #2
 800223c:	d901      	bls.n	8002242 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800223e:	2303      	movs	r3, #3
 8002240:	e057      	b.n	80022f2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002242:	4b10      	ldr	r3, [pc, #64]	; (8002284 <HAL_RCC_OscConfig+0x4cc>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800224a:	2b00      	cmp	r3, #0
 800224c:	d0f0      	beq.n	8002230 <HAL_RCC_OscConfig+0x478>
 800224e:	e04f      	b.n	80022f0 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002250:	4b0c      	ldr	r3, [pc, #48]	; (8002284 <HAL_RCC_OscConfig+0x4cc>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	4a0b      	ldr	r2, [pc, #44]	; (8002284 <HAL_RCC_OscConfig+0x4cc>)
 8002256:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800225a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800225c:	f7ff fa12 	bl	8001684 <HAL_GetTick>
 8002260:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002262:	e008      	b.n	8002276 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002264:	f7ff fa0e 	bl	8001684 <HAL_GetTick>
 8002268:	4602      	mov	r2, r0
 800226a:	693b      	ldr	r3, [r7, #16]
 800226c:	1ad3      	subs	r3, r2, r3
 800226e:	2b02      	cmp	r3, #2
 8002270:	d901      	bls.n	8002276 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8002272:	2303      	movs	r3, #3
 8002274:	e03d      	b.n	80022f2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002276:	4b03      	ldr	r3, [pc, #12]	; (8002284 <HAL_RCC_OscConfig+0x4cc>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800227e:	2b00      	cmp	r3, #0
 8002280:	d1f0      	bne.n	8002264 <HAL_RCC_OscConfig+0x4ac>
 8002282:	e035      	b.n	80022f0 <HAL_RCC_OscConfig+0x538>
 8002284:	40023800 	.word	0x40023800
 8002288:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800228c:	4b1b      	ldr	r3, [pc, #108]	; (80022fc <HAL_RCC_OscConfig+0x544>)
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	699b      	ldr	r3, [r3, #24]
 8002296:	2b01      	cmp	r3, #1
 8002298:	d028      	beq.n	80022ec <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80022a4:	429a      	cmp	r2, r3
 80022a6:	d121      	bne.n	80022ec <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022b2:	429a      	cmp	r2, r3
 80022b4:	d11a      	bne.n	80022ec <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80022b6:	68fa      	ldr	r2, [r7, #12]
 80022b8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80022bc:	4013      	ands	r3, r2
 80022be:	687a      	ldr	r2, [r7, #4]
 80022c0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80022c2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80022c4:	4293      	cmp	r3, r2
 80022c6:	d111      	bne.n	80022ec <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022d2:	085b      	lsrs	r3, r3, #1
 80022d4:	3b01      	subs	r3, #1
 80022d6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80022d8:	429a      	cmp	r2, r3
 80022da:	d107      	bne.n	80022ec <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022e6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80022e8:	429a      	cmp	r2, r3
 80022ea:	d001      	beq.n	80022f0 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80022ec:	2301      	movs	r3, #1
 80022ee:	e000      	b.n	80022f2 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80022f0:	2300      	movs	r3, #0
}
 80022f2:	4618      	mov	r0, r3
 80022f4:	3718      	adds	r7, #24
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bd80      	pop	{r7, pc}
 80022fa:	bf00      	nop
 80022fc:	40023800 	.word	0x40023800

08002300 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b084      	sub	sp, #16
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
 8002308:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800230a:	2300      	movs	r3, #0
 800230c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	2b00      	cmp	r3, #0
 8002312:	d101      	bne.n	8002318 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002314:	2301      	movs	r3, #1
 8002316:	e0d0      	b.n	80024ba <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002318:	4b6a      	ldr	r3, [pc, #424]	; (80024c4 <HAL_RCC_ClockConfig+0x1c4>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f003 030f 	and.w	r3, r3, #15
 8002320:	683a      	ldr	r2, [r7, #0]
 8002322:	429a      	cmp	r2, r3
 8002324:	d910      	bls.n	8002348 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002326:	4b67      	ldr	r3, [pc, #412]	; (80024c4 <HAL_RCC_ClockConfig+0x1c4>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f023 020f 	bic.w	r2, r3, #15
 800232e:	4965      	ldr	r1, [pc, #404]	; (80024c4 <HAL_RCC_ClockConfig+0x1c4>)
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	4313      	orrs	r3, r2
 8002334:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002336:	4b63      	ldr	r3, [pc, #396]	; (80024c4 <HAL_RCC_ClockConfig+0x1c4>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f003 030f 	and.w	r3, r3, #15
 800233e:	683a      	ldr	r2, [r7, #0]
 8002340:	429a      	cmp	r2, r3
 8002342:	d001      	beq.n	8002348 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002344:	2301      	movs	r3, #1
 8002346:	e0b8      	b.n	80024ba <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f003 0302 	and.w	r3, r3, #2
 8002350:	2b00      	cmp	r3, #0
 8002352:	d020      	beq.n	8002396 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f003 0304 	and.w	r3, r3, #4
 800235c:	2b00      	cmp	r3, #0
 800235e:	d005      	beq.n	800236c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002360:	4b59      	ldr	r3, [pc, #356]	; (80024c8 <HAL_RCC_ClockConfig+0x1c8>)
 8002362:	689b      	ldr	r3, [r3, #8]
 8002364:	4a58      	ldr	r2, [pc, #352]	; (80024c8 <HAL_RCC_ClockConfig+0x1c8>)
 8002366:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800236a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f003 0308 	and.w	r3, r3, #8
 8002374:	2b00      	cmp	r3, #0
 8002376:	d005      	beq.n	8002384 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002378:	4b53      	ldr	r3, [pc, #332]	; (80024c8 <HAL_RCC_ClockConfig+0x1c8>)
 800237a:	689b      	ldr	r3, [r3, #8]
 800237c:	4a52      	ldr	r2, [pc, #328]	; (80024c8 <HAL_RCC_ClockConfig+0x1c8>)
 800237e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002382:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002384:	4b50      	ldr	r3, [pc, #320]	; (80024c8 <HAL_RCC_ClockConfig+0x1c8>)
 8002386:	689b      	ldr	r3, [r3, #8]
 8002388:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	689b      	ldr	r3, [r3, #8]
 8002390:	494d      	ldr	r1, [pc, #308]	; (80024c8 <HAL_RCC_ClockConfig+0x1c8>)
 8002392:	4313      	orrs	r3, r2
 8002394:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f003 0301 	and.w	r3, r3, #1
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d040      	beq.n	8002424 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	685b      	ldr	r3, [r3, #4]
 80023a6:	2b01      	cmp	r3, #1
 80023a8:	d107      	bne.n	80023ba <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023aa:	4b47      	ldr	r3, [pc, #284]	; (80024c8 <HAL_RCC_ClockConfig+0x1c8>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d115      	bne.n	80023e2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80023b6:	2301      	movs	r3, #1
 80023b8:	e07f      	b.n	80024ba <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	685b      	ldr	r3, [r3, #4]
 80023be:	2b02      	cmp	r3, #2
 80023c0:	d107      	bne.n	80023d2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023c2:	4b41      	ldr	r3, [pc, #260]	; (80024c8 <HAL_RCC_ClockConfig+0x1c8>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d109      	bne.n	80023e2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80023ce:	2301      	movs	r3, #1
 80023d0:	e073      	b.n	80024ba <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023d2:	4b3d      	ldr	r3, [pc, #244]	; (80024c8 <HAL_RCC_ClockConfig+0x1c8>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f003 0302 	and.w	r3, r3, #2
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d101      	bne.n	80023e2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80023de:	2301      	movs	r3, #1
 80023e0:	e06b      	b.n	80024ba <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80023e2:	4b39      	ldr	r3, [pc, #228]	; (80024c8 <HAL_RCC_ClockConfig+0x1c8>)
 80023e4:	689b      	ldr	r3, [r3, #8]
 80023e6:	f023 0203 	bic.w	r2, r3, #3
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	685b      	ldr	r3, [r3, #4]
 80023ee:	4936      	ldr	r1, [pc, #216]	; (80024c8 <HAL_RCC_ClockConfig+0x1c8>)
 80023f0:	4313      	orrs	r3, r2
 80023f2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80023f4:	f7ff f946 	bl	8001684 <HAL_GetTick>
 80023f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023fa:	e00a      	b.n	8002412 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023fc:	f7ff f942 	bl	8001684 <HAL_GetTick>
 8002400:	4602      	mov	r2, r0
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	1ad3      	subs	r3, r2, r3
 8002406:	f241 3288 	movw	r2, #5000	; 0x1388
 800240a:	4293      	cmp	r3, r2
 800240c:	d901      	bls.n	8002412 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800240e:	2303      	movs	r3, #3
 8002410:	e053      	b.n	80024ba <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002412:	4b2d      	ldr	r3, [pc, #180]	; (80024c8 <HAL_RCC_ClockConfig+0x1c8>)
 8002414:	689b      	ldr	r3, [r3, #8]
 8002416:	f003 020c 	and.w	r2, r3, #12
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	685b      	ldr	r3, [r3, #4]
 800241e:	009b      	lsls	r3, r3, #2
 8002420:	429a      	cmp	r2, r3
 8002422:	d1eb      	bne.n	80023fc <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002424:	4b27      	ldr	r3, [pc, #156]	; (80024c4 <HAL_RCC_ClockConfig+0x1c4>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f003 030f 	and.w	r3, r3, #15
 800242c:	683a      	ldr	r2, [r7, #0]
 800242e:	429a      	cmp	r2, r3
 8002430:	d210      	bcs.n	8002454 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002432:	4b24      	ldr	r3, [pc, #144]	; (80024c4 <HAL_RCC_ClockConfig+0x1c4>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f023 020f 	bic.w	r2, r3, #15
 800243a:	4922      	ldr	r1, [pc, #136]	; (80024c4 <HAL_RCC_ClockConfig+0x1c4>)
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	4313      	orrs	r3, r2
 8002440:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002442:	4b20      	ldr	r3, [pc, #128]	; (80024c4 <HAL_RCC_ClockConfig+0x1c4>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f003 030f 	and.w	r3, r3, #15
 800244a:	683a      	ldr	r2, [r7, #0]
 800244c:	429a      	cmp	r2, r3
 800244e:	d001      	beq.n	8002454 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002450:	2301      	movs	r3, #1
 8002452:	e032      	b.n	80024ba <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f003 0304 	and.w	r3, r3, #4
 800245c:	2b00      	cmp	r3, #0
 800245e:	d008      	beq.n	8002472 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002460:	4b19      	ldr	r3, [pc, #100]	; (80024c8 <HAL_RCC_ClockConfig+0x1c8>)
 8002462:	689b      	ldr	r3, [r3, #8]
 8002464:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	68db      	ldr	r3, [r3, #12]
 800246c:	4916      	ldr	r1, [pc, #88]	; (80024c8 <HAL_RCC_ClockConfig+0x1c8>)
 800246e:	4313      	orrs	r3, r2
 8002470:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f003 0308 	and.w	r3, r3, #8
 800247a:	2b00      	cmp	r3, #0
 800247c:	d009      	beq.n	8002492 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800247e:	4b12      	ldr	r3, [pc, #72]	; (80024c8 <HAL_RCC_ClockConfig+0x1c8>)
 8002480:	689b      	ldr	r3, [r3, #8]
 8002482:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	691b      	ldr	r3, [r3, #16]
 800248a:	00db      	lsls	r3, r3, #3
 800248c:	490e      	ldr	r1, [pc, #56]	; (80024c8 <HAL_RCC_ClockConfig+0x1c8>)
 800248e:	4313      	orrs	r3, r2
 8002490:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002492:	f000 f821 	bl	80024d8 <HAL_RCC_GetSysClockFreq>
 8002496:	4602      	mov	r2, r0
 8002498:	4b0b      	ldr	r3, [pc, #44]	; (80024c8 <HAL_RCC_ClockConfig+0x1c8>)
 800249a:	689b      	ldr	r3, [r3, #8]
 800249c:	091b      	lsrs	r3, r3, #4
 800249e:	f003 030f 	and.w	r3, r3, #15
 80024a2:	490a      	ldr	r1, [pc, #40]	; (80024cc <HAL_RCC_ClockConfig+0x1cc>)
 80024a4:	5ccb      	ldrb	r3, [r1, r3]
 80024a6:	fa22 f303 	lsr.w	r3, r2, r3
 80024aa:	4a09      	ldr	r2, [pc, #36]	; (80024d0 <HAL_RCC_ClockConfig+0x1d0>)
 80024ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80024ae:	4b09      	ldr	r3, [pc, #36]	; (80024d4 <HAL_RCC_ClockConfig+0x1d4>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	4618      	mov	r0, r3
 80024b4:	f7ff f8a2 	bl	80015fc <HAL_InitTick>

  return HAL_OK;
 80024b8:	2300      	movs	r3, #0
}
 80024ba:	4618      	mov	r0, r3
 80024bc:	3710      	adds	r7, #16
 80024be:	46bd      	mov	sp, r7
 80024c0:	bd80      	pop	{r7, pc}
 80024c2:	bf00      	nop
 80024c4:	40023c00 	.word	0x40023c00
 80024c8:	40023800 	.word	0x40023800
 80024cc:	08009250 	.word	0x08009250
 80024d0:	20000000 	.word	0x20000000
 80024d4:	20000004 	.word	0x20000004

080024d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80024dc:	b094      	sub	sp, #80	; 0x50
 80024de:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80024e0:	2300      	movs	r3, #0
 80024e2:	647b      	str	r3, [r7, #68]	; 0x44
 80024e4:	2300      	movs	r3, #0
 80024e6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80024e8:	2300      	movs	r3, #0
 80024ea:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 80024ec:	2300      	movs	r3, #0
 80024ee:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80024f0:	4b79      	ldr	r3, [pc, #484]	; (80026d8 <HAL_RCC_GetSysClockFreq+0x200>)
 80024f2:	689b      	ldr	r3, [r3, #8]
 80024f4:	f003 030c 	and.w	r3, r3, #12
 80024f8:	2b08      	cmp	r3, #8
 80024fa:	d00d      	beq.n	8002518 <HAL_RCC_GetSysClockFreq+0x40>
 80024fc:	2b08      	cmp	r3, #8
 80024fe:	f200 80e1 	bhi.w	80026c4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002502:	2b00      	cmp	r3, #0
 8002504:	d002      	beq.n	800250c <HAL_RCC_GetSysClockFreq+0x34>
 8002506:	2b04      	cmp	r3, #4
 8002508:	d003      	beq.n	8002512 <HAL_RCC_GetSysClockFreq+0x3a>
 800250a:	e0db      	b.n	80026c4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800250c:	4b73      	ldr	r3, [pc, #460]	; (80026dc <HAL_RCC_GetSysClockFreq+0x204>)
 800250e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002510:	e0db      	b.n	80026ca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002512:	4b73      	ldr	r3, [pc, #460]	; (80026e0 <HAL_RCC_GetSysClockFreq+0x208>)
 8002514:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002516:	e0d8      	b.n	80026ca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002518:	4b6f      	ldr	r3, [pc, #444]	; (80026d8 <HAL_RCC_GetSysClockFreq+0x200>)
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002520:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002522:	4b6d      	ldr	r3, [pc, #436]	; (80026d8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800252a:	2b00      	cmp	r3, #0
 800252c:	d063      	beq.n	80025f6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800252e:	4b6a      	ldr	r3, [pc, #424]	; (80026d8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002530:	685b      	ldr	r3, [r3, #4]
 8002532:	099b      	lsrs	r3, r3, #6
 8002534:	2200      	movs	r2, #0
 8002536:	63bb      	str	r3, [r7, #56]	; 0x38
 8002538:	63fa      	str	r2, [r7, #60]	; 0x3c
 800253a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800253c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002540:	633b      	str	r3, [r7, #48]	; 0x30
 8002542:	2300      	movs	r3, #0
 8002544:	637b      	str	r3, [r7, #52]	; 0x34
 8002546:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800254a:	4622      	mov	r2, r4
 800254c:	462b      	mov	r3, r5
 800254e:	f04f 0000 	mov.w	r0, #0
 8002552:	f04f 0100 	mov.w	r1, #0
 8002556:	0159      	lsls	r1, r3, #5
 8002558:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800255c:	0150      	lsls	r0, r2, #5
 800255e:	4602      	mov	r2, r0
 8002560:	460b      	mov	r3, r1
 8002562:	4621      	mov	r1, r4
 8002564:	1a51      	subs	r1, r2, r1
 8002566:	6139      	str	r1, [r7, #16]
 8002568:	4629      	mov	r1, r5
 800256a:	eb63 0301 	sbc.w	r3, r3, r1
 800256e:	617b      	str	r3, [r7, #20]
 8002570:	f04f 0200 	mov.w	r2, #0
 8002574:	f04f 0300 	mov.w	r3, #0
 8002578:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800257c:	4659      	mov	r1, fp
 800257e:	018b      	lsls	r3, r1, #6
 8002580:	4651      	mov	r1, sl
 8002582:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002586:	4651      	mov	r1, sl
 8002588:	018a      	lsls	r2, r1, #6
 800258a:	4651      	mov	r1, sl
 800258c:	ebb2 0801 	subs.w	r8, r2, r1
 8002590:	4659      	mov	r1, fp
 8002592:	eb63 0901 	sbc.w	r9, r3, r1
 8002596:	f04f 0200 	mov.w	r2, #0
 800259a:	f04f 0300 	mov.w	r3, #0
 800259e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80025a2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80025a6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80025aa:	4690      	mov	r8, r2
 80025ac:	4699      	mov	r9, r3
 80025ae:	4623      	mov	r3, r4
 80025b0:	eb18 0303 	adds.w	r3, r8, r3
 80025b4:	60bb      	str	r3, [r7, #8]
 80025b6:	462b      	mov	r3, r5
 80025b8:	eb49 0303 	adc.w	r3, r9, r3
 80025bc:	60fb      	str	r3, [r7, #12]
 80025be:	f04f 0200 	mov.w	r2, #0
 80025c2:	f04f 0300 	mov.w	r3, #0
 80025c6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80025ca:	4629      	mov	r1, r5
 80025cc:	024b      	lsls	r3, r1, #9
 80025ce:	4621      	mov	r1, r4
 80025d0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80025d4:	4621      	mov	r1, r4
 80025d6:	024a      	lsls	r2, r1, #9
 80025d8:	4610      	mov	r0, r2
 80025da:	4619      	mov	r1, r3
 80025dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80025de:	2200      	movs	r2, #0
 80025e0:	62bb      	str	r3, [r7, #40]	; 0x28
 80025e2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80025e4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80025e8:	f7fe fb06 	bl	8000bf8 <__aeabi_uldivmod>
 80025ec:	4602      	mov	r2, r0
 80025ee:	460b      	mov	r3, r1
 80025f0:	4613      	mov	r3, r2
 80025f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80025f4:	e058      	b.n	80026a8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80025f6:	4b38      	ldr	r3, [pc, #224]	; (80026d8 <HAL_RCC_GetSysClockFreq+0x200>)
 80025f8:	685b      	ldr	r3, [r3, #4]
 80025fa:	099b      	lsrs	r3, r3, #6
 80025fc:	2200      	movs	r2, #0
 80025fe:	4618      	mov	r0, r3
 8002600:	4611      	mov	r1, r2
 8002602:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002606:	623b      	str	r3, [r7, #32]
 8002608:	2300      	movs	r3, #0
 800260a:	627b      	str	r3, [r7, #36]	; 0x24
 800260c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002610:	4642      	mov	r2, r8
 8002612:	464b      	mov	r3, r9
 8002614:	f04f 0000 	mov.w	r0, #0
 8002618:	f04f 0100 	mov.w	r1, #0
 800261c:	0159      	lsls	r1, r3, #5
 800261e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002622:	0150      	lsls	r0, r2, #5
 8002624:	4602      	mov	r2, r0
 8002626:	460b      	mov	r3, r1
 8002628:	4641      	mov	r1, r8
 800262a:	ebb2 0a01 	subs.w	sl, r2, r1
 800262e:	4649      	mov	r1, r9
 8002630:	eb63 0b01 	sbc.w	fp, r3, r1
 8002634:	f04f 0200 	mov.w	r2, #0
 8002638:	f04f 0300 	mov.w	r3, #0
 800263c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002640:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002644:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002648:	ebb2 040a 	subs.w	r4, r2, sl
 800264c:	eb63 050b 	sbc.w	r5, r3, fp
 8002650:	f04f 0200 	mov.w	r2, #0
 8002654:	f04f 0300 	mov.w	r3, #0
 8002658:	00eb      	lsls	r3, r5, #3
 800265a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800265e:	00e2      	lsls	r2, r4, #3
 8002660:	4614      	mov	r4, r2
 8002662:	461d      	mov	r5, r3
 8002664:	4643      	mov	r3, r8
 8002666:	18e3      	adds	r3, r4, r3
 8002668:	603b      	str	r3, [r7, #0]
 800266a:	464b      	mov	r3, r9
 800266c:	eb45 0303 	adc.w	r3, r5, r3
 8002670:	607b      	str	r3, [r7, #4]
 8002672:	f04f 0200 	mov.w	r2, #0
 8002676:	f04f 0300 	mov.w	r3, #0
 800267a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800267e:	4629      	mov	r1, r5
 8002680:	028b      	lsls	r3, r1, #10
 8002682:	4621      	mov	r1, r4
 8002684:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002688:	4621      	mov	r1, r4
 800268a:	028a      	lsls	r2, r1, #10
 800268c:	4610      	mov	r0, r2
 800268e:	4619      	mov	r1, r3
 8002690:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002692:	2200      	movs	r2, #0
 8002694:	61bb      	str	r3, [r7, #24]
 8002696:	61fa      	str	r2, [r7, #28]
 8002698:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800269c:	f7fe faac 	bl	8000bf8 <__aeabi_uldivmod>
 80026a0:	4602      	mov	r2, r0
 80026a2:	460b      	mov	r3, r1
 80026a4:	4613      	mov	r3, r2
 80026a6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80026a8:	4b0b      	ldr	r3, [pc, #44]	; (80026d8 <HAL_RCC_GetSysClockFreq+0x200>)
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	0c1b      	lsrs	r3, r3, #16
 80026ae:	f003 0303 	and.w	r3, r3, #3
 80026b2:	3301      	adds	r3, #1
 80026b4:	005b      	lsls	r3, r3, #1
 80026b6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 80026b8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80026ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80026bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80026c0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80026c2:	e002      	b.n	80026ca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80026c4:	4b05      	ldr	r3, [pc, #20]	; (80026dc <HAL_RCC_GetSysClockFreq+0x204>)
 80026c6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80026c8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80026ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80026cc:	4618      	mov	r0, r3
 80026ce:	3750      	adds	r7, #80	; 0x50
 80026d0:	46bd      	mov	sp, r7
 80026d2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80026d6:	bf00      	nop
 80026d8:	40023800 	.word	0x40023800
 80026dc:	00f42400 	.word	0x00f42400
 80026e0:	007a1200 	.word	0x007a1200

080026e4 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80026e4:	b480      	push	{r7}
 80026e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80026e8:	4b03      	ldr	r3, [pc, #12]	; (80026f8 <HAL_RCC_GetHCLKFreq+0x14>)
 80026ea:	681b      	ldr	r3, [r3, #0]
}
 80026ec:	4618      	mov	r0, r3
 80026ee:	46bd      	mov	sp, r7
 80026f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f4:	4770      	bx	lr
 80026f6:	bf00      	nop
 80026f8:	20000000 	.word	0x20000000

080026fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002700:	f7ff fff0 	bl	80026e4 <HAL_RCC_GetHCLKFreq>
 8002704:	4602      	mov	r2, r0
 8002706:	4b05      	ldr	r3, [pc, #20]	; (800271c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002708:	689b      	ldr	r3, [r3, #8]
 800270a:	0a9b      	lsrs	r3, r3, #10
 800270c:	f003 0307 	and.w	r3, r3, #7
 8002710:	4903      	ldr	r1, [pc, #12]	; (8002720 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002712:	5ccb      	ldrb	r3, [r1, r3]
 8002714:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002718:	4618      	mov	r0, r3
 800271a:	bd80      	pop	{r7, pc}
 800271c:	40023800 	.word	0x40023800
 8002720:	08009260 	.word	0x08009260

08002724 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002728:	f7ff ffdc 	bl	80026e4 <HAL_RCC_GetHCLKFreq>
 800272c:	4602      	mov	r2, r0
 800272e:	4b05      	ldr	r3, [pc, #20]	; (8002744 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002730:	689b      	ldr	r3, [r3, #8]
 8002732:	0b5b      	lsrs	r3, r3, #13
 8002734:	f003 0307 	and.w	r3, r3, #7
 8002738:	4903      	ldr	r1, [pc, #12]	; (8002748 <HAL_RCC_GetPCLK2Freq+0x24>)
 800273a:	5ccb      	ldrb	r3, [r1, r3]
 800273c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002740:	4618      	mov	r0, r3
 8002742:	bd80      	pop	{r7, pc}
 8002744:	40023800 	.word	0x40023800
 8002748:	08009260 	.word	0x08009260

0800274c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b088      	sub	sp, #32
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002754:	2300      	movs	r3, #0
 8002756:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002758:	2300      	movs	r3, #0
 800275a:	613b      	str	r3, [r7, #16]
  uint32_t plli2sused = 0;
 800275c:	2300      	movs	r3, #0
 800275e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002760:	2300      	movs	r3, #0
 8002762:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f003 0301 	and.w	r3, r3, #1
 800276c:	2b00      	cmp	r3, #0
 800276e:	d012      	beq.n	8002796 <HAL_RCCEx_PeriphCLKConfig+0x4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002770:	4b65      	ldr	r3, [pc, #404]	; (8002908 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002772:	689b      	ldr	r3, [r3, #8]
 8002774:	4a64      	ldr	r2, [pc, #400]	; (8002908 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002776:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800277a:	6093      	str	r3, [r2, #8]
 800277c:	4b62      	ldr	r3, [pc, #392]	; (8002908 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800277e:	689a      	ldr	r2, [r3, #8]
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002784:	4960      	ldr	r1, [pc, #384]	; (8002908 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002786:	4313      	orrs	r3, r2
 8002788:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800278e:	2b00      	cmp	r3, #0
 8002790:	d101      	bne.n	8002796 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      plli2sused = 1;
 8002792:	2301      	movs	r3, #1
 8002794:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d017      	beq.n	80027d2 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80027a2:	4b59      	ldr	r3, [pc, #356]	; (8002908 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80027a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80027a8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027b0:	4955      	ldr	r1, [pc, #340]	; (8002908 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80027b2:	4313      	orrs	r3, r2
 80027b4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027bc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80027c0:	d101      	bne.n	80027c6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
      plli2sused = 1;
 80027c2:	2301      	movs	r3, #1
 80027c4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d101      	bne.n	80027d2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      pllsaiused = 1;
 80027ce:	2301      	movs	r3, #1
 80027d0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d017      	beq.n	800280e <HAL_RCCEx_PeriphCLKConfig+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80027de:	4b4a      	ldr	r3, [pc, #296]	; (8002908 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80027e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80027e4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027ec:	4946      	ldr	r1, [pc, #280]	; (8002908 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80027ee:	4313      	orrs	r3, r2
 80027f0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027f8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80027fc:	d101      	bne.n	8002802 <HAL_RCCEx_PeriphCLKConfig+0xb6>
    {
      plli2sused = 1;
 80027fe:	2301      	movs	r3, #1
 8002800:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002806:	2b00      	cmp	r3, #0
 8002808:	d101      	bne.n	800280e <HAL_RCCEx_PeriphCLKConfig+0xc2>
    {
      pllsaiused = 1;
 800280a:	2301      	movs	r3, #1
 800280c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f003 0320 	and.w	r3, r3, #32
 8002816:	2b00      	cmp	r3, #0
 8002818:	f000 808b 	beq.w	8002932 <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800281c:	4b3a      	ldr	r3, [pc, #232]	; (8002908 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800281e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002820:	4a39      	ldr	r2, [pc, #228]	; (8002908 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002822:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002826:	6413      	str	r3, [r2, #64]	; 0x40
 8002828:	4b37      	ldr	r3, [pc, #220]	; (8002908 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800282a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800282c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002830:	60fb      	str	r3, [r7, #12]
 8002832:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002834:	4b35      	ldr	r3, [pc, #212]	; (800290c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	4a34      	ldr	r2, [pc, #208]	; (800290c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800283a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800283e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002840:	f7fe ff20 	bl	8001684 <HAL_GetTick>
 8002844:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002846:	e008      	b.n	800285a <HAL_RCCEx_PeriphCLKConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002848:	f7fe ff1c 	bl	8001684 <HAL_GetTick>
 800284c:	4602      	mov	r2, r0
 800284e:	697b      	ldr	r3, [r7, #20]
 8002850:	1ad3      	subs	r3, r2, r3
 8002852:	2b64      	cmp	r3, #100	; 0x64
 8002854:	d901      	bls.n	800285a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002856:	2303      	movs	r3, #3
 8002858:	e2bc      	b.n	8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800285a:	4b2c      	ldr	r3, [pc, #176]	; (800290c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002862:	2b00      	cmp	r3, #0
 8002864:	d0f0      	beq.n	8002848 <HAL_RCCEx_PeriphCLKConfig+0xfc>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002866:	4b28      	ldr	r3, [pc, #160]	; (8002908 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002868:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800286a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800286e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002870:	693b      	ldr	r3, [r7, #16]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d035      	beq.n	80028e2 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800287a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800287e:	693a      	ldr	r2, [r7, #16]
 8002880:	429a      	cmp	r2, r3
 8002882:	d02e      	beq.n	80028e2 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002884:	4b20      	ldr	r3, [pc, #128]	; (8002908 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002886:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002888:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800288c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800288e:	4b1e      	ldr	r3, [pc, #120]	; (8002908 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002890:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002892:	4a1d      	ldr	r2, [pc, #116]	; (8002908 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002894:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002898:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800289a:	4b1b      	ldr	r3, [pc, #108]	; (8002908 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800289c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800289e:	4a1a      	ldr	r2, [pc, #104]	; (8002908 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80028a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028a4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80028a6:	4a18      	ldr	r2, [pc, #96]	; (8002908 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80028a8:	693b      	ldr	r3, [r7, #16]
 80028aa:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80028ac:	4b16      	ldr	r3, [pc, #88]	; (8002908 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80028ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028b0:	f003 0301 	and.w	r3, r3, #1
 80028b4:	2b01      	cmp	r3, #1
 80028b6:	d114      	bne.n	80028e2 <HAL_RCCEx_PeriphCLKConfig+0x196>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028b8:	f7fe fee4 	bl	8001684 <HAL_GetTick>
 80028bc:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028be:	e00a      	b.n	80028d6 <HAL_RCCEx_PeriphCLKConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80028c0:	f7fe fee0 	bl	8001684 <HAL_GetTick>
 80028c4:	4602      	mov	r2, r0
 80028c6:	697b      	ldr	r3, [r7, #20]
 80028c8:	1ad3      	subs	r3, r2, r3
 80028ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d901      	bls.n	80028d6 <HAL_RCCEx_PeriphCLKConfig+0x18a>
          {
            return HAL_TIMEOUT;
 80028d2:	2303      	movs	r3, #3
 80028d4:	e27e      	b.n	8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x688>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028d6:	4b0c      	ldr	r3, [pc, #48]	; (8002908 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80028d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028da:	f003 0302 	and.w	r3, r3, #2
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d0ee      	beq.n	80028c0 <HAL_RCCEx_PeriphCLKConfig+0x174>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80028ea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80028ee:	d111      	bne.n	8002914 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
 80028f0:	4b05      	ldr	r3, [pc, #20]	; (8002908 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80028f2:	689b      	ldr	r3, [r3, #8]
 80028f4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80028fc:	4b04      	ldr	r3, [pc, #16]	; (8002910 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80028fe:	400b      	ands	r3, r1
 8002900:	4901      	ldr	r1, [pc, #4]	; (8002908 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002902:	4313      	orrs	r3, r2
 8002904:	608b      	str	r3, [r1, #8]
 8002906:	e00b      	b.n	8002920 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8002908:	40023800 	.word	0x40023800
 800290c:	40007000 	.word	0x40007000
 8002910:	0ffffcff 	.word	0x0ffffcff
 8002914:	4ba4      	ldr	r3, [pc, #656]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002916:	689b      	ldr	r3, [r3, #8]
 8002918:	4aa3      	ldr	r2, [pc, #652]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800291a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800291e:	6093      	str	r3, [r2, #8]
 8002920:	4ba1      	ldr	r3, [pc, #644]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002922:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002928:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800292c:	499e      	ldr	r1, [pc, #632]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800292e:	4313      	orrs	r3, r2
 8002930:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f003 0310 	and.w	r3, r3, #16
 800293a:	2b00      	cmp	r3, #0
 800293c:	d010      	beq.n	8002960 <HAL_RCCEx_PeriphCLKConfig+0x214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800293e:	4b9a      	ldr	r3, [pc, #616]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002940:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002944:	4a98      	ldr	r2, [pc, #608]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002946:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800294a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800294e:	4b96      	ldr	r3, [pc, #600]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002950:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002958:	4993      	ldr	r1, [pc, #588]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800295a:	4313      	orrs	r3, r2
 800295c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002968:	2b00      	cmp	r3, #0
 800296a:	d00a      	beq.n	8002982 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800296c:	4b8e      	ldr	r3, [pc, #568]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800296e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002972:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800297a:	498b      	ldr	r1, [pc, #556]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800297c:	4313      	orrs	r3, r2
 800297e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800298a:	2b00      	cmp	r3, #0
 800298c:	d00a      	beq.n	80029a4 <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800298e:	4b86      	ldr	r3, [pc, #536]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002990:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002994:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800299c:	4982      	ldr	r1, [pc, #520]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800299e:	4313      	orrs	r3, r2
 80029a0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d00a      	beq.n	80029c6 <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80029b0:	4b7d      	ldr	r3, [pc, #500]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80029b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029b6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80029be:	497a      	ldr	r1, [pc, #488]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80029c0:	4313      	orrs	r3, r2
 80029c2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d00a      	beq.n	80029e8 <HAL_RCCEx_PeriphCLKConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80029d2:	4b75      	ldr	r3, [pc, #468]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80029d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029d8:	f023 0203 	bic.w	r2, r3, #3
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029e0:	4971      	ldr	r1, [pc, #452]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80029e2:	4313      	orrs	r3, r2
 80029e4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d00a      	beq.n	8002a0a <HAL_RCCEx_PeriphCLKConfig+0x2be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80029f4:	4b6c      	ldr	r3, [pc, #432]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80029f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029fa:	f023 020c 	bic.w	r2, r3, #12
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a02:	4969      	ldr	r1, [pc, #420]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002a04:	4313      	orrs	r3, r2
 8002a06:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d00a      	beq.n	8002a2c <HAL_RCCEx_PeriphCLKConfig+0x2e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002a16:	4b64      	ldr	r3, [pc, #400]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002a18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a1c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a24:	4960      	ldr	r1, [pc, #384]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002a26:	4313      	orrs	r3, r2
 8002a28:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d00a      	beq.n	8002a4e <HAL_RCCEx_PeriphCLKConfig+0x302>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002a38:	4b5b      	ldr	r3, [pc, #364]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002a3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a3e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a46:	4958      	ldr	r1, [pc, #352]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002a48:	4313      	orrs	r3, r2
 8002a4a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d00a      	beq.n	8002a70 <HAL_RCCEx_PeriphCLKConfig+0x324>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002a5a:	4b53      	ldr	r3, [pc, #332]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002a5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a60:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a68:	494f      	ldr	r1, [pc, #316]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002a6a:	4313      	orrs	r3, r2
 8002a6c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d00a      	beq.n	8002a92 <HAL_RCCEx_PeriphCLKConfig+0x346>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002a7c:	4b4a      	ldr	r3, [pc, #296]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002a7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a82:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a8a:	4947      	ldr	r1, [pc, #284]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002a8c:	4313      	orrs	r3, r2
 8002a8e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d00a      	beq.n	8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x368>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002a9e:	4b42      	ldr	r3, [pc, #264]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002aa0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002aa4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002aac:	493e      	ldr	r1, [pc, #248]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002aae:	4313      	orrs	r3, r2
 8002ab0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d00a      	beq.n	8002ad6 <HAL_RCCEx_PeriphCLKConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002ac0:	4b39      	ldr	r3, [pc, #228]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002ac2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ac6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ace:	4936      	ldr	r1, [pc, #216]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002ad0:	4313      	orrs	r3, r2
 8002ad2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d011      	beq.n	8002b06 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002ae2:	4b31      	ldr	r3, [pc, #196]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002ae4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ae8:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002af0:	492d      	ldr	r1, [pc, #180]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002af2:	4313      	orrs	r3, r2
 8002af4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002afc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002b00:	d101      	bne.n	8002b06 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      pllsaiused = 1;
 8002b02:	2301      	movs	r3, #1
 8002b04:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d00a      	beq.n	8002b28 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002b12:	4b25      	ldr	r3, [pc, #148]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002b14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b18:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b20:	4921      	ldr	r1, [pc, #132]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002b22:	4313      	orrs	r3, r2
 8002b24:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d00a      	beq.n	8002b4a <HAL_RCCEx_PeriphCLKConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002b34:	4b1c      	ldr	r3, [pc, #112]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002b36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b3a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002b42:	4919      	ldr	r1, [pc, #100]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002b44:	4313      	orrs	r3, r2
 8002b46:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d00a      	beq.n	8002b6c <HAL_RCCEx_PeriphCLKConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8002b56:	4b14      	ldr	r3, [pc, #80]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002b58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b5c:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002b64:	4910      	ldr	r1, [pc, #64]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002b66:	4313      	orrs	r3, r2
 8002b68:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2 or I2S */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002b6c:	69fb      	ldr	r3, [r7, #28]
 8002b6e:	2b01      	cmp	r3, #1
 8002b70:	d006      	beq.n	8002b80 <HAL_RCCEx_PeriphCLKConfig+0x434>
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	f000 809d 	beq.w	8002cba <HAL_RCCEx_PeriphCLKConfig+0x56e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002b80:	4b09      	ldr	r3, [pc, #36]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4a08      	ldr	r2, [pc, #32]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002b86:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002b8a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b8c:	f7fe fd7a 	bl	8001684 <HAL_GetTick>
 8002b90:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002b92:	e00b      	b.n	8002bac <HAL_RCCEx_PeriphCLKConfig+0x460>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002b94:	f7fe fd76 	bl	8001684 <HAL_GetTick>
 8002b98:	4602      	mov	r2, r0
 8002b9a:	697b      	ldr	r3, [r7, #20]
 8002b9c:	1ad3      	subs	r3, r2, r3
 8002b9e:	2b64      	cmp	r3, #100	; 0x64
 8002ba0:	d904      	bls.n	8002bac <HAL_RCCEx_PeriphCLKConfig+0x460>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002ba2:	2303      	movs	r3, #3
 8002ba4:	e116      	b.n	8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x688>
 8002ba6:	bf00      	nop
 8002ba8:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002bac:	4b8b      	ldr	r3, [pc, #556]	; (8002ddc <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d1ed      	bne.n	8002b94 <HAL_RCCEx_PeriphCLKConfig+0x448>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f003 0301 	and.w	r3, r3, #1
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d017      	beq.n	8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d113      	bne.n	8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002bcc:	4b83      	ldr	r3, [pc, #524]	; (8002ddc <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002bce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002bd2:	0e1b      	lsrs	r3, r3, #24
 8002bd4:	f003 030f 	and.w	r3, r3, #15
 8002bd8:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, PeriphClkInit->PLLI2S.PLLI2SR);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	685b      	ldr	r3, [r3, #4]
 8002bde:	019a      	lsls	r2, r3, #6
 8002be0:	693b      	ldr	r3, [r7, #16]
 8002be2:	061b      	lsls	r3, r3, #24
 8002be4:	431a      	orrs	r2, r3
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	689b      	ldr	r3, [r3, #8]
 8002bea:	071b      	lsls	r3, r3, #28
 8002bec:	497b      	ldr	r1, [pc, #492]	; (8002ddc <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002bee:	4313      	orrs	r3, r2
 8002bf0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d004      	beq.n	8002c0a <HAL_RCCEx_PeriphCLKConfig+0x4be>
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c04:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002c08:	d00a      	beq.n	8002c20 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d024      	beq.n	8002c60 <HAL_RCCEx_PeriphCLKConfig+0x514>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c1a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002c1e:	d11f      	bne.n	8002c60 <HAL_RCCEx_PeriphCLKConfig+0x514>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002c20:	4b6e      	ldr	r3, [pc, #440]	; (8002ddc <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002c22:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c26:	0f1b      	lsrs	r3, r3, #28
 8002c28:	f003 0307 	and.w	r3, r3, #7
 8002c2c:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg0);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	685b      	ldr	r3, [r3, #4]
 8002c32:	019a      	lsls	r2, r3, #6
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	68db      	ldr	r3, [r3, #12]
 8002c38:	061b      	lsls	r3, r3, #24
 8002c3a:	431a      	orrs	r2, r3
 8002c3c:	693b      	ldr	r3, [r7, #16]
 8002c3e:	071b      	lsls	r3, r3, #28
 8002c40:	4966      	ldr	r1, [pc, #408]	; (8002ddc <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002c42:	4313      	orrs	r3, r2
 8002c44:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002c48:	4b64      	ldr	r3, [pc, #400]	; (8002ddc <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002c4a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002c4e:	f023 021f 	bic.w	r2, r3, #31
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	69db      	ldr	r3, [r3, #28]
 8002c56:	3b01      	subs	r3, #1
 8002c58:	4960      	ldr	r1, [pc, #384]	; (8002ddc <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002c5a:	4313      	orrs	r3, r2
 8002c5c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d00d      	beq.n	8002c88 <HAL_RCCEx_PeriphCLKConfig+0x53c>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	685b      	ldr	r3, [r3, #4]
 8002c70:	019a      	lsls	r2, r3, #6
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	68db      	ldr	r3, [r3, #12]
 8002c76:	061b      	lsls	r3, r3, #24
 8002c78:	431a      	orrs	r2, r3
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	689b      	ldr	r3, [r3, #8]
 8002c7e:	071b      	lsls	r3, r3, #28
 8002c80:	4956      	ldr	r1, [pc, #344]	; (8002ddc <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002c82:	4313      	orrs	r3, r2
 8002c84:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002c88:	4b54      	ldr	r3, [pc, #336]	; (8002ddc <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4a53      	ldr	r2, [pc, #332]	; (8002ddc <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002c8e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002c92:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c94:	f7fe fcf6 	bl	8001684 <HAL_GetTick>
 8002c98:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002c9a:	e008      	b.n	8002cae <HAL_RCCEx_PeriphCLKConfig+0x562>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002c9c:	f7fe fcf2 	bl	8001684 <HAL_GetTick>
 8002ca0:	4602      	mov	r2, r0
 8002ca2:	697b      	ldr	r3, [r7, #20]
 8002ca4:	1ad3      	subs	r3, r2, r3
 8002ca6:	2b64      	cmp	r3, #100	; 0x64
 8002ca8:	d901      	bls.n	8002cae <HAL_RCCEx_PeriphCLKConfig+0x562>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002caa:	2303      	movs	r3, #3
 8002cac:	e092      	b.n	8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002cae:	4b4b      	ldr	r3, [pc, #300]	; (8002ddc <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d0f0      	beq.n	8002c9c <HAL_RCCEx_PeriphCLKConfig+0x550>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002cba:	69bb      	ldr	r3, [r7, #24]
 8002cbc:	2b01      	cmp	r3, #1
 8002cbe:	f040 8088 	bne.w	8002dd2 <HAL_RCCEx_PeriphCLKConfig+0x686>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002cc2:	4b46      	ldr	r3, [pc, #280]	; (8002ddc <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	4a45      	ldr	r2, [pc, #276]	; (8002ddc <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002cc8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ccc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002cce:	f7fe fcd9 	bl	8001684 <HAL_GetTick>
 8002cd2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002cd4:	e008      	b.n	8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x59c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002cd6:	f7fe fcd5 	bl	8001684 <HAL_GetTick>
 8002cda:	4602      	mov	r2, r0
 8002cdc:	697b      	ldr	r3, [r7, #20]
 8002cde:	1ad3      	subs	r3, r2, r3
 8002ce0:	2b64      	cmp	r3, #100	; 0x64
 8002ce2:	d901      	bls.n	8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002ce4:	2303      	movs	r3, #3
 8002ce6:	e075      	b.n	8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002ce8:	4b3c      	ldr	r3, [pc, #240]	; (8002ddc <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002cf0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002cf4:	d0ef      	beq.n	8002cd6 <HAL_RCCEx_PeriphCLKConfig+0x58a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d003      	beq.n	8002d0a <HAL_RCCEx_PeriphCLKConfig+0x5be>
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d009      	beq.n	8002d1e <HAL_RCCEx_PeriphCLKConfig+0x5d2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d024      	beq.n	8002d60 <HAL_RCCEx_PeriphCLKConfig+0x614>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d120      	bne.n	8002d60 <HAL_RCCEx_PeriphCLKConfig+0x614>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002d1e:	4b2f      	ldr	r3, [pc, #188]	; (8002ddc <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002d20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d24:	0c1b      	lsrs	r3, r3, #16
 8002d26:	f003 0303 	and.w	r3, r3, #3
 8002d2a:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	691b      	ldr	r3, [r3, #16]
 8002d30:	019a      	lsls	r2, r3, #6
 8002d32:	693b      	ldr	r3, [r7, #16]
 8002d34:	041b      	lsls	r3, r3, #16
 8002d36:	431a      	orrs	r2, r3
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	695b      	ldr	r3, [r3, #20]
 8002d3c:	061b      	lsls	r3, r3, #24
 8002d3e:	4927      	ldr	r1, [pc, #156]	; (8002ddc <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002d40:	4313      	orrs	r3, r2
 8002d42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002d46:	4b25      	ldr	r3, [pc, #148]	; (8002ddc <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002d48:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002d4c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6a1b      	ldr	r3, [r3, #32]
 8002d54:	3b01      	subs	r3, #1
 8002d56:	021b      	lsls	r3, r3, #8
 8002d58:	4920      	ldr	r1, [pc, #128]	; (8002ddc <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002d5a:	4313      	orrs	r3, r2
 8002d5c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d018      	beq.n	8002d9e <HAL_RCCEx_PeriphCLKConfig+0x652>
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d70:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002d74:	d113      	bne.n	8002d9e <HAL_RCCEx_PeriphCLKConfig+0x652>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002d76:	4b19      	ldr	r3, [pc, #100]	; (8002ddc <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002d78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d7c:	0e1b      	lsrs	r3, r3, #24
 8002d7e:	f003 030f 	and.w	r3, r3, #15
 8002d82:	613b      	str	r3, [r7, #16]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	691b      	ldr	r3, [r3, #16]
 8002d88:	019a      	lsls	r2, r3, #6
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	699b      	ldr	r3, [r3, #24]
 8002d8e:	041b      	lsls	r3, r3, #16
 8002d90:	431a      	orrs	r2, r3
 8002d92:	693b      	ldr	r3, [r7, #16]
 8002d94:	061b      	lsls	r3, r3, #24
 8002d96:	4911      	ldr	r1, [pc, #68]	; (8002ddc <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002d98:	4313      	orrs	r3, r2
 8002d9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002d9e:	4b0f      	ldr	r3, [pc, #60]	; (8002ddc <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	4a0e      	ldr	r2, [pc, #56]	; (8002ddc <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002da4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002da8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002daa:	f7fe fc6b 	bl	8001684 <HAL_GetTick>
 8002dae:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002db0:	e008      	b.n	8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x678>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002db2:	f7fe fc67 	bl	8001684 <HAL_GetTick>
 8002db6:	4602      	mov	r2, r0
 8002db8:	697b      	ldr	r3, [r7, #20]
 8002dba:	1ad3      	subs	r3, r2, r3
 8002dbc:	2b64      	cmp	r3, #100	; 0x64
 8002dbe:	d901      	bls.n	8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x678>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002dc0:	2303      	movs	r3, #3
 8002dc2:	e007      	b.n	8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002dc4:	4b05      	ldr	r3, [pc, #20]	; (8002ddc <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002dcc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002dd0:	d1ef      	bne.n	8002db2 <HAL_RCCEx_PeriphCLKConfig+0x666>
      }
    }
  }
  return HAL_OK;
 8002dd2:	2300      	movs	r3, #0
}
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	3720      	adds	r7, #32
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	bd80      	pop	{r7, pc}
 8002ddc:	40023800 	.word	0x40023800

08002de0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b082      	sub	sp, #8
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d101      	bne.n	8002df2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002dee:	2301      	movs	r3, #1
 8002df0:	e040      	b.n	8002e74 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d106      	bne.n	8002e08 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002e02:	6878      	ldr	r0, [r7, #4]
 8002e04:	f7fe fa58 	bl	80012b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2224      	movs	r2, #36	; 0x24
 8002e0c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	681a      	ldr	r2, [r3, #0]
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f022 0201 	bic.w	r2, r2, #1
 8002e1c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002e1e:	6878      	ldr	r0, [r7, #4]
 8002e20:	f000 fbf8 	bl	8003614 <UART_SetConfig>
 8002e24:	4603      	mov	r3, r0
 8002e26:	2b01      	cmp	r3, #1
 8002e28:	d101      	bne.n	8002e2e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	e022      	b.n	8002e74 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d002      	beq.n	8002e3c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002e36:	6878      	ldr	r0, [r7, #4]
 8002e38:	f000 fe50 	bl	8003adc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	685a      	ldr	r2, [r3, #4]
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002e4a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	689a      	ldr	r2, [r3, #8]
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002e5a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	681a      	ldr	r2, [r3, #0]
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f042 0201 	orr.w	r2, r2, #1
 8002e6a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002e6c:	6878      	ldr	r0, [r7, #4]
 8002e6e:	f000 fed7 	bl	8003c20 <UART_CheckIdleState>
 8002e72:	4603      	mov	r3, r0
}
 8002e74:	4618      	mov	r0, r3
 8002e76:	3708      	adds	r7, #8
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	bd80      	pop	{r7, pc}

08002e7c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b08a      	sub	sp, #40	; 0x28
 8002e80:	af02      	add	r7, sp, #8
 8002e82:	60f8      	str	r0, [r7, #12]
 8002e84:	60b9      	str	r1, [r7, #8]
 8002e86:	603b      	str	r3, [r7, #0]
 8002e88:	4613      	mov	r3, r2
 8002e8a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002e90:	2b20      	cmp	r3, #32
 8002e92:	f040 8081 	bne.w	8002f98 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e96:	68bb      	ldr	r3, [r7, #8]
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d002      	beq.n	8002ea2 <HAL_UART_Transmit+0x26>
 8002e9c:	88fb      	ldrh	r3, [r7, #6]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d101      	bne.n	8002ea6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	e079      	b.n	8002f9a <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002eac:	2b01      	cmp	r3, #1
 8002eae:	d101      	bne.n	8002eb4 <HAL_UART_Transmit+0x38>
 8002eb0:	2302      	movs	r3, #2
 8002eb2:	e072      	b.n	8002f9a <HAL_UART_Transmit+0x11e>
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	2201      	movs	r2, #1
 8002eb8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	2221      	movs	r2, #33	; 0x21
 8002ec8:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002eca:	f7fe fbdb 	bl	8001684 <HAL_GetTick>
 8002ece:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	88fa      	ldrh	r2, [r7, #6]
 8002ed4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	88fa      	ldrh	r2, [r7, #6]
 8002edc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	689b      	ldr	r3, [r3, #8]
 8002ee4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ee8:	d108      	bne.n	8002efc <HAL_UART_Transmit+0x80>
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	691b      	ldr	r3, [r3, #16]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d104      	bne.n	8002efc <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002ef6:	68bb      	ldr	r3, [r7, #8]
 8002ef8:	61bb      	str	r3, [r7, #24]
 8002efa:	e003      	b.n	8002f04 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8002efc:	68bb      	ldr	r3, [r7, #8]
 8002efe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002f00:	2300      	movs	r3, #0
 8002f02:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	2200      	movs	r2, #0
 8002f08:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8002f0c:	e02c      	b.n	8002f68 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	9300      	str	r3, [sp, #0]
 8002f12:	697b      	ldr	r3, [r7, #20]
 8002f14:	2200      	movs	r2, #0
 8002f16:	2180      	movs	r1, #128	; 0x80
 8002f18:	68f8      	ldr	r0, [r7, #12]
 8002f1a:	f000 feb4 	bl	8003c86 <UART_WaitOnFlagUntilTimeout>
 8002f1e:	4603      	mov	r3, r0
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d001      	beq.n	8002f28 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8002f24:	2303      	movs	r3, #3
 8002f26:	e038      	b.n	8002f9a <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8002f28:	69fb      	ldr	r3, [r7, #28]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d10b      	bne.n	8002f46 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002f2e:	69bb      	ldr	r3, [r7, #24]
 8002f30:	881b      	ldrh	r3, [r3, #0]
 8002f32:	461a      	mov	r2, r3
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002f3c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002f3e:	69bb      	ldr	r3, [r7, #24]
 8002f40:	3302      	adds	r3, #2
 8002f42:	61bb      	str	r3, [r7, #24]
 8002f44:	e007      	b.n	8002f56 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002f46:	69fb      	ldr	r3, [r7, #28]
 8002f48:	781a      	ldrb	r2, [r3, #0]
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002f50:	69fb      	ldr	r3, [r7, #28]
 8002f52:	3301      	adds	r3, #1
 8002f54:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002f5c:	b29b      	uxth	r3, r3
 8002f5e:	3b01      	subs	r3, #1
 8002f60:	b29a      	uxth	r2, r3
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002f6e:	b29b      	uxth	r3, r3
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d1cc      	bne.n	8002f0e <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	9300      	str	r3, [sp, #0]
 8002f78:	697b      	ldr	r3, [r7, #20]
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	2140      	movs	r1, #64	; 0x40
 8002f7e:	68f8      	ldr	r0, [r7, #12]
 8002f80:	f000 fe81 	bl	8003c86 <UART_WaitOnFlagUntilTimeout>
 8002f84:	4603      	mov	r3, r0
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d001      	beq.n	8002f8e <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8002f8a:	2303      	movs	r3, #3
 8002f8c:	e005      	b.n	8002f9a <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	2220      	movs	r2, #32
 8002f92:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8002f94:	2300      	movs	r3, #0
 8002f96:	e000      	b.n	8002f9a <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8002f98:	2302      	movs	r3, #2
  }
}
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	3720      	adds	r7, #32
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	bd80      	pop	{r7, pc}

08002fa2 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002fa2:	b580      	push	{r7, lr}
 8002fa4:	b08a      	sub	sp, #40	; 0x28
 8002fa6:	af00      	add	r7, sp, #0
 8002fa8:	60f8      	str	r0, [r7, #12]
 8002faa:	60b9      	str	r1, [r7, #8]
 8002fac:	4613      	mov	r3, r2
 8002fae:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002fb4:	2b20      	cmp	r3, #32
 8002fb6:	d13d      	bne.n	8003034 <HAL_UART_Receive_IT+0x92>
  {
    if ((pData == NULL) || (Size == 0U))
 8002fb8:	68bb      	ldr	r3, [r7, #8]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d002      	beq.n	8002fc4 <HAL_UART_Receive_IT+0x22>
 8002fbe:	88fb      	ldrh	r3, [r7, #6]
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d101      	bne.n	8002fc8 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8002fc4:	2301      	movs	r3, #1
 8002fc6:	e036      	b.n	8003036 <HAL_UART_Receive_IT+0x94>
    }

    __HAL_LOCK(huart);
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002fce:	2b01      	cmp	r3, #1
 8002fd0:	d101      	bne.n	8002fd6 <HAL_UART_Receive_IT+0x34>
 8002fd2:	2302      	movs	r3, #2
 8002fd4:	e02f      	b.n	8003036 <HAL_UART_Receive_IT+0x94>
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	2201      	movs	r2, #1
 8002fda:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	685b      	ldr	r3, [r3, #4]
 8002fea:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d018      	beq.n	8003024 <HAL_UART_Receive_IT+0x82>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ff8:	697b      	ldr	r3, [r7, #20]
 8002ffa:	e853 3f00 	ldrex	r3, [r3]
 8002ffe:	613b      	str	r3, [r7, #16]
   return(result);
 8003000:	693b      	ldr	r3, [r7, #16]
 8003002:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003006:	627b      	str	r3, [r7, #36]	; 0x24
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	461a      	mov	r2, r3
 800300e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003010:	623b      	str	r3, [r7, #32]
 8003012:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003014:	69f9      	ldr	r1, [r7, #28]
 8003016:	6a3a      	ldr	r2, [r7, #32]
 8003018:	e841 2300 	strex	r3, r2, [r1]
 800301c:	61bb      	str	r3, [r7, #24]
   return(result);
 800301e:	69bb      	ldr	r3, [r7, #24]
 8003020:	2b00      	cmp	r3, #0
 8003022:	d1e6      	bne.n	8002ff2 <HAL_UART_Receive_IT+0x50>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003024:	88fb      	ldrh	r3, [r7, #6]
 8003026:	461a      	mov	r2, r3
 8003028:	68b9      	ldr	r1, [r7, #8]
 800302a:	68f8      	ldr	r0, [r7, #12]
 800302c:	f000 fef0 	bl	8003e10 <UART_Start_Receive_IT>
 8003030:	4603      	mov	r3, r0
 8003032:	e000      	b.n	8003036 <HAL_UART_Receive_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003034:	2302      	movs	r3, #2
  }
}
 8003036:	4618      	mov	r0, r3
 8003038:	3728      	adds	r7, #40	; 0x28
 800303a:	46bd      	mov	sp, r7
 800303c:	bd80      	pop	{r7, pc}
	...

08003040 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	b0ba      	sub	sp, #232	; 0xe8
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	69db      	ldr	r3, [r3, #28]
 800304e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	689b      	ldr	r3, [r3, #8]
 8003062:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003066:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800306a:	f640 030f 	movw	r3, #2063	; 0x80f
 800306e:	4013      	ands	r3, r2
 8003070:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8003074:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003078:	2b00      	cmp	r3, #0
 800307a:	d115      	bne.n	80030a8 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800307c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003080:	f003 0320 	and.w	r3, r3, #32
 8003084:	2b00      	cmp	r3, #0
 8003086:	d00f      	beq.n	80030a8 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003088:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800308c:	f003 0320 	and.w	r3, r3, #32
 8003090:	2b00      	cmp	r3, #0
 8003092:	d009      	beq.n	80030a8 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003098:	2b00      	cmp	r3, #0
 800309a:	f000 828f 	beq.w	80035bc <HAL_UART_IRQHandler+0x57c>
      {
        huart->RxISR(huart);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80030a2:	6878      	ldr	r0, [r7, #4]
 80030a4:	4798      	blx	r3
      }
      return;
 80030a6:	e289      	b.n	80035bc <HAL_UART_IRQHandler+0x57c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80030a8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	f000 8117 	beq.w	80032e0 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80030b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80030b6:	f003 0301 	and.w	r3, r3, #1
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d106      	bne.n	80030cc <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80030be:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80030c2:	4b85      	ldr	r3, [pc, #532]	; (80032d8 <HAL_UART_IRQHandler+0x298>)
 80030c4:	4013      	ands	r3, r2
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	f000 810a 	beq.w	80032e0 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80030cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80030d0:	f003 0301 	and.w	r3, r3, #1
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d011      	beq.n	80030fc <HAL_UART_IRQHandler+0xbc>
 80030d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80030dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d00b      	beq.n	80030fc <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	2201      	movs	r2, #1
 80030ea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80030f2:	f043 0201 	orr.w	r2, r3, #1
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80030fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003100:	f003 0302 	and.w	r3, r3, #2
 8003104:	2b00      	cmp	r3, #0
 8003106:	d011      	beq.n	800312c <HAL_UART_IRQHandler+0xec>
 8003108:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800310c:	f003 0301 	and.w	r3, r3, #1
 8003110:	2b00      	cmp	r3, #0
 8003112:	d00b      	beq.n	800312c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	2202      	movs	r2, #2
 800311a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003122:	f043 0204 	orr.w	r2, r3, #4
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800312c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003130:	f003 0304 	and.w	r3, r3, #4
 8003134:	2b00      	cmp	r3, #0
 8003136:	d011      	beq.n	800315c <HAL_UART_IRQHandler+0x11c>
 8003138:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800313c:	f003 0301 	and.w	r3, r3, #1
 8003140:	2b00      	cmp	r3, #0
 8003142:	d00b      	beq.n	800315c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	2204      	movs	r2, #4
 800314a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003152:	f043 0202 	orr.w	r2, r3, #2
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800315c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003160:	f003 0308 	and.w	r3, r3, #8
 8003164:	2b00      	cmp	r3, #0
 8003166:	d017      	beq.n	8003198 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003168:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800316c:	f003 0320 	and.w	r3, r3, #32
 8003170:	2b00      	cmp	r3, #0
 8003172:	d105      	bne.n	8003180 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003174:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003178:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800317c:	2b00      	cmp	r3, #0
 800317e:	d00b      	beq.n	8003198 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	2208      	movs	r2, #8
 8003186:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800318e:	f043 0208 	orr.w	r2, r3, #8
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003198:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800319c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d012      	beq.n	80031ca <HAL_UART_IRQHandler+0x18a>
 80031a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80031a8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d00c      	beq.n	80031ca <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80031b8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80031c0:	f043 0220 	orr.w	r2, r3, #32
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	f000 81f5 	beq.w	80035c0 <HAL_UART_IRQHandler+0x580>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80031d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80031da:	f003 0320 	and.w	r3, r3, #32
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d00d      	beq.n	80031fe <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80031e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80031e6:	f003 0320 	and.w	r3, r3, #32
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d007      	beq.n	80031fe <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d003      	beq.n	80031fe <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80031fa:	6878      	ldr	r0, [r7, #4]
 80031fc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003204:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	689b      	ldr	r3, [r3, #8]
 800320e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003212:	2b40      	cmp	r3, #64	; 0x40
 8003214:	d005      	beq.n	8003222 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003216:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800321a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800321e:	2b00      	cmp	r3, #0
 8003220:	d04f      	beq.n	80032c2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003222:	6878      	ldr	r0, [r7, #4]
 8003224:	f000 febe 	bl	8003fa4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	689b      	ldr	r3, [r3, #8]
 800322e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003232:	2b40      	cmp	r3, #64	; 0x40
 8003234:	d141      	bne.n	80032ba <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	3308      	adds	r3, #8
 800323c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003240:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003244:	e853 3f00 	ldrex	r3, [r3]
 8003248:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800324c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003250:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003254:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	3308      	adds	r3, #8
 800325e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003262:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003266:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800326a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800326e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003272:	e841 2300 	strex	r3, r2, [r1]
 8003276:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800327a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800327e:	2b00      	cmp	r3, #0
 8003280:	d1d9      	bne.n	8003236 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003286:	2b00      	cmp	r3, #0
 8003288:	d013      	beq.n	80032b2 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800328e:	4a13      	ldr	r2, [pc, #76]	; (80032dc <HAL_UART_IRQHandler+0x29c>)
 8003290:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003296:	4618      	mov	r0, r3
 8003298:	f7fe fba5 	bl	80019e6 <HAL_DMA_Abort_IT>
 800329c:	4603      	mov	r3, r0
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d017      	beq.n	80032d2 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032a8:	687a      	ldr	r2, [r7, #4]
 80032aa:	6f12      	ldr	r2, [r2, #112]	; 0x70
 80032ac:	4610      	mov	r0, r2
 80032ae:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032b0:	e00f      	b.n	80032d2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80032b2:	6878      	ldr	r0, [r7, #4]
 80032b4:	f000 f998 	bl	80035e8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032b8:	e00b      	b.n	80032d2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80032ba:	6878      	ldr	r0, [r7, #4]
 80032bc:	f000 f994 	bl	80035e8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032c0:	e007      	b.n	80032d2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80032c2:	6878      	ldr	r0, [r7, #4]
 80032c4:	f000 f990 	bl	80035e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2200      	movs	r2, #0
 80032cc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 80032d0:	e176      	b.n	80035c0 <HAL_UART_IRQHandler+0x580>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032d2:	bf00      	nop
    return;
 80032d4:	e174      	b.n	80035c0 <HAL_UART_IRQHandler+0x580>
 80032d6:	bf00      	nop
 80032d8:	04000120 	.word	0x04000120
 80032dc:	0800406b 	.word	0x0800406b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032e4:	2b01      	cmp	r3, #1
 80032e6:	f040 8144 	bne.w	8003572 <HAL_UART_IRQHandler+0x532>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80032ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80032ee:	f003 0310 	and.w	r3, r3, #16
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	f000 813d 	beq.w	8003572 <HAL_UART_IRQHandler+0x532>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80032f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80032fc:	f003 0310 	and.w	r3, r3, #16
 8003300:	2b00      	cmp	r3, #0
 8003302:	f000 8136 	beq.w	8003572 <HAL_UART_IRQHandler+0x532>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	2210      	movs	r2, #16
 800330c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	689b      	ldr	r3, [r3, #8]
 8003314:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003318:	2b40      	cmp	r3, #64	; 0x40
 800331a:	f040 80b2 	bne.w	8003482 <HAL_UART_IRQHandler+0x442>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	685b      	ldr	r3, [r3, #4]
 8003326:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800332a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800332e:	2b00      	cmp	r3, #0
 8003330:	f000 8148 	beq.w	80035c4 <HAL_UART_IRQHandler+0x584>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800333a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800333e:	429a      	cmp	r2, r3
 8003340:	f080 8140 	bcs.w	80035c4 <HAL_UART_IRQHandler+0x584>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800334a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003352:	69db      	ldr	r3, [r3, #28]
 8003354:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003358:	f000 8085 	beq.w	8003466 <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003364:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003368:	e853 3f00 	ldrex	r3, [r3]
 800336c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003370:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003374:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003378:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	461a      	mov	r2, r3
 8003382:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003386:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800338a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800338e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003392:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003396:	e841 2300 	strex	r3, r2, [r1]
 800339a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800339e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d1da      	bne.n	800335c <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	3308      	adds	r3, #8
 80033ac:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033ae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80033b0:	e853 3f00 	ldrex	r3, [r3]
 80033b4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80033b6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80033b8:	f023 0301 	bic.w	r3, r3, #1
 80033bc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	3308      	adds	r3, #8
 80033c6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80033ca:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80033ce:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033d0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80033d2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80033d6:	e841 2300 	strex	r3, r2, [r1]
 80033da:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80033dc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d1e1      	bne.n	80033a6 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	3308      	adds	r3, #8
 80033e8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033ea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80033ec:	e853 3f00 	ldrex	r3, [r3]
 80033f0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80033f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80033f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80033f8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	3308      	adds	r3, #8
 8003402:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003406:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003408:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800340a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800340c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800340e:	e841 2300 	strex	r3, r2, [r1]
 8003412:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003414:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003416:	2b00      	cmp	r3, #0
 8003418:	d1e3      	bne.n	80033e2 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	2220      	movs	r2, #32
 800341e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2200      	movs	r2, #0
 8003424:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800342c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800342e:	e853 3f00 	ldrex	r3, [r3]
 8003432:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003434:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003436:	f023 0310 	bic.w	r3, r3, #16
 800343a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	461a      	mov	r2, r3
 8003444:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003448:	65bb      	str	r3, [r7, #88]	; 0x58
 800344a:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800344c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800344e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003450:	e841 2300 	strex	r3, r2, [r1]
 8003454:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003456:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003458:	2b00      	cmp	r3, #0
 800345a:	d1e4      	bne.n	8003426 <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003460:	4618      	mov	r0, r3
 8003462:	f7fe fa50 	bl	8001906 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003472:	b29b      	uxth	r3, r3
 8003474:	1ad3      	subs	r3, r2, r3
 8003476:	b29b      	uxth	r3, r3
 8003478:	4619      	mov	r1, r3
 800347a:	6878      	ldr	r0, [r7, #4]
 800347c:	f000 f8be 	bl	80035fc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003480:	e0a0      	b.n	80035c4 <HAL_UART_IRQHandler+0x584>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800348e:	b29b      	uxth	r3, r3
 8003490:	1ad3      	subs	r3, r2, r3
 8003492:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800349c:	b29b      	uxth	r3, r3
 800349e:	2b00      	cmp	r3, #0
 80034a0:	f000 8092 	beq.w	80035c8 <HAL_UART_IRQHandler+0x588>
          && (nb_rx_data > 0U))
 80034a4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	f000 808d 	beq.w	80035c8 <HAL_UART_IRQHandler+0x588>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034b6:	e853 3f00 	ldrex	r3, [r3]
 80034ba:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80034bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034be:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80034c2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	461a      	mov	r2, r3
 80034cc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80034d0:	647b      	str	r3, [r7, #68]	; 0x44
 80034d2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034d4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80034d6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80034d8:	e841 2300 	strex	r3, r2, [r1]
 80034dc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80034de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d1e4      	bne.n	80034ae <HAL_UART_IRQHandler+0x46e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	3308      	adds	r3, #8
 80034ea:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ee:	e853 3f00 	ldrex	r3, [r3]
 80034f2:	623b      	str	r3, [r7, #32]
   return(result);
 80034f4:	6a3b      	ldr	r3, [r7, #32]
 80034f6:	f023 0301 	bic.w	r3, r3, #1
 80034fa:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	3308      	adds	r3, #8
 8003504:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003508:	633a      	str	r2, [r7, #48]	; 0x30
 800350a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800350c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800350e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003510:	e841 2300 	strex	r3, r2, [r1]
 8003514:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003516:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003518:	2b00      	cmp	r3, #0
 800351a:	d1e3      	bne.n	80034e4 <HAL_UART_IRQHandler+0x4a4>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2220      	movs	r2, #32
 8003520:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	2200      	movs	r2, #0
 8003526:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2200      	movs	r2, #0
 800352c:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003534:	693b      	ldr	r3, [r7, #16]
 8003536:	e853 3f00 	ldrex	r3, [r3]
 800353a:	60fb      	str	r3, [r7, #12]
   return(result);
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	f023 0310 	bic.w	r3, r3, #16
 8003542:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	461a      	mov	r2, r3
 800354c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003550:	61fb      	str	r3, [r7, #28]
 8003552:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003554:	69b9      	ldr	r1, [r7, #24]
 8003556:	69fa      	ldr	r2, [r7, #28]
 8003558:	e841 2300 	strex	r3, r2, [r1]
 800355c:	617b      	str	r3, [r7, #20]
   return(result);
 800355e:	697b      	ldr	r3, [r7, #20]
 8003560:	2b00      	cmp	r3, #0
 8003562:	d1e4      	bne.n	800352e <HAL_UART_IRQHandler+0x4ee>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003564:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003568:	4619      	mov	r1, r3
 800356a:	6878      	ldr	r0, [r7, #4]
 800356c:	f000 f846 	bl	80035fc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003570:	e02a      	b.n	80035c8 <HAL_UART_IRQHandler+0x588>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003572:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003576:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800357a:	2b00      	cmp	r3, #0
 800357c:	d00e      	beq.n	800359c <HAL_UART_IRQHandler+0x55c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800357e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003582:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003586:	2b00      	cmp	r3, #0
 8003588:	d008      	beq.n	800359c <HAL_UART_IRQHandler+0x55c>
  {
    if (huart->TxISR != NULL)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800358e:	2b00      	cmp	r3, #0
 8003590:	d01c      	beq.n	80035cc <HAL_UART_IRQHandler+0x58c>
    {
      huart->TxISR(huart);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003596:	6878      	ldr	r0, [r7, #4]
 8003598:	4798      	blx	r3
    }
    return;
 800359a:	e017      	b.n	80035cc <HAL_UART_IRQHandler+0x58c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800359c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80035a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d012      	beq.n	80035ce <HAL_UART_IRQHandler+0x58e>
 80035a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80035ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d00c      	beq.n	80035ce <HAL_UART_IRQHandler+0x58e>
  {
    UART_EndTransmit_IT(huart);
 80035b4:	6878      	ldr	r0, [r7, #4]
 80035b6:	f000 fd6e 	bl	8004096 <UART_EndTransmit_IT>
    return;
 80035ba:	e008      	b.n	80035ce <HAL_UART_IRQHandler+0x58e>
      return;
 80035bc:	bf00      	nop
 80035be:	e006      	b.n	80035ce <HAL_UART_IRQHandler+0x58e>
    return;
 80035c0:	bf00      	nop
 80035c2:	e004      	b.n	80035ce <HAL_UART_IRQHandler+0x58e>
      return;
 80035c4:	bf00      	nop
 80035c6:	e002      	b.n	80035ce <HAL_UART_IRQHandler+0x58e>
      return;
 80035c8:	bf00      	nop
 80035ca:	e000      	b.n	80035ce <HAL_UART_IRQHandler+0x58e>
    return;
 80035cc:	bf00      	nop
  }

}
 80035ce:	37e8      	adds	r7, #232	; 0xe8
 80035d0:	46bd      	mov	sp, r7
 80035d2:	bd80      	pop	{r7, pc}

080035d4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80035d4:	b480      	push	{r7}
 80035d6:	b083      	sub	sp, #12
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80035dc:	bf00      	nop
 80035de:	370c      	adds	r7, #12
 80035e0:	46bd      	mov	sp, r7
 80035e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e6:	4770      	bx	lr

080035e8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80035e8:	b480      	push	{r7}
 80035ea:	b083      	sub	sp, #12
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80035f0:	bf00      	nop
 80035f2:	370c      	adds	r7, #12
 80035f4:	46bd      	mov	sp, r7
 80035f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fa:	4770      	bx	lr

080035fc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80035fc:	b480      	push	{r7}
 80035fe:	b083      	sub	sp, #12
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
 8003604:	460b      	mov	r3, r1
 8003606:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003608:	bf00      	nop
 800360a:	370c      	adds	r7, #12
 800360c:	46bd      	mov	sp, r7
 800360e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003612:	4770      	bx	lr

08003614 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	b088      	sub	sp, #32
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800361c:	2300      	movs	r3, #0
 800361e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	689a      	ldr	r2, [r3, #8]
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	691b      	ldr	r3, [r3, #16]
 8003628:	431a      	orrs	r2, r3
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	695b      	ldr	r3, [r3, #20]
 800362e:	431a      	orrs	r2, r3
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	69db      	ldr	r3, [r3, #28]
 8003634:	4313      	orrs	r3, r2
 8003636:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	681a      	ldr	r2, [r3, #0]
 800363e:	4ba6      	ldr	r3, [pc, #664]	; (80038d8 <UART_SetConfig+0x2c4>)
 8003640:	4013      	ands	r3, r2
 8003642:	687a      	ldr	r2, [r7, #4]
 8003644:	6812      	ldr	r2, [r2, #0]
 8003646:	6979      	ldr	r1, [r7, #20]
 8003648:	430b      	orrs	r3, r1
 800364a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	685b      	ldr	r3, [r3, #4]
 8003652:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	68da      	ldr	r2, [r3, #12]
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	430a      	orrs	r2, r1
 8003660:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	699b      	ldr	r3, [r3, #24]
 8003666:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6a1b      	ldr	r3, [r3, #32]
 800366c:	697a      	ldr	r2, [r7, #20]
 800366e:	4313      	orrs	r3, r2
 8003670:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	689b      	ldr	r3, [r3, #8]
 8003678:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	697a      	ldr	r2, [r7, #20]
 8003682:	430a      	orrs	r2, r1
 8003684:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	4a94      	ldr	r2, [pc, #592]	; (80038dc <UART_SetConfig+0x2c8>)
 800368c:	4293      	cmp	r3, r2
 800368e:	d120      	bne.n	80036d2 <UART_SetConfig+0xbe>
 8003690:	4b93      	ldr	r3, [pc, #588]	; (80038e0 <UART_SetConfig+0x2cc>)
 8003692:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003696:	f003 0303 	and.w	r3, r3, #3
 800369a:	2b03      	cmp	r3, #3
 800369c:	d816      	bhi.n	80036cc <UART_SetConfig+0xb8>
 800369e:	a201      	add	r2, pc, #4	; (adr r2, 80036a4 <UART_SetConfig+0x90>)
 80036a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036a4:	080036b5 	.word	0x080036b5
 80036a8:	080036c1 	.word	0x080036c1
 80036ac:	080036bb 	.word	0x080036bb
 80036b0:	080036c7 	.word	0x080036c7
 80036b4:	2301      	movs	r3, #1
 80036b6:	77fb      	strb	r3, [r7, #31]
 80036b8:	e150      	b.n	800395c <UART_SetConfig+0x348>
 80036ba:	2302      	movs	r3, #2
 80036bc:	77fb      	strb	r3, [r7, #31]
 80036be:	e14d      	b.n	800395c <UART_SetConfig+0x348>
 80036c0:	2304      	movs	r3, #4
 80036c2:	77fb      	strb	r3, [r7, #31]
 80036c4:	e14a      	b.n	800395c <UART_SetConfig+0x348>
 80036c6:	2308      	movs	r3, #8
 80036c8:	77fb      	strb	r3, [r7, #31]
 80036ca:	e147      	b.n	800395c <UART_SetConfig+0x348>
 80036cc:	2310      	movs	r3, #16
 80036ce:	77fb      	strb	r3, [r7, #31]
 80036d0:	e144      	b.n	800395c <UART_SetConfig+0x348>
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	4a83      	ldr	r2, [pc, #524]	; (80038e4 <UART_SetConfig+0x2d0>)
 80036d8:	4293      	cmp	r3, r2
 80036da:	d132      	bne.n	8003742 <UART_SetConfig+0x12e>
 80036dc:	4b80      	ldr	r3, [pc, #512]	; (80038e0 <UART_SetConfig+0x2cc>)
 80036de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036e2:	f003 030c 	and.w	r3, r3, #12
 80036e6:	2b0c      	cmp	r3, #12
 80036e8:	d828      	bhi.n	800373c <UART_SetConfig+0x128>
 80036ea:	a201      	add	r2, pc, #4	; (adr r2, 80036f0 <UART_SetConfig+0xdc>)
 80036ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036f0:	08003725 	.word	0x08003725
 80036f4:	0800373d 	.word	0x0800373d
 80036f8:	0800373d 	.word	0x0800373d
 80036fc:	0800373d 	.word	0x0800373d
 8003700:	08003731 	.word	0x08003731
 8003704:	0800373d 	.word	0x0800373d
 8003708:	0800373d 	.word	0x0800373d
 800370c:	0800373d 	.word	0x0800373d
 8003710:	0800372b 	.word	0x0800372b
 8003714:	0800373d 	.word	0x0800373d
 8003718:	0800373d 	.word	0x0800373d
 800371c:	0800373d 	.word	0x0800373d
 8003720:	08003737 	.word	0x08003737
 8003724:	2300      	movs	r3, #0
 8003726:	77fb      	strb	r3, [r7, #31]
 8003728:	e118      	b.n	800395c <UART_SetConfig+0x348>
 800372a:	2302      	movs	r3, #2
 800372c:	77fb      	strb	r3, [r7, #31]
 800372e:	e115      	b.n	800395c <UART_SetConfig+0x348>
 8003730:	2304      	movs	r3, #4
 8003732:	77fb      	strb	r3, [r7, #31]
 8003734:	e112      	b.n	800395c <UART_SetConfig+0x348>
 8003736:	2308      	movs	r3, #8
 8003738:	77fb      	strb	r3, [r7, #31]
 800373a:	e10f      	b.n	800395c <UART_SetConfig+0x348>
 800373c:	2310      	movs	r3, #16
 800373e:	77fb      	strb	r3, [r7, #31]
 8003740:	e10c      	b.n	800395c <UART_SetConfig+0x348>
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	4a68      	ldr	r2, [pc, #416]	; (80038e8 <UART_SetConfig+0x2d4>)
 8003748:	4293      	cmp	r3, r2
 800374a:	d120      	bne.n	800378e <UART_SetConfig+0x17a>
 800374c:	4b64      	ldr	r3, [pc, #400]	; (80038e0 <UART_SetConfig+0x2cc>)
 800374e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003752:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003756:	2b30      	cmp	r3, #48	; 0x30
 8003758:	d013      	beq.n	8003782 <UART_SetConfig+0x16e>
 800375a:	2b30      	cmp	r3, #48	; 0x30
 800375c:	d814      	bhi.n	8003788 <UART_SetConfig+0x174>
 800375e:	2b20      	cmp	r3, #32
 8003760:	d009      	beq.n	8003776 <UART_SetConfig+0x162>
 8003762:	2b20      	cmp	r3, #32
 8003764:	d810      	bhi.n	8003788 <UART_SetConfig+0x174>
 8003766:	2b00      	cmp	r3, #0
 8003768:	d002      	beq.n	8003770 <UART_SetConfig+0x15c>
 800376a:	2b10      	cmp	r3, #16
 800376c:	d006      	beq.n	800377c <UART_SetConfig+0x168>
 800376e:	e00b      	b.n	8003788 <UART_SetConfig+0x174>
 8003770:	2300      	movs	r3, #0
 8003772:	77fb      	strb	r3, [r7, #31]
 8003774:	e0f2      	b.n	800395c <UART_SetConfig+0x348>
 8003776:	2302      	movs	r3, #2
 8003778:	77fb      	strb	r3, [r7, #31]
 800377a:	e0ef      	b.n	800395c <UART_SetConfig+0x348>
 800377c:	2304      	movs	r3, #4
 800377e:	77fb      	strb	r3, [r7, #31]
 8003780:	e0ec      	b.n	800395c <UART_SetConfig+0x348>
 8003782:	2308      	movs	r3, #8
 8003784:	77fb      	strb	r3, [r7, #31]
 8003786:	e0e9      	b.n	800395c <UART_SetConfig+0x348>
 8003788:	2310      	movs	r3, #16
 800378a:	77fb      	strb	r3, [r7, #31]
 800378c:	e0e6      	b.n	800395c <UART_SetConfig+0x348>
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	4a56      	ldr	r2, [pc, #344]	; (80038ec <UART_SetConfig+0x2d8>)
 8003794:	4293      	cmp	r3, r2
 8003796:	d120      	bne.n	80037da <UART_SetConfig+0x1c6>
 8003798:	4b51      	ldr	r3, [pc, #324]	; (80038e0 <UART_SetConfig+0x2cc>)
 800379a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800379e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80037a2:	2bc0      	cmp	r3, #192	; 0xc0
 80037a4:	d013      	beq.n	80037ce <UART_SetConfig+0x1ba>
 80037a6:	2bc0      	cmp	r3, #192	; 0xc0
 80037a8:	d814      	bhi.n	80037d4 <UART_SetConfig+0x1c0>
 80037aa:	2b80      	cmp	r3, #128	; 0x80
 80037ac:	d009      	beq.n	80037c2 <UART_SetConfig+0x1ae>
 80037ae:	2b80      	cmp	r3, #128	; 0x80
 80037b0:	d810      	bhi.n	80037d4 <UART_SetConfig+0x1c0>
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d002      	beq.n	80037bc <UART_SetConfig+0x1a8>
 80037b6:	2b40      	cmp	r3, #64	; 0x40
 80037b8:	d006      	beq.n	80037c8 <UART_SetConfig+0x1b4>
 80037ba:	e00b      	b.n	80037d4 <UART_SetConfig+0x1c0>
 80037bc:	2300      	movs	r3, #0
 80037be:	77fb      	strb	r3, [r7, #31]
 80037c0:	e0cc      	b.n	800395c <UART_SetConfig+0x348>
 80037c2:	2302      	movs	r3, #2
 80037c4:	77fb      	strb	r3, [r7, #31]
 80037c6:	e0c9      	b.n	800395c <UART_SetConfig+0x348>
 80037c8:	2304      	movs	r3, #4
 80037ca:	77fb      	strb	r3, [r7, #31]
 80037cc:	e0c6      	b.n	800395c <UART_SetConfig+0x348>
 80037ce:	2308      	movs	r3, #8
 80037d0:	77fb      	strb	r3, [r7, #31]
 80037d2:	e0c3      	b.n	800395c <UART_SetConfig+0x348>
 80037d4:	2310      	movs	r3, #16
 80037d6:	77fb      	strb	r3, [r7, #31]
 80037d8:	e0c0      	b.n	800395c <UART_SetConfig+0x348>
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	4a44      	ldr	r2, [pc, #272]	; (80038f0 <UART_SetConfig+0x2dc>)
 80037e0:	4293      	cmp	r3, r2
 80037e2:	d125      	bne.n	8003830 <UART_SetConfig+0x21c>
 80037e4:	4b3e      	ldr	r3, [pc, #248]	; (80038e0 <UART_SetConfig+0x2cc>)
 80037e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037ee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80037f2:	d017      	beq.n	8003824 <UART_SetConfig+0x210>
 80037f4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80037f8:	d817      	bhi.n	800382a <UART_SetConfig+0x216>
 80037fa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80037fe:	d00b      	beq.n	8003818 <UART_SetConfig+0x204>
 8003800:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003804:	d811      	bhi.n	800382a <UART_SetConfig+0x216>
 8003806:	2b00      	cmp	r3, #0
 8003808:	d003      	beq.n	8003812 <UART_SetConfig+0x1fe>
 800380a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800380e:	d006      	beq.n	800381e <UART_SetConfig+0x20a>
 8003810:	e00b      	b.n	800382a <UART_SetConfig+0x216>
 8003812:	2300      	movs	r3, #0
 8003814:	77fb      	strb	r3, [r7, #31]
 8003816:	e0a1      	b.n	800395c <UART_SetConfig+0x348>
 8003818:	2302      	movs	r3, #2
 800381a:	77fb      	strb	r3, [r7, #31]
 800381c:	e09e      	b.n	800395c <UART_SetConfig+0x348>
 800381e:	2304      	movs	r3, #4
 8003820:	77fb      	strb	r3, [r7, #31]
 8003822:	e09b      	b.n	800395c <UART_SetConfig+0x348>
 8003824:	2308      	movs	r3, #8
 8003826:	77fb      	strb	r3, [r7, #31]
 8003828:	e098      	b.n	800395c <UART_SetConfig+0x348>
 800382a:	2310      	movs	r3, #16
 800382c:	77fb      	strb	r3, [r7, #31]
 800382e:	e095      	b.n	800395c <UART_SetConfig+0x348>
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	4a2f      	ldr	r2, [pc, #188]	; (80038f4 <UART_SetConfig+0x2e0>)
 8003836:	4293      	cmp	r3, r2
 8003838:	d125      	bne.n	8003886 <UART_SetConfig+0x272>
 800383a:	4b29      	ldr	r3, [pc, #164]	; (80038e0 <UART_SetConfig+0x2cc>)
 800383c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003840:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003844:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003848:	d017      	beq.n	800387a <UART_SetConfig+0x266>
 800384a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800384e:	d817      	bhi.n	8003880 <UART_SetConfig+0x26c>
 8003850:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003854:	d00b      	beq.n	800386e <UART_SetConfig+0x25a>
 8003856:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800385a:	d811      	bhi.n	8003880 <UART_SetConfig+0x26c>
 800385c:	2b00      	cmp	r3, #0
 800385e:	d003      	beq.n	8003868 <UART_SetConfig+0x254>
 8003860:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003864:	d006      	beq.n	8003874 <UART_SetConfig+0x260>
 8003866:	e00b      	b.n	8003880 <UART_SetConfig+0x26c>
 8003868:	2301      	movs	r3, #1
 800386a:	77fb      	strb	r3, [r7, #31]
 800386c:	e076      	b.n	800395c <UART_SetConfig+0x348>
 800386e:	2302      	movs	r3, #2
 8003870:	77fb      	strb	r3, [r7, #31]
 8003872:	e073      	b.n	800395c <UART_SetConfig+0x348>
 8003874:	2304      	movs	r3, #4
 8003876:	77fb      	strb	r3, [r7, #31]
 8003878:	e070      	b.n	800395c <UART_SetConfig+0x348>
 800387a:	2308      	movs	r3, #8
 800387c:	77fb      	strb	r3, [r7, #31]
 800387e:	e06d      	b.n	800395c <UART_SetConfig+0x348>
 8003880:	2310      	movs	r3, #16
 8003882:	77fb      	strb	r3, [r7, #31]
 8003884:	e06a      	b.n	800395c <UART_SetConfig+0x348>
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	4a1b      	ldr	r2, [pc, #108]	; (80038f8 <UART_SetConfig+0x2e4>)
 800388c:	4293      	cmp	r3, r2
 800388e:	d138      	bne.n	8003902 <UART_SetConfig+0x2ee>
 8003890:	4b13      	ldr	r3, [pc, #76]	; (80038e0 <UART_SetConfig+0x2cc>)
 8003892:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003896:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800389a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800389e:	d017      	beq.n	80038d0 <UART_SetConfig+0x2bc>
 80038a0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80038a4:	d82a      	bhi.n	80038fc <UART_SetConfig+0x2e8>
 80038a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80038aa:	d00b      	beq.n	80038c4 <UART_SetConfig+0x2b0>
 80038ac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80038b0:	d824      	bhi.n	80038fc <UART_SetConfig+0x2e8>
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d003      	beq.n	80038be <UART_SetConfig+0x2aa>
 80038b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038ba:	d006      	beq.n	80038ca <UART_SetConfig+0x2b6>
 80038bc:	e01e      	b.n	80038fc <UART_SetConfig+0x2e8>
 80038be:	2300      	movs	r3, #0
 80038c0:	77fb      	strb	r3, [r7, #31]
 80038c2:	e04b      	b.n	800395c <UART_SetConfig+0x348>
 80038c4:	2302      	movs	r3, #2
 80038c6:	77fb      	strb	r3, [r7, #31]
 80038c8:	e048      	b.n	800395c <UART_SetConfig+0x348>
 80038ca:	2304      	movs	r3, #4
 80038cc:	77fb      	strb	r3, [r7, #31]
 80038ce:	e045      	b.n	800395c <UART_SetConfig+0x348>
 80038d0:	2308      	movs	r3, #8
 80038d2:	77fb      	strb	r3, [r7, #31]
 80038d4:	e042      	b.n	800395c <UART_SetConfig+0x348>
 80038d6:	bf00      	nop
 80038d8:	efff69f3 	.word	0xefff69f3
 80038dc:	40011000 	.word	0x40011000
 80038e0:	40023800 	.word	0x40023800
 80038e4:	40004400 	.word	0x40004400
 80038e8:	40004800 	.word	0x40004800
 80038ec:	40004c00 	.word	0x40004c00
 80038f0:	40005000 	.word	0x40005000
 80038f4:	40011400 	.word	0x40011400
 80038f8:	40007800 	.word	0x40007800
 80038fc:	2310      	movs	r3, #16
 80038fe:	77fb      	strb	r3, [r7, #31]
 8003900:	e02c      	b.n	800395c <UART_SetConfig+0x348>
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	4a72      	ldr	r2, [pc, #456]	; (8003ad0 <UART_SetConfig+0x4bc>)
 8003908:	4293      	cmp	r3, r2
 800390a:	d125      	bne.n	8003958 <UART_SetConfig+0x344>
 800390c:	4b71      	ldr	r3, [pc, #452]	; (8003ad4 <UART_SetConfig+0x4c0>)
 800390e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003912:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003916:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800391a:	d017      	beq.n	800394c <UART_SetConfig+0x338>
 800391c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003920:	d817      	bhi.n	8003952 <UART_SetConfig+0x33e>
 8003922:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003926:	d00b      	beq.n	8003940 <UART_SetConfig+0x32c>
 8003928:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800392c:	d811      	bhi.n	8003952 <UART_SetConfig+0x33e>
 800392e:	2b00      	cmp	r3, #0
 8003930:	d003      	beq.n	800393a <UART_SetConfig+0x326>
 8003932:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003936:	d006      	beq.n	8003946 <UART_SetConfig+0x332>
 8003938:	e00b      	b.n	8003952 <UART_SetConfig+0x33e>
 800393a:	2300      	movs	r3, #0
 800393c:	77fb      	strb	r3, [r7, #31]
 800393e:	e00d      	b.n	800395c <UART_SetConfig+0x348>
 8003940:	2302      	movs	r3, #2
 8003942:	77fb      	strb	r3, [r7, #31]
 8003944:	e00a      	b.n	800395c <UART_SetConfig+0x348>
 8003946:	2304      	movs	r3, #4
 8003948:	77fb      	strb	r3, [r7, #31]
 800394a:	e007      	b.n	800395c <UART_SetConfig+0x348>
 800394c:	2308      	movs	r3, #8
 800394e:	77fb      	strb	r3, [r7, #31]
 8003950:	e004      	b.n	800395c <UART_SetConfig+0x348>
 8003952:	2310      	movs	r3, #16
 8003954:	77fb      	strb	r3, [r7, #31]
 8003956:	e001      	b.n	800395c <UART_SetConfig+0x348>
 8003958:	2310      	movs	r3, #16
 800395a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	69db      	ldr	r3, [r3, #28]
 8003960:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003964:	d15b      	bne.n	8003a1e <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8003966:	7ffb      	ldrb	r3, [r7, #31]
 8003968:	2b08      	cmp	r3, #8
 800396a:	d828      	bhi.n	80039be <UART_SetConfig+0x3aa>
 800396c:	a201      	add	r2, pc, #4	; (adr r2, 8003974 <UART_SetConfig+0x360>)
 800396e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003972:	bf00      	nop
 8003974:	08003999 	.word	0x08003999
 8003978:	080039a1 	.word	0x080039a1
 800397c:	080039a9 	.word	0x080039a9
 8003980:	080039bf 	.word	0x080039bf
 8003984:	080039af 	.word	0x080039af
 8003988:	080039bf 	.word	0x080039bf
 800398c:	080039bf 	.word	0x080039bf
 8003990:	080039bf 	.word	0x080039bf
 8003994:	080039b7 	.word	0x080039b7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003998:	f7fe feb0 	bl	80026fc <HAL_RCC_GetPCLK1Freq>
 800399c:	61b8      	str	r0, [r7, #24]
        break;
 800399e:	e013      	b.n	80039c8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80039a0:	f7fe fec0 	bl	8002724 <HAL_RCC_GetPCLK2Freq>
 80039a4:	61b8      	str	r0, [r7, #24]
        break;
 80039a6:	e00f      	b.n	80039c8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80039a8:	4b4b      	ldr	r3, [pc, #300]	; (8003ad8 <UART_SetConfig+0x4c4>)
 80039aa:	61bb      	str	r3, [r7, #24]
        break;
 80039ac:	e00c      	b.n	80039c8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80039ae:	f7fe fd93 	bl	80024d8 <HAL_RCC_GetSysClockFreq>
 80039b2:	61b8      	str	r0, [r7, #24]
        break;
 80039b4:	e008      	b.n	80039c8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80039b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80039ba:	61bb      	str	r3, [r7, #24]
        break;
 80039bc:	e004      	b.n	80039c8 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80039be:	2300      	movs	r3, #0
 80039c0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80039c2:	2301      	movs	r3, #1
 80039c4:	77bb      	strb	r3, [r7, #30]
        break;
 80039c6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80039c8:	69bb      	ldr	r3, [r7, #24]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d074      	beq.n	8003ab8 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80039ce:	69bb      	ldr	r3, [r7, #24]
 80039d0:	005a      	lsls	r2, r3, #1
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	685b      	ldr	r3, [r3, #4]
 80039d6:	085b      	lsrs	r3, r3, #1
 80039d8:	441a      	add	r2, r3
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	685b      	ldr	r3, [r3, #4]
 80039de:	fbb2 f3f3 	udiv	r3, r2, r3
 80039e2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80039e4:	693b      	ldr	r3, [r7, #16]
 80039e6:	2b0f      	cmp	r3, #15
 80039e8:	d916      	bls.n	8003a18 <UART_SetConfig+0x404>
 80039ea:	693b      	ldr	r3, [r7, #16]
 80039ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039f0:	d212      	bcs.n	8003a18 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80039f2:	693b      	ldr	r3, [r7, #16]
 80039f4:	b29b      	uxth	r3, r3
 80039f6:	f023 030f 	bic.w	r3, r3, #15
 80039fa:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80039fc:	693b      	ldr	r3, [r7, #16]
 80039fe:	085b      	lsrs	r3, r3, #1
 8003a00:	b29b      	uxth	r3, r3
 8003a02:	f003 0307 	and.w	r3, r3, #7
 8003a06:	b29a      	uxth	r2, r3
 8003a08:	89fb      	ldrh	r3, [r7, #14]
 8003a0a:	4313      	orrs	r3, r2
 8003a0c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	89fa      	ldrh	r2, [r7, #14]
 8003a14:	60da      	str	r2, [r3, #12]
 8003a16:	e04f      	b.n	8003ab8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003a18:	2301      	movs	r3, #1
 8003a1a:	77bb      	strb	r3, [r7, #30]
 8003a1c:	e04c      	b.n	8003ab8 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003a1e:	7ffb      	ldrb	r3, [r7, #31]
 8003a20:	2b08      	cmp	r3, #8
 8003a22:	d828      	bhi.n	8003a76 <UART_SetConfig+0x462>
 8003a24:	a201      	add	r2, pc, #4	; (adr r2, 8003a2c <UART_SetConfig+0x418>)
 8003a26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a2a:	bf00      	nop
 8003a2c:	08003a51 	.word	0x08003a51
 8003a30:	08003a59 	.word	0x08003a59
 8003a34:	08003a61 	.word	0x08003a61
 8003a38:	08003a77 	.word	0x08003a77
 8003a3c:	08003a67 	.word	0x08003a67
 8003a40:	08003a77 	.word	0x08003a77
 8003a44:	08003a77 	.word	0x08003a77
 8003a48:	08003a77 	.word	0x08003a77
 8003a4c:	08003a6f 	.word	0x08003a6f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003a50:	f7fe fe54 	bl	80026fc <HAL_RCC_GetPCLK1Freq>
 8003a54:	61b8      	str	r0, [r7, #24]
        break;
 8003a56:	e013      	b.n	8003a80 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003a58:	f7fe fe64 	bl	8002724 <HAL_RCC_GetPCLK2Freq>
 8003a5c:	61b8      	str	r0, [r7, #24]
        break;
 8003a5e:	e00f      	b.n	8003a80 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003a60:	4b1d      	ldr	r3, [pc, #116]	; (8003ad8 <UART_SetConfig+0x4c4>)
 8003a62:	61bb      	str	r3, [r7, #24]
        break;
 8003a64:	e00c      	b.n	8003a80 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003a66:	f7fe fd37 	bl	80024d8 <HAL_RCC_GetSysClockFreq>
 8003a6a:	61b8      	str	r0, [r7, #24]
        break;
 8003a6c:	e008      	b.n	8003a80 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003a6e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003a72:	61bb      	str	r3, [r7, #24]
        break;
 8003a74:	e004      	b.n	8003a80 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8003a76:	2300      	movs	r3, #0
 8003a78:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	77bb      	strb	r3, [r7, #30]
        break;
 8003a7e:	bf00      	nop
    }

    if (pclk != 0U)
 8003a80:	69bb      	ldr	r3, [r7, #24]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d018      	beq.n	8003ab8 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	685b      	ldr	r3, [r3, #4]
 8003a8a:	085a      	lsrs	r2, r3, #1
 8003a8c:	69bb      	ldr	r3, [r7, #24]
 8003a8e:	441a      	add	r2, r3
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	685b      	ldr	r3, [r3, #4]
 8003a94:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a98:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003a9a:	693b      	ldr	r3, [r7, #16]
 8003a9c:	2b0f      	cmp	r3, #15
 8003a9e:	d909      	bls.n	8003ab4 <UART_SetConfig+0x4a0>
 8003aa0:	693b      	ldr	r3, [r7, #16]
 8003aa2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003aa6:	d205      	bcs.n	8003ab4 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003aa8:	693b      	ldr	r3, [r7, #16]
 8003aaa:	b29a      	uxth	r2, r3
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	60da      	str	r2, [r3, #12]
 8003ab2:	e001      	b.n	8003ab8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003ab4:	2301      	movs	r3, #1
 8003ab6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2200      	movs	r2, #0
 8003abc:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003ac4:	7fbb      	ldrb	r3, [r7, #30]
}
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	3720      	adds	r7, #32
 8003aca:	46bd      	mov	sp, r7
 8003acc:	bd80      	pop	{r7, pc}
 8003ace:	bf00      	nop
 8003ad0:	40007c00 	.word	0x40007c00
 8003ad4:	40023800 	.word	0x40023800
 8003ad8:	00f42400 	.word	0x00f42400

08003adc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003adc:	b480      	push	{r7}
 8003ade:	b083      	sub	sp, #12
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ae8:	f003 0301 	and.w	r3, r3, #1
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d00a      	beq.n	8003b06 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	685b      	ldr	r3, [r3, #4]
 8003af6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	430a      	orrs	r2, r1
 8003b04:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b0a:	f003 0302 	and.w	r3, r3, #2
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d00a      	beq.n	8003b28 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	685b      	ldr	r3, [r3, #4]
 8003b18:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	430a      	orrs	r2, r1
 8003b26:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b2c:	f003 0304 	and.w	r3, r3, #4
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d00a      	beq.n	8003b4a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	685b      	ldr	r3, [r3, #4]
 8003b3a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	430a      	orrs	r2, r1
 8003b48:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b4e:	f003 0308 	and.w	r3, r3, #8
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d00a      	beq.n	8003b6c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	685b      	ldr	r3, [r3, #4]
 8003b5c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	430a      	orrs	r2, r1
 8003b6a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b70:	f003 0310 	and.w	r3, r3, #16
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d00a      	beq.n	8003b8e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	689b      	ldr	r3, [r3, #8]
 8003b7e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	430a      	orrs	r2, r1
 8003b8c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b92:	f003 0320 	and.w	r3, r3, #32
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d00a      	beq.n	8003bb0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	689b      	ldr	r3, [r3, #8]
 8003ba0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	430a      	orrs	r2, r1
 8003bae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d01a      	beq.n	8003bf2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	685b      	ldr	r3, [r3, #4]
 8003bc2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	430a      	orrs	r2, r1
 8003bd0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bd6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003bda:	d10a      	bne.n	8003bf2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	685b      	ldr	r3, [r3, #4]
 8003be2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	430a      	orrs	r2, r1
 8003bf0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bf6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d00a      	beq.n	8003c14 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	685b      	ldr	r3, [r3, #4]
 8003c04:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	430a      	orrs	r2, r1
 8003c12:	605a      	str	r2, [r3, #4]
  }
}
 8003c14:	bf00      	nop
 8003c16:	370c      	adds	r7, #12
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1e:	4770      	bx	lr

08003c20 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b086      	sub	sp, #24
 8003c24:	af02      	add	r7, sp, #8
 8003c26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003c30:	f7fd fd28 	bl	8001684 <HAL_GetTick>
 8003c34:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f003 0308 	and.w	r3, r3, #8
 8003c40:	2b08      	cmp	r3, #8
 8003c42:	d10e      	bne.n	8003c62 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003c44:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003c48:	9300      	str	r3, [sp, #0]
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003c52:	6878      	ldr	r0, [r7, #4]
 8003c54:	f000 f817 	bl	8003c86 <UART_WaitOnFlagUntilTimeout>
 8003c58:	4603      	mov	r3, r0
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d001      	beq.n	8003c62 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003c5e:	2303      	movs	r3, #3
 8003c60:	e00d      	b.n	8003c7e <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	2220      	movs	r2, #32
 8003c66:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2220      	movs	r2, #32
 8003c6c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	2200      	movs	r2, #0
 8003c72:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2200      	movs	r2, #0
 8003c78:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003c7c:	2300      	movs	r3, #0
}
 8003c7e:	4618      	mov	r0, r3
 8003c80:	3710      	adds	r7, #16
 8003c82:	46bd      	mov	sp, r7
 8003c84:	bd80      	pop	{r7, pc}

08003c86 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003c86:	b580      	push	{r7, lr}
 8003c88:	b09c      	sub	sp, #112	; 0x70
 8003c8a:	af00      	add	r7, sp, #0
 8003c8c:	60f8      	str	r0, [r7, #12]
 8003c8e:	60b9      	str	r1, [r7, #8]
 8003c90:	603b      	str	r3, [r7, #0]
 8003c92:	4613      	mov	r3, r2
 8003c94:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c96:	e0a5      	b.n	8003de4 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c98:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003c9a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003c9e:	f000 80a1 	beq.w	8003de4 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ca2:	f7fd fcef 	bl	8001684 <HAL_GetTick>
 8003ca6:	4602      	mov	r2, r0
 8003ca8:	683b      	ldr	r3, [r7, #0]
 8003caa:	1ad3      	subs	r3, r2, r3
 8003cac:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003cae:	429a      	cmp	r2, r3
 8003cb0:	d302      	bcc.n	8003cb8 <UART_WaitOnFlagUntilTimeout+0x32>
 8003cb2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d13e      	bne.n	8003d36 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cbe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003cc0:	e853 3f00 	ldrex	r3, [r3]
 8003cc4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003cc6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003cc8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003ccc:	667b      	str	r3, [r7, #100]	; 0x64
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	461a      	mov	r2, r3
 8003cd4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003cd6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003cd8:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cda:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003cdc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003cde:	e841 2300 	strex	r3, r2, [r1]
 8003ce2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003ce4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d1e6      	bne.n	8003cb8 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	3308      	adds	r3, #8
 8003cf0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cf2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003cf4:	e853 3f00 	ldrex	r3, [r3]
 8003cf8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003cfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cfc:	f023 0301 	bic.w	r3, r3, #1
 8003d00:	663b      	str	r3, [r7, #96]	; 0x60
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	3308      	adds	r3, #8
 8003d08:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003d0a:	64ba      	str	r2, [r7, #72]	; 0x48
 8003d0c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d0e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003d10:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003d12:	e841 2300 	strex	r3, r2, [r1]
 8003d16:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003d18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d1e5      	bne.n	8003cea <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	2220      	movs	r2, #32
 8003d22:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	2220      	movs	r2, #32
 8003d28:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8003d32:	2303      	movs	r3, #3
 8003d34:	e067      	b.n	8003e06 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f003 0304 	and.w	r3, r3, #4
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d04f      	beq.n	8003de4 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	69db      	ldr	r3, [r3, #28]
 8003d4a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d4e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d52:	d147      	bne.n	8003de4 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003d5c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d66:	e853 3f00 	ldrex	r3, [r3]
 8003d6a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d6e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003d72:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	461a      	mov	r2, r3
 8003d7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d7c:	637b      	str	r3, [r7, #52]	; 0x34
 8003d7e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d80:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003d82:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003d84:	e841 2300 	strex	r3, r2, [r1]
 8003d88:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003d8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d1e6      	bne.n	8003d5e <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	3308      	adds	r3, #8
 8003d96:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d98:	697b      	ldr	r3, [r7, #20]
 8003d9a:	e853 3f00 	ldrex	r3, [r3]
 8003d9e:	613b      	str	r3, [r7, #16]
   return(result);
 8003da0:	693b      	ldr	r3, [r7, #16]
 8003da2:	f023 0301 	bic.w	r3, r3, #1
 8003da6:	66bb      	str	r3, [r7, #104]	; 0x68
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	3308      	adds	r3, #8
 8003dae:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003db0:	623a      	str	r2, [r7, #32]
 8003db2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003db4:	69f9      	ldr	r1, [r7, #28]
 8003db6:	6a3a      	ldr	r2, [r7, #32]
 8003db8:	e841 2300 	strex	r3, r2, [r1]
 8003dbc:	61bb      	str	r3, [r7, #24]
   return(result);
 8003dbe:	69bb      	ldr	r3, [r7, #24]
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d1e5      	bne.n	8003d90 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	2220      	movs	r2, #32
 8003dc8:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	2220      	movs	r2, #32
 8003dce:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	2220      	movs	r2, #32
 8003dd4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	2200      	movs	r2, #0
 8003ddc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003de0:	2303      	movs	r3, #3
 8003de2:	e010      	b.n	8003e06 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	69da      	ldr	r2, [r3, #28]
 8003dea:	68bb      	ldr	r3, [r7, #8]
 8003dec:	4013      	ands	r3, r2
 8003dee:	68ba      	ldr	r2, [r7, #8]
 8003df0:	429a      	cmp	r2, r3
 8003df2:	bf0c      	ite	eq
 8003df4:	2301      	moveq	r3, #1
 8003df6:	2300      	movne	r3, #0
 8003df8:	b2db      	uxtb	r3, r3
 8003dfa:	461a      	mov	r2, r3
 8003dfc:	79fb      	ldrb	r3, [r7, #7]
 8003dfe:	429a      	cmp	r2, r3
 8003e00:	f43f af4a 	beq.w	8003c98 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003e04:	2300      	movs	r3, #0
}
 8003e06:	4618      	mov	r0, r3
 8003e08:	3770      	adds	r7, #112	; 0x70
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	bd80      	pop	{r7, pc}
	...

08003e10 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003e10:	b480      	push	{r7}
 8003e12:	b097      	sub	sp, #92	; 0x5c
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	60f8      	str	r0, [r7, #12]
 8003e18:	60b9      	str	r1, [r7, #8]
 8003e1a:	4613      	mov	r3, r2
 8003e1c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	68ba      	ldr	r2, [r7, #8]
 8003e22:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	88fa      	ldrh	r2, [r7, #6]
 8003e28:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	88fa      	ldrh	r2, [r7, #6]
 8003e30:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	2200      	movs	r2, #0
 8003e38:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	689b      	ldr	r3, [r3, #8]
 8003e3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e42:	d10e      	bne.n	8003e62 <UART_Start_Receive_IT+0x52>
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	691b      	ldr	r3, [r3, #16]
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d105      	bne.n	8003e58 <UART_Start_Receive_IT+0x48>
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8003e52:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003e56:	e02d      	b.n	8003eb4 <UART_Start_Receive_IT+0xa4>
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	22ff      	movs	r2, #255	; 0xff
 8003e5c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003e60:	e028      	b.n	8003eb4 <UART_Start_Receive_IT+0xa4>
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	689b      	ldr	r3, [r3, #8]
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d10d      	bne.n	8003e86 <UART_Start_Receive_IT+0x76>
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	691b      	ldr	r3, [r3, #16]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d104      	bne.n	8003e7c <UART_Start_Receive_IT+0x6c>
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	22ff      	movs	r2, #255	; 0xff
 8003e76:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003e7a:	e01b      	b.n	8003eb4 <UART_Start_Receive_IT+0xa4>
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	227f      	movs	r2, #127	; 0x7f
 8003e80:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003e84:	e016      	b.n	8003eb4 <UART_Start_Receive_IT+0xa4>
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	689b      	ldr	r3, [r3, #8]
 8003e8a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003e8e:	d10d      	bne.n	8003eac <UART_Start_Receive_IT+0x9c>
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	691b      	ldr	r3, [r3, #16]
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d104      	bne.n	8003ea2 <UART_Start_Receive_IT+0x92>
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	227f      	movs	r2, #127	; 0x7f
 8003e9c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003ea0:	e008      	b.n	8003eb4 <UART_Start_Receive_IT+0xa4>
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	223f      	movs	r2, #63	; 0x3f
 8003ea6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003eaa:	e003      	b.n	8003eb4 <UART_Start_Receive_IT+0xa4>
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	2200      	movs	r2, #0
 8003eb0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	2222      	movs	r2, #34	; 0x22
 8003ec0:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	3308      	adds	r3, #8
 8003ec8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003eca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ecc:	e853 3f00 	ldrex	r3, [r3]
 8003ed0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003ed2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ed4:	f043 0301 	orr.w	r3, r3, #1
 8003ed8:	657b      	str	r3, [r7, #84]	; 0x54
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	3308      	adds	r3, #8
 8003ee0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003ee2:	64ba      	str	r2, [r7, #72]	; 0x48
 8003ee4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ee6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003ee8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003eea:	e841 2300 	strex	r3, r2, [r1]
 8003eee:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003ef0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d1e5      	bne.n	8003ec2 <UART_Start_Receive_IT+0xb2>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	689b      	ldr	r3, [r3, #8]
 8003efa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003efe:	d107      	bne.n	8003f10 <UART_Start_Receive_IT+0x100>
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	691b      	ldr	r3, [r3, #16]
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d103      	bne.n	8003f10 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	4a24      	ldr	r2, [pc, #144]	; (8003f9c <UART_Start_Receive_IT+0x18c>)
 8003f0c:	665a      	str	r2, [r3, #100]	; 0x64
 8003f0e:	e002      	b.n	8003f16 <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	4a23      	ldr	r2, [pc, #140]	; (8003fa0 <UART_Start_Receive_IT+0x190>)
 8003f14:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	2200      	movs	r2, #0
 8003f1a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	691b      	ldr	r3, [r3, #16]
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d019      	beq.n	8003f5a <UART_Start_Receive_IT+0x14a>
  { 
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f2e:	e853 3f00 	ldrex	r3, [r3]
 8003f32:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f36:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8003f3a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	461a      	mov	r2, r3
 8003f42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f44:	637b      	str	r3, [r7, #52]	; 0x34
 8003f46:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f48:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003f4a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003f4c:	e841 2300 	strex	r3, r2, [r1]
 8003f50:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003f52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d1e6      	bne.n	8003f26 <UART_Start_Receive_IT+0x116>
 8003f58:	e018      	b.n	8003f8c <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f60:	697b      	ldr	r3, [r7, #20]
 8003f62:	e853 3f00 	ldrex	r3, [r3]
 8003f66:	613b      	str	r3, [r7, #16]
   return(result);
 8003f68:	693b      	ldr	r3, [r7, #16]
 8003f6a:	f043 0320 	orr.w	r3, r3, #32
 8003f6e:	653b      	str	r3, [r7, #80]	; 0x50
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	461a      	mov	r2, r3
 8003f76:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f78:	623b      	str	r3, [r7, #32]
 8003f7a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f7c:	69f9      	ldr	r1, [r7, #28]
 8003f7e:	6a3a      	ldr	r2, [r7, #32]
 8003f80:	e841 2300 	strex	r3, r2, [r1]
 8003f84:	61bb      	str	r3, [r7, #24]
   return(result);
 8003f86:	69bb      	ldr	r3, [r7, #24]
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d1e6      	bne.n	8003f5a <UART_Start_Receive_IT+0x14a>
  }
  return HAL_OK;
 8003f8c:	2300      	movs	r3, #0
}
 8003f8e:	4618      	mov	r0, r3
 8003f90:	375c      	adds	r7, #92	; 0x5c
 8003f92:	46bd      	mov	sp, r7
 8003f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f98:	4770      	bx	lr
 8003f9a:	bf00      	nop
 8003f9c:	08004247 	.word	0x08004247
 8003fa0:	080040eb 	.word	0x080040eb

08003fa4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003fa4:	b480      	push	{r7}
 8003fa6:	b095      	sub	sp, #84	; 0x54
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003fb4:	e853 3f00 	ldrex	r3, [r3]
 8003fb8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003fba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fbc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003fc0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	461a      	mov	r2, r3
 8003fc8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003fca:	643b      	str	r3, [r7, #64]	; 0x40
 8003fcc:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fce:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003fd0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003fd2:	e841 2300 	strex	r3, r2, [r1]
 8003fd6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003fd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d1e6      	bne.n	8003fac <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	3308      	adds	r3, #8
 8003fe4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fe6:	6a3b      	ldr	r3, [r7, #32]
 8003fe8:	e853 3f00 	ldrex	r3, [r3]
 8003fec:	61fb      	str	r3, [r7, #28]
   return(result);
 8003fee:	69fb      	ldr	r3, [r7, #28]
 8003ff0:	f023 0301 	bic.w	r3, r3, #1
 8003ff4:	64bb      	str	r3, [r7, #72]	; 0x48
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	3308      	adds	r3, #8
 8003ffc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003ffe:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004000:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004002:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004004:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004006:	e841 2300 	strex	r3, r2, [r1]
 800400a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800400c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800400e:	2b00      	cmp	r3, #0
 8004010:	d1e5      	bne.n	8003fde <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004016:	2b01      	cmp	r3, #1
 8004018:	d118      	bne.n	800404c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	e853 3f00 	ldrex	r3, [r3]
 8004026:	60bb      	str	r3, [r7, #8]
   return(result);
 8004028:	68bb      	ldr	r3, [r7, #8]
 800402a:	f023 0310 	bic.w	r3, r3, #16
 800402e:	647b      	str	r3, [r7, #68]	; 0x44
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	461a      	mov	r2, r3
 8004036:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004038:	61bb      	str	r3, [r7, #24]
 800403a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800403c:	6979      	ldr	r1, [r7, #20]
 800403e:	69ba      	ldr	r2, [r7, #24]
 8004040:	e841 2300 	strex	r3, r2, [r1]
 8004044:	613b      	str	r3, [r7, #16]
   return(result);
 8004046:	693b      	ldr	r3, [r7, #16]
 8004048:	2b00      	cmp	r3, #0
 800404a:	d1e6      	bne.n	800401a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2220      	movs	r2, #32
 8004050:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	2200      	movs	r2, #0
 8004056:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2200      	movs	r2, #0
 800405c:	665a      	str	r2, [r3, #100]	; 0x64
}
 800405e:	bf00      	nop
 8004060:	3754      	adds	r7, #84	; 0x54
 8004062:	46bd      	mov	sp, r7
 8004064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004068:	4770      	bx	lr

0800406a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800406a:	b580      	push	{r7, lr}
 800406c:	b084      	sub	sp, #16
 800406e:	af00      	add	r7, sp, #0
 8004070:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004076:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	2200      	movs	r2, #0
 800407c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	2200      	movs	r2, #0
 8004084:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004088:	68f8      	ldr	r0, [r7, #12]
 800408a:	f7ff faad 	bl	80035e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800408e:	bf00      	nop
 8004090:	3710      	adds	r7, #16
 8004092:	46bd      	mov	sp, r7
 8004094:	bd80      	pop	{r7, pc}

08004096 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004096:	b580      	push	{r7, lr}
 8004098:	b088      	sub	sp, #32
 800409a:	af00      	add	r7, sp, #0
 800409c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	e853 3f00 	ldrex	r3, [r3]
 80040aa:	60bb      	str	r3, [r7, #8]
   return(result);
 80040ac:	68bb      	ldr	r3, [r7, #8]
 80040ae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80040b2:	61fb      	str	r3, [r7, #28]
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	461a      	mov	r2, r3
 80040ba:	69fb      	ldr	r3, [r7, #28]
 80040bc:	61bb      	str	r3, [r7, #24]
 80040be:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040c0:	6979      	ldr	r1, [r7, #20]
 80040c2:	69ba      	ldr	r2, [r7, #24]
 80040c4:	e841 2300 	strex	r3, r2, [r1]
 80040c8:	613b      	str	r3, [r7, #16]
   return(result);
 80040ca:	693b      	ldr	r3, [r7, #16]
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d1e6      	bne.n	800409e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2220      	movs	r2, #32
 80040d4:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	2200      	movs	r2, #0
 80040da:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80040dc:	6878      	ldr	r0, [r7, #4]
 80040de:	f7ff fa79 	bl	80035d4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80040e2:	bf00      	nop
 80040e4:	3720      	adds	r7, #32
 80040e6:	46bd      	mov	sp, r7
 80040e8:	bd80      	pop	{r7, pc}

080040ea <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80040ea:	b580      	push	{r7, lr}
 80040ec:	b096      	sub	sp, #88	; 0x58
 80040ee:	af00      	add	r7, sp, #0
 80040f0:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80040f8:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004100:	2b22      	cmp	r3, #34	; 0x22
 8004102:	f040 8094 	bne.w	800422e <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800410c:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004110:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8004114:	b2d9      	uxtb	r1, r3
 8004116:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800411a:	b2da      	uxtb	r2, r3
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004120:	400a      	ands	r2, r1
 8004122:	b2d2      	uxtb	r2, r2
 8004124:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800412a:	1c5a      	adds	r2, r3, #1
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004136:	b29b      	uxth	r3, r3
 8004138:	3b01      	subs	r3, #1
 800413a:	b29a      	uxth	r2, r3
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004148:	b29b      	uxth	r3, r3
 800414a:	2b00      	cmp	r3, #0
 800414c:	d177      	bne.n	800423e <UART_RxISR_8BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004154:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004156:	e853 3f00 	ldrex	r3, [r3]
 800415a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800415c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800415e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004162:	653b      	str	r3, [r7, #80]	; 0x50
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	461a      	mov	r2, r3
 800416a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800416c:	647b      	str	r3, [r7, #68]	; 0x44
 800416e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004170:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004172:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004174:	e841 2300 	strex	r3, r2, [r1]
 8004178:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800417a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800417c:	2b00      	cmp	r3, #0
 800417e:	d1e6      	bne.n	800414e <UART_RxISR_8BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	3308      	adds	r3, #8
 8004186:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800418a:	e853 3f00 	ldrex	r3, [r3]
 800418e:	623b      	str	r3, [r7, #32]
   return(result);
 8004190:	6a3b      	ldr	r3, [r7, #32]
 8004192:	f023 0301 	bic.w	r3, r3, #1
 8004196:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	3308      	adds	r3, #8
 800419e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80041a0:	633a      	str	r2, [r7, #48]	; 0x30
 80041a2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041a4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80041a6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80041a8:	e841 2300 	strex	r3, r2, [r1]
 80041ac:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80041ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d1e5      	bne.n	8004180 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2220      	movs	r2, #32
 80041b8:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	2200      	movs	r2, #0
 80041be:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80041c4:	2b01      	cmp	r3, #1
 80041c6:	d12e      	bne.n	8004226 <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2200      	movs	r2, #0
 80041cc:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041d4:	693b      	ldr	r3, [r7, #16]
 80041d6:	e853 3f00 	ldrex	r3, [r3]
 80041da:	60fb      	str	r3, [r7, #12]
   return(result);
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	f023 0310 	bic.w	r3, r3, #16
 80041e2:	64bb      	str	r3, [r7, #72]	; 0x48
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	461a      	mov	r2, r3
 80041ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80041ec:	61fb      	str	r3, [r7, #28]
 80041ee:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041f0:	69b9      	ldr	r1, [r7, #24]
 80041f2:	69fa      	ldr	r2, [r7, #28]
 80041f4:	e841 2300 	strex	r3, r2, [r1]
 80041f8:	617b      	str	r3, [r7, #20]
   return(result);
 80041fa:	697b      	ldr	r3, [r7, #20]
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d1e6      	bne.n	80041ce <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	69db      	ldr	r3, [r3, #28]
 8004206:	f003 0310 	and.w	r3, r3, #16
 800420a:	2b10      	cmp	r3, #16
 800420c:	d103      	bne.n	8004216 <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	2210      	movs	r2, #16
 8004214:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800421c:	4619      	mov	r1, r3
 800421e:	6878      	ldr	r0, [r7, #4]
 8004220:	f7ff f9ec 	bl	80035fc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004224:	e00b      	b.n	800423e <UART_RxISR_8BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 8004226:	6878      	ldr	r0, [r7, #4]
 8004228:	f000 fa2c 	bl	8004684 <HAL_UART_RxCpltCallback>
}
 800422c:	e007      	b.n	800423e <UART_RxISR_8BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	699a      	ldr	r2, [r3, #24]
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f042 0208 	orr.w	r2, r2, #8
 800423c:	619a      	str	r2, [r3, #24]
}
 800423e:	bf00      	nop
 8004240:	3758      	adds	r7, #88	; 0x58
 8004242:	46bd      	mov	sp, r7
 8004244:	bd80      	pop	{r7, pc}

08004246 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004246:	b580      	push	{r7, lr}
 8004248:	b096      	sub	sp, #88	; 0x58
 800424a:	af00      	add	r7, sp, #0
 800424c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004254:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800425c:	2b22      	cmp	r3, #34	; 0x22
 800425e:	f040 8094 	bne.w	800438a <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004268:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004270:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8004272:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8004276:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800427a:	4013      	ands	r3, r2
 800427c:	b29a      	uxth	r2, r3
 800427e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004280:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004286:	1c9a      	adds	r2, r3, #2
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004292:	b29b      	uxth	r3, r3
 8004294:	3b01      	subs	r3, #1
 8004296:	b29a      	uxth	r2, r3
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80042a4:	b29b      	uxth	r3, r3
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d177      	bne.n	800439a <UART_RxISR_16BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042b2:	e853 3f00 	ldrex	r3, [r3]
 80042b6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80042b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042ba:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80042be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	461a      	mov	r2, r3
 80042c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80042c8:	643b      	str	r3, [r7, #64]	; 0x40
 80042ca:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042cc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80042ce:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80042d0:	e841 2300 	strex	r3, r2, [r1]
 80042d4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80042d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d1e6      	bne.n	80042aa <UART_RxISR_16BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	3308      	adds	r3, #8
 80042e2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042e4:	6a3b      	ldr	r3, [r7, #32]
 80042e6:	e853 3f00 	ldrex	r3, [r3]
 80042ea:	61fb      	str	r3, [r7, #28]
   return(result);
 80042ec:	69fb      	ldr	r3, [r7, #28]
 80042ee:	f023 0301 	bic.w	r3, r3, #1
 80042f2:	64bb      	str	r3, [r7, #72]	; 0x48
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	3308      	adds	r3, #8
 80042fa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80042fc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80042fe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004300:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004302:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004304:	e841 2300 	strex	r3, r2, [r1]
 8004308:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800430a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800430c:	2b00      	cmp	r3, #0
 800430e:	d1e5      	bne.n	80042dc <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2220      	movs	r2, #32
 8004314:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	2200      	movs	r2, #0
 800431a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004320:	2b01      	cmp	r3, #1
 8004322:	d12e      	bne.n	8004382 <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2200      	movs	r2, #0
 8004328:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	e853 3f00 	ldrex	r3, [r3]
 8004336:	60bb      	str	r3, [r7, #8]
   return(result);
 8004338:	68bb      	ldr	r3, [r7, #8]
 800433a:	f023 0310 	bic.w	r3, r3, #16
 800433e:	647b      	str	r3, [r7, #68]	; 0x44
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	461a      	mov	r2, r3
 8004346:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004348:	61bb      	str	r3, [r7, #24]
 800434a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800434c:	6979      	ldr	r1, [r7, #20]
 800434e:	69ba      	ldr	r2, [r7, #24]
 8004350:	e841 2300 	strex	r3, r2, [r1]
 8004354:	613b      	str	r3, [r7, #16]
   return(result);
 8004356:	693b      	ldr	r3, [r7, #16]
 8004358:	2b00      	cmp	r3, #0
 800435a:	d1e6      	bne.n	800432a <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	69db      	ldr	r3, [r3, #28]
 8004362:	f003 0310 	and.w	r3, r3, #16
 8004366:	2b10      	cmp	r3, #16
 8004368:	d103      	bne.n	8004372 <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	2210      	movs	r2, #16
 8004370:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004378:	4619      	mov	r1, r3
 800437a:	6878      	ldr	r0, [r7, #4]
 800437c:	f7ff f93e 	bl	80035fc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004380:	e00b      	b.n	800439a <UART_RxISR_16BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 8004382:	6878      	ldr	r0, [r7, #4]
 8004384:	f000 f97e 	bl	8004684 <HAL_UART_RxCpltCallback>
}
 8004388:	e007      	b.n	800439a <UART_RxISR_16BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	699a      	ldr	r2, [r3, #24]
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f042 0208 	orr.w	r2, r2, #8
 8004398:	619a      	str	r2, [r3, #24]
}
 800439a:	bf00      	nop
 800439c:	3758      	adds	r7, #88	; 0x58
 800439e:	46bd      	mov	sp, r7
 80043a0:	bd80      	pop	{r7, pc}
	...

080043a4 <UART_Init>:
Wifi_Uart Wifi_Uart_t;
char tmp;


void UART_Init(void)
{
 80043a4:	b580      	push	{r7, lr}
 80043a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_Init 2 */
  wifi_uart.Instance = UART_WIFI_CMD;
 80043a8:	4b14      	ldr	r3, [pc, #80]	; (80043fc <UART_Init+0x58>)
 80043aa:	4a15      	ldr	r2, [pc, #84]	; (8004400 <UART_Init+0x5c>)
 80043ac:	601a      	str	r2, [r3, #0]
  wifi_uart.Init.BaudRate = 115200;
 80043ae:	4b13      	ldr	r3, [pc, #76]	; (80043fc <UART_Init+0x58>)
 80043b0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80043b4:	605a      	str	r2, [r3, #4]
  wifi_uart.Init.WordLength = UART_WORDLENGTH_8B;
 80043b6:	4b11      	ldr	r3, [pc, #68]	; (80043fc <UART_Init+0x58>)
 80043b8:	2200      	movs	r2, #0
 80043ba:	609a      	str	r2, [r3, #8]
  wifi_uart.Init.StopBits = UART_STOPBITS_1;
 80043bc:	4b0f      	ldr	r3, [pc, #60]	; (80043fc <UART_Init+0x58>)
 80043be:	2200      	movs	r2, #0
 80043c0:	60da      	str	r2, [r3, #12]
  wifi_uart.Init.Parity = UART_PARITY_NONE;
 80043c2:	4b0e      	ldr	r3, [pc, #56]	; (80043fc <UART_Init+0x58>)
 80043c4:	2200      	movs	r2, #0
 80043c6:	611a      	str	r2, [r3, #16]
  wifi_uart.Init.Mode = UART_MODE_TX_RX;
 80043c8:	4b0c      	ldr	r3, [pc, #48]	; (80043fc <UART_Init+0x58>)
 80043ca:	220c      	movs	r2, #12
 80043cc:	615a      	str	r2, [r3, #20]
  wifi_uart.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80043ce:	4b0b      	ldr	r3, [pc, #44]	; (80043fc <UART_Init+0x58>)
 80043d0:	2200      	movs	r2, #0
 80043d2:	619a      	str	r2, [r3, #24]
  wifi_uart.Init.OverSampling = UART_OVERSAMPLING_16;
 80043d4:	4b09      	ldr	r3, [pc, #36]	; (80043fc <UART_Init+0x58>)
 80043d6:	2200      	movs	r2, #0
 80043d8:	61da      	str	r2, [r3, #28]
  wifi_uart.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80043da:	4b08      	ldr	r3, [pc, #32]	; (80043fc <UART_Init+0x58>)
 80043dc:	2200      	movs	r2, #0
 80043de:	621a      	str	r2, [r3, #32]
  wifi_uart.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80043e0:	4b06      	ldr	r3, [pc, #24]	; (80043fc <UART_Init+0x58>)
 80043e2:	2200      	movs	r2, #0
 80043e4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&wifi_uart) != HAL_OK)
 80043e6:	4805      	ldr	r0, [pc, #20]	; (80043fc <UART_Init+0x58>)
 80043e8:	f7fe fcfa 	bl	8002de0 <HAL_UART_Init>
 80043ec:	4603      	mov	r3, r0
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d001      	beq.n	80043f6 <UART_Init+0x52>
  {
    Error_Handler();
 80043f2:	f7fc ff37 	bl	8001264 <Error_Handler>
  }
  /* USER CODE END UART5_Init 2 */
}
 80043f6:	bf00      	nop
 80043f8:	bd80      	pop	{r7, pc}
 80043fa:	bf00      	nop
 80043fc:	20000764 	.word	0x20000764
 8004400:	40004400 	.word	0x40004400

08004404 <_write>:

int _write(int file, char *ptr, int len)
{
 8004404:	b580      	push	{r7, lr}
 8004406:	b086      	sub	sp, #24
 8004408:	af00      	add	r7, sp, #0
 800440a:	60f8      	str	r0, [r7, #12]
 800440c:	60b9      	str	r1, [r7, #8]
 800440e:	607a      	str	r2, [r7, #4]
	HAL_StatusTypeDef ret = HAL_UART_Transmit(&UART_CONSOLE , (uint8_t *)ptr, len , 100);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	b29a      	uxth	r2, r3
 8004414:	2364      	movs	r3, #100	; 0x64
 8004416:	68b9      	ldr	r1, [r7, #8]
 8004418:	4804      	ldr	r0, [pc, #16]	; (800442c <_write+0x28>)
 800441a:	f7fe fd2f 	bl	8002e7c <HAL_UART_Transmit>
 800441e:	4603      	mov	r3, r0
 8004420:	75fb      	strb	r3, [r7, #23]
	UNUSED(ret);
}
 8004422:	bf00      	nop
 8004424:	4618      	mov	r0, r3
 8004426:	3718      	adds	r7, #24
 8004428:	46bd      	mov	sp, r7
 800442a:	bd80      	pop	{r7, pc}
 800442c:	200006d8 	.word	0x200006d8

08004430 <console_buf_wr>:
static void console_buf_wr(char *console_buf , size_t *console_buf_len)
{
 8004430:	b580      	push	{r7, lr}
 8004432:	b084      	sub	sp, #16
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]
 8004438:	6039      	str	r1, [r7, #0]
	size_t len = *console_buf_len;
 800443a:	683b      	ldr	r3, [r7, #0]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	60bb      	str	r3, [r7, #8]
	console_buf[len] ='\0';
 8004440:	687a      	ldr	r2, [r7, #4]
 8004442:	68bb      	ldr	r3, [r7, #8]
 8004444:	4413      	add	r3, r2
 8004446:	2200      	movs	r2, #0
 8004448:	701a      	strb	r2, [r3, #0]
	for(size_t i = 0; i < len; i++)
 800444a:	2300      	movs	r3, #0
 800444c:	60fb      	str	r3, [r7, #12]
 800444e:	e00d      	b.n	800446c <console_buf_wr+0x3c>
	  {
		 _write(stdout, &console_buf[i], 1);
 8004450:	4b0b      	ldr	r3, [pc, #44]	; (8004480 <console_buf_wr+0x50>)
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	689b      	ldr	r3, [r3, #8]
 8004456:	4618      	mov	r0, r3
 8004458:	687a      	ldr	r2, [r7, #4]
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	4413      	add	r3, r2
 800445e:	2201      	movs	r2, #1
 8004460:	4619      	mov	r1, r3
 8004462:	f7ff ffcf 	bl	8004404 <_write>
	for(size_t i = 0; i < len; i++)
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	3301      	adds	r3, #1
 800446a:	60fb      	str	r3, [r7, #12]
 800446c:	68fa      	ldr	r2, [r7, #12]
 800446e:	68bb      	ldr	r3, [r7, #8]
 8004470:	429a      	cmp	r2, r3
 8004472:	d3ed      	bcc.n	8004450 <console_buf_wr+0x20>
	  }
}
 8004474:	bf00      	nop
 8004476:	bf00      	nop
 8004478:	3710      	adds	r7, #16
 800447a:	46bd      	mov	sp, r7
 800447c:	bd80      	pop	{r7, pc}
 800447e:	bf00      	nop
 8004480:	20000548 	.word	0x20000548

08004484 <console_buf_clr>:
static void console_buf_clr(char *console_buf , size_t *console_buf_len)
{
 8004484:	b580      	push	{r7, lr}
 8004486:	b084      	sub	sp, #16
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]
 800448c:	6039      	str	r1, [r7, #0]
	size_t len = *console_buf_len;
 800448e:	683b      	ldr	r3, [r7, #0]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	60fb      	str	r3, [r7, #12]
	memset(console_buf  , 0 , len);
 8004494:	68fa      	ldr	r2, [r7, #12]
 8004496:	2100      	movs	r1, #0
 8004498:	6878      	ldr	r0, [r7, #4]
 800449a:	f000 fc90 	bl	8004dbe <memset>
	*console_buf_len = 0;
 800449e:	683b      	ldr	r3, [r7, #0]
 80044a0:	2200      	movs	r2, #0
 80044a2:	601a      	str	r2, [r3, #0]

}
 80044a4:	bf00      	nop
 80044a6:	3710      	adds	r7, #16
 80044a8:	46bd      	mov	sp, r7
 80044aa:	bd80      	pop	{r7, pc}

080044ac <uart_write>:
static wifi_api_status uart_write(char *buffer)
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b082      	sub	sp, #8
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
	Wifi_Uart_t.WiFi_Tx_len = strlen(buffer);
 80044b4:	6878      	ldr	r0, [r7, #4]
 80044b6:	f7fb feb3 	bl	8000220 <strlen>
 80044ba:	4603      	mov	r3, r0
 80044bc:	b2da      	uxtb	r2, r3
 80044be:	4b0a      	ldr	r3, [pc, #40]	; (80044e8 <uart_write+0x3c>)
 80044c0:	711a      	strb	r2, [r3, #4]
	if(HAL_UART_Transmit(&wifi_uart, (uint8_t *)buffer, Wifi_Uart_t.WiFi_Tx_len, 1000) == HAL_OK)
 80044c2:	4b09      	ldr	r3, [pc, #36]	; (80044e8 <uart_write+0x3c>)
 80044c4:	791b      	ldrb	r3, [r3, #4]
 80044c6:	b29a      	uxth	r2, r3
 80044c8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80044cc:	6879      	ldr	r1, [r7, #4]
 80044ce:	4807      	ldr	r0, [pc, #28]	; (80044ec <uart_write+0x40>)
 80044d0:	f7fe fcd4 	bl	8002e7c <HAL_UART_Transmit>
 80044d4:	4603      	mov	r3, r0
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d101      	bne.n	80044de <uart_write+0x32>
		return MS_OK;
 80044da:	2301      	movs	r3, #1
 80044dc:	e000      	b.n	80044e0 <uart_write+0x34>
	else
		return MS_NOT_OK;
 80044de:	2300      	movs	r3, #0
}
 80044e0:	4618      	mov	r0, r3
 80044e2:	3708      	adds	r7, #8
 80044e4:	46bd      	mov	sp, r7
 80044e6:	bd80      	pop	{r7, pc}
 80044e8:	200007e8 	.word	0x200007e8
 80044ec:	20000764 	.word	0x20000764

080044f0 <wifi_mode>:
			return MS_OK;
		else
			return MS_NOT_OK;
}
wifi_api_status wifi_mode(wifi_mode_config cnt)
{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	b084      	sub	sp, #16
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	4603      	mov	r3, r0
 80044f8:	71fb      	strb	r3, [r7, #7]
	wifi_api_status LucStatus = MS_NOT_OK;
 80044fa:	2300      	movs	r3, #0
 80044fc:	73fb      	strb	r3, [r7, #15]
	Wifi_Uart_t.WiFi_Tx = WIFI_MODE_CMD(cnt);
 80044fe:	4b07      	ldr	r3, [pc, #28]	; (800451c <wifi_mode+0x2c>)
 8004500:	4a07      	ldr	r2, [pc, #28]	; (8004520 <wifi_mode+0x30>)
 8004502:	601a      	str	r2, [r3, #0]
	LucStatus = uart_write(Wifi_Uart_t.WiFi_Tx);
 8004504:	4b05      	ldr	r3, [pc, #20]	; (800451c <wifi_mode+0x2c>)
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	4618      	mov	r0, r3
 800450a:	f7ff ffcf 	bl	80044ac <uart_write>
 800450e:	4603      	mov	r3, r0
 8004510:	73fb      	strb	r3, [r7, #15]
	return LucStatus;
 8004512:	7bfb      	ldrb	r3, [r7, #15]
}
 8004514:	4618      	mov	r0, r3
 8004516:	3710      	adds	r7, #16
 8004518:	46bd      	mov	sp, r7
 800451a:	bd80      	pop	{r7, pc}
 800451c:	200007e8 	.word	0x200007e8
 8004520:	080091ec 	.word	0x080091ec

08004524 <wifi_ap_connect>:
wifi_api_status wifi_ap_connect(char *ssid , char *psk)
{
 8004524:	b580      	push	{r7, lr}
 8004526:	b084      	sub	sp, #16
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]
 800452c:	6039      	str	r1, [r7, #0]
	wifi_api_status LucStatus = MS_NOT_OK;
 800452e:	2300      	movs	r3, #0
 8004530:	73fb      	strb	r3, [r7, #15]
	Wifi_Uart_t.WiFi_Tx = malloc(sizeof(char) * 100);
 8004532:	2064      	movs	r0, #100	; 0x64
 8004534:	f000 f8da 	bl	80046ec <malloc>
 8004538:	4603      	mov	r3, r0
 800453a:	461a      	mov	r2, r3
 800453c:	4b0c      	ldr	r3, [pc, #48]	; (8004570 <wifi_ap_connect+0x4c>)
 800453e:	601a      	str	r2, [r3, #0]
	sprintf(Wifi_Uart_t.WiFi_Tx , WIFI_CONNECT_AP_CMD , ssid , psk);
 8004540:	4b0b      	ldr	r3, [pc, #44]	; (8004570 <wifi_ap_connect+0x4c>)
 8004542:	6818      	ldr	r0, [r3, #0]
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	687a      	ldr	r2, [r7, #4]
 8004548:	490a      	ldr	r1, [pc, #40]	; (8004574 <wifi_ap_connect+0x50>)
 800454a:	f000 fbd5 	bl	8004cf8 <sprintf>
	LucStatus = uart_write(Wifi_Uart_t.WiFi_Tx);
 800454e:	4b08      	ldr	r3, [pc, #32]	; (8004570 <wifi_ap_connect+0x4c>)
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	4618      	mov	r0, r3
 8004554:	f7ff ffaa 	bl	80044ac <uart_write>
 8004558:	4603      	mov	r3, r0
 800455a:	73fb      	strb	r3, [r7, #15]
	free(Wifi_Uart_t.WiFi_Tx);
 800455c:	4b04      	ldr	r3, [pc, #16]	; (8004570 <wifi_ap_connect+0x4c>)
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	4618      	mov	r0, r3
 8004562:	f000 f8cb 	bl	80046fc <free>
	return LucStatus;
 8004566:	7bfb      	ldrb	r3, [r7, #15]
}
 8004568:	4618      	mov	r0, r3
 800456a:	3710      	adds	r7, #16
 800456c:	46bd      	mov	sp, r7
 800456e:	bd80      	pop	{r7, pc}
 8004570:	200007e8 	.word	0x200007e8
 8004574:	080091fc 	.word	0x080091fc

08004578 <wifi_rst>:
wifi_api_status wifi_rst()
{
 8004578:	b580      	push	{r7, lr}
 800457a:	b082      	sub	sp, #8
 800457c:	af00      	add	r7, sp, #0
	wifi_api_status LucStatus = MS_NOT_OK;
 800457e:	2300      	movs	r3, #0
 8004580:	71fb      	strb	r3, [r7, #7]
	Wifi_Uart_t.WiFi_Tx = WIFI_RST_CMD;
 8004582:	4b07      	ldr	r3, [pc, #28]	; (80045a0 <wifi_rst+0x28>)
 8004584:	4a07      	ldr	r2, [pc, #28]	; (80045a4 <wifi_rst+0x2c>)
 8004586:	601a      	str	r2, [r3, #0]
	LucStatus = uart_write(Wifi_Uart_t.WiFi_Tx);
 8004588:	4b05      	ldr	r3, [pc, #20]	; (80045a0 <wifi_rst+0x28>)
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	4618      	mov	r0, r3
 800458e:	f7ff ff8d 	bl	80044ac <uart_write>
 8004592:	4603      	mov	r3, r0
 8004594:	71fb      	strb	r3, [r7, #7]
	return LucStatus;
 8004596:	79fb      	ldrb	r3, [r7, #7]
}
 8004598:	4618      	mov	r0, r3
 800459a:	3708      	adds	r7, #8
 800459c:	46bd      	mov	sp, r7
 800459e:	bd80      	pop	{r7, pc}
 80045a0:	200007e8 	.word	0x200007e8
 80045a4:	08009214 	.word	0x08009214

080045a8 <wifi_mac_add>:
	Wifi_Uart_t.WiFi_Tx = WIFI_START_CMD;
	LucStatus = uart_write(Wifi_Uart_t.WiFi_Tx);
	return LucStatus;
}
wifi_api_status wifi_mac_add()
{
 80045a8:	b580      	push	{r7, lr}
 80045aa:	b082      	sub	sp, #8
 80045ac:	af00      	add	r7, sp, #0
	wifi_api_status LucStatus = MS_NOT_OK;
 80045ae:	2300      	movs	r3, #0
 80045b0:	71fb      	strb	r3, [r7, #7]
	Wifi_Uart_t.WiFi_Tx = WIFI_MAC_CMD;
 80045b2:	4b07      	ldr	r3, [pc, #28]	; (80045d0 <wifi_mac_add+0x28>)
 80045b4:	4a07      	ldr	r2, [pc, #28]	; (80045d4 <wifi_mac_add+0x2c>)
 80045b6:	601a      	str	r2, [r3, #0]
	LucStatus = uart_write(Wifi_Uart_t.WiFi_Tx);
 80045b8:	4b05      	ldr	r3, [pc, #20]	; (80045d0 <wifi_mac_add+0x28>)
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	4618      	mov	r0, r3
 80045be:	f7ff ff75 	bl	80044ac <uart_write>
 80045c2:	4603      	mov	r3, r0
 80045c4:	71fb      	strb	r3, [r7, #7]
	return LucStatus;
 80045c6:	79fb      	ldrb	r3, [r7, #7]
}
 80045c8:	4618      	mov	r0, r3
 80045ca:	3708      	adds	r7, #8
 80045cc:	46bd      	mov	sp, r7
 80045ce:	bd80      	pop	{r7, pc}
 80045d0:	200007e8 	.word	0x200007e8
 80045d4:	08009234 	.word	0x08009234

080045d8 <tcp_server_conn>:
wifi_api_status tcp_server_conn(char *ipadress , char *port)
{
 80045d8:	b580      	push	{r7, lr}
 80045da:	b084      	sub	sp, #16
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
 80045e0:	6039      	str	r1, [r7, #0]
	wifi_api_status LucStatus = MS_NOT_OK;
 80045e2:	2300      	movs	r3, #0
 80045e4:	73fb      	strb	r3, [r7, #15]
	Wifi_Uart_t.WiFi_Tx = malloc(sizeof(char) * 100);
 80045e6:	2064      	movs	r0, #100	; 0x64
 80045e8:	f000 f880 	bl	80046ec <malloc>
 80045ec:	4603      	mov	r3, r0
 80045ee:	461a      	mov	r2, r3
 80045f0:	4b0c      	ldr	r3, [pc, #48]	; (8004624 <tcp_server_conn+0x4c>)
 80045f2:	601a      	str	r2, [r3, #0]
	sprintf(Wifi_Uart_t.WiFi_Tx , WIFI_CONNECT_AP_CMD , ipadress , port);
 80045f4:	4b0b      	ldr	r3, [pc, #44]	; (8004624 <tcp_server_conn+0x4c>)
 80045f6:	6818      	ldr	r0, [r3, #0]
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	687a      	ldr	r2, [r7, #4]
 80045fc:	490a      	ldr	r1, [pc, #40]	; (8004628 <tcp_server_conn+0x50>)
 80045fe:	f000 fb7b 	bl	8004cf8 <sprintf>
	LucStatus = uart_write(Wifi_Uart_t.WiFi_Tx);
 8004602:	4b08      	ldr	r3, [pc, #32]	; (8004624 <tcp_server_conn+0x4c>)
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	4618      	mov	r0, r3
 8004608:	f7ff ff50 	bl	80044ac <uart_write>
 800460c:	4603      	mov	r3, r0
 800460e:	73fb      	strb	r3, [r7, #15]
	free(Wifi_Uart_t.WiFi_Tx);
 8004610:	4b04      	ldr	r3, [pc, #16]	; (8004624 <tcp_server_conn+0x4c>)
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	4618      	mov	r0, r3
 8004616:	f000 f871 	bl	80046fc <free>
	return LucStatus;
 800461a:	7bfb      	ldrb	r3, [r7, #15]
}
 800461c:	4618      	mov	r0, r3
 800461e:	3710      	adds	r7, #16
 8004620:	46bd      	mov	sp, r7
 8004622:	bd80      	pop	{r7, pc}
 8004624:	200007e8 	.word	0x200007e8
 8004628:	080091fc 	.word	0x080091fc

0800462c <wifi_init>:
/*
 * initialise the wifi - esp8266 via AT commands initialise the UART
 * initialise the command response handler
 */
void wifi_init()
{
 800462c:	b580      	push	{r7, lr}
 800462e:	af00      	add	r7, sp, #0
	UART_Init();
 8004630:	f7ff feb8 	bl	80043a4 <UART_Init>

	Wifi_Uart_t.WiFi_Rx_len = 0;
 8004634:	4b0d      	ldr	r3, [pc, #52]	; (800466c <wifi_init+0x40>)
 8004636:	2200      	movs	r2, #0
 8004638:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
	Wifi_Uart_t.WiFi_Tx_len = 0;
 800463c:	4b0b      	ldr	r3, [pc, #44]	; (800466c <wifi_init+0x40>)
 800463e:	2200      	movs	r2, #0
 8004640:	711a      	strb	r2, [r3, #4]
	memset(Wifi_Uart_t.WiFi_Rx , 0 , WIFI_RX_LEN);
 8004642:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004646:	2100      	movs	r1, #0
 8004648:	4809      	ldr	r0, [pc, #36]	; (8004670 <wifi_init+0x44>)
 800464a:	f000 fbb8 	bl	8004dbe <memset>
	Wifi_Uart_t.log_buf = &console_buf_wr;
 800464e:	4b07      	ldr	r3, [pc, #28]	; (800466c <wifi_init+0x40>)
 8004650:	4a08      	ldr	r2, [pc, #32]	; (8004674 <wifi_init+0x48>)
 8004652:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
	Wifi_Uart_t.log_clr = &console_buf_clr;
 8004656:	4b05      	ldr	r3, [pc, #20]	; (800466c <wifi_init+0x40>)
 8004658:	4a07      	ldr	r2, [pc, #28]	; (8004678 <wifi_init+0x4c>)
 800465a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

	HAL_UART_Receive_IT(&wifi_uart, (uint8_t *)&tmp ,1);
 800465e:	2201      	movs	r2, #1
 8004660:	4906      	ldr	r1, [pc, #24]	; (800467c <wifi_init+0x50>)
 8004662:	4807      	ldr	r0, [pc, #28]	; (8004680 <wifi_init+0x54>)
 8004664:	f7fe fc9d 	bl	8002fa2 <HAL_UART_Receive_IT>
}
 8004668:	bf00      	nop
 800466a:	bd80      	pop	{r7, pc}
 800466c:	200007e8 	.word	0x200007e8
 8004670:	200007f4 	.word	0x200007f4
 8004674:	08004431 	.word	0x08004431
 8004678:	08004485 	.word	0x08004485
 800467c:	20000a04 	.word	0x20000a04
 8004680:	20000764 	.word	0x20000764

08004684 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004684:	b580      	push	{r7, lr}
 8004686:	b082      	sub	sp, #8
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]
	if(huart->Instance == UART_WIFI_CMD)
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	4a12      	ldr	r2, [pc, #72]	; (80046dc <HAL_UART_RxCpltCallback+0x58>)
 8004692:	4293      	cmp	r3, r2
 8004694:	d11e      	bne.n	80046d4 <HAL_UART_RxCpltCallback+0x50>
	{
		if(Wifi_Uart_t.WiFi_Rx_len < WIFI_RX_LEN && tmp != '\0')
 8004696:	4b12      	ldr	r3, [pc, #72]	; (80046e0 <HAL_UART_RxCpltCallback+0x5c>)
 8004698:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800469c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80046a0:	d213      	bcs.n	80046ca <HAL_UART_RxCpltCallback+0x46>
 80046a2:	4b10      	ldr	r3, [pc, #64]	; (80046e4 <HAL_UART_RxCpltCallback+0x60>)
 80046a4:	781b      	ldrb	r3, [r3, #0]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d00f      	beq.n	80046ca <HAL_UART_RxCpltCallback+0x46>
		{
			Wifi_Uart_t.WiFi_Rx[Wifi_Uart_t.WiFi_Rx_len] = tmp;
 80046aa:	4b0d      	ldr	r3, [pc, #52]	; (80046e0 <HAL_UART_RxCpltCallback+0x5c>)
 80046ac:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80046b0:	4a0c      	ldr	r2, [pc, #48]	; (80046e4 <HAL_UART_RxCpltCallback+0x60>)
 80046b2:	7811      	ldrb	r1, [r2, #0]
 80046b4:	4a0a      	ldr	r2, [pc, #40]	; (80046e0 <HAL_UART_RxCpltCallback+0x5c>)
 80046b6:	4413      	add	r3, r2
 80046b8:	460a      	mov	r2, r1
 80046ba:	731a      	strb	r2, [r3, #12]
			Wifi_Uart_t.WiFi_Rx_len++;
 80046bc:	4b08      	ldr	r3, [pc, #32]	; (80046e0 <HAL_UART_RxCpltCallback+0x5c>)
 80046be:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80046c2:	3301      	adds	r3, #1
 80046c4:	4a06      	ldr	r2, [pc, #24]	; (80046e0 <HAL_UART_RxCpltCallback+0x5c>)
 80046c6:	f8c2 3210 	str.w	r3, [r2, #528]	; 0x210
		}
		HAL_UART_Receive_IT(&wifi_uart, (uint8_t *)&tmp ,1);
 80046ca:	2201      	movs	r2, #1
 80046cc:	4905      	ldr	r1, [pc, #20]	; (80046e4 <HAL_UART_RxCpltCallback+0x60>)
 80046ce:	4806      	ldr	r0, [pc, #24]	; (80046e8 <HAL_UART_RxCpltCallback+0x64>)
 80046d0:	f7fe fc67 	bl	8002fa2 <HAL_UART_Receive_IT>
	}
}
 80046d4:	bf00      	nop
 80046d6:	3708      	adds	r7, #8
 80046d8:	46bd      	mov	sp, r7
 80046da:	bd80      	pop	{r7, pc}
 80046dc:	40004400 	.word	0x40004400
 80046e0:	200007e8 	.word	0x200007e8
 80046e4:	20000a04 	.word	0x20000a04
 80046e8:	20000764 	.word	0x20000764

080046ec <malloc>:
 80046ec:	4b02      	ldr	r3, [pc, #8]	; (80046f8 <malloc+0xc>)
 80046ee:	4601      	mov	r1, r0
 80046f0:	6818      	ldr	r0, [r3, #0]
 80046f2:	f000 b80b 	b.w	800470c <_malloc_r>
 80046f6:	bf00      	nop
 80046f8:	20000548 	.word	0x20000548

080046fc <free>:
 80046fc:	4b02      	ldr	r3, [pc, #8]	; (8004708 <free+0xc>)
 80046fe:	4601      	mov	r1, r0
 8004700:	6818      	ldr	r0, [r3, #0]
 8004702:	f000 bc59 	b.w	8004fb8 <_free_r>
 8004706:	bf00      	nop
 8004708:	20000548 	.word	0x20000548

0800470c <_malloc_r>:
 800470c:	f101 030b 	add.w	r3, r1, #11
 8004710:	2b16      	cmp	r3, #22
 8004712:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004716:	4605      	mov	r5, r0
 8004718:	d906      	bls.n	8004728 <_malloc_r+0x1c>
 800471a:	f033 0707 	bics.w	r7, r3, #7
 800471e:	d504      	bpl.n	800472a <_malloc_r+0x1e>
 8004720:	230c      	movs	r3, #12
 8004722:	602b      	str	r3, [r5, #0]
 8004724:	2400      	movs	r4, #0
 8004726:	e1a3      	b.n	8004a70 <_malloc_r+0x364>
 8004728:	2710      	movs	r7, #16
 800472a:	42b9      	cmp	r1, r7
 800472c:	d8f8      	bhi.n	8004720 <_malloc_r+0x14>
 800472e:	4628      	mov	r0, r5
 8004730:	f000 fa26 	bl	8004b80 <__malloc_lock>
 8004734:	f5b7 7ffc 	cmp.w	r7, #504	; 0x1f8
 8004738:	4eaf      	ldr	r6, [pc, #700]	; (80049f8 <_malloc_r+0x2ec>)
 800473a:	d237      	bcs.n	80047ac <_malloc_r+0xa0>
 800473c:	f107 0208 	add.w	r2, r7, #8
 8004740:	4432      	add	r2, r6
 8004742:	f1a2 0108 	sub.w	r1, r2, #8
 8004746:	6854      	ldr	r4, [r2, #4]
 8004748:	428c      	cmp	r4, r1
 800474a:	ea4f 03d7 	mov.w	r3, r7, lsr #3
 800474e:	d102      	bne.n	8004756 <_malloc_r+0x4a>
 8004750:	68d4      	ldr	r4, [r2, #12]
 8004752:	42a2      	cmp	r2, r4
 8004754:	d010      	beq.n	8004778 <_malloc_r+0x6c>
 8004756:	6863      	ldr	r3, [r4, #4]
 8004758:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 800475c:	f023 0303 	bic.w	r3, r3, #3
 8004760:	60ca      	str	r2, [r1, #12]
 8004762:	4423      	add	r3, r4
 8004764:	6091      	str	r1, [r2, #8]
 8004766:	685a      	ldr	r2, [r3, #4]
 8004768:	f042 0201 	orr.w	r2, r2, #1
 800476c:	605a      	str	r2, [r3, #4]
 800476e:	4628      	mov	r0, r5
 8004770:	f000 fa0c 	bl	8004b8c <__malloc_unlock>
 8004774:	3408      	adds	r4, #8
 8004776:	e17b      	b.n	8004a70 <_malloc_r+0x364>
 8004778:	3302      	adds	r3, #2
 800477a:	6934      	ldr	r4, [r6, #16]
 800477c:	499f      	ldr	r1, [pc, #636]	; (80049fc <_malloc_r+0x2f0>)
 800477e:	428c      	cmp	r4, r1
 8004780:	d077      	beq.n	8004872 <_malloc_r+0x166>
 8004782:	6862      	ldr	r2, [r4, #4]
 8004784:	f022 0c03 	bic.w	ip, r2, #3
 8004788:	ebac 0007 	sub.w	r0, ip, r7
 800478c:	280f      	cmp	r0, #15
 800478e:	dd48      	ble.n	8004822 <_malloc_r+0x116>
 8004790:	19e2      	adds	r2, r4, r7
 8004792:	f040 0301 	orr.w	r3, r0, #1
 8004796:	f047 0701 	orr.w	r7, r7, #1
 800479a:	6067      	str	r7, [r4, #4]
 800479c:	e9c6 2204 	strd	r2, r2, [r6, #16]
 80047a0:	e9c2 1102 	strd	r1, r1, [r2, #8]
 80047a4:	6053      	str	r3, [r2, #4]
 80047a6:	f844 000c 	str.w	r0, [r4, ip]
 80047aa:	e7e0      	b.n	800476e <_malloc_r+0x62>
 80047ac:	0a7b      	lsrs	r3, r7, #9
 80047ae:	d02a      	beq.n	8004806 <_malloc_r+0xfa>
 80047b0:	2b04      	cmp	r3, #4
 80047b2:	d812      	bhi.n	80047da <_malloc_r+0xce>
 80047b4:	09bb      	lsrs	r3, r7, #6
 80047b6:	3338      	adds	r3, #56	; 0x38
 80047b8:	1c5a      	adds	r2, r3, #1
 80047ba:	eb06 02c2 	add.w	r2, r6, r2, lsl #3
 80047be:	f1a2 0c08 	sub.w	ip, r2, #8
 80047c2:	6854      	ldr	r4, [r2, #4]
 80047c4:	4564      	cmp	r4, ip
 80047c6:	d006      	beq.n	80047d6 <_malloc_r+0xca>
 80047c8:	6862      	ldr	r2, [r4, #4]
 80047ca:	f022 0203 	bic.w	r2, r2, #3
 80047ce:	1bd0      	subs	r0, r2, r7
 80047d0:	280f      	cmp	r0, #15
 80047d2:	dd1c      	ble.n	800480e <_malloc_r+0x102>
 80047d4:	3b01      	subs	r3, #1
 80047d6:	3301      	adds	r3, #1
 80047d8:	e7cf      	b.n	800477a <_malloc_r+0x6e>
 80047da:	2b14      	cmp	r3, #20
 80047dc:	d801      	bhi.n	80047e2 <_malloc_r+0xd6>
 80047de:	335b      	adds	r3, #91	; 0x5b
 80047e0:	e7ea      	b.n	80047b8 <_malloc_r+0xac>
 80047e2:	2b54      	cmp	r3, #84	; 0x54
 80047e4:	d802      	bhi.n	80047ec <_malloc_r+0xe0>
 80047e6:	0b3b      	lsrs	r3, r7, #12
 80047e8:	336e      	adds	r3, #110	; 0x6e
 80047ea:	e7e5      	b.n	80047b8 <_malloc_r+0xac>
 80047ec:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 80047f0:	d802      	bhi.n	80047f8 <_malloc_r+0xec>
 80047f2:	0bfb      	lsrs	r3, r7, #15
 80047f4:	3377      	adds	r3, #119	; 0x77
 80047f6:	e7df      	b.n	80047b8 <_malloc_r+0xac>
 80047f8:	f240 5254 	movw	r2, #1364	; 0x554
 80047fc:	4293      	cmp	r3, r2
 80047fe:	d804      	bhi.n	800480a <_malloc_r+0xfe>
 8004800:	0cbb      	lsrs	r3, r7, #18
 8004802:	337c      	adds	r3, #124	; 0x7c
 8004804:	e7d8      	b.n	80047b8 <_malloc_r+0xac>
 8004806:	233f      	movs	r3, #63	; 0x3f
 8004808:	e7d6      	b.n	80047b8 <_malloc_r+0xac>
 800480a:	237e      	movs	r3, #126	; 0x7e
 800480c:	e7d4      	b.n	80047b8 <_malloc_r+0xac>
 800480e:	2800      	cmp	r0, #0
 8004810:	68e1      	ldr	r1, [r4, #12]
 8004812:	db04      	blt.n	800481e <_malloc_r+0x112>
 8004814:	68a3      	ldr	r3, [r4, #8]
 8004816:	60d9      	str	r1, [r3, #12]
 8004818:	608b      	str	r3, [r1, #8]
 800481a:	18a3      	adds	r3, r4, r2
 800481c:	e7a3      	b.n	8004766 <_malloc_r+0x5a>
 800481e:	460c      	mov	r4, r1
 8004820:	e7d0      	b.n	80047c4 <_malloc_r+0xb8>
 8004822:	2800      	cmp	r0, #0
 8004824:	e9c6 1104 	strd	r1, r1, [r6, #16]
 8004828:	db07      	blt.n	800483a <_malloc_r+0x12e>
 800482a:	44a4      	add	ip, r4
 800482c:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8004830:	f043 0301 	orr.w	r3, r3, #1
 8004834:	f8cc 3004 	str.w	r3, [ip, #4]
 8004838:	e799      	b.n	800476e <_malloc_r+0x62>
 800483a:	f5bc 7f00 	cmp.w	ip, #512	; 0x200
 800483e:	6870      	ldr	r0, [r6, #4]
 8004840:	f080 8095 	bcs.w	800496e <_malloc_r+0x262>
 8004844:	ea4f 02dc 	mov.w	r2, ip, lsr #3
 8004848:	ea4f 1e5c 	mov.w	lr, ip, lsr #5
 800484c:	f04f 0c01 	mov.w	ip, #1
 8004850:	3201      	adds	r2, #1
 8004852:	fa0c fc0e 	lsl.w	ip, ip, lr
 8004856:	ea4c 0000 	orr.w	r0, ip, r0
 800485a:	6070      	str	r0, [r6, #4]
 800485c:	f856 c032 	ldr.w	ip, [r6, r2, lsl #3]
 8004860:	eb06 00c2 	add.w	r0, r6, r2, lsl #3
 8004864:	3808      	subs	r0, #8
 8004866:	e9c4 c002 	strd	ip, r0, [r4, #8]
 800486a:	f846 4032 	str.w	r4, [r6, r2, lsl #3]
 800486e:	f8cc 400c 	str.w	r4, [ip, #12]
 8004872:	1098      	asrs	r0, r3, #2
 8004874:	2201      	movs	r2, #1
 8004876:	4082      	lsls	r2, r0
 8004878:	6870      	ldr	r0, [r6, #4]
 800487a:	4290      	cmp	r0, r2
 800487c:	d326      	bcc.n	80048cc <_malloc_r+0x1c0>
 800487e:	4210      	tst	r0, r2
 8004880:	d106      	bne.n	8004890 <_malloc_r+0x184>
 8004882:	f023 0303 	bic.w	r3, r3, #3
 8004886:	0052      	lsls	r2, r2, #1
 8004888:	4210      	tst	r0, r2
 800488a:	f103 0304 	add.w	r3, r3, #4
 800488e:	d0fa      	beq.n	8004886 <_malloc_r+0x17a>
 8004890:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
 8004894:	46c1      	mov	r9, r8
 8004896:	469e      	mov	lr, r3
 8004898:	f8d9 400c 	ldr.w	r4, [r9, #12]
 800489c:	454c      	cmp	r4, r9
 800489e:	f040 80b9 	bne.w	8004a14 <_malloc_r+0x308>
 80048a2:	f10e 0e01 	add.w	lr, lr, #1
 80048a6:	f01e 0f03 	tst.w	lr, #3
 80048aa:	f109 0908 	add.w	r9, r9, #8
 80048ae:	d1f3      	bne.n	8004898 <_malloc_r+0x18c>
 80048b0:	0798      	lsls	r0, r3, #30
 80048b2:	f040 80e3 	bne.w	8004a7c <_malloc_r+0x370>
 80048b6:	6873      	ldr	r3, [r6, #4]
 80048b8:	ea23 0302 	bic.w	r3, r3, r2
 80048bc:	6073      	str	r3, [r6, #4]
 80048be:	6870      	ldr	r0, [r6, #4]
 80048c0:	0052      	lsls	r2, r2, #1
 80048c2:	4290      	cmp	r0, r2
 80048c4:	d302      	bcc.n	80048cc <_malloc_r+0x1c0>
 80048c6:	2a00      	cmp	r2, #0
 80048c8:	f040 80e5 	bne.w	8004a96 <_malloc_r+0x38a>
 80048cc:	f8d6 a008 	ldr.w	sl, [r6, #8]
 80048d0:	f8da 3004 	ldr.w	r3, [sl, #4]
 80048d4:	f023 0903 	bic.w	r9, r3, #3
 80048d8:	45b9      	cmp	r9, r7
 80048da:	d304      	bcc.n	80048e6 <_malloc_r+0x1da>
 80048dc:	eba9 0207 	sub.w	r2, r9, r7
 80048e0:	2a0f      	cmp	r2, #15
 80048e2:	f300 8141 	bgt.w	8004b68 <_malloc_r+0x45c>
 80048e6:	4b46      	ldr	r3, [pc, #280]	; (8004a00 <_malloc_r+0x2f4>)
 80048e8:	6819      	ldr	r1, [r3, #0]
 80048ea:	3110      	adds	r1, #16
 80048ec:	4439      	add	r1, r7
 80048ee:	2008      	movs	r0, #8
 80048f0:	9101      	str	r1, [sp, #4]
 80048f2:	f000 faf1 	bl	8004ed8 <sysconf>
 80048f6:	4a43      	ldr	r2, [pc, #268]	; (8004a04 <_malloc_r+0x2f8>)
 80048f8:	9901      	ldr	r1, [sp, #4]
 80048fa:	6813      	ldr	r3, [r2, #0]
 80048fc:	3301      	adds	r3, #1
 80048fe:	bf1f      	itttt	ne
 8004900:	f101 31ff 	addne.w	r1, r1, #4294967295	; 0xffffffff
 8004904:	1809      	addne	r1, r1, r0
 8004906:	4243      	negne	r3, r0
 8004908:	4019      	andne	r1, r3
 800490a:	4680      	mov	r8, r0
 800490c:	4628      	mov	r0, r5
 800490e:	9101      	str	r1, [sp, #4]
 8004910:	f000 fa92 	bl	8004e38 <_sbrk_r>
 8004914:	1c42      	adds	r2, r0, #1
 8004916:	eb0a 0b09 	add.w	fp, sl, r9
 800491a:	4604      	mov	r4, r0
 800491c:	f000 80f7 	beq.w	8004b0e <_malloc_r+0x402>
 8004920:	4583      	cmp	fp, r0
 8004922:	9901      	ldr	r1, [sp, #4]
 8004924:	4a37      	ldr	r2, [pc, #220]	; (8004a04 <_malloc_r+0x2f8>)
 8004926:	d902      	bls.n	800492e <_malloc_r+0x222>
 8004928:	45b2      	cmp	sl, r6
 800492a:	f040 80f0 	bne.w	8004b0e <_malloc_r+0x402>
 800492e:	4b36      	ldr	r3, [pc, #216]	; (8004a08 <_malloc_r+0x2fc>)
 8004930:	6818      	ldr	r0, [r3, #0]
 8004932:	45a3      	cmp	fp, r4
 8004934:	eb00 0e01 	add.w	lr, r0, r1
 8004938:	f8c3 e000 	str.w	lr, [r3]
 800493c:	f108 3cff 	add.w	ip, r8, #4294967295	; 0xffffffff
 8004940:	f040 80ab 	bne.w	8004a9a <_malloc_r+0x38e>
 8004944:	ea1b 0f0c 	tst.w	fp, ip
 8004948:	f040 80a7 	bne.w	8004a9a <_malloc_r+0x38e>
 800494c:	68b2      	ldr	r2, [r6, #8]
 800494e:	4449      	add	r1, r9
 8004950:	f041 0101 	orr.w	r1, r1, #1
 8004954:	6051      	str	r1, [r2, #4]
 8004956:	4a2d      	ldr	r2, [pc, #180]	; (8004a0c <_malloc_r+0x300>)
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	6811      	ldr	r1, [r2, #0]
 800495c:	428b      	cmp	r3, r1
 800495e:	bf88      	it	hi
 8004960:	6013      	strhi	r3, [r2, #0]
 8004962:	4a2b      	ldr	r2, [pc, #172]	; (8004a10 <_malloc_r+0x304>)
 8004964:	6811      	ldr	r1, [r2, #0]
 8004966:	428b      	cmp	r3, r1
 8004968:	bf88      	it	hi
 800496a:	6013      	strhi	r3, [r2, #0]
 800496c:	e0cf      	b.n	8004b0e <_malloc_r+0x402>
 800496e:	f5bc 6f20 	cmp.w	ip, #2560	; 0xa00
 8004972:	ea4f 225c 	mov.w	r2, ip, lsr #9
 8004976:	d218      	bcs.n	80049aa <_malloc_r+0x29e>
 8004978:	ea4f 129c 	mov.w	r2, ip, lsr #6
 800497c:	3238      	adds	r2, #56	; 0x38
 800497e:	f102 0e01 	add.w	lr, r2, #1
 8004982:	eb06 08c2 	add.w	r8, r6, r2, lsl #3
 8004986:	f856 e03e 	ldr.w	lr, [r6, lr, lsl #3]
 800498a:	45f0      	cmp	r8, lr
 800498c:	d12b      	bne.n	80049e6 <_malloc_r+0x2da>
 800498e:	1092      	asrs	r2, r2, #2
 8004990:	f04f 0c01 	mov.w	ip, #1
 8004994:	fa0c f202 	lsl.w	r2, ip, r2
 8004998:	4302      	orrs	r2, r0
 800499a:	6072      	str	r2, [r6, #4]
 800499c:	e9c4 e802 	strd	lr, r8, [r4, #8]
 80049a0:	f8c8 4008 	str.w	r4, [r8, #8]
 80049a4:	f8ce 400c 	str.w	r4, [lr, #12]
 80049a8:	e763      	b.n	8004872 <_malloc_r+0x166>
 80049aa:	2a14      	cmp	r2, #20
 80049ac:	d801      	bhi.n	80049b2 <_malloc_r+0x2a6>
 80049ae:	325b      	adds	r2, #91	; 0x5b
 80049b0:	e7e5      	b.n	800497e <_malloc_r+0x272>
 80049b2:	2a54      	cmp	r2, #84	; 0x54
 80049b4:	d803      	bhi.n	80049be <_malloc_r+0x2b2>
 80049b6:	ea4f 321c 	mov.w	r2, ip, lsr #12
 80049ba:	326e      	adds	r2, #110	; 0x6e
 80049bc:	e7df      	b.n	800497e <_malloc_r+0x272>
 80049be:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 80049c2:	d803      	bhi.n	80049cc <_malloc_r+0x2c0>
 80049c4:	ea4f 32dc 	mov.w	r2, ip, lsr #15
 80049c8:	3277      	adds	r2, #119	; 0x77
 80049ca:	e7d8      	b.n	800497e <_malloc_r+0x272>
 80049cc:	f240 5e54 	movw	lr, #1364	; 0x554
 80049d0:	4572      	cmp	r2, lr
 80049d2:	bf9a      	itte	ls
 80049d4:	ea4f 429c 	movls.w	r2, ip, lsr #18
 80049d8:	327c      	addls	r2, #124	; 0x7c
 80049da:	227e      	movhi	r2, #126	; 0x7e
 80049dc:	e7cf      	b.n	800497e <_malloc_r+0x272>
 80049de:	f8de e008 	ldr.w	lr, [lr, #8]
 80049e2:	45f0      	cmp	r8, lr
 80049e4:	d005      	beq.n	80049f2 <_malloc_r+0x2e6>
 80049e6:	f8de 2004 	ldr.w	r2, [lr, #4]
 80049ea:	f022 0203 	bic.w	r2, r2, #3
 80049ee:	4562      	cmp	r2, ip
 80049f0:	d8f5      	bhi.n	80049de <_malloc_r+0x2d2>
 80049f2:	f8de 800c 	ldr.w	r8, [lr, #12]
 80049f6:	e7d1      	b.n	800499c <_malloc_r+0x290>
 80049f8:	2000000c 	.word	0x2000000c
 80049fc:	20000014 	.word	0x20000014
 8004a00:	20000a38 	.word	0x20000a38
 8004a04:	20000414 	.word	0x20000414
 8004a08:	20000a08 	.word	0x20000a08
 8004a0c:	20000a30 	.word	0x20000a30
 8004a10:	20000a34 	.word	0x20000a34
 8004a14:	6860      	ldr	r0, [r4, #4]
 8004a16:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 8004a1a:	f020 0003 	bic.w	r0, r0, #3
 8004a1e:	eba0 0a07 	sub.w	sl, r0, r7
 8004a22:	f1ba 0f0f 	cmp.w	sl, #15
 8004a26:	dd12      	ble.n	8004a4e <_malloc_r+0x342>
 8004a28:	68a3      	ldr	r3, [r4, #8]
 8004a2a:	19e2      	adds	r2, r4, r7
 8004a2c:	f047 0701 	orr.w	r7, r7, #1
 8004a30:	6067      	str	r7, [r4, #4]
 8004a32:	f8c3 c00c 	str.w	ip, [r3, #12]
 8004a36:	f8cc 3008 	str.w	r3, [ip, #8]
 8004a3a:	f04a 0301 	orr.w	r3, sl, #1
 8004a3e:	e9c6 2204 	strd	r2, r2, [r6, #16]
 8004a42:	e9c2 1102 	strd	r1, r1, [r2, #8]
 8004a46:	6053      	str	r3, [r2, #4]
 8004a48:	f844 a000 	str.w	sl, [r4, r0]
 8004a4c:	e68f      	b.n	800476e <_malloc_r+0x62>
 8004a4e:	f1ba 0f00 	cmp.w	sl, #0
 8004a52:	db11      	blt.n	8004a78 <_malloc_r+0x36c>
 8004a54:	4420      	add	r0, r4
 8004a56:	6843      	ldr	r3, [r0, #4]
 8004a58:	f043 0301 	orr.w	r3, r3, #1
 8004a5c:	6043      	str	r3, [r0, #4]
 8004a5e:	f854 3f08 	ldr.w	r3, [r4, #8]!
 8004a62:	4628      	mov	r0, r5
 8004a64:	f8c3 c00c 	str.w	ip, [r3, #12]
 8004a68:	f8cc 3008 	str.w	r3, [ip, #8]
 8004a6c:	f000 f88e 	bl	8004b8c <__malloc_unlock>
 8004a70:	4620      	mov	r0, r4
 8004a72:	b003      	add	sp, #12
 8004a74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a78:	4664      	mov	r4, ip
 8004a7a:	e70f      	b.n	800489c <_malloc_r+0x190>
 8004a7c:	f858 0908 	ldr.w	r0, [r8], #-8
 8004a80:	4540      	cmp	r0, r8
 8004a82:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8004a86:	f43f af13 	beq.w	80048b0 <_malloc_r+0x1a4>
 8004a8a:	e718      	b.n	80048be <_malloc_r+0x1b2>
 8004a8c:	3304      	adds	r3, #4
 8004a8e:	0052      	lsls	r2, r2, #1
 8004a90:	4210      	tst	r0, r2
 8004a92:	d0fb      	beq.n	8004a8c <_malloc_r+0x380>
 8004a94:	e6fc      	b.n	8004890 <_malloc_r+0x184>
 8004a96:	4673      	mov	r3, lr
 8004a98:	e7fa      	b.n	8004a90 <_malloc_r+0x384>
 8004a9a:	6810      	ldr	r0, [r2, #0]
 8004a9c:	3001      	adds	r0, #1
 8004a9e:	bf1b      	ittet	ne
 8004aa0:	eba4 0b0b 	subne.w	fp, r4, fp
 8004aa4:	eb0b 020e 	addne.w	r2, fp, lr
 8004aa8:	6014      	streq	r4, [r2, #0]
 8004aaa:	601a      	strne	r2, [r3, #0]
 8004aac:	f014 0b07 	ands.w	fp, r4, #7
 8004ab0:	bf1a      	itte	ne
 8004ab2:	f1cb 0008 	rsbne	r0, fp, #8
 8004ab6:	1824      	addne	r4, r4, r0
 8004ab8:	4658      	moveq	r0, fp
 8004aba:	1862      	adds	r2, r4, r1
 8004abc:	ea02 010c 	and.w	r1, r2, ip
 8004ac0:	4480      	add	r8, r0
 8004ac2:	eba8 0801 	sub.w	r8, r8, r1
 8004ac6:	ea08 080c 	and.w	r8, r8, ip
 8004aca:	4641      	mov	r1, r8
 8004acc:	4628      	mov	r0, r5
 8004ace:	9201      	str	r2, [sp, #4]
 8004ad0:	f000 f9b2 	bl	8004e38 <_sbrk_r>
 8004ad4:	1c43      	adds	r3, r0, #1
 8004ad6:	9a01      	ldr	r2, [sp, #4]
 8004ad8:	4b28      	ldr	r3, [pc, #160]	; (8004b7c <_malloc_r+0x470>)
 8004ada:	d107      	bne.n	8004aec <_malloc_r+0x3e0>
 8004adc:	f1bb 0f00 	cmp.w	fp, #0
 8004ae0:	d023      	beq.n	8004b2a <_malloc_r+0x41e>
 8004ae2:	f1ab 0008 	sub.w	r0, fp, #8
 8004ae6:	4410      	add	r0, r2
 8004ae8:	f04f 0800 	mov.w	r8, #0
 8004aec:	681a      	ldr	r2, [r3, #0]
 8004aee:	60b4      	str	r4, [r6, #8]
 8004af0:	1b00      	subs	r0, r0, r4
 8004af2:	4440      	add	r0, r8
 8004af4:	4442      	add	r2, r8
 8004af6:	f040 0001 	orr.w	r0, r0, #1
 8004afa:	45b2      	cmp	sl, r6
 8004afc:	601a      	str	r2, [r3, #0]
 8004afe:	6060      	str	r0, [r4, #4]
 8004b00:	f43f af29 	beq.w	8004956 <_malloc_r+0x24a>
 8004b04:	f1b9 0f0f 	cmp.w	r9, #15
 8004b08:	d812      	bhi.n	8004b30 <_malloc_r+0x424>
 8004b0a:	2301      	movs	r3, #1
 8004b0c:	6063      	str	r3, [r4, #4]
 8004b0e:	68b3      	ldr	r3, [r6, #8]
 8004b10:	685b      	ldr	r3, [r3, #4]
 8004b12:	f023 0303 	bic.w	r3, r3, #3
 8004b16:	42bb      	cmp	r3, r7
 8004b18:	eba3 0207 	sub.w	r2, r3, r7
 8004b1c:	d301      	bcc.n	8004b22 <_malloc_r+0x416>
 8004b1e:	2a0f      	cmp	r2, #15
 8004b20:	dc22      	bgt.n	8004b68 <_malloc_r+0x45c>
 8004b22:	4628      	mov	r0, r5
 8004b24:	f000 f832 	bl	8004b8c <__malloc_unlock>
 8004b28:	e5fc      	b.n	8004724 <_malloc_r+0x18>
 8004b2a:	4610      	mov	r0, r2
 8004b2c:	46d8      	mov	r8, fp
 8004b2e:	e7dd      	b.n	8004aec <_malloc_r+0x3e0>
 8004b30:	f8da 2004 	ldr.w	r2, [sl, #4]
 8004b34:	f1a9 090c 	sub.w	r9, r9, #12
 8004b38:	f029 0907 	bic.w	r9, r9, #7
 8004b3c:	f002 0201 	and.w	r2, r2, #1
 8004b40:	ea42 0209 	orr.w	r2, r2, r9
 8004b44:	f8ca 2004 	str.w	r2, [sl, #4]
 8004b48:	2105      	movs	r1, #5
 8004b4a:	eb0a 0209 	add.w	r2, sl, r9
 8004b4e:	f1b9 0f0f 	cmp.w	r9, #15
 8004b52:	e9c2 1101 	strd	r1, r1, [r2, #4]
 8004b56:	f67f aefe 	bls.w	8004956 <_malloc_r+0x24a>
 8004b5a:	f10a 0108 	add.w	r1, sl, #8
 8004b5e:	4628      	mov	r0, r5
 8004b60:	f000 fa2a 	bl	8004fb8 <_free_r>
 8004b64:	4b05      	ldr	r3, [pc, #20]	; (8004b7c <_malloc_r+0x470>)
 8004b66:	e6f6      	b.n	8004956 <_malloc_r+0x24a>
 8004b68:	68b4      	ldr	r4, [r6, #8]
 8004b6a:	f047 0301 	orr.w	r3, r7, #1
 8004b6e:	4427      	add	r7, r4
 8004b70:	f042 0201 	orr.w	r2, r2, #1
 8004b74:	6063      	str	r3, [r4, #4]
 8004b76:	60b7      	str	r7, [r6, #8]
 8004b78:	607a      	str	r2, [r7, #4]
 8004b7a:	e5f8      	b.n	800476e <_malloc_r+0x62>
 8004b7c:	20000a08 	.word	0x20000a08

08004b80 <__malloc_lock>:
 8004b80:	4801      	ldr	r0, [pc, #4]	; (8004b88 <__malloc_lock+0x8>)
 8004b82:	f000 b9a7 	b.w	8004ed4 <__retarget_lock_acquire_recursive>
 8004b86:	bf00      	nop
 8004b88:	20000b7d 	.word	0x20000b7d

08004b8c <__malloc_unlock>:
 8004b8c:	4801      	ldr	r0, [pc, #4]	; (8004b94 <__malloc_unlock+0x8>)
 8004b8e:	f000 b9a2 	b.w	8004ed6 <__retarget_lock_release_recursive>
 8004b92:	bf00      	nop
 8004b94:	20000b7d 	.word	0x20000b7d

08004b98 <std>:
 8004b98:	2300      	movs	r3, #0
 8004b9a:	b510      	push	{r4, lr}
 8004b9c:	4604      	mov	r4, r0
 8004b9e:	e9c0 3300 	strd	r3, r3, [r0]
 8004ba2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004ba6:	6083      	str	r3, [r0, #8]
 8004ba8:	8181      	strh	r1, [r0, #12]
 8004baa:	6643      	str	r3, [r0, #100]	; 0x64
 8004bac:	81c2      	strh	r2, [r0, #14]
 8004bae:	6183      	str	r3, [r0, #24]
 8004bb0:	4619      	mov	r1, r3
 8004bb2:	2208      	movs	r2, #8
 8004bb4:	305c      	adds	r0, #92	; 0x5c
 8004bb6:	f000 f902 	bl	8004dbe <memset>
 8004bba:	4b05      	ldr	r3, [pc, #20]	; (8004bd0 <std+0x38>)
 8004bbc:	6223      	str	r3, [r4, #32]
 8004bbe:	4b05      	ldr	r3, [pc, #20]	; (8004bd4 <std+0x3c>)
 8004bc0:	6263      	str	r3, [r4, #36]	; 0x24
 8004bc2:	4b05      	ldr	r3, [pc, #20]	; (8004bd8 <std+0x40>)
 8004bc4:	62a3      	str	r3, [r4, #40]	; 0x28
 8004bc6:	4b05      	ldr	r3, [pc, #20]	; (8004bdc <std+0x44>)
 8004bc8:	61e4      	str	r4, [r4, #28]
 8004bca:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004bcc:	bd10      	pop	{r4, pc}
 8004bce:	bf00      	nop
 8004bd0:	08004d39 	.word	0x08004d39
 8004bd4:	08004d5b 	.word	0x08004d5b
 8004bd8:	08004d93 	.word	0x08004d93
 8004bdc:	08004db7 	.word	0x08004db7

08004be0 <stdio_exit_handler>:
 8004be0:	4a02      	ldr	r2, [pc, #8]	; (8004bec <stdio_exit_handler+0xc>)
 8004be2:	4903      	ldr	r1, [pc, #12]	; (8004bf0 <stdio_exit_handler+0x10>)
 8004be4:	4803      	ldr	r0, [pc, #12]	; (8004bf4 <stdio_exit_handler+0x14>)
 8004be6:	f000 b869 	b.w	8004cbc <_fwalk_sglue>
 8004bea:	bf00      	nop
 8004bec:	2000041c 	.word	0x2000041c
 8004bf0:	08006515 	.word	0x08006515
 8004bf4:	20000428 	.word	0x20000428

08004bf8 <cleanup_stdio>:
 8004bf8:	6841      	ldr	r1, [r0, #4]
 8004bfa:	4b0c      	ldr	r3, [pc, #48]	; (8004c2c <cleanup_stdio+0x34>)
 8004bfc:	4299      	cmp	r1, r3
 8004bfe:	b510      	push	{r4, lr}
 8004c00:	4604      	mov	r4, r0
 8004c02:	d001      	beq.n	8004c08 <cleanup_stdio+0x10>
 8004c04:	f001 fc86 	bl	8006514 <_fclose_r>
 8004c08:	68a1      	ldr	r1, [r4, #8]
 8004c0a:	4b09      	ldr	r3, [pc, #36]	; (8004c30 <cleanup_stdio+0x38>)
 8004c0c:	4299      	cmp	r1, r3
 8004c0e:	d002      	beq.n	8004c16 <cleanup_stdio+0x1e>
 8004c10:	4620      	mov	r0, r4
 8004c12:	f001 fc7f 	bl	8006514 <_fclose_r>
 8004c16:	68e1      	ldr	r1, [r4, #12]
 8004c18:	4b06      	ldr	r3, [pc, #24]	; (8004c34 <cleanup_stdio+0x3c>)
 8004c1a:	4299      	cmp	r1, r3
 8004c1c:	d004      	beq.n	8004c28 <cleanup_stdio+0x30>
 8004c1e:	4620      	mov	r0, r4
 8004c20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004c24:	f001 bc76 	b.w	8006514 <_fclose_r>
 8004c28:	bd10      	pop	{r4, pc}
 8004c2a:	bf00      	nop
 8004c2c:	20000a3c 	.word	0x20000a3c
 8004c30:	20000aa4 	.word	0x20000aa4
 8004c34:	20000b0c 	.word	0x20000b0c

08004c38 <global_stdio_init.part.0>:
 8004c38:	b510      	push	{r4, lr}
 8004c3a:	4b0b      	ldr	r3, [pc, #44]	; (8004c68 <global_stdio_init.part.0+0x30>)
 8004c3c:	4c0b      	ldr	r4, [pc, #44]	; (8004c6c <global_stdio_init.part.0+0x34>)
 8004c3e:	4a0c      	ldr	r2, [pc, #48]	; (8004c70 <global_stdio_init.part.0+0x38>)
 8004c40:	601a      	str	r2, [r3, #0]
 8004c42:	4620      	mov	r0, r4
 8004c44:	2200      	movs	r2, #0
 8004c46:	2104      	movs	r1, #4
 8004c48:	f7ff ffa6 	bl	8004b98 <std>
 8004c4c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8004c50:	2201      	movs	r2, #1
 8004c52:	2109      	movs	r1, #9
 8004c54:	f7ff ffa0 	bl	8004b98 <std>
 8004c58:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8004c5c:	2202      	movs	r2, #2
 8004c5e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004c62:	2112      	movs	r1, #18
 8004c64:	f7ff bf98 	b.w	8004b98 <std>
 8004c68:	20000b74 	.word	0x20000b74
 8004c6c:	20000a3c 	.word	0x20000a3c
 8004c70:	08004be1 	.word	0x08004be1

08004c74 <__sfp_lock_acquire>:
 8004c74:	4801      	ldr	r0, [pc, #4]	; (8004c7c <__sfp_lock_acquire+0x8>)
 8004c76:	f000 b92d 	b.w	8004ed4 <__retarget_lock_acquire_recursive>
 8004c7a:	bf00      	nop
 8004c7c:	20000b7e 	.word	0x20000b7e

08004c80 <__sfp_lock_release>:
 8004c80:	4801      	ldr	r0, [pc, #4]	; (8004c88 <__sfp_lock_release+0x8>)
 8004c82:	f000 b928 	b.w	8004ed6 <__retarget_lock_release_recursive>
 8004c86:	bf00      	nop
 8004c88:	20000b7e 	.word	0x20000b7e

08004c8c <__sinit>:
 8004c8c:	b510      	push	{r4, lr}
 8004c8e:	4604      	mov	r4, r0
 8004c90:	f7ff fff0 	bl	8004c74 <__sfp_lock_acquire>
 8004c94:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004c96:	b11b      	cbz	r3, 8004ca0 <__sinit+0x14>
 8004c98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004c9c:	f7ff bff0 	b.w	8004c80 <__sfp_lock_release>
 8004ca0:	4b04      	ldr	r3, [pc, #16]	; (8004cb4 <__sinit+0x28>)
 8004ca2:	6363      	str	r3, [r4, #52]	; 0x34
 8004ca4:	4b04      	ldr	r3, [pc, #16]	; (8004cb8 <__sinit+0x2c>)
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d1f5      	bne.n	8004c98 <__sinit+0xc>
 8004cac:	f7ff ffc4 	bl	8004c38 <global_stdio_init.part.0>
 8004cb0:	e7f2      	b.n	8004c98 <__sinit+0xc>
 8004cb2:	bf00      	nop
 8004cb4:	08004bf9 	.word	0x08004bf9
 8004cb8:	20000b74 	.word	0x20000b74

08004cbc <_fwalk_sglue>:
 8004cbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004cc0:	4607      	mov	r7, r0
 8004cc2:	4688      	mov	r8, r1
 8004cc4:	4614      	mov	r4, r2
 8004cc6:	2600      	movs	r6, #0
 8004cc8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004ccc:	f1b9 0901 	subs.w	r9, r9, #1
 8004cd0:	d505      	bpl.n	8004cde <_fwalk_sglue+0x22>
 8004cd2:	6824      	ldr	r4, [r4, #0]
 8004cd4:	2c00      	cmp	r4, #0
 8004cd6:	d1f7      	bne.n	8004cc8 <_fwalk_sglue+0xc>
 8004cd8:	4630      	mov	r0, r6
 8004cda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004cde:	89ab      	ldrh	r3, [r5, #12]
 8004ce0:	2b01      	cmp	r3, #1
 8004ce2:	d907      	bls.n	8004cf4 <_fwalk_sglue+0x38>
 8004ce4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004ce8:	3301      	adds	r3, #1
 8004cea:	d003      	beq.n	8004cf4 <_fwalk_sglue+0x38>
 8004cec:	4629      	mov	r1, r5
 8004cee:	4638      	mov	r0, r7
 8004cf0:	47c0      	blx	r8
 8004cf2:	4306      	orrs	r6, r0
 8004cf4:	3568      	adds	r5, #104	; 0x68
 8004cf6:	e7e9      	b.n	8004ccc <_fwalk_sglue+0x10>

08004cf8 <sprintf>:
 8004cf8:	b40e      	push	{r1, r2, r3}
 8004cfa:	b500      	push	{lr}
 8004cfc:	b09c      	sub	sp, #112	; 0x70
 8004cfe:	ab1d      	add	r3, sp, #116	; 0x74
 8004d00:	9002      	str	r0, [sp, #8]
 8004d02:	9006      	str	r0, [sp, #24]
 8004d04:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004d08:	4809      	ldr	r0, [pc, #36]	; (8004d30 <sprintf+0x38>)
 8004d0a:	9107      	str	r1, [sp, #28]
 8004d0c:	9104      	str	r1, [sp, #16]
 8004d0e:	4909      	ldr	r1, [pc, #36]	; (8004d34 <sprintf+0x3c>)
 8004d10:	f853 2b04 	ldr.w	r2, [r3], #4
 8004d14:	9105      	str	r1, [sp, #20]
 8004d16:	6800      	ldr	r0, [r0, #0]
 8004d18:	9301      	str	r3, [sp, #4]
 8004d1a:	a902      	add	r1, sp, #8
 8004d1c:	f000 fa0c 	bl	8005138 <_svfprintf_r>
 8004d20:	9b02      	ldr	r3, [sp, #8]
 8004d22:	2200      	movs	r2, #0
 8004d24:	701a      	strb	r2, [r3, #0]
 8004d26:	b01c      	add	sp, #112	; 0x70
 8004d28:	f85d eb04 	ldr.w	lr, [sp], #4
 8004d2c:	b003      	add	sp, #12
 8004d2e:	4770      	bx	lr
 8004d30:	20000548 	.word	0x20000548
 8004d34:	ffff0208 	.word	0xffff0208

08004d38 <__sread>:
 8004d38:	b510      	push	{r4, lr}
 8004d3a:	460c      	mov	r4, r1
 8004d3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d40:	f000 f868 	bl	8004e14 <_read_r>
 8004d44:	2800      	cmp	r0, #0
 8004d46:	bfab      	itete	ge
 8004d48:	6d23      	ldrge	r3, [r4, #80]	; 0x50
 8004d4a:	89a3      	ldrhlt	r3, [r4, #12]
 8004d4c:	181b      	addge	r3, r3, r0
 8004d4e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004d52:	bfac      	ite	ge
 8004d54:	6523      	strge	r3, [r4, #80]	; 0x50
 8004d56:	81a3      	strhlt	r3, [r4, #12]
 8004d58:	bd10      	pop	{r4, pc}

08004d5a <__swrite>:
 8004d5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004d5e:	461f      	mov	r7, r3
 8004d60:	898b      	ldrh	r3, [r1, #12]
 8004d62:	05db      	lsls	r3, r3, #23
 8004d64:	4605      	mov	r5, r0
 8004d66:	460c      	mov	r4, r1
 8004d68:	4616      	mov	r6, r2
 8004d6a:	d505      	bpl.n	8004d78 <__swrite+0x1e>
 8004d6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d70:	2302      	movs	r3, #2
 8004d72:	2200      	movs	r2, #0
 8004d74:	f000 f83c 	bl	8004df0 <_lseek_r>
 8004d78:	89a3      	ldrh	r3, [r4, #12]
 8004d7a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004d7e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004d82:	81a3      	strh	r3, [r4, #12]
 8004d84:	4632      	mov	r2, r6
 8004d86:	463b      	mov	r3, r7
 8004d88:	4628      	mov	r0, r5
 8004d8a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004d8e:	f000 b863 	b.w	8004e58 <_write_r>

08004d92 <__sseek>:
 8004d92:	b510      	push	{r4, lr}
 8004d94:	460c      	mov	r4, r1
 8004d96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d9a:	f000 f829 	bl	8004df0 <_lseek_r>
 8004d9e:	1c43      	adds	r3, r0, #1
 8004da0:	89a3      	ldrh	r3, [r4, #12]
 8004da2:	bf15      	itete	ne
 8004da4:	6520      	strne	r0, [r4, #80]	; 0x50
 8004da6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004daa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004dae:	81a3      	strheq	r3, [r4, #12]
 8004db0:	bf18      	it	ne
 8004db2:	81a3      	strhne	r3, [r4, #12]
 8004db4:	bd10      	pop	{r4, pc}

08004db6 <__sclose>:
 8004db6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004dba:	f000 b809 	b.w	8004dd0 <_close_r>

08004dbe <memset>:
 8004dbe:	4402      	add	r2, r0
 8004dc0:	4603      	mov	r3, r0
 8004dc2:	4293      	cmp	r3, r2
 8004dc4:	d100      	bne.n	8004dc8 <memset+0xa>
 8004dc6:	4770      	bx	lr
 8004dc8:	f803 1b01 	strb.w	r1, [r3], #1
 8004dcc:	e7f9      	b.n	8004dc2 <memset+0x4>
	...

08004dd0 <_close_r>:
 8004dd0:	b538      	push	{r3, r4, r5, lr}
 8004dd2:	4d06      	ldr	r5, [pc, #24]	; (8004dec <_close_r+0x1c>)
 8004dd4:	2300      	movs	r3, #0
 8004dd6:	4604      	mov	r4, r0
 8004dd8:	4608      	mov	r0, r1
 8004dda:	602b      	str	r3, [r5, #0]
 8004ddc:	f7fc fb5b 	bl	8001496 <_close>
 8004de0:	1c43      	adds	r3, r0, #1
 8004de2:	d102      	bne.n	8004dea <_close_r+0x1a>
 8004de4:	682b      	ldr	r3, [r5, #0]
 8004de6:	b103      	cbz	r3, 8004dea <_close_r+0x1a>
 8004de8:	6023      	str	r3, [r4, #0]
 8004dea:	bd38      	pop	{r3, r4, r5, pc}
 8004dec:	20000b78 	.word	0x20000b78

08004df0 <_lseek_r>:
 8004df0:	b538      	push	{r3, r4, r5, lr}
 8004df2:	4d07      	ldr	r5, [pc, #28]	; (8004e10 <_lseek_r+0x20>)
 8004df4:	4604      	mov	r4, r0
 8004df6:	4608      	mov	r0, r1
 8004df8:	4611      	mov	r1, r2
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	602a      	str	r2, [r5, #0]
 8004dfe:	461a      	mov	r2, r3
 8004e00:	f7fc fb70 	bl	80014e4 <_lseek>
 8004e04:	1c43      	adds	r3, r0, #1
 8004e06:	d102      	bne.n	8004e0e <_lseek_r+0x1e>
 8004e08:	682b      	ldr	r3, [r5, #0]
 8004e0a:	b103      	cbz	r3, 8004e0e <_lseek_r+0x1e>
 8004e0c:	6023      	str	r3, [r4, #0]
 8004e0e:	bd38      	pop	{r3, r4, r5, pc}
 8004e10:	20000b78 	.word	0x20000b78

08004e14 <_read_r>:
 8004e14:	b538      	push	{r3, r4, r5, lr}
 8004e16:	4d07      	ldr	r5, [pc, #28]	; (8004e34 <_read_r+0x20>)
 8004e18:	4604      	mov	r4, r0
 8004e1a:	4608      	mov	r0, r1
 8004e1c:	4611      	mov	r1, r2
 8004e1e:	2200      	movs	r2, #0
 8004e20:	602a      	str	r2, [r5, #0]
 8004e22:	461a      	mov	r2, r3
 8004e24:	f7fc fb1a 	bl	800145c <_read>
 8004e28:	1c43      	adds	r3, r0, #1
 8004e2a:	d102      	bne.n	8004e32 <_read_r+0x1e>
 8004e2c:	682b      	ldr	r3, [r5, #0]
 8004e2e:	b103      	cbz	r3, 8004e32 <_read_r+0x1e>
 8004e30:	6023      	str	r3, [r4, #0]
 8004e32:	bd38      	pop	{r3, r4, r5, pc}
 8004e34:	20000b78 	.word	0x20000b78

08004e38 <_sbrk_r>:
 8004e38:	b538      	push	{r3, r4, r5, lr}
 8004e3a:	4d06      	ldr	r5, [pc, #24]	; (8004e54 <_sbrk_r+0x1c>)
 8004e3c:	2300      	movs	r3, #0
 8004e3e:	4604      	mov	r4, r0
 8004e40:	4608      	mov	r0, r1
 8004e42:	602b      	str	r3, [r5, #0]
 8004e44:	f7fc fb5c 	bl	8001500 <_sbrk>
 8004e48:	1c43      	adds	r3, r0, #1
 8004e4a:	d102      	bne.n	8004e52 <_sbrk_r+0x1a>
 8004e4c:	682b      	ldr	r3, [r5, #0]
 8004e4e:	b103      	cbz	r3, 8004e52 <_sbrk_r+0x1a>
 8004e50:	6023      	str	r3, [r4, #0]
 8004e52:	bd38      	pop	{r3, r4, r5, pc}
 8004e54:	20000b78 	.word	0x20000b78

08004e58 <_write_r>:
 8004e58:	b538      	push	{r3, r4, r5, lr}
 8004e5a:	4d07      	ldr	r5, [pc, #28]	; (8004e78 <_write_r+0x20>)
 8004e5c:	4604      	mov	r4, r0
 8004e5e:	4608      	mov	r0, r1
 8004e60:	4611      	mov	r1, r2
 8004e62:	2200      	movs	r2, #0
 8004e64:	602a      	str	r2, [r5, #0]
 8004e66:	461a      	mov	r2, r3
 8004e68:	f7ff facc 	bl	8004404 <_write>
 8004e6c:	1c43      	adds	r3, r0, #1
 8004e6e:	d102      	bne.n	8004e76 <_write_r+0x1e>
 8004e70:	682b      	ldr	r3, [r5, #0]
 8004e72:	b103      	cbz	r3, 8004e76 <_write_r+0x1e>
 8004e74:	6023      	str	r3, [r4, #0]
 8004e76:	bd38      	pop	{r3, r4, r5, pc}
 8004e78:	20000b78 	.word	0x20000b78

08004e7c <__errno>:
 8004e7c:	4b01      	ldr	r3, [pc, #4]	; (8004e84 <__errno+0x8>)
 8004e7e:	6818      	ldr	r0, [r3, #0]
 8004e80:	4770      	bx	lr
 8004e82:	bf00      	nop
 8004e84:	20000548 	.word	0x20000548

08004e88 <__libc_init_array>:
 8004e88:	b570      	push	{r4, r5, r6, lr}
 8004e8a:	4d0d      	ldr	r5, [pc, #52]	; (8004ec0 <__libc_init_array+0x38>)
 8004e8c:	4c0d      	ldr	r4, [pc, #52]	; (8004ec4 <__libc_init_array+0x3c>)
 8004e8e:	1b64      	subs	r4, r4, r5
 8004e90:	10a4      	asrs	r4, r4, #2
 8004e92:	2600      	movs	r6, #0
 8004e94:	42a6      	cmp	r6, r4
 8004e96:	d109      	bne.n	8004eac <__libc_init_array+0x24>
 8004e98:	4d0b      	ldr	r5, [pc, #44]	; (8004ec8 <__libc_init_array+0x40>)
 8004e9a:	4c0c      	ldr	r4, [pc, #48]	; (8004ecc <__libc_init_array+0x44>)
 8004e9c:	f004 f990 	bl	80091c0 <_init>
 8004ea0:	1b64      	subs	r4, r4, r5
 8004ea2:	10a4      	asrs	r4, r4, #2
 8004ea4:	2600      	movs	r6, #0
 8004ea6:	42a6      	cmp	r6, r4
 8004ea8:	d105      	bne.n	8004eb6 <__libc_init_array+0x2e>
 8004eaa:	bd70      	pop	{r4, r5, r6, pc}
 8004eac:	f855 3b04 	ldr.w	r3, [r5], #4
 8004eb0:	4798      	blx	r3
 8004eb2:	3601      	adds	r6, #1
 8004eb4:	e7ee      	b.n	8004e94 <__libc_init_array+0xc>
 8004eb6:	f855 3b04 	ldr.w	r3, [r5], #4
 8004eba:	4798      	blx	r3
 8004ebc:	3601      	adds	r6, #1
 8004ebe:	e7f2      	b.n	8004ea6 <__libc_init_array+0x1e>
 8004ec0:	080095fc 	.word	0x080095fc
 8004ec4:	080095fc 	.word	0x080095fc
 8004ec8:	080095fc 	.word	0x080095fc
 8004ecc:	08009604 	.word	0x08009604

08004ed0 <__retarget_lock_init_recursive>:
 8004ed0:	4770      	bx	lr

08004ed2 <__retarget_lock_close_recursive>:
 8004ed2:	4770      	bx	lr

08004ed4 <__retarget_lock_acquire_recursive>:
 8004ed4:	4770      	bx	lr

08004ed6 <__retarget_lock_release_recursive>:
 8004ed6:	4770      	bx	lr

08004ed8 <sysconf>:
 8004ed8:	2808      	cmp	r0, #8
 8004eda:	b508      	push	{r3, lr}
 8004edc:	d006      	beq.n	8004eec <sysconf+0x14>
 8004ede:	f7ff ffcd 	bl	8004e7c <__errno>
 8004ee2:	2316      	movs	r3, #22
 8004ee4:	6003      	str	r3, [r0, #0]
 8004ee6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004eea:	bd08      	pop	{r3, pc}
 8004eec:	2080      	movs	r0, #128	; 0x80
 8004eee:	e7fc      	b.n	8004eea <sysconf+0x12>

08004ef0 <register_fini>:
 8004ef0:	4b02      	ldr	r3, [pc, #8]	; (8004efc <register_fini+0xc>)
 8004ef2:	b113      	cbz	r3, 8004efa <register_fini+0xa>
 8004ef4:	4802      	ldr	r0, [pc, #8]	; (8004f00 <register_fini+0x10>)
 8004ef6:	f000 b805 	b.w	8004f04 <atexit>
 8004efa:	4770      	bx	lr
 8004efc:	00000000 	.word	0x00000000
 8004f00:	08006759 	.word	0x08006759

08004f04 <atexit>:
 8004f04:	2300      	movs	r3, #0
 8004f06:	4601      	mov	r1, r0
 8004f08:	461a      	mov	r2, r3
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	f001 bc70 	b.w	80067f0 <__register_exitproc>

08004f10 <_malloc_trim_r>:
 8004f10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004f14:	4606      	mov	r6, r0
 8004f16:	2008      	movs	r0, #8
 8004f18:	460c      	mov	r4, r1
 8004f1a:	f7ff ffdd 	bl	8004ed8 <sysconf>
 8004f1e:	4f23      	ldr	r7, [pc, #140]	; (8004fac <_malloc_trim_r+0x9c>)
 8004f20:	4680      	mov	r8, r0
 8004f22:	4630      	mov	r0, r6
 8004f24:	f7ff fe2c 	bl	8004b80 <__malloc_lock>
 8004f28:	68bb      	ldr	r3, [r7, #8]
 8004f2a:	685d      	ldr	r5, [r3, #4]
 8004f2c:	f025 0503 	bic.w	r5, r5, #3
 8004f30:	1b2c      	subs	r4, r5, r4
 8004f32:	3c11      	subs	r4, #17
 8004f34:	4444      	add	r4, r8
 8004f36:	fbb4 f4f8 	udiv	r4, r4, r8
 8004f3a:	3c01      	subs	r4, #1
 8004f3c:	fb08 f404 	mul.w	r4, r8, r4
 8004f40:	45a0      	cmp	r8, r4
 8004f42:	dd05      	ble.n	8004f50 <_malloc_trim_r+0x40>
 8004f44:	4630      	mov	r0, r6
 8004f46:	f7ff fe21 	bl	8004b8c <__malloc_unlock>
 8004f4a:	2000      	movs	r0, #0
 8004f4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004f50:	2100      	movs	r1, #0
 8004f52:	4630      	mov	r0, r6
 8004f54:	f7ff ff70 	bl	8004e38 <_sbrk_r>
 8004f58:	68bb      	ldr	r3, [r7, #8]
 8004f5a:	442b      	add	r3, r5
 8004f5c:	4298      	cmp	r0, r3
 8004f5e:	d1f1      	bne.n	8004f44 <_malloc_trim_r+0x34>
 8004f60:	4261      	negs	r1, r4
 8004f62:	4630      	mov	r0, r6
 8004f64:	f7ff ff68 	bl	8004e38 <_sbrk_r>
 8004f68:	3001      	adds	r0, #1
 8004f6a:	d110      	bne.n	8004f8e <_malloc_trim_r+0x7e>
 8004f6c:	2100      	movs	r1, #0
 8004f6e:	4630      	mov	r0, r6
 8004f70:	f7ff ff62 	bl	8004e38 <_sbrk_r>
 8004f74:	68ba      	ldr	r2, [r7, #8]
 8004f76:	1a83      	subs	r3, r0, r2
 8004f78:	2b0f      	cmp	r3, #15
 8004f7a:	dde3      	ble.n	8004f44 <_malloc_trim_r+0x34>
 8004f7c:	490c      	ldr	r1, [pc, #48]	; (8004fb0 <_malloc_trim_r+0xa0>)
 8004f7e:	6809      	ldr	r1, [r1, #0]
 8004f80:	1a40      	subs	r0, r0, r1
 8004f82:	490c      	ldr	r1, [pc, #48]	; (8004fb4 <_malloc_trim_r+0xa4>)
 8004f84:	f043 0301 	orr.w	r3, r3, #1
 8004f88:	6008      	str	r0, [r1, #0]
 8004f8a:	6053      	str	r3, [r2, #4]
 8004f8c:	e7da      	b.n	8004f44 <_malloc_trim_r+0x34>
 8004f8e:	68bb      	ldr	r3, [r7, #8]
 8004f90:	4a08      	ldr	r2, [pc, #32]	; (8004fb4 <_malloc_trim_r+0xa4>)
 8004f92:	1b2d      	subs	r5, r5, r4
 8004f94:	f045 0501 	orr.w	r5, r5, #1
 8004f98:	605d      	str	r5, [r3, #4]
 8004f9a:	6813      	ldr	r3, [r2, #0]
 8004f9c:	4630      	mov	r0, r6
 8004f9e:	1b1b      	subs	r3, r3, r4
 8004fa0:	6013      	str	r3, [r2, #0]
 8004fa2:	f7ff fdf3 	bl	8004b8c <__malloc_unlock>
 8004fa6:	2001      	movs	r0, #1
 8004fa8:	e7d0      	b.n	8004f4c <_malloc_trim_r+0x3c>
 8004faa:	bf00      	nop
 8004fac:	2000000c 	.word	0x2000000c
 8004fb0:	20000414 	.word	0x20000414
 8004fb4:	20000a08 	.word	0x20000a08

08004fb8 <_free_r>:
 8004fb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fba:	4605      	mov	r5, r0
 8004fbc:	460f      	mov	r7, r1
 8004fbe:	2900      	cmp	r1, #0
 8004fc0:	f000 80b1 	beq.w	8005126 <_free_r+0x16e>
 8004fc4:	f7ff fddc 	bl	8004b80 <__malloc_lock>
 8004fc8:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8004fcc:	4856      	ldr	r0, [pc, #344]	; (8005128 <_free_r+0x170>)
 8004fce:	f022 0401 	bic.w	r4, r2, #1
 8004fd2:	f1a7 0308 	sub.w	r3, r7, #8
 8004fd6:	eb03 0c04 	add.w	ip, r3, r4
 8004fda:	6881      	ldr	r1, [r0, #8]
 8004fdc:	f8dc 6004 	ldr.w	r6, [ip, #4]
 8004fe0:	4561      	cmp	r1, ip
 8004fe2:	f026 0603 	bic.w	r6, r6, #3
 8004fe6:	f002 0201 	and.w	r2, r2, #1
 8004fea:	d11b      	bne.n	8005024 <_free_r+0x6c>
 8004fec:	4426      	add	r6, r4
 8004fee:	b93a      	cbnz	r2, 8005000 <_free_r+0x48>
 8004ff0:	f857 2c08 	ldr.w	r2, [r7, #-8]
 8004ff4:	1a9b      	subs	r3, r3, r2
 8004ff6:	4416      	add	r6, r2
 8004ff8:	e9d3 1202 	ldrd	r1, r2, [r3, #8]
 8004ffc:	60ca      	str	r2, [r1, #12]
 8004ffe:	6091      	str	r1, [r2, #8]
 8005000:	f046 0201 	orr.w	r2, r6, #1
 8005004:	605a      	str	r2, [r3, #4]
 8005006:	6083      	str	r3, [r0, #8]
 8005008:	4b48      	ldr	r3, [pc, #288]	; (800512c <_free_r+0x174>)
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	42b3      	cmp	r3, r6
 800500e:	d804      	bhi.n	800501a <_free_r+0x62>
 8005010:	4b47      	ldr	r3, [pc, #284]	; (8005130 <_free_r+0x178>)
 8005012:	4628      	mov	r0, r5
 8005014:	6819      	ldr	r1, [r3, #0]
 8005016:	f7ff ff7b 	bl	8004f10 <_malloc_trim_r>
 800501a:	4628      	mov	r0, r5
 800501c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005020:	f7ff bdb4 	b.w	8004b8c <__malloc_unlock>
 8005024:	f8cc 6004 	str.w	r6, [ip, #4]
 8005028:	2a00      	cmp	r2, #0
 800502a:	d138      	bne.n	800509e <_free_r+0xe6>
 800502c:	f857 1c08 	ldr.w	r1, [r7, #-8]
 8005030:	1a5b      	subs	r3, r3, r1
 8005032:	440c      	add	r4, r1
 8005034:	6899      	ldr	r1, [r3, #8]
 8005036:	f100 0708 	add.w	r7, r0, #8
 800503a:	42b9      	cmp	r1, r7
 800503c:	d031      	beq.n	80050a2 <_free_r+0xea>
 800503e:	68df      	ldr	r7, [r3, #12]
 8005040:	60cf      	str	r7, [r1, #12]
 8005042:	60b9      	str	r1, [r7, #8]
 8005044:	eb0c 0106 	add.w	r1, ip, r6
 8005048:	6849      	ldr	r1, [r1, #4]
 800504a:	07c9      	lsls	r1, r1, #31
 800504c:	d40b      	bmi.n	8005066 <_free_r+0xae>
 800504e:	f8dc 1008 	ldr.w	r1, [ip, #8]
 8005052:	4434      	add	r4, r6
 8005054:	bb3a      	cbnz	r2, 80050a6 <_free_r+0xee>
 8005056:	4e37      	ldr	r6, [pc, #220]	; (8005134 <_free_r+0x17c>)
 8005058:	42b1      	cmp	r1, r6
 800505a:	d124      	bne.n	80050a6 <_free_r+0xee>
 800505c:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005060:	e9c3 1102 	strd	r1, r1, [r3, #8]
 8005064:	2201      	movs	r2, #1
 8005066:	f044 0101 	orr.w	r1, r4, #1
 800506a:	6059      	str	r1, [r3, #4]
 800506c:	511c      	str	r4, [r3, r4]
 800506e:	2a00      	cmp	r2, #0
 8005070:	d1d3      	bne.n	800501a <_free_r+0x62>
 8005072:	f5b4 7f00 	cmp.w	r4, #512	; 0x200
 8005076:	d21b      	bcs.n	80050b0 <_free_r+0xf8>
 8005078:	08e2      	lsrs	r2, r4, #3
 800507a:	2101      	movs	r1, #1
 800507c:	0964      	lsrs	r4, r4, #5
 800507e:	40a1      	lsls	r1, r4
 8005080:	6844      	ldr	r4, [r0, #4]
 8005082:	3201      	adds	r2, #1
 8005084:	4321      	orrs	r1, r4
 8005086:	6041      	str	r1, [r0, #4]
 8005088:	f850 4032 	ldr.w	r4, [r0, r2, lsl #3]
 800508c:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
 8005090:	3908      	subs	r1, #8
 8005092:	e9c3 4102 	strd	r4, r1, [r3, #8]
 8005096:	f840 3032 	str.w	r3, [r0, r2, lsl #3]
 800509a:	60e3      	str	r3, [r4, #12]
 800509c:	e7bd      	b.n	800501a <_free_r+0x62>
 800509e:	2200      	movs	r2, #0
 80050a0:	e7d0      	b.n	8005044 <_free_r+0x8c>
 80050a2:	2201      	movs	r2, #1
 80050a4:	e7ce      	b.n	8005044 <_free_r+0x8c>
 80050a6:	f8dc 600c 	ldr.w	r6, [ip, #12]
 80050aa:	60ce      	str	r6, [r1, #12]
 80050ac:	60b1      	str	r1, [r6, #8]
 80050ae:	e7da      	b.n	8005066 <_free_r+0xae>
 80050b0:	f5b4 6f20 	cmp.w	r4, #2560	; 0xa00
 80050b4:	ea4f 2254 	mov.w	r2, r4, lsr #9
 80050b8:	d214      	bcs.n	80050e4 <_free_r+0x12c>
 80050ba:	09a2      	lsrs	r2, r4, #6
 80050bc:	3238      	adds	r2, #56	; 0x38
 80050be:	1c51      	adds	r1, r2, #1
 80050c0:	eb00 06c2 	add.w	r6, r0, r2, lsl #3
 80050c4:	f850 1031 	ldr.w	r1, [r0, r1, lsl #3]
 80050c8:	428e      	cmp	r6, r1
 80050ca:	d125      	bne.n	8005118 <_free_r+0x160>
 80050cc:	2401      	movs	r4, #1
 80050ce:	1092      	asrs	r2, r2, #2
 80050d0:	fa04 f202 	lsl.w	r2, r4, r2
 80050d4:	6844      	ldr	r4, [r0, #4]
 80050d6:	4322      	orrs	r2, r4
 80050d8:	6042      	str	r2, [r0, #4]
 80050da:	e9c3 1602 	strd	r1, r6, [r3, #8]
 80050de:	60b3      	str	r3, [r6, #8]
 80050e0:	60cb      	str	r3, [r1, #12]
 80050e2:	e79a      	b.n	800501a <_free_r+0x62>
 80050e4:	2a14      	cmp	r2, #20
 80050e6:	d801      	bhi.n	80050ec <_free_r+0x134>
 80050e8:	325b      	adds	r2, #91	; 0x5b
 80050ea:	e7e8      	b.n	80050be <_free_r+0x106>
 80050ec:	2a54      	cmp	r2, #84	; 0x54
 80050ee:	d802      	bhi.n	80050f6 <_free_r+0x13e>
 80050f0:	0b22      	lsrs	r2, r4, #12
 80050f2:	326e      	adds	r2, #110	; 0x6e
 80050f4:	e7e3      	b.n	80050be <_free_r+0x106>
 80050f6:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 80050fa:	d802      	bhi.n	8005102 <_free_r+0x14a>
 80050fc:	0be2      	lsrs	r2, r4, #15
 80050fe:	3277      	adds	r2, #119	; 0x77
 8005100:	e7dd      	b.n	80050be <_free_r+0x106>
 8005102:	f240 5154 	movw	r1, #1364	; 0x554
 8005106:	428a      	cmp	r2, r1
 8005108:	bf9a      	itte	ls
 800510a:	0ca2      	lsrls	r2, r4, #18
 800510c:	327c      	addls	r2, #124	; 0x7c
 800510e:	227e      	movhi	r2, #126	; 0x7e
 8005110:	e7d5      	b.n	80050be <_free_r+0x106>
 8005112:	6889      	ldr	r1, [r1, #8]
 8005114:	428e      	cmp	r6, r1
 8005116:	d004      	beq.n	8005122 <_free_r+0x16a>
 8005118:	684a      	ldr	r2, [r1, #4]
 800511a:	f022 0203 	bic.w	r2, r2, #3
 800511e:	42a2      	cmp	r2, r4
 8005120:	d8f7      	bhi.n	8005112 <_free_r+0x15a>
 8005122:	68ce      	ldr	r6, [r1, #12]
 8005124:	e7d9      	b.n	80050da <_free_r+0x122>
 8005126:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005128:	2000000c 	.word	0x2000000c
 800512c:	20000418 	.word	0x20000418
 8005130:	20000a38 	.word	0x20000a38
 8005134:	20000014 	.word	0x20000014

08005138 <_svfprintf_r>:
 8005138:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800513c:	ed2d 8b04 	vpush	{d8-d9}
 8005140:	b0cf      	sub	sp, #316	; 0x13c
 8005142:	4689      	mov	r9, r1
 8005144:	9203      	str	r2, [sp, #12]
 8005146:	461d      	mov	r5, r3
 8005148:	4682      	mov	sl, r0
 800514a:	f001 fb01 	bl	8006750 <_localeconv_r>
 800514e:	6803      	ldr	r3, [r0, #0]
 8005150:	9313      	str	r3, [sp, #76]	; 0x4c
 8005152:	4618      	mov	r0, r3
 8005154:	f7fb f864 	bl	8000220 <strlen>
 8005158:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 800515c:	900e      	str	r0, [sp, #56]	; 0x38
 800515e:	0619      	lsls	r1, r3, #24
 8005160:	d51a      	bpl.n	8005198 <_svfprintf_r+0x60>
 8005162:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8005166:	b9bb      	cbnz	r3, 8005198 <_svfprintf_r+0x60>
 8005168:	2140      	movs	r1, #64	; 0x40
 800516a:	4650      	mov	r0, sl
 800516c:	f7ff face 	bl	800470c <_malloc_r>
 8005170:	f8c9 0000 	str.w	r0, [r9]
 8005174:	f8c9 0010 	str.w	r0, [r9, #16]
 8005178:	b958      	cbnz	r0, 8005192 <_svfprintf_r+0x5a>
 800517a:	230c      	movs	r3, #12
 800517c:	f8ca 3000 	str.w	r3, [sl]
 8005180:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005184:	930b      	str	r3, [sp, #44]	; 0x2c
 8005186:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8005188:	b04f      	add	sp, #316	; 0x13c
 800518a:	ecbd 8b04 	vpop	{d8-d9}
 800518e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005192:	2340      	movs	r3, #64	; 0x40
 8005194:	f8c9 3014 	str.w	r3, [r9, #20]
 8005198:	ed9f 7b91 	vldr	d7, [pc, #580]	; 80053e0 <_svfprintf_r+0x2a8>
 800519c:	2300      	movs	r3, #0
 800519e:	e9cd 3323 	strd	r3, r3, [sp, #140]	; 0x8c
 80051a2:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 80051a6:	e9cd 3315 	strd	r3, r3, [sp, #84]	; 0x54
 80051aa:	ac25      	add	r4, sp, #148	; 0x94
 80051ac:	9422      	str	r4, [sp, #136]	; 0x88
 80051ae:	9305      	str	r3, [sp, #20]
 80051b0:	9309      	str	r3, [sp, #36]	; 0x24
 80051b2:	9311      	str	r3, [sp, #68]	; 0x44
 80051b4:	9314      	str	r3, [sp, #80]	; 0x50
 80051b6:	930b      	str	r3, [sp, #44]	; 0x2c
 80051b8:	9b03      	ldr	r3, [sp, #12]
 80051ba:	461e      	mov	r6, r3
 80051bc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80051c0:	b10a      	cbz	r2, 80051c6 <_svfprintf_r+0x8e>
 80051c2:	2a25      	cmp	r2, #37	; 0x25
 80051c4:	d1f9      	bne.n	80051ba <_svfprintf_r+0x82>
 80051c6:	9b03      	ldr	r3, [sp, #12]
 80051c8:	1af7      	subs	r7, r6, r3
 80051ca:	d00d      	beq.n	80051e8 <_svfprintf_r+0xb0>
 80051cc:	e9c4 3700 	strd	r3, r7, [r4]
 80051d0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80051d2:	443b      	add	r3, r7
 80051d4:	9324      	str	r3, [sp, #144]	; 0x90
 80051d6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80051d8:	3301      	adds	r3, #1
 80051da:	2b07      	cmp	r3, #7
 80051dc:	9323      	str	r3, [sp, #140]	; 0x8c
 80051de:	dc78      	bgt.n	80052d2 <_svfprintf_r+0x19a>
 80051e0:	3408      	adds	r4, #8
 80051e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80051e4:	443b      	add	r3, r7
 80051e6:	930b      	str	r3, [sp, #44]	; 0x2c
 80051e8:	7833      	ldrb	r3, [r6, #0]
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	f001 815a 	beq.w	80064a4 <_svfprintf_r+0x136c>
 80051f0:	2300      	movs	r3, #0
 80051f2:	3601      	adds	r6, #1
 80051f4:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 80051f8:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 80051fc:	930f      	str	r3, [sp, #60]	; 0x3c
 80051fe:	469b      	mov	fp, r3
 8005200:	270a      	movs	r7, #10
 8005202:	212b      	movs	r1, #43	; 0x2b
 8005204:	4633      	mov	r3, r6
 8005206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800520a:	9207      	str	r2, [sp, #28]
 800520c:	930a      	str	r3, [sp, #40]	; 0x28
 800520e:	9b07      	ldr	r3, [sp, #28]
 8005210:	3b20      	subs	r3, #32
 8005212:	2b5a      	cmp	r3, #90	; 0x5a
 8005214:	f200 85c6 	bhi.w	8005da4 <_svfprintf_r+0xc6c>
 8005218:	e8df f013 	tbh	[pc, r3, lsl #1]
 800521c:	05c4007e 	.word	0x05c4007e
 8005220:	008605c4 	.word	0x008605c4
 8005224:	05c405c4 	.word	0x05c405c4
 8005228:	006505c4 	.word	0x006505c4
 800522c:	05c405c4 	.word	0x05c405c4
 8005230:	00930089 	.word	0x00930089
 8005234:	009005c4 	.word	0x009005c4
 8005238:	05c40096 	.word	0x05c40096
 800523c:	00b200af 	.word	0x00b200af
 8005240:	00b200b2 	.word	0x00b200b2
 8005244:	00b200b2 	.word	0x00b200b2
 8005248:	00b200b2 	.word	0x00b200b2
 800524c:	00b200b2 	.word	0x00b200b2
 8005250:	05c405c4 	.word	0x05c405c4
 8005254:	05c405c4 	.word	0x05c405c4
 8005258:	05c405c4 	.word	0x05c405c4
 800525c:	012905c4 	.word	0x012905c4
 8005260:	00e605c4 	.word	0x00e605c4
 8005264:	012900f9 	.word	0x012900f9
 8005268:	01290129 	.word	0x01290129
 800526c:	05c405c4 	.word	0x05c405c4
 8005270:	05c405c4 	.word	0x05c405c4
 8005274:	05c400c2 	.word	0x05c400c2
 8005278:	049105c4 	.word	0x049105c4
 800527c:	05c405c4 	.word	0x05c405c4
 8005280:	04db05c4 	.word	0x04db05c4
 8005284:	050105c4 	.word	0x050105c4
 8005288:	05c405c4 	.word	0x05c405c4
 800528c:	05c40523 	.word	0x05c40523
 8005290:	05c405c4 	.word	0x05c405c4
 8005294:	05c405c4 	.word	0x05c405c4
 8005298:	05c405c4 	.word	0x05c405c4
 800529c:	012905c4 	.word	0x012905c4
 80052a0:	00e605c4 	.word	0x00e605c4
 80052a4:	012900fb 	.word	0x012900fb
 80052a8:	01290129 	.word	0x01290129
 80052ac:	00fb00c5 	.word	0x00fb00c5
 80052b0:	05c400d9 	.word	0x05c400d9
 80052b4:	05c400d2 	.word	0x05c400d2
 80052b8:	0493046c 	.word	0x0493046c
 80052bc:	00d904ca 	.word	0x00d904ca
 80052c0:	04db05c4 	.word	0x04db05c4
 80052c4:	0503007c 	.word	0x0503007c
 80052c8:	05c405c4 	.word	0x05c405c4
 80052cc:	05c40542 	.word	0x05c40542
 80052d0:	007c      	.short	0x007c
 80052d2:	aa22      	add	r2, sp, #136	; 0x88
 80052d4:	4649      	mov	r1, r9
 80052d6:	4650      	mov	r0, sl
 80052d8:	f002 fc56 	bl	8007b88 <__ssprint_r>
 80052dc:	2800      	cmp	r0, #0
 80052de:	f040 8137 	bne.w	8005550 <_svfprintf_r+0x418>
 80052e2:	ac25      	add	r4, sp, #148	; 0x94
 80052e4:	e77d      	b.n	80051e2 <_svfprintf_r+0xaa>
 80052e6:	4650      	mov	r0, sl
 80052e8:	f001 fa32 	bl	8006750 <_localeconv_r>
 80052ec:	6843      	ldr	r3, [r0, #4]
 80052ee:	9314      	str	r3, [sp, #80]	; 0x50
 80052f0:	4618      	mov	r0, r3
 80052f2:	f7fa ff95 	bl	8000220 <strlen>
 80052f6:	9011      	str	r0, [sp, #68]	; 0x44
 80052f8:	4650      	mov	r0, sl
 80052fa:	f001 fa29 	bl	8006750 <_localeconv_r>
 80052fe:	6883      	ldr	r3, [r0, #8]
 8005300:	9309      	str	r3, [sp, #36]	; 0x24
 8005302:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005304:	212b      	movs	r1, #43	; 0x2b
 8005306:	b12b      	cbz	r3, 8005314 <_svfprintf_r+0x1dc>
 8005308:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800530a:	b11b      	cbz	r3, 8005314 <_svfprintf_r+0x1dc>
 800530c:	781b      	ldrb	r3, [r3, #0]
 800530e:	b10b      	cbz	r3, 8005314 <_svfprintf_r+0x1dc>
 8005310:	f44b 6b80 	orr.w	fp, fp, #1024	; 0x400
 8005314:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8005316:	e775      	b.n	8005204 <_svfprintf_r+0xcc>
 8005318:	f89d 306b 	ldrb.w	r3, [sp, #107]	; 0x6b
 800531c:	2b00      	cmp	r3, #0
 800531e:	d1f9      	bne.n	8005314 <_svfprintf_r+0x1dc>
 8005320:	2320      	movs	r3, #32
 8005322:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 8005326:	e7f5      	b.n	8005314 <_svfprintf_r+0x1dc>
 8005328:	f04b 0b01 	orr.w	fp, fp, #1
 800532c:	e7f2      	b.n	8005314 <_svfprintf_r+0x1dc>
 800532e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005332:	930f      	str	r3, [sp, #60]	; 0x3c
 8005334:	2b00      	cmp	r3, #0
 8005336:	daed      	bge.n	8005314 <_svfprintf_r+0x1dc>
 8005338:	425b      	negs	r3, r3
 800533a:	930f      	str	r3, [sp, #60]	; 0x3c
 800533c:	f04b 0b04 	orr.w	fp, fp, #4
 8005340:	e7e8      	b.n	8005314 <_svfprintf_r+0x1dc>
 8005342:	f88d 106b 	strb.w	r1, [sp, #107]	; 0x6b
 8005346:	e7e5      	b.n	8005314 <_svfprintf_r+0x1dc>
 8005348:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800534a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800534e:	9207      	str	r2, [sp, #28]
 8005350:	2a2a      	cmp	r2, #42	; 0x2a
 8005352:	d10f      	bne.n	8005374 <_svfprintf_r+0x23c>
 8005354:	f855 2b04 	ldr.w	r2, [r5], #4
 8005358:	930a      	str	r3, [sp, #40]	; 0x28
 800535a:	ea42 78e2 	orr.w	r8, r2, r2, asr #31
 800535e:	e7d9      	b.n	8005314 <_svfprintf_r+0x1dc>
 8005360:	fb07 2808 	mla	r8, r7, r8, r2
 8005364:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005368:	9207      	str	r2, [sp, #28]
 800536a:	9a07      	ldr	r2, [sp, #28]
 800536c:	3a30      	subs	r2, #48	; 0x30
 800536e:	2a09      	cmp	r2, #9
 8005370:	d9f6      	bls.n	8005360 <_svfprintf_r+0x228>
 8005372:	e74b      	b.n	800520c <_svfprintf_r+0xd4>
 8005374:	f04f 0800 	mov.w	r8, #0
 8005378:	e7f7      	b.n	800536a <_svfprintf_r+0x232>
 800537a:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
 800537e:	e7c9      	b.n	8005314 <_svfprintf_r+0x1dc>
 8005380:	2200      	movs	r2, #0
 8005382:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005384:	920f      	str	r2, [sp, #60]	; 0x3c
 8005386:	9a07      	ldr	r2, [sp, #28]
 8005388:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800538a:	3a30      	subs	r2, #48	; 0x30
 800538c:	fb07 2200 	mla	r2, r7, r0, r2
 8005390:	920f      	str	r2, [sp, #60]	; 0x3c
 8005392:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005396:	9207      	str	r2, [sp, #28]
 8005398:	3a30      	subs	r2, #48	; 0x30
 800539a:	2a09      	cmp	r2, #9
 800539c:	d9f3      	bls.n	8005386 <_svfprintf_r+0x24e>
 800539e:	e735      	b.n	800520c <_svfprintf_r+0xd4>
 80053a0:	f04b 0b08 	orr.w	fp, fp, #8
 80053a4:	e7b6      	b.n	8005314 <_svfprintf_r+0x1dc>
 80053a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80053a8:	781b      	ldrb	r3, [r3, #0]
 80053aa:	2b68      	cmp	r3, #104	; 0x68
 80053ac:	bf01      	itttt	eq
 80053ae:	9b0a      	ldreq	r3, [sp, #40]	; 0x28
 80053b0:	3301      	addeq	r3, #1
 80053b2:	930a      	streq	r3, [sp, #40]	; 0x28
 80053b4:	f44b 7b00 	orreq.w	fp, fp, #512	; 0x200
 80053b8:	bf18      	it	ne
 80053ba:	f04b 0b40 	orrne.w	fp, fp, #64	; 0x40
 80053be:	e7a9      	b.n	8005314 <_svfprintf_r+0x1dc>
 80053c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80053c2:	781b      	ldrb	r3, [r3, #0]
 80053c4:	2b6c      	cmp	r3, #108	; 0x6c
 80053c6:	d105      	bne.n	80053d4 <_svfprintf_r+0x29c>
 80053c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80053ca:	3301      	adds	r3, #1
 80053cc:	930a      	str	r3, [sp, #40]	; 0x28
 80053ce:	f04b 0b20 	orr.w	fp, fp, #32
 80053d2:	e79f      	b.n	8005314 <_svfprintf_r+0x1dc>
 80053d4:	f04b 0b10 	orr.w	fp, fp, #16
 80053d8:	e79c      	b.n	8005314 <_svfprintf_r+0x1dc>
 80053da:	bf00      	nop
 80053dc:	f3af 8000 	nop.w
	...
 80053e8:	462a      	mov	r2, r5
 80053ea:	f852 3b04 	ldr.w	r3, [r2], #4
 80053ee:	f88d 30d4 	strb.w	r3, [sp, #212]	; 0xd4
 80053f2:	2300      	movs	r3, #0
 80053f4:	9206      	str	r2, [sp, #24]
 80053f6:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 80053fa:	9304      	str	r3, [sp, #16]
 80053fc:	461f      	mov	r7, r3
 80053fe:	461e      	mov	r6, r3
 8005400:	9308      	str	r3, [sp, #32]
 8005402:	461d      	mov	r5, r3
 8005404:	ab35      	add	r3, sp, #212	; 0xd4
 8005406:	f04f 0801 	mov.w	r8, #1
 800540a:	9303      	str	r3, [sp, #12]
 800540c:	e1b9      	b.n	8005782 <_svfprintf_r+0x64a>
 800540e:	f04b 0b10 	orr.w	fp, fp, #16
 8005412:	f01b 0f20 	tst.w	fp, #32
 8005416:	d012      	beq.n	800543e <_svfprintf_r+0x306>
 8005418:	3507      	adds	r5, #7
 800541a:	f025 0307 	bic.w	r3, r5, #7
 800541e:	461a      	mov	r2, r3
 8005420:	685e      	ldr	r6, [r3, #4]
 8005422:	f852 5b08 	ldr.w	r5, [r2], #8
 8005426:	9206      	str	r2, [sp, #24]
 8005428:	2e00      	cmp	r6, #0
 800542a:	da06      	bge.n	800543a <_svfprintf_r+0x302>
 800542c:	426d      	negs	r5, r5
 800542e:	f04f 032d 	mov.w	r3, #45	; 0x2d
 8005432:	eb66 0646 	sbc.w	r6, r6, r6, lsl #1
 8005436:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 800543a:	2301      	movs	r3, #1
 800543c:	e392      	b.n	8005b64 <_svfprintf_r+0xa2c>
 800543e:	462b      	mov	r3, r5
 8005440:	f01b 0f10 	tst.w	fp, #16
 8005444:	f853 6b04 	ldr.w	r6, [r3], #4
 8005448:	9306      	str	r3, [sp, #24]
 800544a:	d002      	beq.n	8005452 <_svfprintf_r+0x31a>
 800544c:	4635      	mov	r5, r6
 800544e:	17f6      	asrs	r6, r6, #31
 8005450:	e7ea      	b.n	8005428 <_svfprintf_r+0x2f0>
 8005452:	f01b 0f40 	tst.w	fp, #64	; 0x40
 8005456:	d003      	beq.n	8005460 <_svfprintf_r+0x328>
 8005458:	b235      	sxth	r5, r6
 800545a:	f346 36c0 	sbfx	r6, r6, #15, #1
 800545e:	e7e3      	b.n	8005428 <_svfprintf_r+0x2f0>
 8005460:	f41b 7f00 	tst.w	fp, #512	; 0x200
 8005464:	d0f2      	beq.n	800544c <_svfprintf_r+0x314>
 8005466:	b275      	sxtb	r5, r6
 8005468:	f346 16c0 	sbfx	r6, r6, #7, #1
 800546c:	e7dc      	b.n	8005428 <_svfprintf_r+0x2f0>
 800546e:	3507      	adds	r5, #7
 8005470:	f025 0307 	bic.w	r3, r5, #7
 8005474:	ecb3 7b02 	vldmia	r3!, {d7}
 8005478:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800547c:	9306      	str	r3, [sp, #24]
 800547e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005480:	ee09 3a10 	vmov	s18, r3
 8005484:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005486:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800548a:	ee09 3a90 	vmov	s19, r3
 800548e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005492:	4b34      	ldr	r3, [pc, #208]	; (8005564 <_svfprintf_r+0x42c>)
 8005494:	ec51 0b19 	vmov	r0, r1, d9
 8005498:	f7fb fb70 	bl	8000b7c <__aeabi_dcmpun>
 800549c:	bb18      	cbnz	r0, 80054e6 <_svfprintf_r+0x3ae>
 800549e:	4b31      	ldr	r3, [pc, #196]	; (8005564 <_svfprintf_r+0x42c>)
 80054a0:	ec51 0b19 	vmov	r0, r1, d9
 80054a4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80054a8:	f7fb fb4a 	bl	8000b40 <__aeabi_dcmple>
 80054ac:	b9d8      	cbnz	r0, 80054e6 <_svfprintf_r+0x3ae>
 80054ae:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80054b2:	2200      	movs	r2, #0
 80054b4:	2300      	movs	r3, #0
 80054b6:	f7fb fb39 	bl	8000b2c <__aeabi_dcmplt>
 80054ba:	b110      	cbz	r0, 80054c2 <_svfprintf_r+0x38a>
 80054bc:	232d      	movs	r3, #45	; 0x2d
 80054be:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 80054c2:	4a29      	ldr	r2, [pc, #164]	; (8005568 <_svfprintf_r+0x430>)
 80054c4:	4b29      	ldr	r3, [pc, #164]	; (800556c <_svfprintf_r+0x434>)
 80054c6:	9907      	ldr	r1, [sp, #28]
 80054c8:	2947      	cmp	r1, #71	; 0x47
 80054ca:	bfc8      	it	gt
 80054cc:	461a      	movgt	r2, r3
 80054ce:	2300      	movs	r3, #0
 80054d0:	9203      	str	r2, [sp, #12]
 80054d2:	f02b 0b80 	bic.w	fp, fp, #128	; 0x80
 80054d6:	9304      	str	r3, [sp, #16]
 80054d8:	f04f 0803 	mov.w	r8, #3
 80054dc:	461f      	mov	r7, r3
 80054de:	461e      	mov	r6, r3
 80054e0:	9308      	str	r3, [sp, #32]
 80054e2:	461d      	mov	r5, r3
 80054e4:	e14d      	b.n	8005782 <_svfprintf_r+0x64a>
 80054e6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80054ea:	4610      	mov	r0, r2
 80054ec:	4619      	mov	r1, r3
 80054ee:	f7fb fb45 	bl	8000b7c <__aeabi_dcmpun>
 80054f2:	b140      	cbz	r0, 8005506 <_svfprintf_r+0x3ce>
 80054f4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80054f6:	4a1e      	ldr	r2, [pc, #120]	; (8005570 <_svfprintf_r+0x438>)
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	bfbc      	itt	lt
 80054fc:	232d      	movlt	r3, #45	; 0x2d
 80054fe:	f88d 306b 	strblt.w	r3, [sp, #107]	; 0x6b
 8005502:	4b1c      	ldr	r3, [pc, #112]	; (8005574 <_svfprintf_r+0x43c>)
 8005504:	e7df      	b.n	80054c6 <_svfprintf_r+0x38e>
 8005506:	9b07      	ldr	r3, [sp, #28]
 8005508:	f023 0320 	bic.w	r3, r3, #32
 800550c:	2b41      	cmp	r3, #65	; 0x41
 800550e:	9308      	str	r3, [sp, #32]
 8005510:	d132      	bne.n	8005578 <_svfprintf_r+0x440>
 8005512:	2330      	movs	r3, #48	; 0x30
 8005514:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
 8005518:	9b07      	ldr	r3, [sp, #28]
 800551a:	2b61      	cmp	r3, #97	; 0x61
 800551c:	bf0c      	ite	eq
 800551e:	2378      	moveq	r3, #120	; 0x78
 8005520:	2358      	movne	r3, #88	; 0x58
 8005522:	f1b8 0f63 	cmp.w	r8, #99	; 0x63
 8005526:	f88d 306d 	strb.w	r3, [sp, #109]	; 0x6d
 800552a:	f04b 0b02 	orr.w	fp, fp, #2
 800552e:	f340 8204 	ble.w	800593a <_svfprintf_r+0x802>
 8005532:	f108 0101 	add.w	r1, r8, #1
 8005536:	4650      	mov	r0, sl
 8005538:	f7ff f8e8 	bl	800470c <_malloc_r>
 800553c:	9003      	str	r0, [sp, #12]
 800553e:	2800      	cmp	r0, #0
 8005540:	f040 81ff 	bne.w	8005942 <_svfprintf_r+0x80a>
 8005544:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8005548:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800554c:	f8a9 300c 	strh.w	r3, [r9, #12]
 8005550:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8005554:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005558:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800555a:	bf18      	it	ne
 800555c:	f04f 33ff 	movne.w	r3, #4294967295	; 0xffffffff
 8005560:	e610      	b.n	8005184 <_svfprintf_r+0x4c>
 8005562:	bf00      	nop
 8005564:	7fefffff 	.word	0x7fefffff
 8005568:	08009268 	.word	0x08009268
 800556c:	0800926c 	.word	0x0800926c
 8005570:	08009270 	.word	0x08009270
 8005574:	08009274 	.word	0x08009274
 8005578:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
 800557c:	f000 81e4 	beq.w	8005948 <_svfprintf_r+0x810>
 8005580:	9b08      	ldr	r3, [sp, #32]
 8005582:	2b47      	cmp	r3, #71	; 0x47
 8005584:	f040 81e4 	bne.w	8005950 <_svfprintf_r+0x818>
 8005588:	f1b8 0f00 	cmp.w	r8, #0
 800558c:	f040 81e0 	bne.w	8005950 <_svfprintf_r+0x818>
 8005590:	f8cd 8010 	str.w	r8, [sp, #16]
 8005594:	f04f 0801 	mov.w	r8, #1
 8005598:	f44b 7380 	orr.w	r3, fp, #256	; 0x100
 800559c:	9310      	str	r3, [sp, #64]	; 0x40
 800559e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	f280 81d7 	bge.w	8005954 <_svfprintf_r+0x81c>
 80055a6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80055a8:	ee08 3a10 	vmov	s16, r3
 80055ac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80055ae:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80055b2:	ee08 3a90 	vmov	s17, r3
 80055b6:	232d      	movs	r3, #45	; 0x2d
 80055b8:	9318      	str	r3, [sp, #96]	; 0x60
 80055ba:	9b08      	ldr	r3, [sp, #32]
 80055bc:	2b41      	cmp	r3, #65	; 0x41
 80055be:	f040 81e7 	bne.w	8005990 <_svfprintf_r+0x858>
 80055c2:	eeb0 0a48 	vmov.f32	s0, s16
 80055c6:	eef0 0a68 	vmov.f32	s1, s17
 80055ca:	a81c      	add	r0, sp, #112	; 0x70
 80055cc:	f001 f8d8 	bl	8006780 <frexp>
 80055d0:	2200      	movs	r2, #0
 80055d2:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80055d6:	ec51 0b10 	vmov	r0, r1, d0
 80055da:	f7fb f835 	bl	8000648 <__aeabi_dmul>
 80055de:	2200      	movs	r2, #0
 80055e0:	2300      	movs	r3, #0
 80055e2:	4606      	mov	r6, r0
 80055e4:	460f      	mov	r7, r1
 80055e6:	f7fb fa97 	bl	8000b18 <__aeabi_dcmpeq>
 80055ea:	b108      	cbz	r0, 80055f0 <_svfprintf_r+0x4b8>
 80055ec:	2301      	movs	r3, #1
 80055ee:	931c      	str	r3, [sp, #112]	; 0x70
 80055f0:	4bac      	ldr	r3, [pc, #688]	; (80058a4 <_svfprintf_r+0x76c>)
 80055f2:	4aad      	ldr	r2, [pc, #692]	; (80058a8 <_svfprintf_r+0x770>)
 80055f4:	9907      	ldr	r1, [sp, #28]
 80055f6:	9d03      	ldr	r5, [sp, #12]
 80055f8:	2961      	cmp	r1, #97	; 0x61
 80055fa:	bf18      	it	ne
 80055fc:	461a      	movne	r2, r3
 80055fe:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
 8005602:	9217      	str	r2, [sp, #92]	; 0x5c
 8005604:	9305      	str	r3, [sp, #20]
 8005606:	4ba9      	ldr	r3, [pc, #676]	; (80058ac <_svfprintf_r+0x774>)
 8005608:	2200      	movs	r2, #0
 800560a:	4630      	mov	r0, r6
 800560c:	4639      	mov	r1, r7
 800560e:	f7fb f81b 	bl	8000648 <__aeabi_dmul>
 8005612:	460f      	mov	r7, r1
 8005614:	4606      	mov	r6, r0
 8005616:	f7fb fac7 	bl	8000ba8 <__aeabi_d2iz>
 800561a:	9019      	str	r0, [sp, #100]	; 0x64
 800561c:	f7fa ffaa 	bl	8000574 <__aeabi_i2d>
 8005620:	4602      	mov	r2, r0
 8005622:	460b      	mov	r3, r1
 8005624:	4630      	mov	r0, r6
 8005626:	4639      	mov	r1, r7
 8005628:	f7fa fe56 	bl	80002d8 <__aeabi_dsub>
 800562c:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800562e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005630:	5c9b      	ldrb	r3, [r3, r2]
 8005632:	f805 3b01 	strb.w	r3, [r5], #1
 8005636:	9b05      	ldr	r3, [sp, #20]
 8005638:	9312      	str	r3, [sp, #72]	; 0x48
 800563a:	1c5a      	adds	r2, r3, #1
 800563c:	4606      	mov	r6, r0
 800563e:	460f      	mov	r7, r1
 8005640:	d007      	beq.n	8005652 <_svfprintf_r+0x51a>
 8005642:	3b01      	subs	r3, #1
 8005644:	9305      	str	r3, [sp, #20]
 8005646:	2200      	movs	r2, #0
 8005648:	2300      	movs	r3, #0
 800564a:	f7fb fa65 	bl	8000b18 <__aeabi_dcmpeq>
 800564e:	2800      	cmp	r0, #0
 8005650:	d0d9      	beq.n	8005606 <_svfprintf_r+0x4ce>
 8005652:	4b97      	ldr	r3, [pc, #604]	; (80058b0 <_svfprintf_r+0x778>)
 8005654:	2200      	movs	r2, #0
 8005656:	4630      	mov	r0, r6
 8005658:	4639      	mov	r1, r7
 800565a:	f7fb fa85 	bl	8000b68 <__aeabi_dcmpgt>
 800565e:	b960      	cbnz	r0, 800567a <_svfprintf_r+0x542>
 8005660:	4b93      	ldr	r3, [pc, #588]	; (80058b0 <_svfprintf_r+0x778>)
 8005662:	2200      	movs	r2, #0
 8005664:	4630      	mov	r0, r6
 8005666:	4639      	mov	r1, r7
 8005668:	f7fb fa56 	bl	8000b18 <__aeabi_dcmpeq>
 800566c:	2800      	cmp	r0, #0
 800566e:	f000 818a 	beq.w	8005986 <_svfprintf_r+0x84e>
 8005672:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005674:	07de      	lsls	r6, r3, #31
 8005676:	f140 8186 	bpl.w	8005986 <_svfprintf_r+0x84e>
 800567a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800567c:	9520      	str	r5, [sp, #128]	; 0x80
 800567e:	7bd9      	ldrb	r1, [r3, #15]
 8005680:	2030      	movs	r0, #48	; 0x30
 8005682:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005684:	1e53      	subs	r3, r2, #1
 8005686:	9320      	str	r3, [sp, #128]	; 0x80
 8005688:	f812 3c01 	ldrb.w	r3, [r2, #-1]
 800568c:	428b      	cmp	r3, r1
 800568e:	f000 8169 	beq.w	8005964 <_svfprintf_r+0x82c>
 8005692:	2b39      	cmp	r3, #57	; 0x39
 8005694:	bf0b      	itete	eq
 8005696:	9b17      	ldreq	r3, [sp, #92]	; 0x5c
 8005698:	3301      	addne	r3, #1
 800569a:	7a9b      	ldrbeq	r3, [r3, #10]
 800569c:	b2db      	uxtbne	r3, r3
 800569e:	f802 3c01 	strb.w	r3, [r2, #-1]
 80056a2:	9b03      	ldr	r3, [sp, #12]
 80056a4:	1aeb      	subs	r3, r5, r3
 80056a6:	9305      	str	r3, [sp, #20]
 80056a8:	9b08      	ldr	r3, [sp, #32]
 80056aa:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 80056ac:	2b47      	cmp	r3, #71	; 0x47
 80056ae:	f040 81b9 	bne.w	8005a24 <_svfprintf_r+0x8ec>
 80056b2:	1ce8      	adds	r0, r5, #3
 80056b4:	db02      	blt.n	80056bc <_svfprintf_r+0x584>
 80056b6:	45a8      	cmp	r8, r5
 80056b8:	f280 81d7 	bge.w	8005a6a <_svfprintf_r+0x932>
 80056bc:	9b07      	ldr	r3, [sp, #28]
 80056be:	3b02      	subs	r3, #2
 80056c0:	9307      	str	r3, [sp, #28]
 80056c2:	9907      	ldr	r1, [sp, #28]
 80056c4:	f89d 201c 	ldrb.w	r2, [sp, #28]
 80056c8:	f021 0120 	bic.w	r1, r1, #32
 80056cc:	2941      	cmp	r1, #65	; 0x41
 80056ce:	bf08      	it	eq
 80056d0:	320f      	addeq	r2, #15
 80056d2:	f105 33ff 	add.w	r3, r5, #4294967295	; 0xffffffff
 80056d6:	bf06      	itte	eq
 80056d8:	b2d2      	uxtbeq	r2, r2
 80056da:	2101      	moveq	r1, #1
 80056dc:	2100      	movne	r1, #0
 80056de:	2b00      	cmp	r3, #0
 80056e0:	931c      	str	r3, [sp, #112]	; 0x70
 80056e2:	bfb8      	it	lt
 80056e4:	f1c5 0301 	rsblt	r3, r5, #1
 80056e8:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
 80056ec:	bfb4      	ite	lt
 80056ee:	222d      	movlt	r2, #45	; 0x2d
 80056f0:	222b      	movge	r2, #43	; 0x2b
 80056f2:	2b09      	cmp	r3, #9
 80056f4:	f88d 2079 	strb.w	r2, [sp, #121]	; 0x79
 80056f8:	f340 81aa 	ble.w	8005a50 <_svfprintf_r+0x918>
 80056fc:	f10d 0087 	add.w	r0, sp, #135	; 0x87
 8005700:	260a      	movs	r6, #10
 8005702:	4602      	mov	r2, r0
 8005704:	fb93 f5f6 	sdiv	r5, r3, r6
 8005708:	fb06 3115 	mls	r1, r6, r5, r3
 800570c:	3130      	adds	r1, #48	; 0x30
 800570e:	f802 1c01 	strb.w	r1, [r2, #-1]
 8005712:	4619      	mov	r1, r3
 8005714:	2963      	cmp	r1, #99	; 0x63
 8005716:	f100 30ff 	add.w	r0, r0, #4294967295	; 0xffffffff
 800571a:	462b      	mov	r3, r5
 800571c:	dcf1      	bgt.n	8005702 <_svfprintf_r+0x5ca>
 800571e:	3330      	adds	r3, #48	; 0x30
 8005720:	1e91      	subs	r1, r2, #2
 8005722:	f800 3c01 	strb.w	r3, [r0, #-1]
 8005726:	f10d 0579 	add.w	r5, sp, #121	; 0x79
 800572a:	460b      	mov	r3, r1
 800572c:	f10d 0087 	add.w	r0, sp, #135	; 0x87
 8005730:	4283      	cmp	r3, r0
 8005732:	f0c0 8188 	bcc.w	8005a46 <_svfprintf_r+0x90e>
 8005736:	f10d 0389 	add.w	r3, sp, #137	; 0x89
 800573a:	1a9b      	subs	r3, r3, r2
 800573c:	4281      	cmp	r1, r0
 800573e:	bf88      	it	hi
 8005740:	2300      	movhi	r3, #0
 8005742:	f10d 027a 	add.w	r2, sp, #122	; 0x7a
 8005746:	441a      	add	r2, r3
 8005748:	ab1e      	add	r3, sp, #120	; 0x78
 800574a:	1ad3      	subs	r3, r2, r3
 800574c:	9a05      	ldr	r2, [sp, #20]
 800574e:	9315      	str	r3, [sp, #84]	; 0x54
 8005750:	2a01      	cmp	r2, #1
 8005752:	eb03 0802 	add.w	r8, r3, r2
 8005756:	dc02      	bgt.n	800575e <_svfprintf_r+0x626>
 8005758:	f01b 0f01 	tst.w	fp, #1
 800575c:	d001      	beq.n	8005762 <_svfprintf_r+0x62a>
 800575e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005760:	4498      	add	r8, r3
 8005762:	f42b 6380 	bic.w	r3, fp, #1024	; 0x400
 8005766:	2600      	movs	r6, #0
 8005768:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800576c:	9310      	str	r3, [sp, #64]	; 0x40
 800576e:	9608      	str	r6, [sp, #32]
 8005770:	4635      	mov	r5, r6
 8005772:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8005774:	b113      	cbz	r3, 800577c <_svfprintf_r+0x644>
 8005776:	232d      	movs	r3, #45	; 0x2d
 8005778:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 800577c:	f8dd b040 	ldr.w	fp, [sp, #64]	; 0x40
 8005780:	2700      	movs	r7, #0
 8005782:	4547      	cmp	r7, r8
 8005784:	463b      	mov	r3, r7
 8005786:	bfb8      	it	lt
 8005788:	4643      	movlt	r3, r8
 800578a:	9310      	str	r3, [sp, #64]	; 0x40
 800578c:	f89d 306b 	ldrb.w	r3, [sp, #107]	; 0x6b
 8005790:	b113      	cbz	r3, 8005798 <_svfprintf_r+0x660>
 8005792:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005794:	3301      	adds	r3, #1
 8005796:	9310      	str	r3, [sp, #64]	; 0x40
 8005798:	f01b 0302 	ands.w	r3, fp, #2
 800579c:	9317      	str	r3, [sp, #92]	; 0x5c
 800579e:	bf1e      	ittt	ne
 80057a0:	9b10      	ldrne	r3, [sp, #64]	; 0x40
 80057a2:	3302      	addne	r3, #2
 80057a4:	9310      	strne	r3, [sp, #64]	; 0x40
 80057a6:	f01b 0384 	ands.w	r3, fp, #132	; 0x84
 80057aa:	9318      	str	r3, [sp, #96]	; 0x60
 80057ac:	d122      	bne.n	80057f4 <_svfprintf_r+0x6bc>
 80057ae:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	; 0x3c
 80057b2:	1a9b      	subs	r3, r3, r2
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	9312      	str	r3, [sp, #72]	; 0x48
 80057b8:	dd1c      	ble.n	80057f4 <_svfprintf_r+0x6bc>
 80057ba:	9812      	ldr	r0, [sp, #72]	; 0x48
 80057bc:	e9dd 2323 	ldrd	r2, r3, [sp, #140]	; 0x8c
 80057c0:	2810      	cmp	r0, #16
 80057c2:	483c      	ldr	r0, [pc, #240]	; (80058b4 <_svfprintf_r+0x77c>)
 80057c4:	6020      	str	r0, [r4, #0]
 80057c6:	f102 0201 	add.w	r2, r2, #1
 80057ca:	f104 0108 	add.w	r1, r4, #8
 80057ce:	f300 82f7 	bgt.w	8005dc0 <_svfprintf_r+0xc88>
 80057d2:	9812      	ldr	r0, [sp, #72]	; 0x48
 80057d4:	6060      	str	r0, [r4, #4]
 80057d6:	4403      	add	r3, r0
 80057d8:	2a07      	cmp	r2, #7
 80057da:	e9cd 2323 	strd	r2, r3, [sp, #140]	; 0x8c
 80057de:	f340 8304 	ble.w	8005dea <_svfprintf_r+0xcb2>
 80057e2:	aa22      	add	r2, sp, #136	; 0x88
 80057e4:	4649      	mov	r1, r9
 80057e6:	4650      	mov	r0, sl
 80057e8:	f002 f9ce 	bl	8007b88 <__ssprint_r>
 80057ec:	2800      	cmp	r0, #0
 80057ee:	f040 8637 	bne.w	8006460 <_svfprintf_r+0x1328>
 80057f2:	ac25      	add	r4, sp, #148	; 0x94
 80057f4:	f89d 206b 	ldrb.w	r2, [sp, #107]	; 0x6b
 80057f8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80057fa:	b16a      	cbz	r2, 8005818 <_svfprintf_r+0x6e0>
 80057fc:	f10d 026b 	add.w	r2, sp, #107	; 0x6b
 8005800:	6022      	str	r2, [r4, #0]
 8005802:	2201      	movs	r2, #1
 8005804:	4413      	add	r3, r2
 8005806:	9324      	str	r3, [sp, #144]	; 0x90
 8005808:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800580a:	6062      	str	r2, [r4, #4]
 800580c:	4413      	add	r3, r2
 800580e:	2b07      	cmp	r3, #7
 8005810:	9323      	str	r3, [sp, #140]	; 0x8c
 8005812:	f300 82ec 	bgt.w	8005dee <_svfprintf_r+0xcb6>
 8005816:	3408      	adds	r4, #8
 8005818:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800581a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800581c:	b162      	cbz	r2, 8005838 <_svfprintf_r+0x700>
 800581e:	aa1b      	add	r2, sp, #108	; 0x6c
 8005820:	6022      	str	r2, [r4, #0]
 8005822:	2202      	movs	r2, #2
 8005824:	4413      	add	r3, r2
 8005826:	9324      	str	r3, [sp, #144]	; 0x90
 8005828:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800582a:	6062      	str	r2, [r4, #4]
 800582c:	3301      	adds	r3, #1
 800582e:	2b07      	cmp	r3, #7
 8005830:	9323      	str	r3, [sp, #140]	; 0x8c
 8005832:	f300 82e6 	bgt.w	8005e02 <_svfprintf_r+0xcca>
 8005836:	3408      	adds	r4, #8
 8005838:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800583a:	2b80      	cmp	r3, #128	; 0x80
 800583c:	d122      	bne.n	8005884 <_svfprintf_r+0x74c>
 800583e:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	; 0x3c
 8005842:	1a9b      	subs	r3, r3, r2
 8005844:	2b00      	cmp	r3, #0
 8005846:	9312      	str	r3, [sp, #72]	; 0x48
 8005848:	dd1c      	ble.n	8005884 <_svfprintf_r+0x74c>
 800584a:	9812      	ldr	r0, [sp, #72]	; 0x48
 800584c:	e9dd 2323 	ldrd	r2, r3, [sp, #140]	; 0x8c
 8005850:	2810      	cmp	r0, #16
 8005852:	4819      	ldr	r0, [pc, #100]	; (80058b8 <_svfprintf_r+0x780>)
 8005854:	6020      	str	r0, [r4, #0]
 8005856:	f102 0201 	add.w	r2, r2, #1
 800585a:	f104 0108 	add.w	r1, r4, #8
 800585e:	f300 82da 	bgt.w	8005e16 <_svfprintf_r+0xcde>
 8005862:	9812      	ldr	r0, [sp, #72]	; 0x48
 8005864:	6060      	str	r0, [r4, #4]
 8005866:	4403      	add	r3, r0
 8005868:	2a07      	cmp	r2, #7
 800586a:	e9cd 2323 	strd	r2, r3, [sp, #140]	; 0x8c
 800586e:	f340 82e7 	ble.w	8005e40 <_svfprintf_r+0xd08>
 8005872:	aa22      	add	r2, sp, #136	; 0x88
 8005874:	4649      	mov	r1, r9
 8005876:	4650      	mov	r0, sl
 8005878:	f002 f986 	bl	8007b88 <__ssprint_r>
 800587c:	2800      	cmp	r0, #0
 800587e:	f040 85ef 	bne.w	8006460 <_svfprintf_r+0x1328>
 8005882:	ac25      	add	r4, sp, #148	; 0x94
 8005884:	eba7 0708 	sub.w	r7, r7, r8
 8005888:	2f00      	cmp	r7, #0
 800588a:	dd27      	ble.n	80058dc <_svfprintf_r+0x7a4>
 800588c:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 8005890:	4809      	ldr	r0, [pc, #36]	; (80058b8 <_svfprintf_r+0x780>)
 8005892:	6020      	str	r0, [r4, #0]
 8005894:	2f10      	cmp	r7, #16
 8005896:	f103 0301 	add.w	r3, r3, #1
 800589a:	f104 0108 	add.w	r1, r4, #8
 800589e:	f300 82d1 	bgt.w	8005e44 <_svfprintf_r+0xd0c>
 80058a2:	e00b      	b.n	80058bc <_svfprintf_r+0x784>
 80058a4:	08009289 	.word	0x08009289
 80058a8:	08009278 	.word	0x08009278
 80058ac:	40300000 	.word	0x40300000
 80058b0:	3fe00000 	.word	0x3fe00000
 80058b4:	0800929c 	.word	0x0800929c
 80058b8:	080092ac 	.word	0x080092ac
 80058bc:	6067      	str	r7, [r4, #4]
 80058be:	2b07      	cmp	r3, #7
 80058c0:	4417      	add	r7, r2
 80058c2:	e9cd 3723 	strd	r3, r7, [sp, #140]	; 0x8c
 80058c6:	f340 82d0 	ble.w	8005e6a <_svfprintf_r+0xd32>
 80058ca:	aa22      	add	r2, sp, #136	; 0x88
 80058cc:	4649      	mov	r1, r9
 80058ce:	4650      	mov	r0, sl
 80058d0:	f002 f95a 	bl	8007b88 <__ssprint_r>
 80058d4:	2800      	cmp	r0, #0
 80058d6:	f040 85c3 	bne.w	8006460 <_svfprintf_r+0x1328>
 80058da:	ac25      	add	r4, sp, #148	; 0x94
 80058dc:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80058e0:	9f24      	ldr	r7, [sp, #144]	; 0x90
 80058e2:	f040 82c9 	bne.w	8005e78 <_svfprintf_r+0xd40>
 80058e6:	9b03      	ldr	r3, [sp, #12]
 80058e8:	e9c4 3800 	strd	r3, r8, [r4]
 80058ec:	4447      	add	r7, r8
 80058ee:	9724      	str	r7, [sp, #144]	; 0x90
 80058f0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80058f2:	3301      	adds	r3, #1
 80058f4:	2b07      	cmp	r3, #7
 80058f6:	9323      	str	r3, [sp, #140]	; 0x8c
 80058f8:	f300 8303 	bgt.w	8005f02 <_svfprintf_r+0xdca>
 80058fc:	3408      	adds	r4, #8
 80058fe:	f01b 0f04 	tst.w	fp, #4
 8005902:	f040 858f 	bne.w	8006424 <_svfprintf_r+0x12ec>
 8005906:	e9dd 210f 	ldrd	r2, r1, [sp, #60]	; 0x3c
 800590a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800590c:	428a      	cmp	r2, r1
 800590e:	bfac      	ite	ge
 8005910:	189b      	addge	r3, r3, r2
 8005912:	185b      	addlt	r3, r3, r1
 8005914:	930b      	str	r3, [sp, #44]	; 0x2c
 8005916:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8005918:	b13b      	cbz	r3, 800592a <_svfprintf_r+0x7f2>
 800591a:	aa22      	add	r2, sp, #136	; 0x88
 800591c:	4649      	mov	r1, r9
 800591e:	4650      	mov	r0, sl
 8005920:	f002 f932 	bl	8007b88 <__ssprint_r>
 8005924:	2800      	cmp	r0, #0
 8005926:	f040 859b 	bne.w	8006460 <_svfprintf_r+0x1328>
 800592a:	2300      	movs	r3, #0
 800592c:	9323      	str	r3, [sp, #140]	; 0x8c
 800592e:	9b04      	ldr	r3, [sp, #16]
 8005930:	2b00      	cmp	r3, #0
 8005932:	f040 85b1 	bne.w	8006498 <_svfprintf_r+0x1360>
 8005936:	ac25      	add	r4, sp, #148	; 0x94
 8005938:	e0e7      	b.n	8005b0a <_svfprintf_r+0x9d2>
 800593a:	ab35      	add	r3, sp, #212	; 0xd4
 800593c:	9004      	str	r0, [sp, #16]
 800593e:	9303      	str	r3, [sp, #12]
 8005940:	e62a      	b.n	8005598 <_svfprintf_r+0x460>
 8005942:	9b03      	ldr	r3, [sp, #12]
 8005944:	9304      	str	r3, [sp, #16]
 8005946:	e627      	b.n	8005598 <_svfprintf_r+0x460>
 8005948:	9004      	str	r0, [sp, #16]
 800594a:	f04f 0806 	mov.w	r8, #6
 800594e:	e623      	b.n	8005598 <_svfprintf_r+0x460>
 8005950:	9004      	str	r0, [sp, #16]
 8005952:	e621      	b.n	8005598 <_svfprintf_r+0x460>
 8005954:	ed9d 7b0c 	vldr	d7, [sp, #48]	; 0x30
 8005958:	2300      	movs	r3, #0
 800595a:	eeb0 8a47 	vmov.f32	s16, s14
 800595e:	eef0 8a67 	vmov.f32	s17, s15
 8005962:	e629      	b.n	80055b8 <_svfprintf_r+0x480>
 8005964:	f802 0c01 	strb.w	r0, [r2, #-1]
 8005968:	e68b      	b.n	8005682 <_svfprintf_r+0x54a>
 800596a:	f803 0b01 	strb.w	r0, [r3], #1
 800596e:	1aca      	subs	r2, r1, r3
 8005970:	2a00      	cmp	r2, #0
 8005972:	dafa      	bge.n	800596a <_svfprintf_r+0x832>
 8005974:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005976:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005978:	3201      	adds	r2, #1
 800597a:	f103 0301 	add.w	r3, r3, #1
 800597e:	bfb8      	it	lt
 8005980:	2300      	movlt	r3, #0
 8005982:	441d      	add	r5, r3
 8005984:	e68d      	b.n	80056a2 <_svfprintf_r+0x56a>
 8005986:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005988:	462b      	mov	r3, r5
 800598a:	18a9      	adds	r1, r5, r2
 800598c:	2030      	movs	r0, #48	; 0x30
 800598e:	e7ee      	b.n	800596e <_svfprintf_r+0x836>
 8005990:	9b08      	ldr	r3, [sp, #32]
 8005992:	2b46      	cmp	r3, #70	; 0x46
 8005994:	d005      	beq.n	80059a2 <_svfprintf_r+0x86a>
 8005996:	2b45      	cmp	r3, #69	; 0x45
 8005998:	d11d      	bne.n	80059d6 <_svfprintf_r+0x89e>
 800599a:	f108 0501 	add.w	r5, r8, #1
 800599e:	2102      	movs	r1, #2
 80059a0:	e001      	b.n	80059a6 <_svfprintf_r+0x86e>
 80059a2:	4645      	mov	r5, r8
 80059a4:	2103      	movs	r1, #3
 80059a6:	ab20      	add	r3, sp, #128	; 0x80
 80059a8:	9301      	str	r3, [sp, #4]
 80059aa:	ab1d      	add	r3, sp, #116	; 0x74
 80059ac:	9300      	str	r3, [sp, #0]
 80059ae:	462a      	mov	r2, r5
 80059b0:	ab1c      	add	r3, sp, #112	; 0x70
 80059b2:	4650      	mov	r0, sl
 80059b4:	eeb0 0a48 	vmov.f32	s0, s16
 80059b8:	eef0 0a68 	vmov.f32	s1, s17
 80059bc:	f000 ffe0 	bl	8006980 <_dtoa_r>
 80059c0:	9b08      	ldr	r3, [sp, #32]
 80059c2:	9003      	str	r0, [sp, #12]
 80059c4:	2b47      	cmp	r3, #71	; 0x47
 80059c6:	d108      	bne.n	80059da <_svfprintf_r+0x8a2>
 80059c8:	f01b 0f01 	tst.w	fp, #1
 80059cc:	d105      	bne.n	80059da <_svfprintf_r+0x8a2>
 80059ce:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80059d0:	9a03      	ldr	r2, [sp, #12]
 80059d2:	1a9b      	subs	r3, r3, r2
 80059d4:	e667      	b.n	80056a6 <_svfprintf_r+0x56e>
 80059d6:	4645      	mov	r5, r8
 80059d8:	e7e1      	b.n	800599e <_svfprintf_r+0x866>
 80059da:	9b03      	ldr	r3, [sp, #12]
 80059dc:	195e      	adds	r6, r3, r5
 80059de:	9b08      	ldr	r3, [sp, #32]
 80059e0:	2b46      	cmp	r3, #70	; 0x46
 80059e2:	d10f      	bne.n	8005a04 <_svfprintf_r+0x8cc>
 80059e4:	9b03      	ldr	r3, [sp, #12]
 80059e6:	781b      	ldrb	r3, [r3, #0]
 80059e8:	2b30      	cmp	r3, #48	; 0x30
 80059ea:	d109      	bne.n	8005a00 <_svfprintf_r+0x8c8>
 80059ec:	ec51 0b18 	vmov	r0, r1, d8
 80059f0:	2200      	movs	r2, #0
 80059f2:	2300      	movs	r3, #0
 80059f4:	f7fb f890 	bl	8000b18 <__aeabi_dcmpeq>
 80059f8:	b910      	cbnz	r0, 8005a00 <_svfprintf_r+0x8c8>
 80059fa:	f1c5 0501 	rsb	r5, r5, #1
 80059fe:	951c      	str	r5, [sp, #112]	; 0x70
 8005a00:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8005a02:	441e      	add	r6, r3
 8005a04:	ec51 0b18 	vmov	r0, r1, d8
 8005a08:	2200      	movs	r2, #0
 8005a0a:	2300      	movs	r3, #0
 8005a0c:	f7fb f884 	bl	8000b18 <__aeabi_dcmpeq>
 8005a10:	b100      	cbz	r0, 8005a14 <_svfprintf_r+0x8dc>
 8005a12:	9620      	str	r6, [sp, #128]	; 0x80
 8005a14:	2230      	movs	r2, #48	; 0x30
 8005a16:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005a18:	429e      	cmp	r6, r3
 8005a1a:	d9d8      	bls.n	80059ce <_svfprintf_r+0x896>
 8005a1c:	1c59      	adds	r1, r3, #1
 8005a1e:	9120      	str	r1, [sp, #128]	; 0x80
 8005a20:	701a      	strb	r2, [r3, #0]
 8005a22:	e7f8      	b.n	8005a16 <_svfprintf_r+0x8de>
 8005a24:	9b08      	ldr	r3, [sp, #32]
 8005a26:	2b46      	cmp	r3, #70	; 0x46
 8005a28:	f47f ae4b 	bne.w	80056c2 <_svfprintf_r+0x58a>
 8005a2c:	f00b 0301 	and.w	r3, fp, #1
 8005a30:	2d00      	cmp	r5, #0
 8005a32:	ea43 0308 	orr.w	r3, r3, r8
 8005a36:	dd25      	ble.n	8005a84 <_svfprintf_r+0x94c>
 8005a38:	b383      	cbz	r3, 8005a9c <_svfprintf_r+0x964>
 8005a3a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005a3c:	18eb      	adds	r3, r5, r3
 8005a3e:	4498      	add	r8, r3
 8005a40:	2366      	movs	r3, #102	; 0x66
 8005a42:	9307      	str	r3, [sp, #28]
 8005a44:	e030      	b.n	8005aa8 <_svfprintf_r+0x970>
 8005a46:	f813 6b01 	ldrb.w	r6, [r3], #1
 8005a4a:	f805 6f01 	strb.w	r6, [r5, #1]!
 8005a4e:	e66f      	b.n	8005730 <_svfprintf_r+0x5f8>
 8005a50:	b941      	cbnz	r1, 8005a64 <_svfprintf_r+0x92c>
 8005a52:	2230      	movs	r2, #48	; 0x30
 8005a54:	f88d 207a 	strb.w	r2, [sp, #122]	; 0x7a
 8005a58:	f10d 027b 	add.w	r2, sp, #123	; 0x7b
 8005a5c:	3330      	adds	r3, #48	; 0x30
 8005a5e:	f802 3b01 	strb.w	r3, [r2], #1
 8005a62:	e671      	b.n	8005748 <_svfprintf_r+0x610>
 8005a64:	f10d 027a 	add.w	r2, sp, #122	; 0x7a
 8005a68:	e7f8      	b.n	8005a5c <_svfprintf_r+0x924>
 8005a6a:	9b05      	ldr	r3, [sp, #20]
 8005a6c:	42ab      	cmp	r3, r5
 8005a6e:	dd0d      	ble.n	8005a8c <_svfprintf_r+0x954>
 8005a70:	9b05      	ldr	r3, [sp, #20]
 8005a72:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005a74:	2d00      	cmp	r5, #0
 8005a76:	eb03 0802 	add.w	r8, r3, r2
 8005a7a:	dc0d      	bgt.n	8005a98 <_svfprintf_r+0x960>
 8005a7c:	f1c5 0301 	rsb	r3, r5, #1
 8005a80:	4498      	add	r8, r3
 8005a82:	e009      	b.n	8005a98 <_svfprintf_r+0x960>
 8005a84:	b163      	cbz	r3, 8005aa0 <_svfprintf_r+0x968>
 8005a86:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005a88:	3301      	adds	r3, #1
 8005a8a:	e7d8      	b.n	8005a3e <_svfprintf_r+0x906>
 8005a8c:	f01b 0f01 	tst.w	fp, #1
 8005a90:	d01d      	beq.n	8005ace <_svfprintf_r+0x996>
 8005a92:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005a94:	eb05 0803 	add.w	r8, r5, r3
 8005a98:	2367      	movs	r3, #103	; 0x67
 8005a9a:	e7d2      	b.n	8005a42 <_svfprintf_r+0x90a>
 8005a9c:	46a8      	mov	r8, r5
 8005a9e:	e7cf      	b.n	8005a40 <_svfprintf_r+0x908>
 8005aa0:	2366      	movs	r3, #102	; 0x66
 8005aa2:	9307      	str	r3, [sp, #28]
 8005aa4:	f04f 0801 	mov.w	r8, #1
 8005aa8:	f41b 6380 	ands.w	r3, fp, #1024	; 0x400
 8005aac:	9308      	str	r3, [sp, #32]
 8005aae:	d01f      	beq.n	8005af0 <_svfprintf_r+0x9b8>
 8005ab0:	2600      	movs	r6, #0
 8005ab2:	2d00      	cmp	r5, #0
 8005ab4:	9608      	str	r6, [sp, #32]
 8005ab6:	f77f ae5c 	ble.w	8005772 <_svfprintf_r+0x63a>
 8005aba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005abc:	781b      	ldrb	r3, [r3, #0]
 8005abe:	2bff      	cmp	r3, #255	; 0xff
 8005ac0:	d107      	bne.n	8005ad2 <_svfprintf_r+0x99a>
 8005ac2:	9b08      	ldr	r3, [sp, #32]
 8005ac4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8005ac6:	4433      	add	r3, r6
 8005ac8:	fb02 8803 	mla	r8, r2, r3, r8
 8005acc:	e651      	b.n	8005772 <_svfprintf_r+0x63a>
 8005ace:	46a8      	mov	r8, r5
 8005ad0:	e7e2      	b.n	8005a98 <_svfprintf_r+0x960>
 8005ad2:	42ab      	cmp	r3, r5
 8005ad4:	daf5      	bge.n	8005ac2 <_svfprintf_r+0x98a>
 8005ad6:	1aed      	subs	r5, r5, r3
 8005ad8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ada:	785b      	ldrb	r3, [r3, #1]
 8005adc:	b133      	cbz	r3, 8005aec <_svfprintf_r+0x9b4>
 8005ade:	9b08      	ldr	r3, [sp, #32]
 8005ae0:	3301      	adds	r3, #1
 8005ae2:	9308      	str	r3, [sp, #32]
 8005ae4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ae6:	3301      	adds	r3, #1
 8005ae8:	9309      	str	r3, [sp, #36]	; 0x24
 8005aea:	e7e6      	b.n	8005aba <_svfprintf_r+0x982>
 8005aec:	3601      	adds	r6, #1
 8005aee:	e7e4      	b.n	8005aba <_svfprintf_r+0x982>
 8005af0:	9e08      	ldr	r6, [sp, #32]
 8005af2:	e63e      	b.n	8005772 <_svfprintf_r+0x63a>
 8005af4:	1d2b      	adds	r3, r5, #4
 8005af6:	f01b 0f20 	tst.w	fp, #32
 8005afa:	9306      	str	r3, [sp, #24]
 8005afc:	d00a      	beq.n	8005b14 <_svfprintf_r+0x9dc>
 8005afe:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005b00:	682b      	ldr	r3, [r5, #0]
 8005b02:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005b04:	17d2      	asrs	r2, r2, #31
 8005b06:	e9c3 1200 	strd	r1, r2, [r3]
 8005b0a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005b0c:	9d06      	ldr	r5, [sp, #24]
 8005b0e:	9303      	str	r3, [sp, #12]
 8005b10:	f7ff bb52 	b.w	80051b8 <_svfprintf_r+0x80>
 8005b14:	f01b 0f10 	tst.w	fp, #16
 8005b18:	d003      	beq.n	8005b22 <_svfprintf_r+0x9ea>
 8005b1a:	682b      	ldr	r3, [r5, #0]
 8005b1c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005b1e:	601a      	str	r2, [r3, #0]
 8005b20:	e7f3      	b.n	8005b0a <_svfprintf_r+0x9d2>
 8005b22:	f01b 0f40 	tst.w	fp, #64	; 0x40
 8005b26:	d003      	beq.n	8005b30 <_svfprintf_r+0x9f8>
 8005b28:	682b      	ldr	r3, [r5, #0]
 8005b2a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005b2c:	801a      	strh	r2, [r3, #0]
 8005b2e:	e7ec      	b.n	8005b0a <_svfprintf_r+0x9d2>
 8005b30:	f41b 7f00 	tst.w	fp, #512	; 0x200
 8005b34:	d0f1      	beq.n	8005b1a <_svfprintf_r+0x9e2>
 8005b36:	682b      	ldr	r3, [r5, #0]
 8005b38:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005b3a:	701a      	strb	r2, [r3, #0]
 8005b3c:	e7e5      	b.n	8005b0a <_svfprintf_r+0x9d2>
 8005b3e:	f04b 0b10 	orr.w	fp, fp, #16
 8005b42:	f01b 0320 	ands.w	r3, fp, #32
 8005b46:	d020      	beq.n	8005b8a <_svfprintf_r+0xa52>
 8005b48:	3507      	adds	r5, #7
 8005b4a:	f025 0307 	bic.w	r3, r5, #7
 8005b4e:	461a      	mov	r2, r3
 8005b50:	685e      	ldr	r6, [r3, #4]
 8005b52:	f852 5b08 	ldr.w	r5, [r2], #8
 8005b56:	9206      	str	r2, [sp, #24]
 8005b58:	f42b 6b80 	bic.w	fp, fp, #1024	; 0x400
 8005b5c:	2300      	movs	r3, #0
 8005b5e:	2200      	movs	r2, #0
 8005b60:	f88d 206b 	strb.w	r2, [sp, #107]	; 0x6b
 8005b64:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
 8005b68:	f000 84a7 	beq.w	80064ba <_svfprintf_r+0x1382>
 8005b6c:	f02b 0280 	bic.w	r2, fp, #128	; 0x80
 8005b70:	9204      	str	r2, [sp, #16]
 8005b72:	ea55 0206 	orrs.w	r2, r5, r6
 8005b76:	f040 84a6 	bne.w	80064c6 <_svfprintf_r+0x138e>
 8005b7a:	f1b8 0f00 	cmp.w	r8, #0
 8005b7e:	f000 8107 	beq.w	8005d90 <_svfprintf_r+0xc58>
 8005b82:	2b01      	cmp	r3, #1
 8005b84:	f040 84a2 	bne.w	80064cc <_svfprintf_r+0x1394>
 8005b88:	e0a3      	b.n	8005cd2 <_svfprintf_r+0xb9a>
 8005b8a:	462a      	mov	r2, r5
 8005b8c:	f01b 0610 	ands.w	r6, fp, #16
 8005b90:	f852 5b04 	ldr.w	r5, [r2], #4
 8005b94:	9206      	str	r2, [sp, #24]
 8005b96:	d001      	beq.n	8005b9c <_svfprintf_r+0xa64>
 8005b98:	461e      	mov	r6, r3
 8005b9a:	e7dd      	b.n	8005b58 <_svfprintf_r+0xa20>
 8005b9c:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
 8005ba0:	d001      	beq.n	8005ba6 <_svfprintf_r+0xa6e>
 8005ba2:	b2ad      	uxth	r5, r5
 8005ba4:	e7d8      	b.n	8005b58 <_svfprintf_r+0xa20>
 8005ba6:	f41b 7600 	ands.w	r6, fp, #512	; 0x200
 8005baa:	d0d5      	beq.n	8005b58 <_svfprintf_r+0xa20>
 8005bac:	b2ed      	uxtb	r5, r5
 8005bae:	e7f3      	b.n	8005b98 <_svfprintf_r+0xa60>
 8005bb0:	462b      	mov	r3, r5
 8005bb2:	2278      	movs	r2, #120	; 0x78
 8005bb4:	f853 5b04 	ldr.w	r5, [r3], #4
 8005bb8:	9306      	str	r3, [sp, #24]
 8005bba:	f647 0330 	movw	r3, #30768	; 0x7830
 8005bbe:	f8ad 306c 	strh.w	r3, [sp, #108]	; 0x6c
 8005bc2:	4bab      	ldr	r3, [pc, #684]	; (8005e70 <_svfprintf_r+0xd38>)
 8005bc4:	9316      	str	r3, [sp, #88]	; 0x58
 8005bc6:	2600      	movs	r6, #0
 8005bc8:	f04b 0b02 	orr.w	fp, fp, #2
 8005bcc:	2302      	movs	r3, #2
 8005bce:	9207      	str	r2, [sp, #28]
 8005bd0:	e7c5      	b.n	8005b5e <_svfprintf_r+0xa26>
 8005bd2:	462b      	mov	r3, r5
 8005bd4:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
 8005bd8:	f853 2b04 	ldr.w	r2, [r3], #4
 8005bdc:	9203      	str	r2, [sp, #12]
 8005bde:	f04f 0500 	mov.w	r5, #0
 8005be2:	9306      	str	r3, [sp, #24]
 8005be4:	f88d 506b 	strb.w	r5, [sp, #107]	; 0x6b
 8005be8:	d010      	beq.n	8005c0c <_svfprintf_r+0xad4>
 8005bea:	9803      	ldr	r0, [sp, #12]
 8005bec:	4642      	mov	r2, r8
 8005bee:	4629      	mov	r1, r5
 8005bf0:	f7fa fb1e 	bl	8000230 <memchr>
 8005bf4:	9004      	str	r0, [sp, #16]
 8005bf6:	2800      	cmp	r0, #0
 8005bf8:	f000 80e0 	beq.w	8005dbc <_svfprintf_r+0xc84>
 8005bfc:	9a03      	ldr	r2, [sp, #12]
 8005bfe:	9504      	str	r5, [sp, #16]
 8005c00:	eba0 0802 	sub.w	r8, r0, r2
 8005c04:	462f      	mov	r7, r5
 8005c06:	462e      	mov	r6, r5
 8005c08:	9508      	str	r5, [sp, #32]
 8005c0a:	e5ba      	b.n	8005782 <_svfprintf_r+0x64a>
 8005c0c:	9803      	ldr	r0, [sp, #12]
 8005c0e:	f7fa fb07 	bl	8000220 <strlen>
 8005c12:	462f      	mov	r7, r5
 8005c14:	4680      	mov	r8, r0
 8005c16:	9504      	str	r5, [sp, #16]
 8005c18:	463e      	mov	r6, r7
 8005c1a:	463b      	mov	r3, r7
 8005c1c:	e460      	b.n	80054e0 <_svfprintf_r+0x3a8>
 8005c1e:	f04b 0b10 	orr.w	fp, fp, #16
 8005c22:	f01b 0320 	ands.w	r3, fp, #32
 8005c26:	d009      	beq.n	8005c3c <_svfprintf_r+0xb04>
 8005c28:	3507      	adds	r5, #7
 8005c2a:	f025 0307 	bic.w	r3, r5, #7
 8005c2e:	461a      	mov	r2, r3
 8005c30:	685e      	ldr	r6, [r3, #4]
 8005c32:	f852 5b08 	ldr.w	r5, [r2], #8
 8005c36:	9206      	str	r2, [sp, #24]
 8005c38:	2301      	movs	r3, #1
 8005c3a:	e790      	b.n	8005b5e <_svfprintf_r+0xa26>
 8005c3c:	462a      	mov	r2, r5
 8005c3e:	f01b 0610 	ands.w	r6, fp, #16
 8005c42:	f852 5b04 	ldr.w	r5, [r2], #4
 8005c46:	9206      	str	r2, [sp, #24]
 8005c48:	d001      	beq.n	8005c4e <_svfprintf_r+0xb16>
 8005c4a:	461e      	mov	r6, r3
 8005c4c:	e7f4      	b.n	8005c38 <_svfprintf_r+0xb00>
 8005c4e:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
 8005c52:	d001      	beq.n	8005c58 <_svfprintf_r+0xb20>
 8005c54:	b2ad      	uxth	r5, r5
 8005c56:	e7ef      	b.n	8005c38 <_svfprintf_r+0xb00>
 8005c58:	f41b 7600 	ands.w	r6, fp, #512	; 0x200
 8005c5c:	d0ec      	beq.n	8005c38 <_svfprintf_r+0xb00>
 8005c5e:	b2ed      	uxtb	r5, r5
 8005c60:	e7f3      	b.n	8005c4a <_svfprintf_r+0xb12>
 8005c62:	4b84      	ldr	r3, [pc, #528]	; (8005e74 <_svfprintf_r+0xd3c>)
 8005c64:	9316      	str	r3, [sp, #88]	; 0x58
 8005c66:	f01b 0320 	ands.w	r3, fp, #32
 8005c6a:	d01b      	beq.n	8005ca4 <_svfprintf_r+0xb6c>
 8005c6c:	3507      	adds	r5, #7
 8005c6e:	f025 0307 	bic.w	r3, r5, #7
 8005c72:	461a      	mov	r2, r3
 8005c74:	685e      	ldr	r6, [r3, #4]
 8005c76:	f852 5b08 	ldr.w	r5, [r2], #8
 8005c7a:	9206      	str	r2, [sp, #24]
 8005c7c:	f01b 0f01 	tst.w	fp, #1
 8005c80:	d00a      	beq.n	8005c98 <_svfprintf_r+0xb60>
 8005c82:	ea55 0306 	orrs.w	r3, r5, r6
 8005c86:	d007      	beq.n	8005c98 <_svfprintf_r+0xb60>
 8005c88:	2330      	movs	r3, #48	; 0x30
 8005c8a:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
 8005c8e:	9b07      	ldr	r3, [sp, #28]
 8005c90:	f88d 306d 	strb.w	r3, [sp, #109]	; 0x6d
 8005c94:	f04b 0b02 	orr.w	fp, fp, #2
 8005c98:	f42b 6b80 	bic.w	fp, fp, #1024	; 0x400
 8005c9c:	2302      	movs	r3, #2
 8005c9e:	e75e      	b.n	8005b5e <_svfprintf_r+0xa26>
 8005ca0:	4b73      	ldr	r3, [pc, #460]	; (8005e70 <_svfprintf_r+0xd38>)
 8005ca2:	e7df      	b.n	8005c64 <_svfprintf_r+0xb2c>
 8005ca4:	462a      	mov	r2, r5
 8005ca6:	f01b 0610 	ands.w	r6, fp, #16
 8005caa:	f852 5b04 	ldr.w	r5, [r2], #4
 8005cae:	9206      	str	r2, [sp, #24]
 8005cb0:	d001      	beq.n	8005cb6 <_svfprintf_r+0xb7e>
 8005cb2:	461e      	mov	r6, r3
 8005cb4:	e7e2      	b.n	8005c7c <_svfprintf_r+0xb44>
 8005cb6:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
 8005cba:	d001      	beq.n	8005cc0 <_svfprintf_r+0xb88>
 8005cbc:	b2ad      	uxth	r5, r5
 8005cbe:	e7dd      	b.n	8005c7c <_svfprintf_r+0xb44>
 8005cc0:	f41b 7600 	ands.w	r6, fp, #512	; 0x200
 8005cc4:	d0da      	beq.n	8005c7c <_svfprintf_r+0xb44>
 8005cc6:	b2ed      	uxtb	r5, r5
 8005cc8:	e7f3      	b.n	8005cb2 <_svfprintf_r+0xb7a>
 8005cca:	2d0a      	cmp	r5, #10
 8005ccc:	f176 0300 	sbcs.w	r3, r6, #0
 8005cd0:	d206      	bcs.n	8005ce0 <_svfprintf_r+0xba8>
 8005cd2:	3530      	adds	r5, #48	; 0x30
 8005cd4:	f88d 5137 	strb.w	r5, [sp, #311]	; 0x137
 8005cd8:	f20d 1337 	addw	r3, sp, #311	; 0x137
 8005cdc:	f000 bc16 	b.w	800650c <_svfprintf_r+0x13d4>
 8005ce0:	2300      	movs	r3, #0
 8005ce2:	9305      	str	r3, [sp, #20]
 8005ce4:	9b04      	ldr	r3, [sp, #16]
 8005ce6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005cea:	af4e      	add	r7, sp, #312	; 0x138
 8005cec:	9308      	str	r3, [sp, #32]
 8005cee:	220a      	movs	r2, #10
 8005cf0:	2300      	movs	r3, #0
 8005cf2:	4628      	mov	r0, r5
 8005cf4:	4631      	mov	r1, r6
 8005cf6:	f7fa ff7f 	bl	8000bf8 <__aeabi_uldivmod>
 8005cfa:	1e7b      	subs	r3, r7, #1
 8005cfc:	9303      	str	r3, [sp, #12]
 8005cfe:	9b05      	ldr	r3, [sp, #20]
 8005d00:	9010      	str	r0, [sp, #64]	; 0x40
 8005d02:	3301      	adds	r3, #1
 8005d04:	9305      	str	r3, [sp, #20]
 8005d06:	9b08      	ldr	r3, [sp, #32]
 8005d08:	3230      	adds	r2, #48	; 0x30
 8005d0a:	468b      	mov	fp, r1
 8005d0c:	f807 2c01 	strb.w	r2, [r7, #-1]
 8005d10:	b1d3      	cbz	r3, 8005d48 <_svfprintf_r+0xc10>
 8005d12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d14:	9a05      	ldr	r2, [sp, #20]
 8005d16:	781b      	ldrb	r3, [r3, #0]
 8005d18:	429a      	cmp	r2, r3
 8005d1a:	d115      	bne.n	8005d48 <_svfprintf_r+0xc10>
 8005d1c:	2aff      	cmp	r2, #255	; 0xff
 8005d1e:	d013      	beq.n	8005d48 <_svfprintf_r+0xc10>
 8005d20:	2d0a      	cmp	r5, #10
 8005d22:	f176 0300 	sbcs.w	r3, r6, #0
 8005d26:	d30f      	bcc.n	8005d48 <_svfprintf_r+0xc10>
 8005d28:	9b03      	ldr	r3, [sp, #12]
 8005d2a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8005d2c:	9914      	ldr	r1, [sp, #80]	; 0x50
 8005d2e:	1a9b      	subs	r3, r3, r2
 8005d30:	4618      	mov	r0, r3
 8005d32:	9303      	str	r3, [sp, #12]
 8005d34:	f000 fcf9 	bl	800672a <strncpy>
 8005d38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d3a:	785b      	ldrb	r3, [r3, #1]
 8005d3c:	b11b      	cbz	r3, 8005d46 <_svfprintf_r+0xc0e>
 8005d3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d40:	3301      	adds	r3, #1
 8005d42:	9309      	str	r3, [sp, #36]	; 0x24
 8005d44:	2300      	movs	r3, #0
 8005d46:	9305      	str	r3, [sp, #20]
 8005d48:	2d0a      	cmp	r5, #10
 8005d4a:	f176 0600 	sbcs.w	r6, r6, #0
 8005d4e:	d20b      	bcs.n	8005d68 <_svfprintf_r+0xc30>
 8005d50:	9b03      	ldr	r3, [sp, #12]
 8005d52:	f8dd b010 	ldr.w	fp, [sp, #16]
 8005d56:	aa4e      	add	r2, sp, #312	; 0x138
 8005d58:	4647      	mov	r7, r8
 8005d5a:	eba2 0803 	sub.w	r8, r2, r3
 8005d5e:	2300      	movs	r3, #0
 8005d60:	9304      	str	r3, [sp, #16]
 8005d62:	461e      	mov	r6, r3
 8005d64:	f7ff bbbc 	b.w	80054e0 <_svfprintf_r+0x3a8>
 8005d68:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8005d6a:	9f03      	ldr	r7, [sp, #12]
 8005d6c:	465e      	mov	r6, fp
 8005d6e:	e7be      	b.n	8005cee <_svfprintf_r+0xbb6>
 8005d70:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8005d72:	f005 030f 	and.w	r3, r5, #15
 8005d76:	092d      	lsrs	r5, r5, #4
 8005d78:	5cd3      	ldrb	r3, [r2, r3]
 8005d7a:	9a03      	ldr	r2, [sp, #12]
 8005d7c:	ea45 7506 	orr.w	r5, r5, r6, lsl #28
 8005d80:	f802 3d01 	strb.w	r3, [r2, #-1]!
 8005d84:	0936      	lsrs	r6, r6, #4
 8005d86:	ea55 0306 	orrs.w	r3, r5, r6
 8005d8a:	9203      	str	r2, [sp, #12]
 8005d8c:	d1f0      	bne.n	8005d70 <_svfprintf_r+0xc38>
 8005d8e:	e7df      	b.n	8005d50 <_svfprintf_r+0xc18>
 8005d90:	b933      	cbnz	r3, 8005da0 <_svfprintf_r+0xc68>
 8005d92:	f01b 0f01 	tst.w	fp, #1
 8005d96:	d003      	beq.n	8005da0 <_svfprintf_r+0xc68>
 8005d98:	2330      	movs	r3, #48	; 0x30
 8005d9a:	f88d 3137 	strb.w	r3, [sp, #311]	; 0x137
 8005d9e:	e79b      	b.n	8005cd8 <_svfprintf_r+0xba0>
 8005da0:	ab4e      	add	r3, sp, #312	; 0x138
 8005da2:	e3b3      	b.n	800650c <_svfprintf_r+0x13d4>
 8005da4:	9b07      	ldr	r3, [sp, #28]
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	f000 837c 	beq.w	80064a4 <_svfprintf_r+0x136c>
 8005dac:	f88d 30d4 	strb.w	r3, [sp, #212]	; 0xd4
 8005db0:	2300      	movs	r3, #0
 8005db2:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 8005db6:	9506      	str	r5, [sp, #24]
 8005db8:	f7ff bb1f 	b.w	80053fa <_svfprintf_r+0x2c2>
 8005dbc:	9f04      	ldr	r7, [sp, #16]
 8005dbe:	e72b      	b.n	8005c18 <_svfprintf_r+0xae0>
 8005dc0:	2010      	movs	r0, #16
 8005dc2:	4403      	add	r3, r0
 8005dc4:	2a07      	cmp	r2, #7
 8005dc6:	e9cd 2323 	strd	r2, r3, [sp, #140]	; 0x8c
 8005dca:	6060      	str	r0, [r4, #4]
 8005dcc:	dd08      	ble.n	8005de0 <_svfprintf_r+0xca8>
 8005dce:	aa22      	add	r2, sp, #136	; 0x88
 8005dd0:	4649      	mov	r1, r9
 8005dd2:	4650      	mov	r0, sl
 8005dd4:	f001 fed8 	bl	8007b88 <__ssprint_r>
 8005dd8:	2800      	cmp	r0, #0
 8005dda:	f040 8341 	bne.w	8006460 <_svfprintf_r+0x1328>
 8005dde:	a925      	add	r1, sp, #148	; 0x94
 8005de0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005de2:	3b10      	subs	r3, #16
 8005de4:	9312      	str	r3, [sp, #72]	; 0x48
 8005de6:	460c      	mov	r4, r1
 8005de8:	e4e7      	b.n	80057ba <_svfprintf_r+0x682>
 8005dea:	460c      	mov	r4, r1
 8005dec:	e502      	b.n	80057f4 <_svfprintf_r+0x6bc>
 8005dee:	aa22      	add	r2, sp, #136	; 0x88
 8005df0:	4649      	mov	r1, r9
 8005df2:	4650      	mov	r0, sl
 8005df4:	f001 fec8 	bl	8007b88 <__ssprint_r>
 8005df8:	2800      	cmp	r0, #0
 8005dfa:	f040 8331 	bne.w	8006460 <_svfprintf_r+0x1328>
 8005dfe:	ac25      	add	r4, sp, #148	; 0x94
 8005e00:	e50a      	b.n	8005818 <_svfprintf_r+0x6e0>
 8005e02:	aa22      	add	r2, sp, #136	; 0x88
 8005e04:	4649      	mov	r1, r9
 8005e06:	4650      	mov	r0, sl
 8005e08:	f001 febe 	bl	8007b88 <__ssprint_r>
 8005e0c:	2800      	cmp	r0, #0
 8005e0e:	f040 8327 	bne.w	8006460 <_svfprintf_r+0x1328>
 8005e12:	ac25      	add	r4, sp, #148	; 0x94
 8005e14:	e510      	b.n	8005838 <_svfprintf_r+0x700>
 8005e16:	2010      	movs	r0, #16
 8005e18:	4403      	add	r3, r0
 8005e1a:	2a07      	cmp	r2, #7
 8005e1c:	e9cd 2323 	strd	r2, r3, [sp, #140]	; 0x8c
 8005e20:	6060      	str	r0, [r4, #4]
 8005e22:	dd08      	ble.n	8005e36 <_svfprintf_r+0xcfe>
 8005e24:	aa22      	add	r2, sp, #136	; 0x88
 8005e26:	4649      	mov	r1, r9
 8005e28:	4650      	mov	r0, sl
 8005e2a:	f001 fead 	bl	8007b88 <__ssprint_r>
 8005e2e:	2800      	cmp	r0, #0
 8005e30:	f040 8316 	bne.w	8006460 <_svfprintf_r+0x1328>
 8005e34:	a925      	add	r1, sp, #148	; 0x94
 8005e36:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005e38:	3b10      	subs	r3, #16
 8005e3a:	9312      	str	r3, [sp, #72]	; 0x48
 8005e3c:	460c      	mov	r4, r1
 8005e3e:	e504      	b.n	800584a <_svfprintf_r+0x712>
 8005e40:	460c      	mov	r4, r1
 8005e42:	e51f      	b.n	8005884 <_svfprintf_r+0x74c>
 8005e44:	2010      	movs	r0, #16
 8005e46:	4402      	add	r2, r0
 8005e48:	2b07      	cmp	r3, #7
 8005e4a:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 8005e4e:	6060      	str	r0, [r4, #4]
 8005e50:	dd08      	ble.n	8005e64 <_svfprintf_r+0xd2c>
 8005e52:	aa22      	add	r2, sp, #136	; 0x88
 8005e54:	4649      	mov	r1, r9
 8005e56:	4650      	mov	r0, sl
 8005e58:	f001 fe96 	bl	8007b88 <__ssprint_r>
 8005e5c:	2800      	cmp	r0, #0
 8005e5e:	f040 82ff 	bne.w	8006460 <_svfprintf_r+0x1328>
 8005e62:	a925      	add	r1, sp, #148	; 0x94
 8005e64:	3f10      	subs	r7, #16
 8005e66:	460c      	mov	r4, r1
 8005e68:	e510      	b.n	800588c <_svfprintf_r+0x754>
 8005e6a:	460c      	mov	r4, r1
 8005e6c:	e536      	b.n	80058dc <_svfprintf_r+0x7a4>
 8005e6e:	bf00      	nop
 8005e70:	08009278 	.word	0x08009278
 8005e74:	08009289 	.word	0x08009289
 8005e78:	9b07      	ldr	r3, [sp, #28]
 8005e7a:	2b65      	cmp	r3, #101	; 0x65
 8005e7c:	f340 823a 	ble.w	80062f4 <_svfprintf_r+0x11bc>
 8005e80:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005e84:	2200      	movs	r2, #0
 8005e86:	2300      	movs	r3, #0
 8005e88:	f7fa fe46 	bl	8000b18 <__aeabi_dcmpeq>
 8005e8c:	2800      	cmp	r0, #0
 8005e8e:	d068      	beq.n	8005f62 <_svfprintf_r+0xe2a>
 8005e90:	4b6d      	ldr	r3, [pc, #436]	; (8006048 <_svfprintf_r+0xf10>)
 8005e92:	6023      	str	r3, [r4, #0]
 8005e94:	2301      	movs	r3, #1
 8005e96:	441f      	add	r7, r3
 8005e98:	6063      	str	r3, [r4, #4]
 8005e9a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005e9c:	9724      	str	r7, [sp, #144]	; 0x90
 8005e9e:	3301      	adds	r3, #1
 8005ea0:	2b07      	cmp	r3, #7
 8005ea2:	9323      	str	r3, [sp, #140]	; 0x8c
 8005ea4:	dc37      	bgt.n	8005f16 <_svfprintf_r+0xdde>
 8005ea6:	3408      	adds	r4, #8
 8005ea8:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8005eaa:	9a05      	ldr	r2, [sp, #20]
 8005eac:	4293      	cmp	r3, r2
 8005eae:	db03      	blt.n	8005eb8 <_svfprintf_r+0xd80>
 8005eb0:	f01b 0f01 	tst.w	fp, #1
 8005eb4:	f43f ad23 	beq.w	80058fe <_svfprintf_r+0x7c6>
 8005eb8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005eba:	6023      	str	r3, [r4, #0]
 8005ebc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005ebe:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005ec0:	6063      	str	r3, [r4, #4]
 8005ec2:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8005ec4:	4413      	add	r3, r2
 8005ec6:	9324      	str	r3, [sp, #144]	; 0x90
 8005ec8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005eca:	3301      	adds	r3, #1
 8005ecc:	2b07      	cmp	r3, #7
 8005ece:	9323      	str	r3, [sp, #140]	; 0x8c
 8005ed0:	dc2b      	bgt.n	8005f2a <_svfprintf_r+0xdf2>
 8005ed2:	3408      	adds	r4, #8
 8005ed4:	9b05      	ldr	r3, [sp, #20]
 8005ed6:	1e5d      	subs	r5, r3, #1
 8005ed8:	2d00      	cmp	r5, #0
 8005eda:	f77f ad10 	ble.w	80058fe <_svfprintf_r+0x7c6>
 8005ede:	4e5b      	ldr	r6, [pc, #364]	; (800604c <_svfprintf_r+0xf14>)
 8005ee0:	2710      	movs	r7, #16
 8005ee2:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 8005ee6:	2d10      	cmp	r5, #16
 8005ee8:	f103 0301 	add.w	r3, r3, #1
 8005eec:	f104 0108 	add.w	r1, r4, #8
 8005ef0:	6026      	str	r6, [r4, #0]
 8005ef2:	dc24      	bgt.n	8005f3e <_svfprintf_r+0xe06>
 8005ef4:	6065      	str	r5, [r4, #4]
 8005ef6:	4415      	add	r5, r2
 8005ef8:	9524      	str	r5, [sp, #144]	; 0x90
 8005efa:	2b07      	cmp	r3, #7
 8005efc:	9323      	str	r3, [sp, #140]	; 0x8c
 8005efe:	f340 828e 	ble.w	800641e <_svfprintf_r+0x12e6>
 8005f02:	aa22      	add	r2, sp, #136	; 0x88
 8005f04:	4649      	mov	r1, r9
 8005f06:	4650      	mov	r0, sl
 8005f08:	f001 fe3e 	bl	8007b88 <__ssprint_r>
 8005f0c:	2800      	cmp	r0, #0
 8005f0e:	f040 82a7 	bne.w	8006460 <_svfprintf_r+0x1328>
 8005f12:	ac25      	add	r4, sp, #148	; 0x94
 8005f14:	e4f3      	b.n	80058fe <_svfprintf_r+0x7c6>
 8005f16:	aa22      	add	r2, sp, #136	; 0x88
 8005f18:	4649      	mov	r1, r9
 8005f1a:	4650      	mov	r0, sl
 8005f1c:	f001 fe34 	bl	8007b88 <__ssprint_r>
 8005f20:	2800      	cmp	r0, #0
 8005f22:	f040 829d 	bne.w	8006460 <_svfprintf_r+0x1328>
 8005f26:	ac25      	add	r4, sp, #148	; 0x94
 8005f28:	e7be      	b.n	8005ea8 <_svfprintf_r+0xd70>
 8005f2a:	aa22      	add	r2, sp, #136	; 0x88
 8005f2c:	4649      	mov	r1, r9
 8005f2e:	4650      	mov	r0, sl
 8005f30:	f001 fe2a 	bl	8007b88 <__ssprint_r>
 8005f34:	2800      	cmp	r0, #0
 8005f36:	f040 8293 	bne.w	8006460 <_svfprintf_r+0x1328>
 8005f3a:	ac25      	add	r4, sp, #148	; 0x94
 8005f3c:	e7ca      	b.n	8005ed4 <_svfprintf_r+0xd9c>
 8005f3e:	3210      	adds	r2, #16
 8005f40:	2b07      	cmp	r3, #7
 8005f42:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 8005f46:	6067      	str	r7, [r4, #4]
 8005f48:	dd08      	ble.n	8005f5c <_svfprintf_r+0xe24>
 8005f4a:	aa22      	add	r2, sp, #136	; 0x88
 8005f4c:	4649      	mov	r1, r9
 8005f4e:	4650      	mov	r0, sl
 8005f50:	f001 fe1a 	bl	8007b88 <__ssprint_r>
 8005f54:	2800      	cmp	r0, #0
 8005f56:	f040 8283 	bne.w	8006460 <_svfprintf_r+0x1328>
 8005f5a:	a925      	add	r1, sp, #148	; 0x94
 8005f5c:	3d10      	subs	r5, #16
 8005f5e:	460c      	mov	r4, r1
 8005f60:	e7bf      	b.n	8005ee2 <_svfprintf_r+0xdaa>
 8005f62:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	dc73      	bgt.n	8006050 <_svfprintf_r+0xf18>
 8005f68:	4b37      	ldr	r3, [pc, #220]	; (8006048 <_svfprintf_r+0xf10>)
 8005f6a:	6023      	str	r3, [r4, #0]
 8005f6c:	2301      	movs	r3, #1
 8005f6e:	441f      	add	r7, r3
 8005f70:	6063      	str	r3, [r4, #4]
 8005f72:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005f74:	9724      	str	r7, [sp, #144]	; 0x90
 8005f76:	3301      	adds	r3, #1
 8005f78:	2b07      	cmp	r3, #7
 8005f7a:	9323      	str	r3, [sp, #140]	; 0x8c
 8005f7c:	dc3d      	bgt.n	8005ffa <_svfprintf_r+0xec2>
 8005f7e:	3408      	adds	r4, #8
 8005f80:	9905      	ldr	r1, [sp, #20]
 8005f82:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8005f84:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005f86:	430b      	orrs	r3, r1
 8005f88:	f00b 0101 	and.w	r1, fp, #1
 8005f8c:	430b      	orrs	r3, r1
 8005f8e:	f43f acb6 	beq.w	80058fe <_svfprintf_r+0x7c6>
 8005f92:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005f94:	6023      	str	r3, [r4, #0]
 8005f96:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005f98:	6063      	str	r3, [r4, #4]
 8005f9a:	441a      	add	r2, r3
 8005f9c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005f9e:	9224      	str	r2, [sp, #144]	; 0x90
 8005fa0:	3301      	adds	r3, #1
 8005fa2:	2b07      	cmp	r3, #7
 8005fa4:	9323      	str	r3, [sp, #140]	; 0x8c
 8005fa6:	dc32      	bgt.n	800600e <_svfprintf_r+0xed6>
 8005fa8:	3408      	adds	r4, #8
 8005faa:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 8005fac:	2d00      	cmp	r5, #0
 8005fae:	da1b      	bge.n	8005fe8 <_svfprintf_r+0xeb0>
 8005fb0:	4e26      	ldr	r6, [pc, #152]	; (800604c <_svfprintf_r+0xf14>)
 8005fb2:	426d      	negs	r5, r5
 8005fb4:	4623      	mov	r3, r4
 8005fb6:	2710      	movs	r7, #16
 8005fb8:	e9dd 2123 	ldrd	r2, r1, [sp, #140]	; 0x8c
 8005fbc:	2d10      	cmp	r5, #16
 8005fbe:	f102 0201 	add.w	r2, r2, #1
 8005fc2:	f104 0408 	add.w	r4, r4, #8
 8005fc6:	601e      	str	r6, [r3, #0]
 8005fc8:	dc2b      	bgt.n	8006022 <_svfprintf_r+0xeea>
 8005fca:	605d      	str	r5, [r3, #4]
 8005fcc:	2a07      	cmp	r2, #7
 8005fce:	440d      	add	r5, r1
 8005fd0:	e9cd 2523 	strd	r2, r5, [sp, #140]	; 0x8c
 8005fd4:	dd08      	ble.n	8005fe8 <_svfprintf_r+0xeb0>
 8005fd6:	aa22      	add	r2, sp, #136	; 0x88
 8005fd8:	4649      	mov	r1, r9
 8005fda:	4650      	mov	r0, sl
 8005fdc:	f001 fdd4 	bl	8007b88 <__ssprint_r>
 8005fe0:	2800      	cmp	r0, #0
 8005fe2:	f040 823d 	bne.w	8006460 <_svfprintf_r+0x1328>
 8005fe6:	ac25      	add	r4, sp, #148	; 0x94
 8005fe8:	9b03      	ldr	r3, [sp, #12]
 8005fea:	6023      	str	r3, [r4, #0]
 8005fec:	9b05      	ldr	r3, [sp, #20]
 8005fee:	9a05      	ldr	r2, [sp, #20]
 8005ff0:	6063      	str	r3, [r4, #4]
 8005ff2:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8005ff4:	4413      	add	r3, r2
 8005ff6:	9324      	str	r3, [sp, #144]	; 0x90
 8005ff8:	e47a      	b.n	80058f0 <_svfprintf_r+0x7b8>
 8005ffa:	aa22      	add	r2, sp, #136	; 0x88
 8005ffc:	4649      	mov	r1, r9
 8005ffe:	4650      	mov	r0, sl
 8006000:	f001 fdc2 	bl	8007b88 <__ssprint_r>
 8006004:	2800      	cmp	r0, #0
 8006006:	f040 822b 	bne.w	8006460 <_svfprintf_r+0x1328>
 800600a:	ac25      	add	r4, sp, #148	; 0x94
 800600c:	e7b8      	b.n	8005f80 <_svfprintf_r+0xe48>
 800600e:	aa22      	add	r2, sp, #136	; 0x88
 8006010:	4649      	mov	r1, r9
 8006012:	4650      	mov	r0, sl
 8006014:	f001 fdb8 	bl	8007b88 <__ssprint_r>
 8006018:	2800      	cmp	r0, #0
 800601a:	f040 8221 	bne.w	8006460 <_svfprintf_r+0x1328>
 800601e:	ac25      	add	r4, sp, #148	; 0x94
 8006020:	e7c3      	b.n	8005faa <_svfprintf_r+0xe72>
 8006022:	3110      	adds	r1, #16
 8006024:	2a07      	cmp	r2, #7
 8006026:	e9cd 2123 	strd	r2, r1, [sp, #140]	; 0x8c
 800602a:	605f      	str	r7, [r3, #4]
 800602c:	dd08      	ble.n	8006040 <_svfprintf_r+0xf08>
 800602e:	aa22      	add	r2, sp, #136	; 0x88
 8006030:	4649      	mov	r1, r9
 8006032:	4650      	mov	r0, sl
 8006034:	f001 fda8 	bl	8007b88 <__ssprint_r>
 8006038:	2800      	cmp	r0, #0
 800603a:	f040 8211 	bne.w	8006460 <_svfprintf_r+0x1328>
 800603e:	ac25      	add	r4, sp, #148	; 0x94
 8006040:	3d10      	subs	r5, #16
 8006042:	4623      	mov	r3, r4
 8006044:	e7b8      	b.n	8005fb8 <_svfprintf_r+0xe80>
 8006046:	bf00      	nop
 8006048:	0800929a 	.word	0x0800929a
 800604c:	080092ac 	.word	0x080092ac
 8006050:	9b05      	ldr	r3, [sp, #20]
 8006052:	42ab      	cmp	r3, r5
 8006054:	bfa8      	it	ge
 8006056:	462b      	movge	r3, r5
 8006058:	2b00      	cmp	r3, #0
 800605a:	4698      	mov	r8, r3
 800605c:	dd0a      	ble.n	8006074 <_svfprintf_r+0xf3c>
 800605e:	9b03      	ldr	r3, [sp, #12]
 8006060:	e9c4 3800 	strd	r3, r8, [r4]
 8006064:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006066:	3301      	adds	r3, #1
 8006068:	4447      	add	r7, r8
 800606a:	2b07      	cmp	r3, #7
 800606c:	9724      	str	r7, [sp, #144]	; 0x90
 800606e:	9323      	str	r3, [sp, #140]	; 0x8c
 8006070:	dc7b      	bgt.n	800616a <_svfprintf_r+0x1032>
 8006072:	3408      	adds	r4, #8
 8006074:	f1b8 0f00 	cmp.w	r8, #0
 8006078:	bfac      	ite	ge
 800607a:	eba5 0708 	subge.w	r7, r5, r8
 800607e:	462f      	movlt	r7, r5
 8006080:	2f00      	cmp	r7, #0
 8006082:	dd1a      	ble.n	80060ba <_svfprintf_r+0xf82>
 8006084:	f8df 8368 	ldr.w	r8, [pc, #872]	; 80063f0 <_svfprintf_r+0x12b8>
 8006088:	f8c4 8000 	str.w	r8, [r4]
 800608c:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 8006090:	2f10      	cmp	r7, #16
 8006092:	f103 0301 	add.w	r3, r3, #1
 8006096:	f104 0108 	add.w	r1, r4, #8
 800609a:	dc70      	bgt.n	800617e <_svfprintf_r+0x1046>
 800609c:	6067      	str	r7, [r4, #4]
 800609e:	2b07      	cmp	r3, #7
 80060a0:	4417      	add	r7, r2
 80060a2:	e9cd 3723 	strd	r3, r7, [sp, #140]	; 0x8c
 80060a6:	dd7d      	ble.n	80061a4 <_svfprintf_r+0x106c>
 80060a8:	aa22      	add	r2, sp, #136	; 0x88
 80060aa:	4649      	mov	r1, r9
 80060ac:	4650      	mov	r0, sl
 80060ae:	f001 fd6b 	bl	8007b88 <__ssprint_r>
 80060b2:	2800      	cmp	r0, #0
 80060b4:	f040 81d4 	bne.w	8006460 <_svfprintf_r+0x1328>
 80060b8:	ac25      	add	r4, sp, #148	; 0x94
 80060ba:	9b03      	ldr	r3, [sp, #12]
 80060bc:	f41b 6f80 	tst.w	fp, #1024	; 0x400
 80060c0:	441d      	add	r5, r3
 80060c2:	d00a      	beq.n	80060da <_svfprintf_r+0xfa2>
 80060c4:	9b08      	ldr	r3, [sp, #32]
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d16e      	bne.n	80061a8 <_svfprintf_r+0x1070>
 80060ca:	2e00      	cmp	r6, #0
 80060cc:	d16e      	bne.n	80061ac <_svfprintf_r+0x1074>
 80060ce:	9b03      	ldr	r3, [sp, #12]
 80060d0:	9a05      	ldr	r2, [sp, #20]
 80060d2:	4413      	add	r3, r2
 80060d4:	429d      	cmp	r5, r3
 80060d6:	bf28      	it	cs
 80060d8:	461d      	movcs	r5, r3
 80060da:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80060dc:	9a05      	ldr	r2, [sp, #20]
 80060de:	4293      	cmp	r3, r2
 80060e0:	db02      	blt.n	80060e8 <_svfprintf_r+0xfb0>
 80060e2:	f01b 0f01 	tst.w	fp, #1
 80060e6:	d00e      	beq.n	8006106 <_svfprintf_r+0xfce>
 80060e8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80060ea:	6023      	str	r3, [r4, #0]
 80060ec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80060ee:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80060f0:	6063      	str	r3, [r4, #4]
 80060f2:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80060f4:	4413      	add	r3, r2
 80060f6:	9324      	str	r3, [sp, #144]	; 0x90
 80060f8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80060fa:	3301      	adds	r3, #1
 80060fc:	2b07      	cmp	r3, #7
 80060fe:	9323      	str	r3, [sp, #140]	; 0x8c
 8006100:	f300 80d2 	bgt.w	80062a8 <_svfprintf_r+0x1170>
 8006104:	3408      	adds	r4, #8
 8006106:	9b05      	ldr	r3, [sp, #20]
 8006108:	9e1c      	ldr	r6, [sp, #112]	; 0x70
 800610a:	9a05      	ldr	r2, [sp, #20]
 800610c:	1b9e      	subs	r6, r3, r6
 800610e:	9b03      	ldr	r3, [sp, #12]
 8006110:	4413      	add	r3, r2
 8006112:	1b5b      	subs	r3, r3, r5
 8006114:	429e      	cmp	r6, r3
 8006116:	bfa8      	it	ge
 8006118:	461e      	movge	r6, r3
 800611a:	2e00      	cmp	r6, #0
 800611c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800611e:	dd0a      	ble.n	8006136 <_svfprintf_r+0xffe>
 8006120:	4433      	add	r3, r6
 8006122:	9324      	str	r3, [sp, #144]	; 0x90
 8006124:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006126:	3301      	adds	r3, #1
 8006128:	2b07      	cmp	r3, #7
 800612a:	e9c4 5600 	strd	r5, r6, [r4]
 800612e:	9323      	str	r3, [sp, #140]	; 0x8c
 8006130:	f300 80c4 	bgt.w	80062bc <_svfprintf_r+0x1184>
 8006134:	3408      	adds	r4, #8
 8006136:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 8006138:	9b05      	ldr	r3, [sp, #20]
 800613a:	2e00      	cmp	r6, #0
 800613c:	eba3 0505 	sub.w	r5, r3, r5
 8006140:	bfa8      	it	ge
 8006142:	1bad      	subge	r5, r5, r6
 8006144:	2d00      	cmp	r5, #0
 8006146:	f77f abda 	ble.w	80058fe <_svfprintf_r+0x7c6>
 800614a:	4ea9      	ldr	r6, [pc, #676]	; (80063f0 <_svfprintf_r+0x12b8>)
 800614c:	2710      	movs	r7, #16
 800614e:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 8006152:	2d10      	cmp	r5, #16
 8006154:	f103 0301 	add.w	r3, r3, #1
 8006158:	f104 0108 	add.w	r1, r4, #8
 800615c:	6026      	str	r6, [r4, #0]
 800615e:	f300 80b7 	bgt.w	80062d0 <_svfprintf_r+0x1198>
 8006162:	442a      	add	r2, r5
 8006164:	6065      	str	r5, [r4, #4]
 8006166:	9224      	str	r2, [sp, #144]	; 0x90
 8006168:	e6c7      	b.n	8005efa <_svfprintf_r+0xdc2>
 800616a:	aa22      	add	r2, sp, #136	; 0x88
 800616c:	4649      	mov	r1, r9
 800616e:	4650      	mov	r0, sl
 8006170:	f001 fd0a 	bl	8007b88 <__ssprint_r>
 8006174:	2800      	cmp	r0, #0
 8006176:	f040 8173 	bne.w	8006460 <_svfprintf_r+0x1328>
 800617a:	ac25      	add	r4, sp, #148	; 0x94
 800617c:	e77a      	b.n	8006074 <_svfprintf_r+0xf3c>
 800617e:	2010      	movs	r0, #16
 8006180:	4402      	add	r2, r0
 8006182:	2b07      	cmp	r3, #7
 8006184:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 8006188:	6060      	str	r0, [r4, #4]
 800618a:	dd08      	ble.n	800619e <_svfprintf_r+0x1066>
 800618c:	aa22      	add	r2, sp, #136	; 0x88
 800618e:	4649      	mov	r1, r9
 8006190:	4650      	mov	r0, sl
 8006192:	f001 fcf9 	bl	8007b88 <__ssprint_r>
 8006196:	2800      	cmp	r0, #0
 8006198:	f040 8162 	bne.w	8006460 <_svfprintf_r+0x1328>
 800619c:	a925      	add	r1, sp, #148	; 0x94
 800619e:	3f10      	subs	r7, #16
 80061a0:	460c      	mov	r4, r1
 80061a2:	e771      	b.n	8006088 <_svfprintf_r+0xf50>
 80061a4:	460c      	mov	r4, r1
 80061a6:	e788      	b.n	80060ba <_svfprintf_r+0xf82>
 80061a8:	2e00      	cmp	r6, #0
 80061aa:	d04d      	beq.n	8006248 <_svfprintf_r+0x1110>
 80061ac:	3e01      	subs	r6, #1
 80061ae:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80061b0:	6023      	str	r3, [r4, #0]
 80061b2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80061b4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80061b6:	6063      	str	r3, [r4, #4]
 80061b8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80061ba:	4413      	add	r3, r2
 80061bc:	9324      	str	r3, [sp, #144]	; 0x90
 80061be:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80061c0:	3301      	adds	r3, #1
 80061c2:	2b07      	cmp	r3, #7
 80061c4:	9323      	str	r3, [sp, #140]	; 0x8c
 80061c6:	dc46      	bgt.n	8006256 <_svfprintf_r+0x111e>
 80061c8:	3408      	adds	r4, #8
 80061ca:	9b03      	ldr	r3, [sp, #12]
 80061cc:	9a05      	ldr	r2, [sp, #20]
 80061ce:	eb03 0802 	add.w	r8, r3, r2
 80061d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80061d4:	781b      	ldrb	r3, [r3, #0]
 80061d6:	eba8 0805 	sub.w	r8, r8, r5
 80061da:	4598      	cmp	r8, r3
 80061dc:	bfa8      	it	ge
 80061de:	4698      	movge	r8, r3
 80061e0:	f1b8 0f00 	cmp.w	r8, #0
 80061e4:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80061e6:	dd09      	ble.n	80061fc <_svfprintf_r+0x10c4>
 80061e8:	4443      	add	r3, r8
 80061ea:	9324      	str	r3, [sp, #144]	; 0x90
 80061ec:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80061ee:	3301      	adds	r3, #1
 80061f0:	2b07      	cmp	r3, #7
 80061f2:	e9c4 5800 	strd	r5, r8, [r4]
 80061f6:	9323      	str	r3, [sp, #140]	; 0x8c
 80061f8:	dc37      	bgt.n	800626a <_svfprintf_r+0x1132>
 80061fa:	3408      	adds	r4, #8
 80061fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80061fe:	781f      	ldrb	r7, [r3, #0]
 8006200:	f1b8 0f00 	cmp.w	r8, #0
 8006204:	bfa8      	it	ge
 8006206:	eba7 0708 	subge.w	r7, r7, r8
 800620a:	2f00      	cmp	r7, #0
 800620c:	dd18      	ble.n	8006240 <_svfprintf_r+0x1108>
 800620e:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 8006212:	4877      	ldr	r0, [pc, #476]	; (80063f0 <_svfprintf_r+0x12b8>)
 8006214:	6020      	str	r0, [r4, #0]
 8006216:	2f10      	cmp	r7, #16
 8006218:	f103 0301 	add.w	r3, r3, #1
 800621c:	f104 0108 	add.w	r1, r4, #8
 8006220:	dc2d      	bgt.n	800627e <_svfprintf_r+0x1146>
 8006222:	443a      	add	r2, r7
 8006224:	2b07      	cmp	r3, #7
 8006226:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 800622a:	6067      	str	r7, [r4, #4]
 800622c:	dd3a      	ble.n	80062a4 <_svfprintf_r+0x116c>
 800622e:	aa22      	add	r2, sp, #136	; 0x88
 8006230:	4649      	mov	r1, r9
 8006232:	4650      	mov	r0, sl
 8006234:	f001 fca8 	bl	8007b88 <__ssprint_r>
 8006238:	2800      	cmp	r0, #0
 800623a:	f040 8111 	bne.w	8006460 <_svfprintf_r+0x1328>
 800623e:	ac25      	add	r4, sp, #148	; 0x94
 8006240:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006242:	781b      	ldrb	r3, [r3, #0]
 8006244:	441d      	add	r5, r3
 8006246:	e73d      	b.n	80060c4 <_svfprintf_r+0xf8c>
 8006248:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800624a:	3b01      	subs	r3, #1
 800624c:	9309      	str	r3, [sp, #36]	; 0x24
 800624e:	9b08      	ldr	r3, [sp, #32]
 8006250:	3b01      	subs	r3, #1
 8006252:	9308      	str	r3, [sp, #32]
 8006254:	e7ab      	b.n	80061ae <_svfprintf_r+0x1076>
 8006256:	aa22      	add	r2, sp, #136	; 0x88
 8006258:	4649      	mov	r1, r9
 800625a:	4650      	mov	r0, sl
 800625c:	f001 fc94 	bl	8007b88 <__ssprint_r>
 8006260:	2800      	cmp	r0, #0
 8006262:	f040 80fd 	bne.w	8006460 <_svfprintf_r+0x1328>
 8006266:	ac25      	add	r4, sp, #148	; 0x94
 8006268:	e7af      	b.n	80061ca <_svfprintf_r+0x1092>
 800626a:	aa22      	add	r2, sp, #136	; 0x88
 800626c:	4649      	mov	r1, r9
 800626e:	4650      	mov	r0, sl
 8006270:	f001 fc8a 	bl	8007b88 <__ssprint_r>
 8006274:	2800      	cmp	r0, #0
 8006276:	f040 80f3 	bne.w	8006460 <_svfprintf_r+0x1328>
 800627a:	ac25      	add	r4, sp, #148	; 0x94
 800627c:	e7be      	b.n	80061fc <_svfprintf_r+0x10c4>
 800627e:	2010      	movs	r0, #16
 8006280:	4402      	add	r2, r0
 8006282:	2b07      	cmp	r3, #7
 8006284:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 8006288:	6060      	str	r0, [r4, #4]
 800628a:	dd08      	ble.n	800629e <_svfprintf_r+0x1166>
 800628c:	aa22      	add	r2, sp, #136	; 0x88
 800628e:	4649      	mov	r1, r9
 8006290:	4650      	mov	r0, sl
 8006292:	f001 fc79 	bl	8007b88 <__ssprint_r>
 8006296:	2800      	cmp	r0, #0
 8006298:	f040 80e2 	bne.w	8006460 <_svfprintf_r+0x1328>
 800629c:	a925      	add	r1, sp, #148	; 0x94
 800629e:	3f10      	subs	r7, #16
 80062a0:	460c      	mov	r4, r1
 80062a2:	e7b4      	b.n	800620e <_svfprintf_r+0x10d6>
 80062a4:	460c      	mov	r4, r1
 80062a6:	e7cb      	b.n	8006240 <_svfprintf_r+0x1108>
 80062a8:	aa22      	add	r2, sp, #136	; 0x88
 80062aa:	4649      	mov	r1, r9
 80062ac:	4650      	mov	r0, sl
 80062ae:	f001 fc6b 	bl	8007b88 <__ssprint_r>
 80062b2:	2800      	cmp	r0, #0
 80062b4:	f040 80d4 	bne.w	8006460 <_svfprintf_r+0x1328>
 80062b8:	ac25      	add	r4, sp, #148	; 0x94
 80062ba:	e724      	b.n	8006106 <_svfprintf_r+0xfce>
 80062bc:	aa22      	add	r2, sp, #136	; 0x88
 80062be:	4649      	mov	r1, r9
 80062c0:	4650      	mov	r0, sl
 80062c2:	f001 fc61 	bl	8007b88 <__ssprint_r>
 80062c6:	2800      	cmp	r0, #0
 80062c8:	f040 80ca 	bne.w	8006460 <_svfprintf_r+0x1328>
 80062cc:	ac25      	add	r4, sp, #148	; 0x94
 80062ce:	e732      	b.n	8006136 <_svfprintf_r+0xffe>
 80062d0:	3210      	adds	r2, #16
 80062d2:	2b07      	cmp	r3, #7
 80062d4:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 80062d8:	6067      	str	r7, [r4, #4]
 80062da:	dd08      	ble.n	80062ee <_svfprintf_r+0x11b6>
 80062dc:	aa22      	add	r2, sp, #136	; 0x88
 80062de:	4649      	mov	r1, r9
 80062e0:	4650      	mov	r0, sl
 80062e2:	f001 fc51 	bl	8007b88 <__ssprint_r>
 80062e6:	2800      	cmp	r0, #0
 80062e8:	f040 80ba 	bne.w	8006460 <_svfprintf_r+0x1328>
 80062ec:	a925      	add	r1, sp, #148	; 0x94
 80062ee:	3d10      	subs	r5, #16
 80062f0:	460c      	mov	r4, r1
 80062f2:	e72c      	b.n	800614e <_svfprintf_r+0x1016>
 80062f4:	9a05      	ldr	r2, [sp, #20]
 80062f6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80062f8:	2a01      	cmp	r2, #1
 80062fa:	9a03      	ldr	r2, [sp, #12]
 80062fc:	6022      	str	r2, [r4, #0]
 80062fe:	f107 0701 	add.w	r7, r7, #1
 8006302:	f103 0301 	add.w	r3, r3, #1
 8006306:	f04f 0201 	mov.w	r2, #1
 800630a:	e9cd 3723 	strd	r3, r7, [sp, #140]	; 0x8c
 800630e:	f104 0508 	add.w	r5, r4, #8
 8006312:	6062      	str	r2, [r4, #4]
 8006314:	dc02      	bgt.n	800631c <_svfprintf_r+0x11e4>
 8006316:	f01b 0f01 	tst.w	fp, #1
 800631a:	d07b      	beq.n	8006414 <_svfprintf_r+0x12dc>
 800631c:	2b07      	cmp	r3, #7
 800631e:	dd08      	ble.n	8006332 <_svfprintf_r+0x11fa>
 8006320:	aa22      	add	r2, sp, #136	; 0x88
 8006322:	4649      	mov	r1, r9
 8006324:	4650      	mov	r0, sl
 8006326:	f001 fc2f 	bl	8007b88 <__ssprint_r>
 800632a:	2800      	cmp	r0, #0
 800632c:	f040 8098 	bne.w	8006460 <_svfprintf_r+0x1328>
 8006330:	ad25      	add	r5, sp, #148	; 0x94
 8006332:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006334:	602b      	str	r3, [r5, #0]
 8006336:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006338:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800633a:	606b      	str	r3, [r5, #4]
 800633c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800633e:	4413      	add	r3, r2
 8006340:	9324      	str	r3, [sp, #144]	; 0x90
 8006342:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006344:	3301      	adds	r3, #1
 8006346:	2b07      	cmp	r3, #7
 8006348:	9323      	str	r3, [sp, #140]	; 0x8c
 800634a:	dc32      	bgt.n	80063b2 <_svfprintf_r+0x127a>
 800634c:	3508      	adds	r5, #8
 800634e:	9b05      	ldr	r3, [sp, #20]
 8006350:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006354:	1e5c      	subs	r4, r3, #1
 8006356:	2200      	movs	r2, #0
 8006358:	2300      	movs	r3, #0
 800635a:	e9dd 7623 	ldrd	r7, r6, [sp, #140]	; 0x8c
 800635e:	f7fa fbdb 	bl	8000b18 <__aeabi_dcmpeq>
 8006362:	2800      	cmp	r0, #0
 8006364:	d12e      	bne.n	80063c4 <_svfprintf_r+0x128c>
 8006366:	9b03      	ldr	r3, [sp, #12]
 8006368:	3301      	adds	r3, #1
 800636a:	e9c5 3400 	strd	r3, r4, [r5]
 800636e:	9b05      	ldr	r3, [sp, #20]
 8006370:	3701      	adds	r7, #1
 8006372:	3e01      	subs	r6, #1
 8006374:	441e      	add	r6, r3
 8006376:	2f07      	cmp	r7, #7
 8006378:	e9cd 7623 	strd	r7, r6, [sp, #140]	; 0x8c
 800637c:	dd4d      	ble.n	800641a <_svfprintf_r+0x12e2>
 800637e:	aa22      	add	r2, sp, #136	; 0x88
 8006380:	4649      	mov	r1, r9
 8006382:	4650      	mov	r0, sl
 8006384:	f001 fc00 	bl	8007b88 <__ssprint_r>
 8006388:	2800      	cmp	r0, #0
 800638a:	d169      	bne.n	8006460 <_svfprintf_r+0x1328>
 800638c:	ad25      	add	r5, sp, #148	; 0x94
 800638e:	ab1e      	add	r3, sp, #120	; 0x78
 8006390:	602b      	str	r3, [r5, #0]
 8006392:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006394:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8006396:	606b      	str	r3, [r5, #4]
 8006398:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800639a:	4413      	add	r3, r2
 800639c:	9324      	str	r3, [sp, #144]	; 0x90
 800639e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80063a0:	3301      	adds	r3, #1
 80063a2:	2b07      	cmp	r3, #7
 80063a4:	9323      	str	r3, [sp, #140]	; 0x8c
 80063a6:	f73f adac 	bgt.w	8005f02 <_svfprintf_r+0xdca>
 80063aa:	f105 0408 	add.w	r4, r5, #8
 80063ae:	f7ff baa6 	b.w	80058fe <_svfprintf_r+0x7c6>
 80063b2:	aa22      	add	r2, sp, #136	; 0x88
 80063b4:	4649      	mov	r1, r9
 80063b6:	4650      	mov	r0, sl
 80063b8:	f001 fbe6 	bl	8007b88 <__ssprint_r>
 80063bc:	2800      	cmp	r0, #0
 80063be:	d14f      	bne.n	8006460 <_svfprintf_r+0x1328>
 80063c0:	ad25      	add	r5, sp, #148	; 0x94
 80063c2:	e7c4      	b.n	800634e <_svfprintf_r+0x1216>
 80063c4:	2c00      	cmp	r4, #0
 80063c6:	dde2      	ble.n	800638e <_svfprintf_r+0x1256>
 80063c8:	4e09      	ldr	r6, [pc, #36]	; (80063f0 <_svfprintf_r+0x12b8>)
 80063ca:	2710      	movs	r7, #16
 80063cc:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 80063d0:	2c10      	cmp	r4, #16
 80063d2:	f103 0301 	add.w	r3, r3, #1
 80063d6:	f105 0108 	add.w	r1, r5, #8
 80063da:	602e      	str	r6, [r5, #0]
 80063dc:	dc0a      	bgt.n	80063f4 <_svfprintf_r+0x12bc>
 80063de:	606c      	str	r4, [r5, #4]
 80063e0:	2b07      	cmp	r3, #7
 80063e2:	4414      	add	r4, r2
 80063e4:	e9cd 3423 	strd	r3, r4, [sp, #140]	; 0x8c
 80063e8:	dcc9      	bgt.n	800637e <_svfprintf_r+0x1246>
 80063ea:	460d      	mov	r5, r1
 80063ec:	e7cf      	b.n	800638e <_svfprintf_r+0x1256>
 80063ee:	bf00      	nop
 80063f0:	080092ac 	.word	0x080092ac
 80063f4:	3210      	adds	r2, #16
 80063f6:	2b07      	cmp	r3, #7
 80063f8:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 80063fc:	606f      	str	r7, [r5, #4]
 80063fe:	dd06      	ble.n	800640e <_svfprintf_r+0x12d6>
 8006400:	aa22      	add	r2, sp, #136	; 0x88
 8006402:	4649      	mov	r1, r9
 8006404:	4650      	mov	r0, sl
 8006406:	f001 fbbf 	bl	8007b88 <__ssprint_r>
 800640a:	bb48      	cbnz	r0, 8006460 <_svfprintf_r+0x1328>
 800640c:	a925      	add	r1, sp, #148	; 0x94
 800640e:	3c10      	subs	r4, #16
 8006410:	460d      	mov	r5, r1
 8006412:	e7db      	b.n	80063cc <_svfprintf_r+0x1294>
 8006414:	2b07      	cmp	r3, #7
 8006416:	ddba      	ble.n	800638e <_svfprintf_r+0x1256>
 8006418:	e7b1      	b.n	800637e <_svfprintf_r+0x1246>
 800641a:	3508      	adds	r5, #8
 800641c:	e7b7      	b.n	800638e <_svfprintf_r+0x1256>
 800641e:	460c      	mov	r4, r1
 8006420:	f7ff ba6d 	b.w	80058fe <_svfprintf_r+0x7c6>
 8006424:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	; 0x3c
 8006428:	1a9d      	subs	r5, r3, r2
 800642a:	2d00      	cmp	r5, #0
 800642c:	f77f aa6b 	ble.w	8005906 <_svfprintf_r+0x7ce>
 8006430:	4e37      	ldr	r6, [pc, #220]	; (8006510 <_svfprintf_r+0x13d8>)
 8006432:	2710      	movs	r7, #16
 8006434:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 8006438:	2d10      	cmp	r5, #16
 800643a:	f103 0301 	add.w	r3, r3, #1
 800643e:	6026      	str	r6, [r4, #0]
 8006440:	dc18      	bgt.n	8006474 <_svfprintf_r+0x133c>
 8006442:	6065      	str	r5, [r4, #4]
 8006444:	2b07      	cmp	r3, #7
 8006446:	4415      	add	r5, r2
 8006448:	e9cd 3523 	strd	r3, r5, [sp, #140]	; 0x8c
 800644c:	f77f aa5b 	ble.w	8005906 <_svfprintf_r+0x7ce>
 8006450:	aa22      	add	r2, sp, #136	; 0x88
 8006452:	4649      	mov	r1, r9
 8006454:	4650      	mov	r0, sl
 8006456:	f001 fb97 	bl	8007b88 <__ssprint_r>
 800645a:	2800      	cmp	r0, #0
 800645c:	f43f aa53 	beq.w	8005906 <_svfprintf_r+0x7ce>
 8006460:	9b04      	ldr	r3, [sp, #16]
 8006462:	2b00      	cmp	r3, #0
 8006464:	f43f a874 	beq.w	8005550 <_svfprintf_r+0x418>
 8006468:	4619      	mov	r1, r3
 800646a:	4650      	mov	r0, sl
 800646c:	f7fe fda4 	bl	8004fb8 <_free_r>
 8006470:	f7ff b86e 	b.w	8005550 <_svfprintf_r+0x418>
 8006474:	3210      	adds	r2, #16
 8006476:	2b07      	cmp	r3, #7
 8006478:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 800647c:	6067      	str	r7, [r4, #4]
 800647e:	dc02      	bgt.n	8006486 <_svfprintf_r+0x134e>
 8006480:	3408      	adds	r4, #8
 8006482:	3d10      	subs	r5, #16
 8006484:	e7d6      	b.n	8006434 <_svfprintf_r+0x12fc>
 8006486:	aa22      	add	r2, sp, #136	; 0x88
 8006488:	4649      	mov	r1, r9
 800648a:	4650      	mov	r0, sl
 800648c:	f001 fb7c 	bl	8007b88 <__ssprint_r>
 8006490:	2800      	cmp	r0, #0
 8006492:	d1e5      	bne.n	8006460 <_svfprintf_r+0x1328>
 8006494:	ac25      	add	r4, sp, #148	; 0x94
 8006496:	e7f4      	b.n	8006482 <_svfprintf_r+0x134a>
 8006498:	9904      	ldr	r1, [sp, #16]
 800649a:	4650      	mov	r0, sl
 800649c:	f7fe fd8c 	bl	8004fb8 <_free_r>
 80064a0:	f7ff ba49 	b.w	8005936 <_svfprintf_r+0x7fe>
 80064a4:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	f43f a852 	beq.w	8005550 <_svfprintf_r+0x418>
 80064ac:	aa22      	add	r2, sp, #136	; 0x88
 80064ae:	4649      	mov	r1, r9
 80064b0:	4650      	mov	r0, sl
 80064b2:	f001 fb69 	bl	8007b88 <__ssprint_r>
 80064b6:	f7ff b84b 	b.w	8005550 <_svfprintf_r+0x418>
 80064ba:	ea55 0206 	orrs.w	r2, r5, r6
 80064be:	f8cd b010 	str.w	fp, [sp, #16]
 80064c2:	f43f ab5e 	beq.w	8005b82 <_svfprintf_r+0xa4a>
 80064c6:	2b01      	cmp	r3, #1
 80064c8:	f43f abff 	beq.w	8005cca <_svfprintf_r+0xb92>
 80064cc:	2b02      	cmp	r3, #2
 80064ce:	ab4e      	add	r3, sp, #312	; 0x138
 80064d0:	9303      	str	r3, [sp, #12]
 80064d2:	f43f ac4d 	beq.w	8005d70 <_svfprintf_r+0xc38>
 80064d6:	9a03      	ldr	r2, [sp, #12]
 80064d8:	f005 0307 	and.w	r3, r5, #7
 80064dc:	4611      	mov	r1, r2
 80064de:	3330      	adds	r3, #48	; 0x30
 80064e0:	f801 3d01 	strb.w	r3, [r1, #-1]!
 80064e4:	08ed      	lsrs	r5, r5, #3
 80064e6:	ea45 7546 	orr.w	r5, r5, r6, lsl #29
 80064ea:	08f6      	lsrs	r6, r6, #3
 80064ec:	9103      	str	r1, [sp, #12]
 80064ee:	ea55 0106 	orrs.w	r1, r5, r6
 80064f2:	d1f0      	bne.n	80064d6 <_svfprintf_r+0x139e>
 80064f4:	9904      	ldr	r1, [sp, #16]
 80064f6:	07c9      	lsls	r1, r1, #31
 80064f8:	f57f ac2a 	bpl.w	8005d50 <_svfprintf_r+0xc18>
 80064fc:	2b30      	cmp	r3, #48	; 0x30
 80064fe:	f43f ac27 	beq.w	8005d50 <_svfprintf_r+0xc18>
 8006502:	9903      	ldr	r1, [sp, #12]
 8006504:	2330      	movs	r3, #48	; 0x30
 8006506:	f801 3c01 	strb.w	r3, [r1, #-1]
 800650a:	1e93      	subs	r3, r2, #2
 800650c:	9303      	str	r3, [sp, #12]
 800650e:	e41f      	b.n	8005d50 <_svfprintf_r+0xc18>
 8006510:	0800929c 	.word	0x0800929c

08006514 <_fclose_r>:
 8006514:	b570      	push	{r4, r5, r6, lr}
 8006516:	4606      	mov	r6, r0
 8006518:	460c      	mov	r4, r1
 800651a:	b911      	cbnz	r1, 8006522 <_fclose_r+0xe>
 800651c:	2500      	movs	r5, #0
 800651e:	4628      	mov	r0, r5
 8006520:	bd70      	pop	{r4, r5, r6, pc}
 8006522:	b118      	cbz	r0, 800652c <_fclose_r+0x18>
 8006524:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8006526:	b90b      	cbnz	r3, 800652c <_fclose_r+0x18>
 8006528:	f7fe fbb0 	bl	8004c8c <__sinit>
 800652c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800652e:	07d8      	lsls	r0, r3, #31
 8006530:	d405      	bmi.n	800653e <_fclose_r+0x2a>
 8006532:	89a3      	ldrh	r3, [r4, #12]
 8006534:	0599      	lsls	r1, r3, #22
 8006536:	d402      	bmi.n	800653e <_fclose_r+0x2a>
 8006538:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800653a:	f7fe fccb 	bl	8004ed4 <__retarget_lock_acquire_recursive>
 800653e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006542:	b93b      	cbnz	r3, 8006554 <_fclose_r+0x40>
 8006544:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8006546:	f015 0501 	ands.w	r5, r5, #1
 800654a:	d1e7      	bne.n	800651c <_fclose_r+0x8>
 800654c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800654e:	f7fe fcc2 	bl	8004ed6 <__retarget_lock_release_recursive>
 8006552:	e7e4      	b.n	800651e <_fclose_r+0xa>
 8006554:	4621      	mov	r1, r4
 8006556:	4630      	mov	r0, r6
 8006558:	f000 f834 	bl	80065c4 <__sflush_r>
 800655c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800655e:	4605      	mov	r5, r0
 8006560:	b133      	cbz	r3, 8006570 <_fclose_r+0x5c>
 8006562:	69e1      	ldr	r1, [r4, #28]
 8006564:	4630      	mov	r0, r6
 8006566:	4798      	blx	r3
 8006568:	2800      	cmp	r0, #0
 800656a:	bfb8      	it	lt
 800656c:	f04f 35ff 	movlt.w	r5, #4294967295	; 0xffffffff
 8006570:	89a3      	ldrh	r3, [r4, #12]
 8006572:	061a      	lsls	r2, r3, #24
 8006574:	d503      	bpl.n	800657e <_fclose_r+0x6a>
 8006576:	6921      	ldr	r1, [r4, #16]
 8006578:	4630      	mov	r0, r6
 800657a:	f7fe fd1d 	bl	8004fb8 <_free_r>
 800657e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8006580:	b141      	cbz	r1, 8006594 <_fclose_r+0x80>
 8006582:	f104 0340 	add.w	r3, r4, #64	; 0x40
 8006586:	4299      	cmp	r1, r3
 8006588:	d002      	beq.n	8006590 <_fclose_r+0x7c>
 800658a:	4630      	mov	r0, r6
 800658c:	f7fe fd14 	bl	8004fb8 <_free_r>
 8006590:	2300      	movs	r3, #0
 8006592:	6323      	str	r3, [r4, #48]	; 0x30
 8006594:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8006596:	b121      	cbz	r1, 80065a2 <_fclose_r+0x8e>
 8006598:	4630      	mov	r0, r6
 800659a:	f7fe fd0d 	bl	8004fb8 <_free_r>
 800659e:	2300      	movs	r3, #0
 80065a0:	6463      	str	r3, [r4, #68]	; 0x44
 80065a2:	f7fe fb67 	bl	8004c74 <__sfp_lock_acquire>
 80065a6:	2300      	movs	r3, #0
 80065a8:	81a3      	strh	r3, [r4, #12]
 80065aa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80065ac:	07db      	lsls	r3, r3, #31
 80065ae:	d402      	bmi.n	80065b6 <_fclose_r+0xa2>
 80065b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80065b2:	f7fe fc90 	bl	8004ed6 <__retarget_lock_release_recursive>
 80065b6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80065b8:	f7fe fc8b 	bl	8004ed2 <__retarget_lock_close_recursive>
 80065bc:	f7fe fb60 	bl	8004c80 <__sfp_lock_release>
 80065c0:	e7ad      	b.n	800651e <_fclose_r+0xa>
	...

080065c4 <__sflush_r>:
 80065c4:	898b      	ldrh	r3, [r1, #12]
 80065c6:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80065ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80065ce:	4605      	mov	r5, r0
 80065d0:	0718      	lsls	r0, r3, #28
 80065d2:	460c      	mov	r4, r1
 80065d4:	d45f      	bmi.n	8006696 <__sflush_r+0xd2>
 80065d6:	684b      	ldr	r3, [r1, #4]
 80065d8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80065dc:	2b00      	cmp	r3, #0
 80065de:	818a      	strh	r2, [r1, #12]
 80065e0:	dc05      	bgt.n	80065ee <__sflush_r+0x2a>
 80065e2:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	dc02      	bgt.n	80065ee <__sflush_r+0x2a>
 80065e8:	2000      	movs	r0, #0
 80065ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80065ee:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80065f0:	2e00      	cmp	r6, #0
 80065f2:	d0f9      	beq.n	80065e8 <__sflush_r+0x24>
 80065f4:	2300      	movs	r3, #0
 80065f6:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80065fa:	682f      	ldr	r7, [r5, #0]
 80065fc:	69e1      	ldr	r1, [r4, #28]
 80065fe:	602b      	str	r3, [r5, #0]
 8006600:	d036      	beq.n	8006670 <__sflush_r+0xac>
 8006602:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8006604:	89a3      	ldrh	r3, [r4, #12]
 8006606:	075a      	lsls	r2, r3, #29
 8006608:	d505      	bpl.n	8006616 <__sflush_r+0x52>
 800660a:	6863      	ldr	r3, [r4, #4]
 800660c:	1ac0      	subs	r0, r0, r3
 800660e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8006610:	b10b      	cbz	r3, 8006616 <__sflush_r+0x52>
 8006612:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8006614:	1ac0      	subs	r0, r0, r3
 8006616:	2300      	movs	r3, #0
 8006618:	4602      	mov	r2, r0
 800661a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800661c:	69e1      	ldr	r1, [r4, #28]
 800661e:	4628      	mov	r0, r5
 8006620:	47b0      	blx	r6
 8006622:	1c43      	adds	r3, r0, #1
 8006624:	89a3      	ldrh	r3, [r4, #12]
 8006626:	d106      	bne.n	8006636 <__sflush_r+0x72>
 8006628:	6829      	ldr	r1, [r5, #0]
 800662a:	291d      	cmp	r1, #29
 800662c:	d82f      	bhi.n	800668e <__sflush_r+0xca>
 800662e:	4a2b      	ldr	r2, [pc, #172]	; (80066dc <__sflush_r+0x118>)
 8006630:	410a      	asrs	r2, r1
 8006632:	07d6      	lsls	r6, r2, #31
 8006634:	d42b      	bmi.n	800668e <__sflush_r+0xca>
 8006636:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800663a:	b21b      	sxth	r3, r3
 800663c:	2200      	movs	r2, #0
 800663e:	6062      	str	r2, [r4, #4]
 8006640:	04d9      	lsls	r1, r3, #19
 8006642:	6922      	ldr	r2, [r4, #16]
 8006644:	81a3      	strh	r3, [r4, #12]
 8006646:	6022      	str	r2, [r4, #0]
 8006648:	d504      	bpl.n	8006654 <__sflush_r+0x90>
 800664a:	1c42      	adds	r2, r0, #1
 800664c:	d101      	bne.n	8006652 <__sflush_r+0x8e>
 800664e:	682b      	ldr	r3, [r5, #0]
 8006650:	b903      	cbnz	r3, 8006654 <__sflush_r+0x90>
 8006652:	6520      	str	r0, [r4, #80]	; 0x50
 8006654:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8006656:	602f      	str	r7, [r5, #0]
 8006658:	2900      	cmp	r1, #0
 800665a:	d0c5      	beq.n	80065e8 <__sflush_r+0x24>
 800665c:	f104 0340 	add.w	r3, r4, #64	; 0x40
 8006660:	4299      	cmp	r1, r3
 8006662:	d002      	beq.n	800666a <__sflush_r+0xa6>
 8006664:	4628      	mov	r0, r5
 8006666:	f7fe fca7 	bl	8004fb8 <_free_r>
 800666a:	2000      	movs	r0, #0
 800666c:	6320      	str	r0, [r4, #48]	; 0x30
 800666e:	e7bc      	b.n	80065ea <__sflush_r+0x26>
 8006670:	2301      	movs	r3, #1
 8006672:	4628      	mov	r0, r5
 8006674:	47b0      	blx	r6
 8006676:	1c41      	adds	r1, r0, #1
 8006678:	d1c4      	bne.n	8006604 <__sflush_r+0x40>
 800667a:	682b      	ldr	r3, [r5, #0]
 800667c:	2b00      	cmp	r3, #0
 800667e:	d0c1      	beq.n	8006604 <__sflush_r+0x40>
 8006680:	2b1d      	cmp	r3, #29
 8006682:	d001      	beq.n	8006688 <__sflush_r+0xc4>
 8006684:	2b16      	cmp	r3, #22
 8006686:	d101      	bne.n	800668c <__sflush_r+0xc8>
 8006688:	602f      	str	r7, [r5, #0]
 800668a:	e7ad      	b.n	80065e8 <__sflush_r+0x24>
 800668c:	89a3      	ldrh	r3, [r4, #12]
 800668e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006692:	81a3      	strh	r3, [r4, #12]
 8006694:	e7a9      	b.n	80065ea <__sflush_r+0x26>
 8006696:	690f      	ldr	r7, [r1, #16]
 8006698:	2f00      	cmp	r7, #0
 800669a:	d0a5      	beq.n	80065e8 <__sflush_r+0x24>
 800669c:	079b      	lsls	r3, r3, #30
 800669e:	680e      	ldr	r6, [r1, #0]
 80066a0:	bf08      	it	eq
 80066a2:	694b      	ldreq	r3, [r1, #20]
 80066a4:	600f      	str	r7, [r1, #0]
 80066a6:	bf18      	it	ne
 80066a8:	2300      	movne	r3, #0
 80066aa:	eba6 0807 	sub.w	r8, r6, r7
 80066ae:	608b      	str	r3, [r1, #8]
 80066b0:	f1b8 0f00 	cmp.w	r8, #0
 80066b4:	dd98      	ble.n	80065e8 <__sflush_r+0x24>
 80066b6:	69e1      	ldr	r1, [r4, #28]
 80066b8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80066ba:	4643      	mov	r3, r8
 80066bc:	463a      	mov	r2, r7
 80066be:	4628      	mov	r0, r5
 80066c0:	47b0      	blx	r6
 80066c2:	2800      	cmp	r0, #0
 80066c4:	dc06      	bgt.n	80066d4 <__sflush_r+0x110>
 80066c6:	89a3      	ldrh	r3, [r4, #12]
 80066c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80066cc:	81a3      	strh	r3, [r4, #12]
 80066ce:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80066d2:	e78a      	b.n	80065ea <__sflush_r+0x26>
 80066d4:	4407      	add	r7, r0
 80066d6:	eba8 0800 	sub.w	r8, r8, r0
 80066da:	e7e9      	b.n	80066b0 <__sflush_r+0xec>
 80066dc:	dfbffffe 	.word	0xdfbffffe

080066e0 <_fflush_r>:
 80066e0:	b538      	push	{r3, r4, r5, lr}
 80066e2:	460c      	mov	r4, r1
 80066e4:	4605      	mov	r5, r0
 80066e6:	b118      	cbz	r0, 80066f0 <_fflush_r+0x10>
 80066e8:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80066ea:	b90b      	cbnz	r3, 80066f0 <_fflush_r+0x10>
 80066ec:	f7fe face 	bl	8004c8c <__sinit>
 80066f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80066f4:	b1bb      	cbz	r3, 8006726 <_fflush_r+0x46>
 80066f6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80066f8:	07d0      	lsls	r0, r2, #31
 80066fa:	d404      	bmi.n	8006706 <_fflush_r+0x26>
 80066fc:	0599      	lsls	r1, r3, #22
 80066fe:	d402      	bmi.n	8006706 <_fflush_r+0x26>
 8006700:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006702:	f7fe fbe7 	bl	8004ed4 <__retarget_lock_acquire_recursive>
 8006706:	4628      	mov	r0, r5
 8006708:	4621      	mov	r1, r4
 800670a:	f7ff ff5b 	bl	80065c4 <__sflush_r>
 800670e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006710:	07da      	lsls	r2, r3, #31
 8006712:	4605      	mov	r5, r0
 8006714:	d405      	bmi.n	8006722 <_fflush_r+0x42>
 8006716:	89a3      	ldrh	r3, [r4, #12]
 8006718:	059b      	lsls	r3, r3, #22
 800671a:	d402      	bmi.n	8006722 <_fflush_r+0x42>
 800671c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800671e:	f7fe fbda 	bl	8004ed6 <__retarget_lock_release_recursive>
 8006722:	4628      	mov	r0, r5
 8006724:	bd38      	pop	{r3, r4, r5, pc}
 8006726:	461d      	mov	r5, r3
 8006728:	e7fb      	b.n	8006722 <_fflush_r+0x42>

0800672a <strncpy>:
 800672a:	b510      	push	{r4, lr}
 800672c:	3901      	subs	r1, #1
 800672e:	4603      	mov	r3, r0
 8006730:	b132      	cbz	r2, 8006740 <strncpy+0x16>
 8006732:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8006736:	f803 4b01 	strb.w	r4, [r3], #1
 800673a:	3a01      	subs	r2, #1
 800673c:	2c00      	cmp	r4, #0
 800673e:	d1f7      	bne.n	8006730 <strncpy+0x6>
 8006740:	441a      	add	r2, r3
 8006742:	2100      	movs	r1, #0
 8006744:	4293      	cmp	r3, r2
 8006746:	d100      	bne.n	800674a <strncpy+0x20>
 8006748:	bd10      	pop	{r4, pc}
 800674a:	f803 1b01 	strb.w	r1, [r3], #1
 800674e:	e7f9      	b.n	8006744 <strncpy+0x1a>

08006750 <_localeconv_r>:
 8006750:	4800      	ldr	r0, [pc, #0]	; (8006754 <_localeconv_r+0x4>)
 8006752:	4770      	bx	lr
 8006754:	20000640 	.word	0x20000640

08006758 <__libc_fini_array>:
 8006758:	b538      	push	{r3, r4, r5, lr}
 800675a:	4d07      	ldr	r5, [pc, #28]	; (8006778 <__libc_fini_array+0x20>)
 800675c:	4c07      	ldr	r4, [pc, #28]	; (800677c <__libc_fini_array+0x24>)
 800675e:	1b64      	subs	r4, r4, r5
 8006760:	10a4      	asrs	r4, r4, #2
 8006762:	b91c      	cbnz	r4, 800676c <__libc_fini_array+0x14>
 8006764:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006768:	f002 bd30 	b.w	80091cc <_fini>
 800676c:	3c01      	subs	r4, #1
 800676e:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 8006772:	4798      	blx	r3
 8006774:	e7f5      	b.n	8006762 <__libc_fini_array+0xa>
 8006776:	bf00      	nop
 8006778:	08009604 	.word	0x08009604
 800677c:	08009608 	.word	0x08009608

08006780 <frexp>:
 8006780:	b570      	push	{r4, r5, r6, lr}
 8006782:	2100      	movs	r1, #0
 8006784:	ec55 4b10 	vmov	r4, r5, d0
 8006788:	6001      	str	r1, [r0, #0]
 800678a:	4916      	ldr	r1, [pc, #88]	; (80067e4 <frexp+0x64>)
 800678c:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
 8006790:	428a      	cmp	r2, r1
 8006792:	4606      	mov	r6, r0
 8006794:	462b      	mov	r3, r5
 8006796:	dc22      	bgt.n	80067de <frexp+0x5e>
 8006798:	ee10 1a10 	vmov	r1, s0
 800679c:	4311      	orrs	r1, r2
 800679e:	d01e      	beq.n	80067de <frexp+0x5e>
 80067a0:	4911      	ldr	r1, [pc, #68]	; (80067e8 <frexp+0x68>)
 80067a2:	4029      	ands	r1, r5
 80067a4:	b969      	cbnz	r1, 80067c2 <frexp+0x42>
 80067a6:	4b11      	ldr	r3, [pc, #68]	; (80067ec <frexp+0x6c>)
 80067a8:	2200      	movs	r2, #0
 80067aa:	ee10 0a10 	vmov	r0, s0
 80067ae:	4629      	mov	r1, r5
 80067b0:	f7f9 ff4a 	bl	8000648 <__aeabi_dmul>
 80067b4:	460b      	mov	r3, r1
 80067b6:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 80067ba:	f06f 0135 	mvn.w	r1, #53	; 0x35
 80067be:	4604      	mov	r4, r0
 80067c0:	6031      	str	r1, [r6, #0]
 80067c2:	6831      	ldr	r1, [r6, #0]
 80067c4:	1512      	asrs	r2, r2, #20
 80067c6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80067ca:	f2a2 32fe 	subw	r2, r2, #1022	; 0x3fe
 80067ce:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80067d2:	4411      	add	r1, r2
 80067d4:	f043 557f 	orr.w	r5, r3, #1069547520	; 0x3fc00000
 80067d8:	6031      	str	r1, [r6, #0]
 80067da:	f445 1500 	orr.w	r5, r5, #2097152	; 0x200000
 80067de:	ec45 4b10 	vmov	d0, r4, r5
 80067e2:	bd70      	pop	{r4, r5, r6, pc}
 80067e4:	7fefffff 	.word	0x7fefffff
 80067e8:	7ff00000 	.word	0x7ff00000
 80067ec:	43500000 	.word	0x43500000

080067f0 <__register_exitproc>:
 80067f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80067f4:	f8df a074 	ldr.w	sl, [pc, #116]	; 800686c <__register_exitproc+0x7c>
 80067f8:	4606      	mov	r6, r0
 80067fa:	f8da 0000 	ldr.w	r0, [sl]
 80067fe:	4698      	mov	r8, r3
 8006800:	460f      	mov	r7, r1
 8006802:	4691      	mov	r9, r2
 8006804:	f7fe fb66 	bl	8004ed4 <__retarget_lock_acquire_recursive>
 8006808:	4b16      	ldr	r3, [pc, #88]	; (8006864 <__register_exitproc+0x74>)
 800680a:	681c      	ldr	r4, [r3, #0]
 800680c:	b90c      	cbnz	r4, 8006812 <__register_exitproc+0x22>
 800680e:	4c16      	ldr	r4, [pc, #88]	; (8006868 <__register_exitproc+0x78>)
 8006810:	601c      	str	r4, [r3, #0]
 8006812:	6865      	ldr	r5, [r4, #4]
 8006814:	f8da 0000 	ldr.w	r0, [sl]
 8006818:	2d1f      	cmp	r5, #31
 800681a:	dd05      	ble.n	8006828 <__register_exitproc+0x38>
 800681c:	f7fe fb5b 	bl	8004ed6 <__retarget_lock_release_recursive>
 8006820:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006824:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006828:	b19e      	cbz	r6, 8006852 <__register_exitproc+0x62>
 800682a:	eb04 0185 	add.w	r1, r4, r5, lsl #2
 800682e:	2201      	movs	r2, #1
 8006830:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
 8006834:	f8d4 3188 	ldr.w	r3, [r4, #392]	; 0x188
 8006838:	40aa      	lsls	r2, r5
 800683a:	4313      	orrs	r3, r2
 800683c:	f8c4 3188 	str.w	r3, [r4, #392]	; 0x188
 8006840:	2e02      	cmp	r6, #2
 8006842:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
 8006846:	bf02      	ittt	eq
 8006848:	f8d4 318c 	ldreq.w	r3, [r4, #396]	; 0x18c
 800684c:	4313      	orreq	r3, r2
 800684e:	f8c4 318c 	streq.w	r3, [r4, #396]	; 0x18c
 8006852:	1c6b      	adds	r3, r5, #1
 8006854:	3502      	adds	r5, #2
 8006856:	6063      	str	r3, [r4, #4]
 8006858:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
 800685c:	f7fe fb3b 	bl	8004ed6 <__retarget_lock_release_recursive>
 8006860:	2000      	movs	r0, #0
 8006862:	e7df      	b.n	8006824 <__register_exitproc+0x34>
 8006864:	20000b80 	.word	0x20000b80
 8006868:	20000b84 	.word	0x20000b84
 800686c:	2000054c 	.word	0x2000054c

08006870 <quorem>:
 8006870:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006874:	6903      	ldr	r3, [r0, #16]
 8006876:	690c      	ldr	r4, [r1, #16]
 8006878:	42a3      	cmp	r3, r4
 800687a:	4607      	mov	r7, r0
 800687c:	db7e      	blt.n	800697c <quorem+0x10c>
 800687e:	3c01      	subs	r4, #1
 8006880:	f101 0814 	add.w	r8, r1, #20
 8006884:	f100 0514 	add.w	r5, r0, #20
 8006888:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800688c:	9301      	str	r3, [sp, #4]
 800688e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006892:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006896:	3301      	adds	r3, #1
 8006898:	429a      	cmp	r2, r3
 800689a:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800689e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80068a2:	fbb2 f6f3 	udiv	r6, r2, r3
 80068a6:	d331      	bcc.n	800690c <quorem+0x9c>
 80068a8:	f04f 0e00 	mov.w	lr, #0
 80068ac:	4640      	mov	r0, r8
 80068ae:	46ac      	mov	ip, r5
 80068b0:	46f2      	mov	sl, lr
 80068b2:	f850 2b04 	ldr.w	r2, [r0], #4
 80068b6:	b293      	uxth	r3, r2
 80068b8:	fb06 e303 	mla	r3, r6, r3, lr
 80068bc:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80068c0:	0c1a      	lsrs	r2, r3, #16
 80068c2:	b29b      	uxth	r3, r3
 80068c4:	ebaa 0303 	sub.w	r3, sl, r3
 80068c8:	f8dc a000 	ldr.w	sl, [ip]
 80068cc:	fa13 f38a 	uxtah	r3, r3, sl
 80068d0:	fb06 220e 	mla	r2, r6, lr, r2
 80068d4:	9300      	str	r3, [sp, #0]
 80068d6:	9b00      	ldr	r3, [sp, #0]
 80068d8:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80068dc:	b292      	uxth	r2, r2
 80068de:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80068e2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80068e6:	f8bd 3000 	ldrh.w	r3, [sp]
 80068ea:	4581      	cmp	r9, r0
 80068ec:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80068f0:	f84c 3b04 	str.w	r3, [ip], #4
 80068f4:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80068f8:	d2db      	bcs.n	80068b2 <quorem+0x42>
 80068fa:	f855 300b 	ldr.w	r3, [r5, fp]
 80068fe:	b92b      	cbnz	r3, 800690c <quorem+0x9c>
 8006900:	9b01      	ldr	r3, [sp, #4]
 8006902:	3b04      	subs	r3, #4
 8006904:	429d      	cmp	r5, r3
 8006906:	461a      	mov	r2, r3
 8006908:	d32c      	bcc.n	8006964 <quorem+0xf4>
 800690a:	613c      	str	r4, [r7, #16]
 800690c:	4638      	mov	r0, r7
 800690e:	f001 f83b 	bl	8007988 <__mcmp>
 8006912:	2800      	cmp	r0, #0
 8006914:	db22      	blt.n	800695c <quorem+0xec>
 8006916:	3601      	adds	r6, #1
 8006918:	4629      	mov	r1, r5
 800691a:	2000      	movs	r0, #0
 800691c:	f858 2b04 	ldr.w	r2, [r8], #4
 8006920:	f8d1 c000 	ldr.w	ip, [r1]
 8006924:	b293      	uxth	r3, r2
 8006926:	1ac3      	subs	r3, r0, r3
 8006928:	0c12      	lsrs	r2, r2, #16
 800692a:	fa13 f38c 	uxtah	r3, r3, ip
 800692e:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8006932:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006936:	b29b      	uxth	r3, r3
 8006938:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800693c:	45c1      	cmp	r9, r8
 800693e:	f841 3b04 	str.w	r3, [r1], #4
 8006942:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006946:	d2e9      	bcs.n	800691c <quorem+0xac>
 8006948:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800694c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006950:	b922      	cbnz	r2, 800695c <quorem+0xec>
 8006952:	3b04      	subs	r3, #4
 8006954:	429d      	cmp	r5, r3
 8006956:	461a      	mov	r2, r3
 8006958:	d30a      	bcc.n	8006970 <quorem+0x100>
 800695a:	613c      	str	r4, [r7, #16]
 800695c:	4630      	mov	r0, r6
 800695e:	b003      	add	sp, #12
 8006960:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006964:	6812      	ldr	r2, [r2, #0]
 8006966:	3b04      	subs	r3, #4
 8006968:	2a00      	cmp	r2, #0
 800696a:	d1ce      	bne.n	800690a <quorem+0x9a>
 800696c:	3c01      	subs	r4, #1
 800696e:	e7c9      	b.n	8006904 <quorem+0x94>
 8006970:	6812      	ldr	r2, [r2, #0]
 8006972:	3b04      	subs	r3, #4
 8006974:	2a00      	cmp	r2, #0
 8006976:	d1f0      	bne.n	800695a <quorem+0xea>
 8006978:	3c01      	subs	r4, #1
 800697a:	e7eb      	b.n	8006954 <quorem+0xe4>
 800697c:	2000      	movs	r0, #0
 800697e:	e7ee      	b.n	800695e <quorem+0xee>

08006980 <_dtoa_r>:
 8006980:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006984:	ed2d 8b04 	vpush	{d8-d9}
 8006988:	b093      	sub	sp, #76	; 0x4c
 800698a:	ed8d 0b02 	vstr	d0, [sp, #8]
 800698e:	9107      	str	r1, [sp, #28]
 8006990:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8006992:	9d20      	ldr	r5, [sp, #128]	; 0x80
 8006994:	920a      	str	r2, [sp, #40]	; 0x28
 8006996:	ec57 6b10 	vmov	r6, r7, d0
 800699a:	4604      	mov	r4, r0
 800699c:	930d      	str	r3, [sp, #52]	; 0x34
 800699e:	b141      	cbz	r1, 80069b2 <_dtoa_r+0x32>
 80069a0:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80069a2:	604a      	str	r2, [r1, #4]
 80069a4:	2301      	movs	r3, #1
 80069a6:	4093      	lsls	r3, r2
 80069a8:	608b      	str	r3, [r1, #8]
 80069aa:	f000 fde4 	bl	8007576 <_Bfree>
 80069ae:	2300      	movs	r3, #0
 80069b0:	63a3      	str	r3, [r4, #56]	; 0x38
 80069b2:	1e3b      	subs	r3, r7, #0
 80069b4:	bfb9      	ittee	lt
 80069b6:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80069ba:	9303      	strlt	r3, [sp, #12]
 80069bc:	2300      	movge	r3, #0
 80069be:	602b      	strge	r3, [r5, #0]
 80069c0:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80069c4:	4ba2      	ldr	r3, [pc, #648]	; (8006c50 <_dtoa_r+0x2d0>)
 80069c6:	bfbc      	itt	lt
 80069c8:	2201      	movlt	r2, #1
 80069ca:	602a      	strlt	r2, [r5, #0]
 80069cc:	ea33 0308 	bics.w	r3, r3, r8
 80069d0:	d11b      	bne.n	8006a0a <_dtoa_r+0x8a>
 80069d2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80069d4:	f242 730f 	movw	r3, #9999	; 0x270f
 80069d8:	6013      	str	r3, [r2, #0]
 80069da:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80069de:	4333      	orrs	r3, r6
 80069e0:	f000 858f 	beq.w	8007502 <_dtoa_r+0xb82>
 80069e4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80069e6:	b90b      	cbnz	r3, 80069ec <_dtoa_r+0x6c>
 80069e8:	4b9a      	ldr	r3, [pc, #616]	; (8006c54 <_dtoa_r+0x2d4>)
 80069ea:	e027      	b.n	8006a3c <_dtoa_r+0xbc>
 80069ec:	4b99      	ldr	r3, [pc, #612]	; (8006c54 <_dtoa_r+0x2d4>)
 80069ee:	9300      	str	r3, [sp, #0]
 80069f0:	3303      	adds	r3, #3
 80069f2:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80069f4:	6013      	str	r3, [r2, #0]
 80069f6:	9800      	ldr	r0, [sp, #0]
 80069f8:	b013      	add	sp, #76	; 0x4c
 80069fa:	ecbd 8b04 	vpop	{d8-d9}
 80069fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a02:	4b95      	ldr	r3, [pc, #596]	; (8006c58 <_dtoa_r+0x2d8>)
 8006a04:	9300      	str	r3, [sp, #0]
 8006a06:	3308      	adds	r3, #8
 8006a08:	e7f3      	b.n	80069f2 <_dtoa_r+0x72>
 8006a0a:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006a0e:	2200      	movs	r2, #0
 8006a10:	ec51 0b17 	vmov	r0, r1, d7
 8006a14:	eeb0 8a47 	vmov.f32	s16, s14
 8006a18:	eef0 8a67 	vmov.f32	s17, s15
 8006a1c:	2300      	movs	r3, #0
 8006a1e:	f7fa f87b 	bl	8000b18 <__aeabi_dcmpeq>
 8006a22:	4681      	mov	r9, r0
 8006a24:	b160      	cbz	r0, 8006a40 <_dtoa_r+0xc0>
 8006a26:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006a28:	2301      	movs	r3, #1
 8006a2a:	6013      	str	r3, [r2, #0]
 8006a2c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	f000 8564 	beq.w	80074fc <_dtoa_r+0xb7c>
 8006a34:	4b89      	ldr	r3, [pc, #548]	; (8006c5c <_dtoa_r+0x2dc>)
 8006a36:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006a38:	6013      	str	r3, [r2, #0]
 8006a3a:	3b01      	subs	r3, #1
 8006a3c:	9300      	str	r3, [sp, #0]
 8006a3e:	e7da      	b.n	80069f6 <_dtoa_r+0x76>
 8006a40:	aa10      	add	r2, sp, #64	; 0x40
 8006a42:	a911      	add	r1, sp, #68	; 0x44
 8006a44:	4620      	mov	r0, r4
 8006a46:	eeb0 0a48 	vmov.f32	s0, s16
 8006a4a:	eef0 0a68 	vmov.f32	s1, s17
 8006a4e:	f001 f841 	bl	8007ad4 <__d2b>
 8006a52:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8006a56:	4682      	mov	sl, r0
 8006a58:	2d00      	cmp	r5, #0
 8006a5a:	d07e      	beq.n	8006b5a <_dtoa_r+0x1da>
 8006a5c:	ee18 3a90 	vmov	r3, s17
 8006a60:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006a64:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8006a68:	ec51 0b18 	vmov	r0, r1, d8
 8006a6c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8006a70:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006a74:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8006a78:	4619      	mov	r1, r3
 8006a7a:	2200      	movs	r2, #0
 8006a7c:	4b78      	ldr	r3, [pc, #480]	; (8006c60 <_dtoa_r+0x2e0>)
 8006a7e:	f7f9 fc2b 	bl	80002d8 <__aeabi_dsub>
 8006a82:	a36d      	add	r3, pc, #436	; (adr r3, 8006c38 <_dtoa_r+0x2b8>)
 8006a84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a88:	f7f9 fdde 	bl	8000648 <__aeabi_dmul>
 8006a8c:	a36c      	add	r3, pc, #432	; (adr r3, 8006c40 <_dtoa_r+0x2c0>)
 8006a8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a92:	f7f9 fc23 	bl	80002dc <__adddf3>
 8006a96:	4606      	mov	r6, r0
 8006a98:	4628      	mov	r0, r5
 8006a9a:	460f      	mov	r7, r1
 8006a9c:	f7f9 fd6a 	bl	8000574 <__aeabi_i2d>
 8006aa0:	a369      	add	r3, pc, #420	; (adr r3, 8006c48 <_dtoa_r+0x2c8>)
 8006aa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006aa6:	f7f9 fdcf 	bl	8000648 <__aeabi_dmul>
 8006aaa:	4602      	mov	r2, r0
 8006aac:	460b      	mov	r3, r1
 8006aae:	4630      	mov	r0, r6
 8006ab0:	4639      	mov	r1, r7
 8006ab2:	f7f9 fc13 	bl	80002dc <__adddf3>
 8006ab6:	4606      	mov	r6, r0
 8006ab8:	460f      	mov	r7, r1
 8006aba:	f7fa f875 	bl	8000ba8 <__aeabi_d2iz>
 8006abe:	2200      	movs	r2, #0
 8006ac0:	4683      	mov	fp, r0
 8006ac2:	2300      	movs	r3, #0
 8006ac4:	4630      	mov	r0, r6
 8006ac6:	4639      	mov	r1, r7
 8006ac8:	f7fa f830 	bl	8000b2c <__aeabi_dcmplt>
 8006acc:	b148      	cbz	r0, 8006ae2 <_dtoa_r+0x162>
 8006ace:	4658      	mov	r0, fp
 8006ad0:	f7f9 fd50 	bl	8000574 <__aeabi_i2d>
 8006ad4:	4632      	mov	r2, r6
 8006ad6:	463b      	mov	r3, r7
 8006ad8:	f7fa f81e 	bl	8000b18 <__aeabi_dcmpeq>
 8006adc:	b908      	cbnz	r0, 8006ae2 <_dtoa_r+0x162>
 8006ade:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8006ae2:	f1bb 0f16 	cmp.w	fp, #22
 8006ae6:	d856      	bhi.n	8006b96 <_dtoa_r+0x216>
 8006ae8:	4b5e      	ldr	r3, [pc, #376]	; (8006c64 <_dtoa_r+0x2e4>)
 8006aea:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8006aee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006af2:	ec51 0b18 	vmov	r0, r1, d8
 8006af6:	f7fa f819 	bl	8000b2c <__aeabi_dcmplt>
 8006afa:	2800      	cmp	r0, #0
 8006afc:	d04d      	beq.n	8006b9a <_dtoa_r+0x21a>
 8006afe:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8006b02:	2300      	movs	r3, #0
 8006b04:	930c      	str	r3, [sp, #48]	; 0x30
 8006b06:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006b08:	1b5b      	subs	r3, r3, r5
 8006b0a:	1e5a      	subs	r2, r3, #1
 8006b0c:	bf45      	ittet	mi
 8006b0e:	f1c3 0301 	rsbmi	r3, r3, #1
 8006b12:	9305      	strmi	r3, [sp, #20]
 8006b14:	2300      	movpl	r3, #0
 8006b16:	2300      	movmi	r3, #0
 8006b18:	9206      	str	r2, [sp, #24]
 8006b1a:	bf54      	ite	pl
 8006b1c:	9305      	strpl	r3, [sp, #20]
 8006b1e:	9306      	strmi	r3, [sp, #24]
 8006b20:	f1bb 0f00 	cmp.w	fp, #0
 8006b24:	db3b      	blt.n	8006b9e <_dtoa_r+0x21e>
 8006b26:	9b06      	ldr	r3, [sp, #24]
 8006b28:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8006b2c:	445b      	add	r3, fp
 8006b2e:	9306      	str	r3, [sp, #24]
 8006b30:	2300      	movs	r3, #0
 8006b32:	9308      	str	r3, [sp, #32]
 8006b34:	9b07      	ldr	r3, [sp, #28]
 8006b36:	2b09      	cmp	r3, #9
 8006b38:	d868      	bhi.n	8006c0c <_dtoa_r+0x28c>
 8006b3a:	2b05      	cmp	r3, #5
 8006b3c:	bfc4      	itt	gt
 8006b3e:	3b04      	subgt	r3, #4
 8006b40:	9307      	strgt	r3, [sp, #28]
 8006b42:	9b07      	ldr	r3, [sp, #28]
 8006b44:	f1a3 0302 	sub.w	r3, r3, #2
 8006b48:	bfcc      	ite	gt
 8006b4a:	2500      	movgt	r5, #0
 8006b4c:	2501      	movle	r5, #1
 8006b4e:	2b03      	cmp	r3, #3
 8006b50:	d867      	bhi.n	8006c22 <_dtoa_r+0x2a2>
 8006b52:	e8df f003 	tbb	[pc, r3]
 8006b56:	3b2e      	.short	0x3b2e
 8006b58:	5939      	.short	0x5939
 8006b5a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8006b5e:	441d      	add	r5, r3
 8006b60:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8006b64:	2b20      	cmp	r3, #32
 8006b66:	bfc1      	itttt	gt
 8006b68:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006b6c:	fa08 f803 	lslgt.w	r8, r8, r3
 8006b70:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8006b74:	fa26 f303 	lsrgt.w	r3, r6, r3
 8006b78:	bfd6      	itet	le
 8006b7a:	f1c3 0320 	rsble	r3, r3, #32
 8006b7e:	ea48 0003 	orrgt.w	r0, r8, r3
 8006b82:	fa06 f003 	lslle.w	r0, r6, r3
 8006b86:	f7f9 fce5 	bl	8000554 <__aeabi_ui2d>
 8006b8a:	2201      	movs	r2, #1
 8006b8c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8006b90:	3d01      	subs	r5, #1
 8006b92:	920e      	str	r2, [sp, #56]	; 0x38
 8006b94:	e770      	b.n	8006a78 <_dtoa_r+0xf8>
 8006b96:	2301      	movs	r3, #1
 8006b98:	e7b4      	b.n	8006b04 <_dtoa_r+0x184>
 8006b9a:	900c      	str	r0, [sp, #48]	; 0x30
 8006b9c:	e7b3      	b.n	8006b06 <_dtoa_r+0x186>
 8006b9e:	9b05      	ldr	r3, [sp, #20]
 8006ba0:	eba3 030b 	sub.w	r3, r3, fp
 8006ba4:	9305      	str	r3, [sp, #20]
 8006ba6:	f1cb 0300 	rsb	r3, fp, #0
 8006baa:	9308      	str	r3, [sp, #32]
 8006bac:	2300      	movs	r3, #0
 8006bae:	930b      	str	r3, [sp, #44]	; 0x2c
 8006bb0:	e7c0      	b.n	8006b34 <_dtoa_r+0x1b4>
 8006bb2:	2300      	movs	r3, #0
 8006bb4:	9309      	str	r3, [sp, #36]	; 0x24
 8006bb6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	dc35      	bgt.n	8006c28 <_dtoa_r+0x2a8>
 8006bbc:	2301      	movs	r3, #1
 8006bbe:	9301      	str	r3, [sp, #4]
 8006bc0:	9304      	str	r3, [sp, #16]
 8006bc2:	461a      	mov	r2, r3
 8006bc4:	920a      	str	r2, [sp, #40]	; 0x28
 8006bc6:	e00b      	b.n	8006be0 <_dtoa_r+0x260>
 8006bc8:	2301      	movs	r3, #1
 8006bca:	e7f3      	b.n	8006bb4 <_dtoa_r+0x234>
 8006bcc:	2300      	movs	r3, #0
 8006bce:	9309      	str	r3, [sp, #36]	; 0x24
 8006bd0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006bd2:	445b      	add	r3, fp
 8006bd4:	9301      	str	r3, [sp, #4]
 8006bd6:	3301      	adds	r3, #1
 8006bd8:	2b01      	cmp	r3, #1
 8006bda:	9304      	str	r3, [sp, #16]
 8006bdc:	bfb8      	it	lt
 8006bde:	2301      	movlt	r3, #1
 8006be0:	2100      	movs	r1, #0
 8006be2:	2204      	movs	r2, #4
 8006be4:	f102 0014 	add.w	r0, r2, #20
 8006be8:	4298      	cmp	r0, r3
 8006bea:	d921      	bls.n	8006c30 <_dtoa_r+0x2b0>
 8006bec:	63e1      	str	r1, [r4, #60]	; 0x3c
 8006bee:	4620      	mov	r0, r4
 8006bf0:	f000 fc9c 	bl	800752c <_Balloc>
 8006bf4:	9000      	str	r0, [sp, #0]
 8006bf6:	2800      	cmp	r0, #0
 8006bf8:	d13a      	bne.n	8006c70 <_dtoa_r+0x2f0>
 8006bfa:	4b1b      	ldr	r3, [pc, #108]	; (8006c68 <_dtoa_r+0x2e8>)
 8006bfc:	4602      	mov	r2, r0
 8006bfe:	f240 11af 	movw	r1, #431	; 0x1af
 8006c02:	481a      	ldr	r0, [pc, #104]	; (8006c6c <_dtoa_r+0x2ec>)
 8006c04:	f001 f86c 	bl	8007ce0 <__assert_func>
 8006c08:	2301      	movs	r3, #1
 8006c0a:	e7e0      	b.n	8006bce <_dtoa_r+0x24e>
 8006c0c:	2501      	movs	r5, #1
 8006c0e:	2300      	movs	r3, #0
 8006c10:	9307      	str	r3, [sp, #28]
 8006c12:	9509      	str	r5, [sp, #36]	; 0x24
 8006c14:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006c18:	9301      	str	r3, [sp, #4]
 8006c1a:	9304      	str	r3, [sp, #16]
 8006c1c:	2200      	movs	r2, #0
 8006c1e:	2312      	movs	r3, #18
 8006c20:	e7d0      	b.n	8006bc4 <_dtoa_r+0x244>
 8006c22:	2301      	movs	r3, #1
 8006c24:	9309      	str	r3, [sp, #36]	; 0x24
 8006c26:	e7f5      	b.n	8006c14 <_dtoa_r+0x294>
 8006c28:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006c2a:	9301      	str	r3, [sp, #4]
 8006c2c:	9304      	str	r3, [sp, #16]
 8006c2e:	e7d7      	b.n	8006be0 <_dtoa_r+0x260>
 8006c30:	3101      	adds	r1, #1
 8006c32:	0052      	lsls	r2, r2, #1
 8006c34:	e7d6      	b.n	8006be4 <_dtoa_r+0x264>
 8006c36:	bf00      	nop
 8006c38:	636f4361 	.word	0x636f4361
 8006c3c:	3fd287a7 	.word	0x3fd287a7
 8006c40:	8b60c8b3 	.word	0x8b60c8b3
 8006c44:	3fc68a28 	.word	0x3fc68a28
 8006c48:	509f79fb 	.word	0x509f79fb
 8006c4c:	3fd34413 	.word	0x3fd34413
 8006c50:	7ff00000 	.word	0x7ff00000
 8006c54:	080092c5 	.word	0x080092c5
 8006c58:	080092bc 	.word	0x080092bc
 8006c5c:	0800929b 	.word	0x0800929b
 8006c60:	3ff80000 	.word	0x3ff80000
 8006c64:	080093b8 	.word	0x080093b8
 8006c68:	080092c9 	.word	0x080092c9
 8006c6c:	080092da 	.word	0x080092da
 8006c70:	9b00      	ldr	r3, [sp, #0]
 8006c72:	63a3      	str	r3, [r4, #56]	; 0x38
 8006c74:	9b04      	ldr	r3, [sp, #16]
 8006c76:	2b0e      	cmp	r3, #14
 8006c78:	f200 80a8 	bhi.w	8006dcc <_dtoa_r+0x44c>
 8006c7c:	2d00      	cmp	r5, #0
 8006c7e:	f000 80a5 	beq.w	8006dcc <_dtoa_r+0x44c>
 8006c82:	f1bb 0f00 	cmp.w	fp, #0
 8006c86:	dd38      	ble.n	8006cfa <_dtoa_r+0x37a>
 8006c88:	4bbf      	ldr	r3, [pc, #764]	; (8006f88 <_dtoa_r+0x608>)
 8006c8a:	f00b 020f 	and.w	r2, fp, #15
 8006c8e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006c92:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8006c96:	e9d3 6700 	ldrd	r6, r7, [r3]
 8006c9a:	ea4f 182b 	mov.w	r8, fp, asr #4
 8006c9e:	d019      	beq.n	8006cd4 <_dtoa_r+0x354>
 8006ca0:	4bba      	ldr	r3, [pc, #744]	; (8006f8c <_dtoa_r+0x60c>)
 8006ca2:	ec51 0b18 	vmov	r0, r1, d8
 8006ca6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006caa:	f7f9 fdf7 	bl	800089c <__aeabi_ddiv>
 8006cae:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006cb2:	f008 080f 	and.w	r8, r8, #15
 8006cb6:	2503      	movs	r5, #3
 8006cb8:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 8006f8c <_dtoa_r+0x60c>
 8006cbc:	f1b8 0f00 	cmp.w	r8, #0
 8006cc0:	d10a      	bne.n	8006cd8 <_dtoa_r+0x358>
 8006cc2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006cc6:	4632      	mov	r2, r6
 8006cc8:	463b      	mov	r3, r7
 8006cca:	f7f9 fde7 	bl	800089c <__aeabi_ddiv>
 8006cce:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006cd2:	e02b      	b.n	8006d2c <_dtoa_r+0x3ac>
 8006cd4:	2502      	movs	r5, #2
 8006cd6:	e7ef      	b.n	8006cb8 <_dtoa_r+0x338>
 8006cd8:	f018 0f01 	tst.w	r8, #1
 8006cdc:	d008      	beq.n	8006cf0 <_dtoa_r+0x370>
 8006cde:	4630      	mov	r0, r6
 8006ce0:	4639      	mov	r1, r7
 8006ce2:	e9d9 2300 	ldrd	r2, r3, [r9]
 8006ce6:	f7f9 fcaf 	bl	8000648 <__aeabi_dmul>
 8006cea:	3501      	adds	r5, #1
 8006cec:	4606      	mov	r6, r0
 8006cee:	460f      	mov	r7, r1
 8006cf0:	ea4f 0868 	mov.w	r8, r8, asr #1
 8006cf4:	f109 0908 	add.w	r9, r9, #8
 8006cf8:	e7e0      	b.n	8006cbc <_dtoa_r+0x33c>
 8006cfa:	f000 809f 	beq.w	8006e3c <_dtoa_r+0x4bc>
 8006cfe:	f1cb 0600 	rsb	r6, fp, #0
 8006d02:	4ba1      	ldr	r3, [pc, #644]	; (8006f88 <_dtoa_r+0x608>)
 8006d04:	4fa1      	ldr	r7, [pc, #644]	; (8006f8c <_dtoa_r+0x60c>)
 8006d06:	f006 020f 	and.w	r2, r6, #15
 8006d0a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006d0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d12:	ec51 0b18 	vmov	r0, r1, d8
 8006d16:	f7f9 fc97 	bl	8000648 <__aeabi_dmul>
 8006d1a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006d1e:	1136      	asrs	r6, r6, #4
 8006d20:	2300      	movs	r3, #0
 8006d22:	2502      	movs	r5, #2
 8006d24:	2e00      	cmp	r6, #0
 8006d26:	d17e      	bne.n	8006e26 <_dtoa_r+0x4a6>
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d1d0      	bne.n	8006cce <_dtoa_r+0x34e>
 8006d2c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006d2e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	f000 8084 	beq.w	8006e40 <_dtoa_r+0x4c0>
 8006d38:	4b95      	ldr	r3, [pc, #596]	; (8006f90 <_dtoa_r+0x610>)
 8006d3a:	2200      	movs	r2, #0
 8006d3c:	4640      	mov	r0, r8
 8006d3e:	4649      	mov	r1, r9
 8006d40:	f7f9 fef4 	bl	8000b2c <__aeabi_dcmplt>
 8006d44:	2800      	cmp	r0, #0
 8006d46:	d07b      	beq.n	8006e40 <_dtoa_r+0x4c0>
 8006d48:	9b04      	ldr	r3, [sp, #16]
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d078      	beq.n	8006e40 <_dtoa_r+0x4c0>
 8006d4e:	9b01      	ldr	r3, [sp, #4]
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	dd39      	ble.n	8006dc8 <_dtoa_r+0x448>
 8006d54:	4b8f      	ldr	r3, [pc, #572]	; (8006f94 <_dtoa_r+0x614>)
 8006d56:	2200      	movs	r2, #0
 8006d58:	4640      	mov	r0, r8
 8006d5a:	4649      	mov	r1, r9
 8006d5c:	f7f9 fc74 	bl	8000648 <__aeabi_dmul>
 8006d60:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006d64:	9e01      	ldr	r6, [sp, #4]
 8006d66:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 8006d6a:	3501      	adds	r5, #1
 8006d6c:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8006d70:	4628      	mov	r0, r5
 8006d72:	f7f9 fbff 	bl	8000574 <__aeabi_i2d>
 8006d76:	4642      	mov	r2, r8
 8006d78:	464b      	mov	r3, r9
 8006d7a:	f7f9 fc65 	bl	8000648 <__aeabi_dmul>
 8006d7e:	4b86      	ldr	r3, [pc, #536]	; (8006f98 <_dtoa_r+0x618>)
 8006d80:	2200      	movs	r2, #0
 8006d82:	f7f9 faab 	bl	80002dc <__adddf3>
 8006d86:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8006d8a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006d8e:	9303      	str	r3, [sp, #12]
 8006d90:	2e00      	cmp	r6, #0
 8006d92:	d158      	bne.n	8006e46 <_dtoa_r+0x4c6>
 8006d94:	4b81      	ldr	r3, [pc, #516]	; (8006f9c <_dtoa_r+0x61c>)
 8006d96:	2200      	movs	r2, #0
 8006d98:	4640      	mov	r0, r8
 8006d9a:	4649      	mov	r1, r9
 8006d9c:	f7f9 fa9c 	bl	80002d8 <__aeabi_dsub>
 8006da0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006da4:	4680      	mov	r8, r0
 8006da6:	4689      	mov	r9, r1
 8006da8:	f7f9 fede 	bl	8000b68 <__aeabi_dcmpgt>
 8006dac:	2800      	cmp	r0, #0
 8006dae:	f040 8295 	bne.w	80072dc <_dtoa_r+0x95c>
 8006db2:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8006db6:	4640      	mov	r0, r8
 8006db8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006dbc:	4649      	mov	r1, r9
 8006dbe:	f7f9 feb5 	bl	8000b2c <__aeabi_dcmplt>
 8006dc2:	2800      	cmp	r0, #0
 8006dc4:	f040 8288 	bne.w	80072d8 <_dtoa_r+0x958>
 8006dc8:	ed8d 8b02 	vstr	d8, [sp, #8]
 8006dcc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	f2c0 814d 	blt.w	800706e <_dtoa_r+0x6ee>
 8006dd4:	f1bb 0f0e 	cmp.w	fp, #14
 8006dd8:	f300 8149 	bgt.w	800706e <_dtoa_r+0x6ee>
 8006ddc:	4b6a      	ldr	r3, [pc, #424]	; (8006f88 <_dtoa_r+0x608>)
 8006dde:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8006de2:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006de6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	f280 80db 	bge.w	8006fa4 <_dtoa_r+0x624>
 8006dee:	9b04      	ldr	r3, [sp, #16]
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	f300 80d7 	bgt.w	8006fa4 <_dtoa_r+0x624>
 8006df6:	f040 826e 	bne.w	80072d6 <_dtoa_r+0x956>
 8006dfa:	4b68      	ldr	r3, [pc, #416]	; (8006f9c <_dtoa_r+0x61c>)
 8006dfc:	2200      	movs	r2, #0
 8006dfe:	4640      	mov	r0, r8
 8006e00:	4649      	mov	r1, r9
 8006e02:	f7f9 fc21 	bl	8000648 <__aeabi_dmul>
 8006e06:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006e0a:	f7f9 fea3 	bl	8000b54 <__aeabi_dcmpge>
 8006e0e:	9e04      	ldr	r6, [sp, #16]
 8006e10:	4637      	mov	r7, r6
 8006e12:	2800      	cmp	r0, #0
 8006e14:	f040 8244 	bne.w	80072a0 <_dtoa_r+0x920>
 8006e18:	9d00      	ldr	r5, [sp, #0]
 8006e1a:	2331      	movs	r3, #49	; 0x31
 8006e1c:	f805 3b01 	strb.w	r3, [r5], #1
 8006e20:	f10b 0b01 	add.w	fp, fp, #1
 8006e24:	e240      	b.n	80072a8 <_dtoa_r+0x928>
 8006e26:	07f2      	lsls	r2, r6, #31
 8006e28:	d505      	bpl.n	8006e36 <_dtoa_r+0x4b6>
 8006e2a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006e2e:	f7f9 fc0b 	bl	8000648 <__aeabi_dmul>
 8006e32:	3501      	adds	r5, #1
 8006e34:	2301      	movs	r3, #1
 8006e36:	1076      	asrs	r6, r6, #1
 8006e38:	3708      	adds	r7, #8
 8006e3a:	e773      	b.n	8006d24 <_dtoa_r+0x3a4>
 8006e3c:	2502      	movs	r5, #2
 8006e3e:	e775      	b.n	8006d2c <_dtoa_r+0x3ac>
 8006e40:	9e04      	ldr	r6, [sp, #16]
 8006e42:	465f      	mov	r7, fp
 8006e44:	e792      	b.n	8006d6c <_dtoa_r+0x3ec>
 8006e46:	9900      	ldr	r1, [sp, #0]
 8006e48:	4b4f      	ldr	r3, [pc, #316]	; (8006f88 <_dtoa_r+0x608>)
 8006e4a:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006e4e:	4431      	add	r1, r6
 8006e50:	9102      	str	r1, [sp, #8]
 8006e52:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006e54:	eeb0 9a47 	vmov.f32	s18, s14
 8006e58:	eef0 9a67 	vmov.f32	s19, s15
 8006e5c:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8006e60:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006e64:	2900      	cmp	r1, #0
 8006e66:	d044      	beq.n	8006ef2 <_dtoa_r+0x572>
 8006e68:	494d      	ldr	r1, [pc, #308]	; (8006fa0 <_dtoa_r+0x620>)
 8006e6a:	2000      	movs	r0, #0
 8006e6c:	f7f9 fd16 	bl	800089c <__aeabi_ddiv>
 8006e70:	ec53 2b19 	vmov	r2, r3, d9
 8006e74:	f7f9 fa30 	bl	80002d8 <__aeabi_dsub>
 8006e78:	9d00      	ldr	r5, [sp, #0]
 8006e7a:	ec41 0b19 	vmov	d9, r0, r1
 8006e7e:	4649      	mov	r1, r9
 8006e80:	4640      	mov	r0, r8
 8006e82:	f7f9 fe91 	bl	8000ba8 <__aeabi_d2iz>
 8006e86:	4606      	mov	r6, r0
 8006e88:	f7f9 fb74 	bl	8000574 <__aeabi_i2d>
 8006e8c:	4602      	mov	r2, r0
 8006e8e:	460b      	mov	r3, r1
 8006e90:	4640      	mov	r0, r8
 8006e92:	4649      	mov	r1, r9
 8006e94:	f7f9 fa20 	bl	80002d8 <__aeabi_dsub>
 8006e98:	3630      	adds	r6, #48	; 0x30
 8006e9a:	f805 6b01 	strb.w	r6, [r5], #1
 8006e9e:	ec53 2b19 	vmov	r2, r3, d9
 8006ea2:	4680      	mov	r8, r0
 8006ea4:	4689      	mov	r9, r1
 8006ea6:	f7f9 fe41 	bl	8000b2c <__aeabi_dcmplt>
 8006eaa:	2800      	cmp	r0, #0
 8006eac:	d164      	bne.n	8006f78 <_dtoa_r+0x5f8>
 8006eae:	4642      	mov	r2, r8
 8006eb0:	464b      	mov	r3, r9
 8006eb2:	4937      	ldr	r1, [pc, #220]	; (8006f90 <_dtoa_r+0x610>)
 8006eb4:	2000      	movs	r0, #0
 8006eb6:	f7f9 fa0f 	bl	80002d8 <__aeabi_dsub>
 8006eba:	ec53 2b19 	vmov	r2, r3, d9
 8006ebe:	f7f9 fe35 	bl	8000b2c <__aeabi_dcmplt>
 8006ec2:	2800      	cmp	r0, #0
 8006ec4:	f040 80b5 	bne.w	8007032 <_dtoa_r+0x6b2>
 8006ec8:	9b02      	ldr	r3, [sp, #8]
 8006eca:	429d      	cmp	r5, r3
 8006ecc:	f43f af7c 	beq.w	8006dc8 <_dtoa_r+0x448>
 8006ed0:	4b30      	ldr	r3, [pc, #192]	; (8006f94 <_dtoa_r+0x614>)
 8006ed2:	ec51 0b19 	vmov	r0, r1, d9
 8006ed6:	2200      	movs	r2, #0
 8006ed8:	f7f9 fbb6 	bl	8000648 <__aeabi_dmul>
 8006edc:	4b2d      	ldr	r3, [pc, #180]	; (8006f94 <_dtoa_r+0x614>)
 8006ede:	ec41 0b19 	vmov	d9, r0, r1
 8006ee2:	2200      	movs	r2, #0
 8006ee4:	4640      	mov	r0, r8
 8006ee6:	4649      	mov	r1, r9
 8006ee8:	f7f9 fbae 	bl	8000648 <__aeabi_dmul>
 8006eec:	4680      	mov	r8, r0
 8006eee:	4689      	mov	r9, r1
 8006ef0:	e7c5      	b.n	8006e7e <_dtoa_r+0x4fe>
 8006ef2:	ec51 0b17 	vmov	r0, r1, d7
 8006ef6:	f7f9 fba7 	bl	8000648 <__aeabi_dmul>
 8006efa:	9b02      	ldr	r3, [sp, #8]
 8006efc:	9d00      	ldr	r5, [sp, #0]
 8006efe:	930f      	str	r3, [sp, #60]	; 0x3c
 8006f00:	ec41 0b19 	vmov	d9, r0, r1
 8006f04:	4649      	mov	r1, r9
 8006f06:	4640      	mov	r0, r8
 8006f08:	f7f9 fe4e 	bl	8000ba8 <__aeabi_d2iz>
 8006f0c:	4606      	mov	r6, r0
 8006f0e:	f7f9 fb31 	bl	8000574 <__aeabi_i2d>
 8006f12:	3630      	adds	r6, #48	; 0x30
 8006f14:	4602      	mov	r2, r0
 8006f16:	460b      	mov	r3, r1
 8006f18:	4640      	mov	r0, r8
 8006f1a:	4649      	mov	r1, r9
 8006f1c:	f7f9 f9dc 	bl	80002d8 <__aeabi_dsub>
 8006f20:	f805 6b01 	strb.w	r6, [r5], #1
 8006f24:	9b02      	ldr	r3, [sp, #8]
 8006f26:	429d      	cmp	r5, r3
 8006f28:	4680      	mov	r8, r0
 8006f2a:	4689      	mov	r9, r1
 8006f2c:	f04f 0200 	mov.w	r2, #0
 8006f30:	d124      	bne.n	8006f7c <_dtoa_r+0x5fc>
 8006f32:	4b1b      	ldr	r3, [pc, #108]	; (8006fa0 <_dtoa_r+0x620>)
 8006f34:	ec51 0b19 	vmov	r0, r1, d9
 8006f38:	f7f9 f9d0 	bl	80002dc <__adddf3>
 8006f3c:	4602      	mov	r2, r0
 8006f3e:	460b      	mov	r3, r1
 8006f40:	4640      	mov	r0, r8
 8006f42:	4649      	mov	r1, r9
 8006f44:	f7f9 fe10 	bl	8000b68 <__aeabi_dcmpgt>
 8006f48:	2800      	cmp	r0, #0
 8006f4a:	d172      	bne.n	8007032 <_dtoa_r+0x6b2>
 8006f4c:	ec53 2b19 	vmov	r2, r3, d9
 8006f50:	4913      	ldr	r1, [pc, #76]	; (8006fa0 <_dtoa_r+0x620>)
 8006f52:	2000      	movs	r0, #0
 8006f54:	f7f9 f9c0 	bl	80002d8 <__aeabi_dsub>
 8006f58:	4602      	mov	r2, r0
 8006f5a:	460b      	mov	r3, r1
 8006f5c:	4640      	mov	r0, r8
 8006f5e:	4649      	mov	r1, r9
 8006f60:	f7f9 fde4 	bl	8000b2c <__aeabi_dcmplt>
 8006f64:	2800      	cmp	r0, #0
 8006f66:	f43f af2f 	beq.w	8006dc8 <_dtoa_r+0x448>
 8006f6a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8006f6c:	1e6b      	subs	r3, r5, #1
 8006f6e:	930f      	str	r3, [sp, #60]	; 0x3c
 8006f70:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006f74:	2b30      	cmp	r3, #48	; 0x30
 8006f76:	d0f8      	beq.n	8006f6a <_dtoa_r+0x5ea>
 8006f78:	46bb      	mov	fp, r7
 8006f7a:	e049      	b.n	8007010 <_dtoa_r+0x690>
 8006f7c:	4b05      	ldr	r3, [pc, #20]	; (8006f94 <_dtoa_r+0x614>)
 8006f7e:	f7f9 fb63 	bl	8000648 <__aeabi_dmul>
 8006f82:	4680      	mov	r8, r0
 8006f84:	4689      	mov	r9, r1
 8006f86:	e7bd      	b.n	8006f04 <_dtoa_r+0x584>
 8006f88:	080093b8 	.word	0x080093b8
 8006f8c:	08009390 	.word	0x08009390
 8006f90:	3ff00000 	.word	0x3ff00000
 8006f94:	40240000 	.word	0x40240000
 8006f98:	401c0000 	.word	0x401c0000
 8006f9c:	40140000 	.word	0x40140000
 8006fa0:	3fe00000 	.word	0x3fe00000
 8006fa4:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006fa8:	9d00      	ldr	r5, [sp, #0]
 8006faa:	4642      	mov	r2, r8
 8006fac:	464b      	mov	r3, r9
 8006fae:	4630      	mov	r0, r6
 8006fb0:	4639      	mov	r1, r7
 8006fb2:	f7f9 fc73 	bl	800089c <__aeabi_ddiv>
 8006fb6:	f7f9 fdf7 	bl	8000ba8 <__aeabi_d2iz>
 8006fba:	9001      	str	r0, [sp, #4]
 8006fbc:	f7f9 fada 	bl	8000574 <__aeabi_i2d>
 8006fc0:	4642      	mov	r2, r8
 8006fc2:	464b      	mov	r3, r9
 8006fc4:	f7f9 fb40 	bl	8000648 <__aeabi_dmul>
 8006fc8:	4602      	mov	r2, r0
 8006fca:	460b      	mov	r3, r1
 8006fcc:	4630      	mov	r0, r6
 8006fce:	4639      	mov	r1, r7
 8006fd0:	f7f9 f982 	bl	80002d8 <__aeabi_dsub>
 8006fd4:	9e01      	ldr	r6, [sp, #4]
 8006fd6:	9f04      	ldr	r7, [sp, #16]
 8006fd8:	3630      	adds	r6, #48	; 0x30
 8006fda:	f805 6b01 	strb.w	r6, [r5], #1
 8006fde:	9e00      	ldr	r6, [sp, #0]
 8006fe0:	1bae      	subs	r6, r5, r6
 8006fe2:	42b7      	cmp	r7, r6
 8006fe4:	4602      	mov	r2, r0
 8006fe6:	460b      	mov	r3, r1
 8006fe8:	d134      	bne.n	8007054 <_dtoa_r+0x6d4>
 8006fea:	f7f9 f977 	bl	80002dc <__adddf3>
 8006fee:	4642      	mov	r2, r8
 8006ff0:	464b      	mov	r3, r9
 8006ff2:	4606      	mov	r6, r0
 8006ff4:	460f      	mov	r7, r1
 8006ff6:	f7f9 fdb7 	bl	8000b68 <__aeabi_dcmpgt>
 8006ffa:	b9c8      	cbnz	r0, 8007030 <_dtoa_r+0x6b0>
 8006ffc:	4642      	mov	r2, r8
 8006ffe:	464b      	mov	r3, r9
 8007000:	4630      	mov	r0, r6
 8007002:	4639      	mov	r1, r7
 8007004:	f7f9 fd88 	bl	8000b18 <__aeabi_dcmpeq>
 8007008:	b110      	cbz	r0, 8007010 <_dtoa_r+0x690>
 800700a:	9b01      	ldr	r3, [sp, #4]
 800700c:	07db      	lsls	r3, r3, #31
 800700e:	d40f      	bmi.n	8007030 <_dtoa_r+0x6b0>
 8007010:	4651      	mov	r1, sl
 8007012:	4620      	mov	r0, r4
 8007014:	f000 faaf 	bl	8007576 <_Bfree>
 8007018:	2300      	movs	r3, #0
 800701a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800701c:	702b      	strb	r3, [r5, #0]
 800701e:	f10b 0301 	add.w	r3, fp, #1
 8007022:	6013      	str	r3, [r2, #0]
 8007024:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007026:	2b00      	cmp	r3, #0
 8007028:	f43f ace5 	beq.w	80069f6 <_dtoa_r+0x76>
 800702c:	601d      	str	r5, [r3, #0]
 800702e:	e4e2      	b.n	80069f6 <_dtoa_r+0x76>
 8007030:	465f      	mov	r7, fp
 8007032:	462b      	mov	r3, r5
 8007034:	461d      	mov	r5, r3
 8007036:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800703a:	2a39      	cmp	r2, #57	; 0x39
 800703c:	d106      	bne.n	800704c <_dtoa_r+0x6cc>
 800703e:	9a00      	ldr	r2, [sp, #0]
 8007040:	429a      	cmp	r2, r3
 8007042:	d1f7      	bne.n	8007034 <_dtoa_r+0x6b4>
 8007044:	9900      	ldr	r1, [sp, #0]
 8007046:	2230      	movs	r2, #48	; 0x30
 8007048:	3701      	adds	r7, #1
 800704a:	700a      	strb	r2, [r1, #0]
 800704c:	781a      	ldrb	r2, [r3, #0]
 800704e:	3201      	adds	r2, #1
 8007050:	701a      	strb	r2, [r3, #0]
 8007052:	e791      	b.n	8006f78 <_dtoa_r+0x5f8>
 8007054:	4ba3      	ldr	r3, [pc, #652]	; (80072e4 <_dtoa_r+0x964>)
 8007056:	2200      	movs	r2, #0
 8007058:	f7f9 faf6 	bl	8000648 <__aeabi_dmul>
 800705c:	2200      	movs	r2, #0
 800705e:	2300      	movs	r3, #0
 8007060:	4606      	mov	r6, r0
 8007062:	460f      	mov	r7, r1
 8007064:	f7f9 fd58 	bl	8000b18 <__aeabi_dcmpeq>
 8007068:	2800      	cmp	r0, #0
 800706a:	d09e      	beq.n	8006faa <_dtoa_r+0x62a>
 800706c:	e7d0      	b.n	8007010 <_dtoa_r+0x690>
 800706e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007070:	2a00      	cmp	r2, #0
 8007072:	f000 80ca 	beq.w	800720a <_dtoa_r+0x88a>
 8007076:	9a07      	ldr	r2, [sp, #28]
 8007078:	2a01      	cmp	r2, #1
 800707a:	f300 80ad 	bgt.w	80071d8 <_dtoa_r+0x858>
 800707e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007080:	2a00      	cmp	r2, #0
 8007082:	f000 80a5 	beq.w	80071d0 <_dtoa_r+0x850>
 8007086:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800708a:	9e08      	ldr	r6, [sp, #32]
 800708c:	9d05      	ldr	r5, [sp, #20]
 800708e:	9a05      	ldr	r2, [sp, #20]
 8007090:	441a      	add	r2, r3
 8007092:	9205      	str	r2, [sp, #20]
 8007094:	9a06      	ldr	r2, [sp, #24]
 8007096:	2101      	movs	r1, #1
 8007098:	441a      	add	r2, r3
 800709a:	4620      	mov	r0, r4
 800709c:	9206      	str	r2, [sp, #24]
 800709e:	f000 fb07 	bl	80076b0 <__i2b>
 80070a2:	4607      	mov	r7, r0
 80070a4:	b165      	cbz	r5, 80070c0 <_dtoa_r+0x740>
 80070a6:	9b06      	ldr	r3, [sp, #24]
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	dd09      	ble.n	80070c0 <_dtoa_r+0x740>
 80070ac:	42ab      	cmp	r3, r5
 80070ae:	9a05      	ldr	r2, [sp, #20]
 80070b0:	bfa8      	it	ge
 80070b2:	462b      	movge	r3, r5
 80070b4:	1ad2      	subs	r2, r2, r3
 80070b6:	9205      	str	r2, [sp, #20]
 80070b8:	9a06      	ldr	r2, [sp, #24]
 80070ba:	1aed      	subs	r5, r5, r3
 80070bc:	1ad3      	subs	r3, r2, r3
 80070be:	9306      	str	r3, [sp, #24]
 80070c0:	9b08      	ldr	r3, [sp, #32]
 80070c2:	b1f3      	cbz	r3, 8007102 <_dtoa_r+0x782>
 80070c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	f000 80a3 	beq.w	8007212 <_dtoa_r+0x892>
 80070cc:	2e00      	cmp	r6, #0
 80070ce:	dd10      	ble.n	80070f2 <_dtoa_r+0x772>
 80070d0:	4639      	mov	r1, r7
 80070d2:	4632      	mov	r2, r6
 80070d4:	4620      	mov	r0, r4
 80070d6:	f000 fbab 	bl	8007830 <__pow5mult>
 80070da:	4652      	mov	r2, sl
 80070dc:	4601      	mov	r1, r0
 80070de:	4607      	mov	r7, r0
 80070e0:	4620      	mov	r0, r4
 80070e2:	f000 fafb 	bl	80076dc <__multiply>
 80070e6:	4651      	mov	r1, sl
 80070e8:	4680      	mov	r8, r0
 80070ea:	4620      	mov	r0, r4
 80070ec:	f000 fa43 	bl	8007576 <_Bfree>
 80070f0:	46c2      	mov	sl, r8
 80070f2:	9b08      	ldr	r3, [sp, #32]
 80070f4:	1b9a      	subs	r2, r3, r6
 80070f6:	d004      	beq.n	8007102 <_dtoa_r+0x782>
 80070f8:	4651      	mov	r1, sl
 80070fa:	4620      	mov	r0, r4
 80070fc:	f000 fb98 	bl	8007830 <__pow5mult>
 8007100:	4682      	mov	sl, r0
 8007102:	2101      	movs	r1, #1
 8007104:	4620      	mov	r0, r4
 8007106:	f000 fad3 	bl	80076b0 <__i2b>
 800710a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800710c:	2b00      	cmp	r3, #0
 800710e:	4606      	mov	r6, r0
 8007110:	f340 8081 	ble.w	8007216 <_dtoa_r+0x896>
 8007114:	461a      	mov	r2, r3
 8007116:	4601      	mov	r1, r0
 8007118:	4620      	mov	r0, r4
 800711a:	f000 fb89 	bl	8007830 <__pow5mult>
 800711e:	9b07      	ldr	r3, [sp, #28]
 8007120:	2b01      	cmp	r3, #1
 8007122:	4606      	mov	r6, r0
 8007124:	dd7a      	ble.n	800721c <_dtoa_r+0x89c>
 8007126:	f04f 0800 	mov.w	r8, #0
 800712a:	6933      	ldr	r3, [r6, #16]
 800712c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007130:	6918      	ldr	r0, [r3, #16]
 8007132:	f000 fa6f 	bl	8007614 <__hi0bits>
 8007136:	f1c0 0020 	rsb	r0, r0, #32
 800713a:	9b06      	ldr	r3, [sp, #24]
 800713c:	4418      	add	r0, r3
 800713e:	f010 001f 	ands.w	r0, r0, #31
 8007142:	f000 8094 	beq.w	800726e <_dtoa_r+0x8ee>
 8007146:	f1c0 0320 	rsb	r3, r0, #32
 800714a:	2b04      	cmp	r3, #4
 800714c:	f340 8085 	ble.w	800725a <_dtoa_r+0x8da>
 8007150:	9b05      	ldr	r3, [sp, #20]
 8007152:	f1c0 001c 	rsb	r0, r0, #28
 8007156:	4403      	add	r3, r0
 8007158:	9305      	str	r3, [sp, #20]
 800715a:	9b06      	ldr	r3, [sp, #24]
 800715c:	4403      	add	r3, r0
 800715e:	4405      	add	r5, r0
 8007160:	9306      	str	r3, [sp, #24]
 8007162:	9b05      	ldr	r3, [sp, #20]
 8007164:	2b00      	cmp	r3, #0
 8007166:	dd05      	ble.n	8007174 <_dtoa_r+0x7f4>
 8007168:	4651      	mov	r1, sl
 800716a:	461a      	mov	r2, r3
 800716c:	4620      	mov	r0, r4
 800716e:	f000 fb9f 	bl	80078b0 <__lshift>
 8007172:	4682      	mov	sl, r0
 8007174:	9b06      	ldr	r3, [sp, #24]
 8007176:	2b00      	cmp	r3, #0
 8007178:	dd05      	ble.n	8007186 <_dtoa_r+0x806>
 800717a:	4631      	mov	r1, r6
 800717c:	461a      	mov	r2, r3
 800717e:	4620      	mov	r0, r4
 8007180:	f000 fb96 	bl	80078b0 <__lshift>
 8007184:	4606      	mov	r6, r0
 8007186:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007188:	2b00      	cmp	r3, #0
 800718a:	d072      	beq.n	8007272 <_dtoa_r+0x8f2>
 800718c:	4631      	mov	r1, r6
 800718e:	4650      	mov	r0, sl
 8007190:	f000 fbfa 	bl	8007988 <__mcmp>
 8007194:	2800      	cmp	r0, #0
 8007196:	da6c      	bge.n	8007272 <_dtoa_r+0x8f2>
 8007198:	2300      	movs	r3, #0
 800719a:	4651      	mov	r1, sl
 800719c:	220a      	movs	r2, #10
 800719e:	4620      	mov	r0, r4
 80071a0:	f000 f9f2 	bl	8007588 <__multadd>
 80071a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80071a6:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 80071aa:	4682      	mov	sl, r0
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	f000 81af 	beq.w	8007510 <_dtoa_r+0xb90>
 80071b2:	2300      	movs	r3, #0
 80071b4:	4639      	mov	r1, r7
 80071b6:	220a      	movs	r2, #10
 80071b8:	4620      	mov	r0, r4
 80071ba:	f000 f9e5 	bl	8007588 <__multadd>
 80071be:	9b01      	ldr	r3, [sp, #4]
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	4607      	mov	r7, r0
 80071c4:	f300 8096 	bgt.w	80072f4 <_dtoa_r+0x974>
 80071c8:	9b07      	ldr	r3, [sp, #28]
 80071ca:	2b02      	cmp	r3, #2
 80071cc:	dc59      	bgt.n	8007282 <_dtoa_r+0x902>
 80071ce:	e091      	b.n	80072f4 <_dtoa_r+0x974>
 80071d0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80071d2:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80071d6:	e758      	b.n	800708a <_dtoa_r+0x70a>
 80071d8:	9b04      	ldr	r3, [sp, #16]
 80071da:	1e5e      	subs	r6, r3, #1
 80071dc:	9b08      	ldr	r3, [sp, #32]
 80071de:	42b3      	cmp	r3, r6
 80071e0:	bfbf      	itttt	lt
 80071e2:	9b08      	ldrlt	r3, [sp, #32]
 80071e4:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 80071e6:	9608      	strlt	r6, [sp, #32]
 80071e8:	1af3      	sublt	r3, r6, r3
 80071ea:	bfb4      	ite	lt
 80071ec:	18d2      	addlt	r2, r2, r3
 80071ee:	1b9e      	subge	r6, r3, r6
 80071f0:	9b04      	ldr	r3, [sp, #16]
 80071f2:	bfbc      	itt	lt
 80071f4:	920b      	strlt	r2, [sp, #44]	; 0x2c
 80071f6:	2600      	movlt	r6, #0
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	bfb7      	itett	lt
 80071fc:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8007200:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8007204:	1a9d      	sublt	r5, r3, r2
 8007206:	2300      	movlt	r3, #0
 8007208:	e741      	b.n	800708e <_dtoa_r+0x70e>
 800720a:	9e08      	ldr	r6, [sp, #32]
 800720c:	9d05      	ldr	r5, [sp, #20]
 800720e:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8007210:	e748      	b.n	80070a4 <_dtoa_r+0x724>
 8007212:	9a08      	ldr	r2, [sp, #32]
 8007214:	e770      	b.n	80070f8 <_dtoa_r+0x778>
 8007216:	9b07      	ldr	r3, [sp, #28]
 8007218:	2b01      	cmp	r3, #1
 800721a:	dc19      	bgt.n	8007250 <_dtoa_r+0x8d0>
 800721c:	9b02      	ldr	r3, [sp, #8]
 800721e:	b9bb      	cbnz	r3, 8007250 <_dtoa_r+0x8d0>
 8007220:	9b03      	ldr	r3, [sp, #12]
 8007222:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007226:	b99b      	cbnz	r3, 8007250 <_dtoa_r+0x8d0>
 8007228:	9b03      	ldr	r3, [sp, #12]
 800722a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800722e:	0d1b      	lsrs	r3, r3, #20
 8007230:	051b      	lsls	r3, r3, #20
 8007232:	b183      	cbz	r3, 8007256 <_dtoa_r+0x8d6>
 8007234:	9b05      	ldr	r3, [sp, #20]
 8007236:	3301      	adds	r3, #1
 8007238:	9305      	str	r3, [sp, #20]
 800723a:	9b06      	ldr	r3, [sp, #24]
 800723c:	3301      	adds	r3, #1
 800723e:	9306      	str	r3, [sp, #24]
 8007240:	f04f 0801 	mov.w	r8, #1
 8007244:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007246:	2b00      	cmp	r3, #0
 8007248:	f47f af6f 	bne.w	800712a <_dtoa_r+0x7aa>
 800724c:	2001      	movs	r0, #1
 800724e:	e774      	b.n	800713a <_dtoa_r+0x7ba>
 8007250:	f04f 0800 	mov.w	r8, #0
 8007254:	e7f6      	b.n	8007244 <_dtoa_r+0x8c4>
 8007256:	4698      	mov	r8, r3
 8007258:	e7f4      	b.n	8007244 <_dtoa_r+0x8c4>
 800725a:	d082      	beq.n	8007162 <_dtoa_r+0x7e2>
 800725c:	9a05      	ldr	r2, [sp, #20]
 800725e:	331c      	adds	r3, #28
 8007260:	441a      	add	r2, r3
 8007262:	9205      	str	r2, [sp, #20]
 8007264:	9a06      	ldr	r2, [sp, #24]
 8007266:	441a      	add	r2, r3
 8007268:	441d      	add	r5, r3
 800726a:	9206      	str	r2, [sp, #24]
 800726c:	e779      	b.n	8007162 <_dtoa_r+0x7e2>
 800726e:	4603      	mov	r3, r0
 8007270:	e7f4      	b.n	800725c <_dtoa_r+0x8dc>
 8007272:	9b04      	ldr	r3, [sp, #16]
 8007274:	2b00      	cmp	r3, #0
 8007276:	dc37      	bgt.n	80072e8 <_dtoa_r+0x968>
 8007278:	9b07      	ldr	r3, [sp, #28]
 800727a:	2b02      	cmp	r3, #2
 800727c:	dd34      	ble.n	80072e8 <_dtoa_r+0x968>
 800727e:	9b04      	ldr	r3, [sp, #16]
 8007280:	9301      	str	r3, [sp, #4]
 8007282:	9b01      	ldr	r3, [sp, #4]
 8007284:	b963      	cbnz	r3, 80072a0 <_dtoa_r+0x920>
 8007286:	4631      	mov	r1, r6
 8007288:	2205      	movs	r2, #5
 800728a:	4620      	mov	r0, r4
 800728c:	f000 f97c 	bl	8007588 <__multadd>
 8007290:	4601      	mov	r1, r0
 8007292:	4606      	mov	r6, r0
 8007294:	4650      	mov	r0, sl
 8007296:	f000 fb77 	bl	8007988 <__mcmp>
 800729a:	2800      	cmp	r0, #0
 800729c:	f73f adbc 	bgt.w	8006e18 <_dtoa_r+0x498>
 80072a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80072a2:	9d00      	ldr	r5, [sp, #0]
 80072a4:	ea6f 0b03 	mvn.w	fp, r3
 80072a8:	f04f 0800 	mov.w	r8, #0
 80072ac:	4631      	mov	r1, r6
 80072ae:	4620      	mov	r0, r4
 80072b0:	f000 f961 	bl	8007576 <_Bfree>
 80072b4:	2f00      	cmp	r7, #0
 80072b6:	f43f aeab 	beq.w	8007010 <_dtoa_r+0x690>
 80072ba:	f1b8 0f00 	cmp.w	r8, #0
 80072be:	d005      	beq.n	80072cc <_dtoa_r+0x94c>
 80072c0:	45b8      	cmp	r8, r7
 80072c2:	d003      	beq.n	80072cc <_dtoa_r+0x94c>
 80072c4:	4641      	mov	r1, r8
 80072c6:	4620      	mov	r0, r4
 80072c8:	f000 f955 	bl	8007576 <_Bfree>
 80072cc:	4639      	mov	r1, r7
 80072ce:	4620      	mov	r0, r4
 80072d0:	f000 f951 	bl	8007576 <_Bfree>
 80072d4:	e69c      	b.n	8007010 <_dtoa_r+0x690>
 80072d6:	2600      	movs	r6, #0
 80072d8:	4637      	mov	r7, r6
 80072da:	e7e1      	b.n	80072a0 <_dtoa_r+0x920>
 80072dc:	46bb      	mov	fp, r7
 80072de:	4637      	mov	r7, r6
 80072e0:	e59a      	b.n	8006e18 <_dtoa_r+0x498>
 80072e2:	bf00      	nop
 80072e4:	40240000 	.word	0x40240000
 80072e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	f000 80c7 	beq.w	800747e <_dtoa_r+0xafe>
 80072f0:	9b04      	ldr	r3, [sp, #16]
 80072f2:	9301      	str	r3, [sp, #4]
 80072f4:	2d00      	cmp	r5, #0
 80072f6:	dd05      	ble.n	8007304 <_dtoa_r+0x984>
 80072f8:	4639      	mov	r1, r7
 80072fa:	462a      	mov	r2, r5
 80072fc:	4620      	mov	r0, r4
 80072fe:	f000 fad7 	bl	80078b0 <__lshift>
 8007302:	4607      	mov	r7, r0
 8007304:	f1b8 0f00 	cmp.w	r8, #0
 8007308:	d05a      	beq.n	80073c0 <_dtoa_r+0xa40>
 800730a:	6879      	ldr	r1, [r7, #4]
 800730c:	4620      	mov	r0, r4
 800730e:	f000 f90d 	bl	800752c <_Balloc>
 8007312:	4605      	mov	r5, r0
 8007314:	b920      	cbnz	r0, 8007320 <_dtoa_r+0x9a0>
 8007316:	4b82      	ldr	r3, [pc, #520]	; (8007520 <_dtoa_r+0xba0>)
 8007318:	4602      	mov	r2, r0
 800731a:	f240 21ef 	movw	r1, #751	; 0x2ef
 800731e:	e470      	b.n	8006c02 <_dtoa_r+0x282>
 8007320:	693a      	ldr	r2, [r7, #16]
 8007322:	3202      	adds	r2, #2
 8007324:	0092      	lsls	r2, r2, #2
 8007326:	f107 010c 	add.w	r1, r7, #12
 800732a:	300c      	adds	r0, #12
 800732c:	f000 fcca 	bl	8007cc4 <memcpy>
 8007330:	2201      	movs	r2, #1
 8007332:	4629      	mov	r1, r5
 8007334:	4620      	mov	r0, r4
 8007336:	f000 fabb 	bl	80078b0 <__lshift>
 800733a:	9b00      	ldr	r3, [sp, #0]
 800733c:	3301      	adds	r3, #1
 800733e:	9304      	str	r3, [sp, #16]
 8007340:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007344:	4413      	add	r3, r2
 8007346:	9308      	str	r3, [sp, #32]
 8007348:	9b02      	ldr	r3, [sp, #8]
 800734a:	f003 0301 	and.w	r3, r3, #1
 800734e:	46b8      	mov	r8, r7
 8007350:	9306      	str	r3, [sp, #24]
 8007352:	4607      	mov	r7, r0
 8007354:	9b04      	ldr	r3, [sp, #16]
 8007356:	4631      	mov	r1, r6
 8007358:	3b01      	subs	r3, #1
 800735a:	4650      	mov	r0, sl
 800735c:	9301      	str	r3, [sp, #4]
 800735e:	f7ff fa87 	bl	8006870 <quorem>
 8007362:	4641      	mov	r1, r8
 8007364:	9002      	str	r0, [sp, #8]
 8007366:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800736a:	4650      	mov	r0, sl
 800736c:	f000 fb0c 	bl	8007988 <__mcmp>
 8007370:	463a      	mov	r2, r7
 8007372:	9005      	str	r0, [sp, #20]
 8007374:	4631      	mov	r1, r6
 8007376:	4620      	mov	r0, r4
 8007378:	f000 fb22 	bl	80079c0 <__mdiff>
 800737c:	68c2      	ldr	r2, [r0, #12]
 800737e:	4605      	mov	r5, r0
 8007380:	bb02      	cbnz	r2, 80073c4 <_dtoa_r+0xa44>
 8007382:	4601      	mov	r1, r0
 8007384:	4650      	mov	r0, sl
 8007386:	f000 faff 	bl	8007988 <__mcmp>
 800738a:	4602      	mov	r2, r0
 800738c:	4629      	mov	r1, r5
 800738e:	4620      	mov	r0, r4
 8007390:	9209      	str	r2, [sp, #36]	; 0x24
 8007392:	f000 f8f0 	bl	8007576 <_Bfree>
 8007396:	9b07      	ldr	r3, [sp, #28]
 8007398:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800739a:	9d04      	ldr	r5, [sp, #16]
 800739c:	ea43 0102 	orr.w	r1, r3, r2
 80073a0:	9b06      	ldr	r3, [sp, #24]
 80073a2:	4319      	orrs	r1, r3
 80073a4:	d110      	bne.n	80073c8 <_dtoa_r+0xa48>
 80073a6:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80073aa:	d029      	beq.n	8007400 <_dtoa_r+0xa80>
 80073ac:	9b05      	ldr	r3, [sp, #20]
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	dd02      	ble.n	80073b8 <_dtoa_r+0xa38>
 80073b2:	9b02      	ldr	r3, [sp, #8]
 80073b4:	f103 0931 	add.w	r9, r3, #49	; 0x31
 80073b8:	9b01      	ldr	r3, [sp, #4]
 80073ba:	f883 9000 	strb.w	r9, [r3]
 80073be:	e775      	b.n	80072ac <_dtoa_r+0x92c>
 80073c0:	4638      	mov	r0, r7
 80073c2:	e7ba      	b.n	800733a <_dtoa_r+0x9ba>
 80073c4:	2201      	movs	r2, #1
 80073c6:	e7e1      	b.n	800738c <_dtoa_r+0xa0c>
 80073c8:	9b05      	ldr	r3, [sp, #20]
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	db04      	blt.n	80073d8 <_dtoa_r+0xa58>
 80073ce:	9907      	ldr	r1, [sp, #28]
 80073d0:	430b      	orrs	r3, r1
 80073d2:	9906      	ldr	r1, [sp, #24]
 80073d4:	430b      	orrs	r3, r1
 80073d6:	d120      	bne.n	800741a <_dtoa_r+0xa9a>
 80073d8:	2a00      	cmp	r2, #0
 80073da:	dded      	ble.n	80073b8 <_dtoa_r+0xa38>
 80073dc:	4651      	mov	r1, sl
 80073de:	2201      	movs	r2, #1
 80073e0:	4620      	mov	r0, r4
 80073e2:	f000 fa65 	bl	80078b0 <__lshift>
 80073e6:	4631      	mov	r1, r6
 80073e8:	4682      	mov	sl, r0
 80073ea:	f000 facd 	bl	8007988 <__mcmp>
 80073ee:	2800      	cmp	r0, #0
 80073f0:	dc03      	bgt.n	80073fa <_dtoa_r+0xa7a>
 80073f2:	d1e1      	bne.n	80073b8 <_dtoa_r+0xa38>
 80073f4:	f019 0f01 	tst.w	r9, #1
 80073f8:	d0de      	beq.n	80073b8 <_dtoa_r+0xa38>
 80073fa:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80073fe:	d1d8      	bne.n	80073b2 <_dtoa_r+0xa32>
 8007400:	9a01      	ldr	r2, [sp, #4]
 8007402:	2339      	movs	r3, #57	; 0x39
 8007404:	7013      	strb	r3, [r2, #0]
 8007406:	462b      	mov	r3, r5
 8007408:	461d      	mov	r5, r3
 800740a:	3b01      	subs	r3, #1
 800740c:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007410:	2a39      	cmp	r2, #57	; 0x39
 8007412:	d06c      	beq.n	80074ee <_dtoa_r+0xb6e>
 8007414:	3201      	adds	r2, #1
 8007416:	701a      	strb	r2, [r3, #0]
 8007418:	e748      	b.n	80072ac <_dtoa_r+0x92c>
 800741a:	2a00      	cmp	r2, #0
 800741c:	dd07      	ble.n	800742e <_dtoa_r+0xaae>
 800741e:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007422:	d0ed      	beq.n	8007400 <_dtoa_r+0xa80>
 8007424:	9a01      	ldr	r2, [sp, #4]
 8007426:	f109 0301 	add.w	r3, r9, #1
 800742a:	7013      	strb	r3, [r2, #0]
 800742c:	e73e      	b.n	80072ac <_dtoa_r+0x92c>
 800742e:	9b04      	ldr	r3, [sp, #16]
 8007430:	9a08      	ldr	r2, [sp, #32]
 8007432:	f803 9c01 	strb.w	r9, [r3, #-1]
 8007436:	4293      	cmp	r3, r2
 8007438:	d043      	beq.n	80074c2 <_dtoa_r+0xb42>
 800743a:	4651      	mov	r1, sl
 800743c:	2300      	movs	r3, #0
 800743e:	220a      	movs	r2, #10
 8007440:	4620      	mov	r0, r4
 8007442:	f000 f8a1 	bl	8007588 <__multadd>
 8007446:	45b8      	cmp	r8, r7
 8007448:	4682      	mov	sl, r0
 800744a:	f04f 0300 	mov.w	r3, #0
 800744e:	f04f 020a 	mov.w	r2, #10
 8007452:	4641      	mov	r1, r8
 8007454:	4620      	mov	r0, r4
 8007456:	d107      	bne.n	8007468 <_dtoa_r+0xae8>
 8007458:	f000 f896 	bl	8007588 <__multadd>
 800745c:	4680      	mov	r8, r0
 800745e:	4607      	mov	r7, r0
 8007460:	9b04      	ldr	r3, [sp, #16]
 8007462:	3301      	adds	r3, #1
 8007464:	9304      	str	r3, [sp, #16]
 8007466:	e775      	b.n	8007354 <_dtoa_r+0x9d4>
 8007468:	f000 f88e 	bl	8007588 <__multadd>
 800746c:	4639      	mov	r1, r7
 800746e:	4680      	mov	r8, r0
 8007470:	2300      	movs	r3, #0
 8007472:	220a      	movs	r2, #10
 8007474:	4620      	mov	r0, r4
 8007476:	f000 f887 	bl	8007588 <__multadd>
 800747a:	4607      	mov	r7, r0
 800747c:	e7f0      	b.n	8007460 <_dtoa_r+0xae0>
 800747e:	9b04      	ldr	r3, [sp, #16]
 8007480:	9301      	str	r3, [sp, #4]
 8007482:	9d00      	ldr	r5, [sp, #0]
 8007484:	4631      	mov	r1, r6
 8007486:	4650      	mov	r0, sl
 8007488:	f7ff f9f2 	bl	8006870 <quorem>
 800748c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8007490:	9b00      	ldr	r3, [sp, #0]
 8007492:	f805 9b01 	strb.w	r9, [r5], #1
 8007496:	1aea      	subs	r2, r5, r3
 8007498:	9b01      	ldr	r3, [sp, #4]
 800749a:	4293      	cmp	r3, r2
 800749c:	dd07      	ble.n	80074ae <_dtoa_r+0xb2e>
 800749e:	4651      	mov	r1, sl
 80074a0:	2300      	movs	r3, #0
 80074a2:	220a      	movs	r2, #10
 80074a4:	4620      	mov	r0, r4
 80074a6:	f000 f86f 	bl	8007588 <__multadd>
 80074aa:	4682      	mov	sl, r0
 80074ac:	e7ea      	b.n	8007484 <_dtoa_r+0xb04>
 80074ae:	9b01      	ldr	r3, [sp, #4]
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	bfc8      	it	gt
 80074b4:	461d      	movgt	r5, r3
 80074b6:	9b00      	ldr	r3, [sp, #0]
 80074b8:	bfd8      	it	le
 80074ba:	2501      	movle	r5, #1
 80074bc:	441d      	add	r5, r3
 80074be:	f04f 0800 	mov.w	r8, #0
 80074c2:	4651      	mov	r1, sl
 80074c4:	2201      	movs	r2, #1
 80074c6:	4620      	mov	r0, r4
 80074c8:	f000 f9f2 	bl	80078b0 <__lshift>
 80074cc:	4631      	mov	r1, r6
 80074ce:	4682      	mov	sl, r0
 80074d0:	f000 fa5a 	bl	8007988 <__mcmp>
 80074d4:	2800      	cmp	r0, #0
 80074d6:	dc96      	bgt.n	8007406 <_dtoa_r+0xa86>
 80074d8:	d102      	bne.n	80074e0 <_dtoa_r+0xb60>
 80074da:	f019 0f01 	tst.w	r9, #1
 80074de:	d192      	bne.n	8007406 <_dtoa_r+0xa86>
 80074e0:	462b      	mov	r3, r5
 80074e2:	461d      	mov	r5, r3
 80074e4:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80074e8:	2a30      	cmp	r2, #48	; 0x30
 80074ea:	d0fa      	beq.n	80074e2 <_dtoa_r+0xb62>
 80074ec:	e6de      	b.n	80072ac <_dtoa_r+0x92c>
 80074ee:	9a00      	ldr	r2, [sp, #0]
 80074f0:	429a      	cmp	r2, r3
 80074f2:	d189      	bne.n	8007408 <_dtoa_r+0xa88>
 80074f4:	f10b 0b01 	add.w	fp, fp, #1
 80074f8:	2331      	movs	r3, #49	; 0x31
 80074fa:	e796      	b.n	800742a <_dtoa_r+0xaaa>
 80074fc:	4b09      	ldr	r3, [pc, #36]	; (8007524 <_dtoa_r+0xba4>)
 80074fe:	f7ff ba9d 	b.w	8006a3c <_dtoa_r+0xbc>
 8007502:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007504:	2b00      	cmp	r3, #0
 8007506:	f47f aa7c 	bne.w	8006a02 <_dtoa_r+0x82>
 800750a:	4b07      	ldr	r3, [pc, #28]	; (8007528 <_dtoa_r+0xba8>)
 800750c:	f7ff ba96 	b.w	8006a3c <_dtoa_r+0xbc>
 8007510:	9b01      	ldr	r3, [sp, #4]
 8007512:	2b00      	cmp	r3, #0
 8007514:	dcb5      	bgt.n	8007482 <_dtoa_r+0xb02>
 8007516:	9b07      	ldr	r3, [sp, #28]
 8007518:	2b02      	cmp	r3, #2
 800751a:	f73f aeb2 	bgt.w	8007282 <_dtoa_r+0x902>
 800751e:	e7b0      	b.n	8007482 <_dtoa_r+0xb02>
 8007520:	080092c9 	.word	0x080092c9
 8007524:	0800929a 	.word	0x0800929a
 8007528:	080092bc 	.word	0x080092bc

0800752c <_Balloc>:
 800752c:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800752e:	b570      	push	{r4, r5, r6, lr}
 8007530:	4605      	mov	r5, r0
 8007532:	460c      	mov	r4, r1
 8007534:	b17b      	cbz	r3, 8007556 <_Balloc+0x2a>
 8007536:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8007538:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800753c:	b9a0      	cbnz	r0, 8007568 <_Balloc+0x3c>
 800753e:	2101      	movs	r1, #1
 8007540:	fa01 f604 	lsl.w	r6, r1, r4
 8007544:	1d72      	adds	r2, r6, #5
 8007546:	0092      	lsls	r2, r2, #2
 8007548:	4628      	mov	r0, r5
 800754a:	f000 fbe7 	bl	8007d1c <_calloc_r>
 800754e:	b148      	cbz	r0, 8007564 <_Balloc+0x38>
 8007550:	e9c0 4601 	strd	r4, r6, [r0, #4]
 8007554:	e00b      	b.n	800756e <_Balloc+0x42>
 8007556:	2221      	movs	r2, #33	; 0x21
 8007558:	2104      	movs	r1, #4
 800755a:	f000 fbdf 	bl	8007d1c <_calloc_r>
 800755e:	6468      	str	r0, [r5, #68]	; 0x44
 8007560:	2800      	cmp	r0, #0
 8007562:	d1e8      	bne.n	8007536 <_Balloc+0xa>
 8007564:	2000      	movs	r0, #0
 8007566:	bd70      	pop	{r4, r5, r6, pc}
 8007568:	6802      	ldr	r2, [r0, #0]
 800756a:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 800756e:	2300      	movs	r3, #0
 8007570:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007574:	e7f7      	b.n	8007566 <_Balloc+0x3a>

08007576 <_Bfree>:
 8007576:	b131      	cbz	r1, 8007586 <_Bfree+0x10>
 8007578:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800757a:	684a      	ldr	r2, [r1, #4]
 800757c:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8007580:	6008      	str	r0, [r1, #0]
 8007582:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8007586:	4770      	bx	lr

08007588 <__multadd>:
 8007588:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800758c:	690d      	ldr	r5, [r1, #16]
 800758e:	4607      	mov	r7, r0
 8007590:	460c      	mov	r4, r1
 8007592:	461e      	mov	r6, r3
 8007594:	f101 0c14 	add.w	ip, r1, #20
 8007598:	2000      	movs	r0, #0
 800759a:	f8dc 3000 	ldr.w	r3, [ip]
 800759e:	b299      	uxth	r1, r3
 80075a0:	fb02 6101 	mla	r1, r2, r1, r6
 80075a4:	0c1e      	lsrs	r6, r3, #16
 80075a6:	0c0b      	lsrs	r3, r1, #16
 80075a8:	fb02 3306 	mla	r3, r2, r6, r3
 80075ac:	b289      	uxth	r1, r1
 80075ae:	3001      	adds	r0, #1
 80075b0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80075b4:	4285      	cmp	r5, r0
 80075b6:	f84c 1b04 	str.w	r1, [ip], #4
 80075ba:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80075be:	dcec      	bgt.n	800759a <__multadd+0x12>
 80075c0:	b30e      	cbz	r6, 8007606 <__multadd+0x7e>
 80075c2:	68a3      	ldr	r3, [r4, #8]
 80075c4:	42ab      	cmp	r3, r5
 80075c6:	dc19      	bgt.n	80075fc <__multadd+0x74>
 80075c8:	6861      	ldr	r1, [r4, #4]
 80075ca:	4638      	mov	r0, r7
 80075cc:	3101      	adds	r1, #1
 80075ce:	f7ff ffad 	bl	800752c <_Balloc>
 80075d2:	4680      	mov	r8, r0
 80075d4:	b928      	cbnz	r0, 80075e2 <__multadd+0x5a>
 80075d6:	4602      	mov	r2, r0
 80075d8:	4b0c      	ldr	r3, [pc, #48]	; (800760c <__multadd+0x84>)
 80075da:	480d      	ldr	r0, [pc, #52]	; (8007610 <__multadd+0x88>)
 80075dc:	21ba      	movs	r1, #186	; 0xba
 80075de:	f000 fb7f 	bl	8007ce0 <__assert_func>
 80075e2:	6922      	ldr	r2, [r4, #16]
 80075e4:	3202      	adds	r2, #2
 80075e6:	f104 010c 	add.w	r1, r4, #12
 80075ea:	0092      	lsls	r2, r2, #2
 80075ec:	300c      	adds	r0, #12
 80075ee:	f000 fb69 	bl	8007cc4 <memcpy>
 80075f2:	4621      	mov	r1, r4
 80075f4:	4638      	mov	r0, r7
 80075f6:	f7ff ffbe 	bl	8007576 <_Bfree>
 80075fa:	4644      	mov	r4, r8
 80075fc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007600:	3501      	adds	r5, #1
 8007602:	615e      	str	r6, [r3, #20]
 8007604:	6125      	str	r5, [r4, #16]
 8007606:	4620      	mov	r0, r4
 8007608:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800760c:	080092c9 	.word	0x080092c9
 8007610:	08009332 	.word	0x08009332

08007614 <__hi0bits>:
 8007614:	0c03      	lsrs	r3, r0, #16
 8007616:	041b      	lsls	r3, r3, #16
 8007618:	b9d3      	cbnz	r3, 8007650 <__hi0bits+0x3c>
 800761a:	0400      	lsls	r0, r0, #16
 800761c:	2310      	movs	r3, #16
 800761e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8007622:	bf04      	itt	eq
 8007624:	0200      	lsleq	r0, r0, #8
 8007626:	3308      	addeq	r3, #8
 8007628:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800762c:	bf04      	itt	eq
 800762e:	0100      	lsleq	r0, r0, #4
 8007630:	3304      	addeq	r3, #4
 8007632:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8007636:	bf04      	itt	eq
 8007638:	0080      	lsleq	r0, r0, #2
 800763a:	3302      	addeq	r3, #2
 800763c:	2800      	cmp	r0, #0
 800763e:	db05      	blt.n	800764c <__hi0bits+0x38>
 8007640:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007644:	f103 0301 	add.w	r3, r3, #1
 8007648:	bf08      	it	eq
 800764a:	2320      	moveq	r3, #32
 800764c:	4618      	mov	r0, r3
 800764e:	4770      	bx	lr
 8007650:	2300      	movs	r3, #0
 8007652:	e7e4      	b.n	800761e <__hi0bits+0xa>

08007654 <__lo0bits>:
 8007654:	6803      	ldr	r3, [r0, #0]
 8007656:	f013 0207 	ands.w	r2, r3, #7
 800765a:	d00c      	beq.n	8007676 <__lo0bits+0x22>
 800765c:	07d9      	lsls	r1, r3, #31
 800765e:	d422      	bmi.n	80076a6 <__lo0bits+0x52>
 8007660:	079a      	lsls	r2, r3, #30
 8007662:	bf49      	itett	mi
 8007664:	085b      	lsrmi	r3, r3, #1
 8007666:	089b      	lsrpl	r3, r3, #2
 8007668:	6003      	strmi	r3, [r0, #0]
 800766a:	2201      	movmi	r2, #1
 800766c:	bf5c      	itt	pl
 800766e:	6003      	strpl	r3, [r0, #0]
 8007670:	2202      	movpl	r2, #2
 8007672:	4610      	mov	r0, r2
 8007674:	4770      	bx	lr
 8007676:	b299      	uxth	r1, r3
 8007678:	b909      	cbnz	r1, 800767e <__lo0bits+0x2a>
 800767a:	0c1b      	lsrs	r3, r3, #16
 800767c:	2210      	movs	r2, #16
 800767e:	b2d9      	uxtb	r1, r3
 8007680:	b909      	cbnz	r1, 8007686 <__lo0bits+0x32>
 8007682:	3208      	adds	r2, #8
 8007684:	0a1b      	lsrs	r3, r3, #8
 8007686:	0719      	lsls	r1, r3, #28
 8007688:	bf04      	itt	eq
 800768a:	091b      	lsreq	r3, r3, #4
 800768c:	3204      	addeq	r2, #4
 800768e:	0799      	lsls	r1, r3, #30
 8007690:	bf04      	itt	eq
 8007692:	089b      	lsreq	r3, r3, #2
 8007694:	3202      	addeq	r2, #2
 8007696:	07d9      	lsls	r1, r3, #31
 8007698:	d403      	bmi.n	80076a2 <__lo0bits+0x4e>
 800769a:	085b      	lsrs	r3, r3, #1
 800769c:	f102 0201 	add.w	r2, r2, #1
 80076a0:	d003      	beq.n	80076aa <__lo0bits+0x56>
 80076a2:	6003      	str	r3, [r0, #0]
 80076a4:	e7e5      	b.n	8007672 <__lo0bits+0x1e>
 80076a6:	2200      	movs	r2, #0
 80076a8:	e7e3      	b.n	8007672 <__lo0bits+0x1e>
 80076aa:	2220      	movs	r2, #32
 80076ac:	e7e1      	b.n	8007672 <__lo0bits+0x1e>
	...

080076b0 <__i2b>:
 80076b0:	b510      	push	{r4, lr}
 80076b2:	460c      	mov	r4, r1
 80076b4:	2101      	movs	r1, #1
 80076b6:	f7ff ff39 	bl	800752c <_Balloc>
 80076ba:	4602      	mov	r2, r0
 80076bc:	b928      	cbnz	r0, 80076ca <__i2b+0x1a>
 80076be:	4b05      	ldr	r3, [pc, #20]	; (80076d4 <__i2b+0x24>)
 80076c0:	4805      	ldr	r0, [pc, #20]	; (80076d8 <__i2b+0x28>)
 80076c2:	f240 1145 	movw	r1, #325	; 0x145
 80076c6:	f000 fb0b 	bl	8007ce0 <__assert_func>
 80076ca:	2301      	movs	r3, #1
 80076cc:	6144      	str	r4, [r0, #20]
 80076ce:	6103      	str	r3, [r0, #16]
 80076d0:	bd10      	pop	{r4, pc}
 80076d2:	bf00      	nop
 80076d4:	080092c9 	.word	0x080092c9
 80076d8:	08009332 	.word	0x08009332

080076dc <__multiply>:
 80076dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076e0:	4691      	mov	r9, r2
 80076e2:	690a      	ldr	r2, [r1, #16]
 80076e4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80076e8:	429a      	cmp	r2, r3
 80076ea:	bfb8      	it	lt
 80076ec:	460b      	movlt	r3, r1
 80076ee:	460c      	mov	r4, r1
 80076f0:	bfbc      	itt	lt
 80076f2:	464c      	movlt	r4, r9
 80076f4:	4699      	movlt	r9, r3
 80076f6:	6927      	ldr	r7, [r4, #16]
 80076f8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80076fc:	68a3      	ldr	r3, [r4, #8]
 80076fe:	6861      	ldr	r1, [r4, #4]
 8007700:	eb07 060a 	add.w	r6, r7, sl
 8007704:	42b3      	cmp	r3, r6
 8007706:	b085      	sub	sp, #20
 8007708:	bfb8      	it	lt
 800770a:	3101      	addlt	r1, #1
 800770c:	f7ff ff0e 	bl	800752c <_Balloc>
 8007710:	b930      	cbnz	r0, 8007720 <__multiply+0x44>
 8007712:	4602      	mov	r2, r0
 8007714:	4b44      	ldr	r3, [pc, #272]	; (8007828 <__multiply+0x14c>)
 8007716:	4845      	ldr	r0, [pc, #276]	; (800782c <__multiply+0x150>)
 8007718:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800771c:	f000 fae0 	bl	8007ce0 <__assert_func>
 8007720:	f100 0514 	add.w	r5, r0, #20
 8007724:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007728:	462b      	mov	r3, r5
 800772a:	2200      	movs	r2, #0
 800772c:	4543      	cmp	r3, r8
 800772e:	d321      	bcc.n	8007774 <__multiply+0x98>
 8007730:	f104 0314 	add.w	r3, r4, #20
 8007734:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007738:	f109 0314 	add.w	r3, r9, #20
 800773c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8007740:	9202      	str	r2, [sp, #8]
 8007742:	1b3a      	subs	r2, r7, r4
 8007744:	3a15      	subs	r2, #21
 8007746:	f022 0203 	bic.w	r2, r2, #3
 800774a:	3204      	adds	r2, #4
 800774c:	f104 0115 	add.w	r1, r4, #21
 8007750:	428f      	cmp	r7, r1
 8007752:	bf38      	it	cc
 8007754:	2204      	movcc	r2, #4
 8007756:	9201      	str	r2, [sp, #4]
 8007758:	9a02      	ldr	r2, [sp, #8]
 800775a:	9303      	str	r3, [sp, #12]
 800775c:	429a      	cmp	r2, r3
 800775e:	d80c      	bhi.n	800777a <__multiply+0x9e>
 8007760:	2e00      	cmp	r6, #0
 8007762:	dd03      	ble.n	800776c <__multiply+0x90>
 8007764:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007768:	2b00      	cmp	r3, #0
 800776a:	d05b      	beq.n	8007824 <__multiply+0x148>
 800776c:	6106      	str	r6, [r0, #16]
 800776e:	b005      	add	sp, #20
 8007770:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007774:	f843 2b04 	str.w	r2, [r3], #4
 8007778:	e7d8      	b.n	800772c <__multiply+0x50>
 800777a:	f8b3 a000 	ldrh.w	sl, [r3]
 800777e:	f1ba 0f00 	cmp.w	sl, #0
 8007782:	d024      	beq.n	80077ce <__multiply+0xf2>
 8007784:	f104 0e14 	add.w	lr, r4, #20
 8007788:	46a9      	mov	r9, r5
 800778a:	f04f 0c00 	mov.w	ip, #0
 800778e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8007792:	f8d9 1000 	ldr.w	r1, [r9]
 8007796:	fa1f fb82 	uxth.w	fp, r2
 800779a:	b289      	uxth	r1, r1
 800779c:	fb0a 110b 	mla	r1, sl, fp, r1
 80077a0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80077a4:	f8d9 2000 	ldr.w	r2, [r9]
 80077a8:	4461      	add	r1, ip
 80077aa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80077ae:	fb0a c20b 	mla	r2, sl, fp, ip
 80077b2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80077b6:	b289      	uxth	r1, r1
 80077b8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80077bc:	4577      	cmp	r7, lr
 80077be:	f849 1b04 	str.w	r1, [r9], #4
 80077c2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80077c6:	d8e2      	bhi.n	800778e <__multiply+0xb2>
 80077c8:	9a01      	ldr	r2, [sp, #4]
 80077ca:	f845 c002 	str.w	ip, [r5, r2]
 80077ce:	9a03      	ldr	r2, [sp, #12]
 80077d0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80077d4:	3304      	adds	r3, #4
 80077d6:	f1b9 0f00 	cmp.w	r9, #0
 80077da:	d021      	beq.n	8007820 <__multiply+0x144>
 80077dc:	6829      	ldr	r1, [r5, #0]
 80077de:	f104 0c14 	add.w	ip, r4, #20
 80077e2:	46ae      	mov	lr, r5
 80077e4:	f04f 0a00 	mov.w	sl, #0
 80077e8:	f8bc b000 	ldrh.w	fp, [ip]
 80077ec:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80077f0:	fb09 220b 	mla	r2, r9, fp, r2
 80077f4:	4452      	add	r2, sl
 80077f6:	b289      	uxth	r1, r1
 80077f8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80077fc:	f84e 1b04 	str.w	r1, [lr], #4
 8007800:	f85c 1b04 	ldr.w	r1, [ip], #4
 8007804:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007808:	f8be 1000 	ldrh.w	r1, [lr]
 800780c:	fb09 110a 	mla	r1, r9, sl, r1
 8007810:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8007814:	4567      	cmp	r7, ip
 8007816:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800781a:	d8e5      	bhi.n	80077e8 <__multiply+0x10c>
 800781c:	9a01      	ldr	r2, [sp, #4]
 800781e:	50a9      	str	r1, [r5, r2]
 8007820:	3504      	adds	r5, #4
 8007822:	e799      	b.n	8007758 <__multiply+0x7c>
 8007824:	3e01      	subs	r6, #1
 8007826:	e79b      	b.n	8007760 <__multiply+0x84>
 8007828:	080092c9 	.word	0x080092c9
 800782c:	08009332 	.word	0x08009332

08007830 <__pow5mult>:
 8007830:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007834:	4615      	mov	r5, r2
 8007836:	f012 0203 	ands.w	r2, r2, #3
 800783a:	4606      	mov	r6, r0
 800783c:	460f      	mov	r7, r1
 800783e:	d007      	beq.n	8007850 <__pow5mult+0x20>
 8007840:	4c1a      	ldr	r4, [pc, #104]	; (80078ac <__pow5mult+0x7c>)
 8007842:	3a01      	subs	r2, #1
 8007844:	2300      	movs	r3, #0
 8007846:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800784a:	f7ff fe9d 	bl	8007588 <__multadd>
 800784e:	4607      	mov	r7, r0
 8007850:	10ad      	asrs	r5, r5, #2
 8007852:	d027      	beq.n	80078a4 <__pow5mult+0x74>
 8007854:	6c34      	ldr	r4, [r6, #64]	; 0x40
 8007856:	b944      	cbnz	r4, 800786a <__pow5mult+0x3a>
 8007858:	f240 2171 	movw	r1, #625	; 0x271
 800785c:	4630      	mov	r0, r6
 800785e:	f7ff ff27 	bl	80076b0 <__i2b>
 8007862:	2300      	movs	r3, #0
 8007864:	6430      	str	r0, [r6, #64]	; 0x40
 8007866:	4604      	mov	r4, r0
 8007868:	6003      	str	r3, [r0, #0]
 800786a:	f04f 0900 	mov.w	r9, #0
 800786e:	07eb      	lsls	r3, r5, #31
 8007870:	d50a      	bpl.n	8007888 <__pow5mult+0x58>
 8007872:	4639      	mov	r1, r7
 8007874:	4622      	mov	r2, r4
 8007876:	4630      	mov	r0, r6
 8007878:	f7ff ff30 	bl	80076dc <__multiply>
 800787c:	4639      	mov	r1, r7
 800787e:	4680      	mov	r8, r0
 8007880:	4630      	mov	r0, r6
 8007882:	f7ff fe78 	bl	8007576 <_Bfree>
 8007886:	4647      	mov	r7, r8
 8007888:	106d      	asrs	r5, r5, #1
 800788a:	d00b      	beq.n	80078a4 <__pow5mult+0x74>
 800788c:	6820      	ldr	r0, [r4, #0]
 800788e:	b938      	cbnz	r0, 80078a0 <__pow5mult+0x70>
 8007890:	4622      	mov	r2, r4
 8007892:	4621      	mov	r1, r4
 8007894:	4630      	mov	r0, r6
 8007896:	f7ff ff21 	bl	80076dc <__multiply>
 800789a:	6020      	str	r0, [r4, #0]
 800789c:	f8c0 9000 	str.w	r9, [r0]
 80078a0:	4604      	mov	r4, r0
 80078a2:	e7e4      	b.n	800786e <__pow5mult+0x3e>
 80078a4:	4638      	mov	r0, r7
 80078a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80078aa:	bf00      	nop
 80078ac:	08009480 	.word	0x08009480

080078b0 <__lshift>:
 80078b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80078b4:	460c      	mov	r4, r1
 80078b6:	6849      	ldr	r1, [r1, #4]
 80078b8:	6923      	ldr	r3, [r4, #16]
 80078ba:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80078be:	68a3      	ldr	r3, [r4, #8]
 80078c0:	4607      	mov	r7, r0
 80078c2:	4691      	mov	r9, r2
 80078c4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80078c8:	f108 0601 	add.w	r6, r8, #1
 80078cc:	42b3      	cmp	r3, r6
 80078ce:	db0b      	blt.n	80078e8 <__lshift+0x38>
 80078d0:	4638      	mov	r0, r7
 80078d2:	f7ff fe2b 	bl	800752c <_Balloc>
 80078d6:	4605      	mov	r5, r0
 80078d8:	b948      	cbnz	r0, 80078ee <__lshift+0x3e>
 80078da:	4602      	mov	r2, r0
 80078dc:	4b28      	ldr	r3, [pc, #160]	; (8007980 <__lshift+0xd0>)
 80078de:	4829      	ldr	r0, [pc, #164]	; (8007984 <__lshift+0xd4>)
 80078e0:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 80078e4:	f000 f9fc 	bl	8007ce0 <__assert_func>
 80078e8:	3101      	adds	r1, #1
 80078ea:	005b      	lsls	r3, r3, #1
 80078ec:	e7ee      	b.n	80078cc <__lshift+0x1c>
 80078ee:	2300      	movs	r3, #0
 80078f0:	f100 0114 	add.w	r1, r0, #20
 80078f4:	f100 0210 	add.w	r2, r0, #16
 80078f8:	4618      	mov	r0, r3
 80078fa:	4553      	cmp	r3, sl
 80078fc:	db33      	blt.n	8007966 <__lshift+0xb6>
 80078fe:	6920      	ldr	r0, [r4, #16]
 8007900:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007904:	f104 0314 	add.w	r3, r4, #20
 8007908:	f019 091f 	ands.w	r9, r9, #31
 800790c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007910:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007914:	d02b      	beq.n	800796e <__lshift+0xbe>
 8007916:	f1c9 0e20 	rsb	lr, r9, #32
 800791a:	468a      	mov	sl, r1
 800791c:	2200      	movs	r2, #0
 800791e:	6818      	ldr	r0, [r3, #0]
 8007920:	fa00 f009 	lsl.w	r0, r0, r9
 8007924:	4310      	orrs	r0, r2
 8007926:	f84a 0b04 	str.w	r0, [sl], #4
 800792a:	f853 2b04 	ldr.w	r2, [r3], #4
 800792e:	459c      	cmp	ip, r3
 8007930:	fa22 f20e 	lsr.w	r2, r2, lr
 8007934:	d8f3      	bhi.n	800791e <__lshift+0x6e>
 8007936:	ebac 0304 	sub.w	r3, ip, r4
 800793a:	3b15      	subs	r3, #21
 800793c:	f023 0303 	bic.w	r3, r3, #3
 8007940:	3304      	adds	r3, #4
 8007942:	f104 0015 	add.w	r0, r4, #21
 8007946:	4584      	cmp	ip, r0
 8007948:	bf38      	it	cc
 800794a:	2304      	movcc	r3, #4
 800794c:	50ca      	str	r2, [r1, r3]
 800794e:	b10a      	cbz	r2, 8007954 <__lshift+0xa4>
 8007950:	f108 0602 	add.w	r6, r8, #2
 8007954:	3e01      	subs	r6, #1
 8007956:	4638      	mov	r0, r7
 8007958:	612e      	str	r6, [r5, #16]
 800795a:	4621      	mov	r1, r4
 800795c:	f7ff fe0b 	bl	8007576 <_Bfree>
 8007960:	4628      	mov	r0, r5
 8007962:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007966:	f842 0f04 	str.w	r0, [r2, #4]!
 800796a:	3301      	adds	r3, #1
 800796c:	e7c5      	b.n	80078fa <__lshift+0x4a>
 800796e:	3904      	subs	r1, #4
 8007970:	f853 2b04 	ldr.w	r2, [r3], #4
 8007974:	f841 2f04 	str.w	r2, [r1, #4]!
 8007978:	459c      	cmp	ip, r3
 800797a:	d8f9      	bhi.n	8007970 <__lshift+0xc0>
 800797c:	e7ea      	b.n	8007954 <__lshift+0xa4>
 800797e:	bf00      	nop
 8007980:	080092c9 	.word	0x080092c9
 8007984:	08009332 	.word	0x08009332

08007988 <__mcmp>:
 8007988:	b530      	push	{r4, r5, lr}
 800798a:	6902      	ldr	r2, [r0, #16]
 800798c:	690c      	ldr	r4, [r1, #16]
 800798e:	1b12      	subs	r2, r2, r4
 8007990:	d10e      	bne.n	80079b0 <__mcmp+0x28>
 8007992:	f100 0314 	add.w	r3, r0, #20
 8007996:	3114      	adds	r1, #20
 8007998:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800799c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80079a0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80079a4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80079a8:	42a5      	cmp	r5, r4
 80079aa:	d003      	beq.n	80079b4 <__mcmp+0x2c>
 80079ac:	d305      	bcc.n	80079ba <__mcmp+0x32>
 80079ae:	2201      	movs	r2, #1
 80079b0:	4610      	mov	r0, r2
 80079b2:	bd30      	pop	{r4, r5, pc}
 80079b4:	4283      	cmp	r3, r0
 80079b6:	d3f3      	bcc.n	80079a0 <__mcmp+0x18>
 80079b8:	e7fa      	b.n	80079b0 <__mcmp+0x28>
 80079ba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80079be:	e7f7      	b.n	80079b0 <__mcmp+0x28>

080079c0 <__mdiff>:
 80079c0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079c4:	460c      	mov	r4, r1
 80079c6:	4606      	mov	r6, r0
 80079c8:	4611      	mov	r1, r2
 80079ca:	4620      	mov	r0, r4
 80079cc:	4690      	mov	r8, r2
 80079ce:	f7ff ffdb 	bl	8007988 <__mcmp>
 80079d2:	1e05      	subs	r5, r0, #0
 80079d4:	d110      	bne.n	80079f8 <__mdiff+0x38>
 80079d6:	4629      	mov	r1, r5
 80079d8:	4630      	mov	r0, r6
 80079da:	f7ff fda7 	bl	800752c <_Balloc>
 80079de:	b930      	cbnz	r0, 80079ee <__mdiff+0x2e>
 80079e0:	4b3a      	ldr	r3, [pc, #232]	; (8007acc <__mdiff+0x10c>)
 80079e2:	4602      	mov	r2, r0
 80079e4:	f240 2137 	movw	r1, #567	; 0x237
 80079e8:	4839      	ldr	r0, [pc, #228]	; (8007ad0 <__mdiff+0x110>)
 80079ea:	f000 f979 	bl	8007ce0 <__assert_func>
 80079ee:	2301      	movs	r3, #1
 80079f0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80079f4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80079f8:	bfa4      	itt	ge
 80079fa:	4643      	movge	r3, r8
 80079fc:	46a0      	movge	r8, r4
 80079fe:	4630      	mov	r0, r6
 8007a00:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007a04:	bfa6      	itte	ge
 8007a06:	461c      	movge	r4, r3
 8007a08:	2500      	movge	r5, #0
 8007a0a:	2501      	movlt	r5, #1
 8007a0c:	f7ff fd8e 	bl	800752c <_Balloc>
 8007a10:	b920      	cbnz	r0, 8007a1c <__mdiff+0x5c>
 8007a12:	4b2e      	ldr	r3, [pc, #184]	; (8007acc <__mdiff+0x10c>)
 8007a14:	4602      	mov	r2, r0
 8007a16:	f240 2145 	movw	r1, #581	; 0x245
 8007a1a:	e7e5      	b.n	80079e8 <__mdiff+0x28>
 8007a1c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8007a20:	6926      	ldr	r6, [r4, #16]
 8007a22:	60c5      	str	r5, [r0, #12]
 8007a24:	f104 0914 	add.w	r9, r4, #20
 8007a28:	f108 0514 	add.w	r5, r8, #20
 8007a2c:	f100 0e14 	add.w	lr, r0, #20
 8007a30:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8007a34:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007a38:	f108 0210 	add.w	r2, r8, #16
 8007a3c:	46f2      	mov	sl, lr
 8007a3e:	2100      	movs	r1, #0
 8007a40:	f859 3b04 	ldr.w	r3, [r9], #4
 8007a44:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8007a48:	fa11 f88b 	uxtah	r8, r1, fp
 8007a4c:	b299      	uxth	r1, r3
 8007a4e:	0c1b      	lsrs	r3, r3, #16
 8007a50:	eba8 0801 	sub.w	r8, r8, r1
 8007a54:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007a58:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8007a5c:	fa1f f888 	uxth.w	r8, r8
 8007a60:	1419      	asrs	r1, r3, #16
 8007a62:	454e      	cmp	r6, r9
 8007a64:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8007a68:	f84a 3b04 	str.w	r3, [sl], #4
 8007a6c:	d8e8      	bhi.n	8007a40 <__mdiff+0x80>
 8007a6e:	1b33      	subs	r3, r6, r4
 8007a70:	3b15      	subs	r3, #21
 8007a72:	f023 0303 	bic.w	r3, r3, #3
 8007a76:	3304      	adds	r3, #4
 8007a78:	3415      	adds	r4, #21
 8007a7a:	42a6      	cmp	r6, r4
 8007a7c:	bf38      	it	cc
 8007a7e:	2304      	movcc	r3, #4
 8007a80:	441d      	add	r5, r3
 8007a82:	4473      	add	r3, lr
 8007a84:	469e      	mov	lr, r3
 8007a86:	462e      	mov	r6, r5
 8007a88:	4566      	cmp	r6, ip
 8007a8a:	d30e      	bcc.n	8007aaa <__mdiff+0xea>
 8007a8c:	f10c 0203 	add.w	r2, ip, #3
 8007a90:	1b52      	subs	r2, r2, r5
 8007a92:	f022 0203 	bic.w	r2, r2, #3
 8007a96:	3d03      	subs	r5, #3
 8007a98:	45ac      	cmp	ip, r5
 8007a9a:	bf38      	it	cc
 8007a9c:	2200      	movcc	r2, #0
 8007a9e:	4413      	add	r3, r2
 8007aa0:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8007aa4:	b17a      	cbz	r2, 8007ac6 <__mdiff+0x106>
 8007aa6:	6107      	str	r7, [r0, #16]
 8007aa8:	e7a4      	b.n	80079f4 <__mdiff+0x34>
 8007aaa:	f856 8b04 	ldr.w	r8, [r6], #4
 8007aae:	fa11 f288 	uxtah	r2, r1, r8
 8007ab2:	1414      	asrs	r4, r2, #16
 8007ab4:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8007ab8:	b292      	uxth	r2, r2
 8007aba:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8007abe:	f84e 2b04 	str.w	r2, [lr], #4
 8007ac2:	1421      	asrs	r1, r4, #16
 8007ac4:	e7e0      	b.n	8007a88 <__mdiff+0xc8>
 8007ac6:	3f01      	subs	r7, #1
 8007ac8:	e7ea      	b.n	8007aa0 <__mdiff+0xe0>
 8007aca:	bf00      	nop
 8007acc:	080092c9 	.word	0x080092c9
 8007ad0:	08009332 	.word	0x08009332

08007ad4 <__d2b>:
 8007ad4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007ad8:	460f      	mov	r7, r1
 8007ada:	2101      	movs	r1, #1
 8007adc:	ec59 8b10 	vmov	r8, r9, d0
 8007ae0:	4616      	mov	r6, r2
 8007ae2:	f7ff fd23 	bl	800752c <_Balloc>
 8007ae6:	4604      	mov	r4, r0
 8007ae8:	b930      	cbnz	r0, 8007af8 <__d2b+0x24>
 8007aea:	4602      	mov	r2, r0
 8007aec:	4b24      	ldr	r3, [pc, #144]	; (8007b80 <__d2b+0xac>)
 8007aee:	4825      	ldr	r0, [pc, #148]	; (8007b84 <__d2b+0xb0>)
 8007af0:	f240 310f 	movw	r1, #783	; 0x30f
 8007af4:	f000 f8f4 	bl	8007ce0 <__assert_func>
 8007af8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007afc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007b00:	bb2d      	cbnz	r5, 8007b4e <__d2b+0x7a>
 8007b02:	9301      	str	r3, [sp, #4]
 8007b04:	f1b8 0300 	subs.w	r3, r8, #0
 8007b08:	d026      	beq.n	8007b58 <__d2b+0x84>
 8007b0a:	4668      	mov	r0, sp
 8007b0c:	9300      	str	r3, [sp, #0]
 8007b0e:	f7ff fda1 	bl	8007654 <__lo0bits>
 8007b12:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007b16:	b1e8      	cbz	r0, 8007b54 <__d2b+0x80>
 8007b18:	f1c0 0320 	rsb	r3, r0, #32
 8007b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8007b20:	430b      	orrs	r3, r1
 8007b22:	40c2      	lsrs	r2, r0
 8007b24:	6163      	str	r3, [r4, #20]
 8007b26:	9201      	str	r2, [sp, #4]
 8007b28:	9b01      	ldr	r3, [sp, #4]
 8007b2a:	61a3      	str	r3, [r4, #24]
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	bf14      	ite	ne
 8007b30:	2202      	movne	r2, #2
 8007b32:	2201      	moveq	r2, #1
 8007b34:	6122      	str	r2, [r4, #16]
 8007b36:	b1bd      	cbz	r5, 8007b68 <__d2b+0x94>
 8007b38:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007b3c:	4405      	add	r5, r0
 8007b3e:	603d      	str	r5, [r7, #0]
 8007b40:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007b44:	6030      	str	r0, [r6, #0]
 8007b46:	4620      	mov	r0, r4
 8007b48:	b003      	add	sp, #12
 8007b4a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007b4e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007b52:	e7d6      	b.n	8007b02 <__d2b+0x2e>
 8007b54:	6161      	str	r1, [r4, #20]
 8007b56:	e7e7      	b.n	8007b28 <__d2b+0x54>
 8007b58:	a801      	add	r0, sp, #4
 8007b5a:	f7ff fd7b 	bl	8007654 <__lo0bits>
 8007b5e:	9b01      	ldr	r3, [sp, #4]
 8007b60:	6163      	str	r3, [r4, #20]
 8007b62:	3020      	adds	r0, #32
 8007b64:	2201      	movs	r2, #1
 8007b66:	e7e5      	b.n	8007b34 <__d2b+0x60>
 8007b68:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007b6c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007b70:	6038      	str	r0, [r7, #0]
 8007b72:	6918      	ldr	r0, [r3, #16]
 8007b74:	f7ff fd4e 	bl	8007614 <__hi0bits>
 8007b78:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007b7c:	e7e2      	b.n	8007b44 <__d2b+0x70>
 8007b7e:	bf00      	nop
 8007b80:	080092c9 	.word	0x080092c9
 8007b84:	08009332 	.word	0x08009332

08007b88 <__ssprint_r>:
 8007b88:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b8c:	6813      	ldr	r3, [r2, #0]
 8007b8e:	9301      	str	r3, [sp, #4]
 8007b90:	6893      	ldr	r3, [r2, #8]
 8007b92:	4680      	mov	r8, r0
 8007b94:	460c      	mov	r4, r1
 8007b96:	4617      	mov	r7, r2
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d157      	bne.n	8007c4c <__ssprint_r+0xc4>
 8007b9c:	2000      	movs	r0, #0
 8007b9e:	2300      	movs	r3, #0
 8007ba0:	607b      	str	r3, [r7, #4]
 8007ba2:	b003      	add	sp, #12
 8007ba4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ba8:	9b01      	ldr	r3, [sp, #4]
 8007baa:	e9d3 ab00 	ldrd	sl, fp, [r3]
 8007bae:	3308      	adds	r3, #8
 8007bb0:	9301      	str	r3, [sp, #4]
 8007bb2:	68a6      	ldr	r6, [r4, #8]
 8007bb4:	6820      	ldr	r0, [r4, #0]
 8007bb6:	f1bb 0f00 	cmp.w	fp, #0
 8007bba:	d0f5      	beq.n	8007ba8 <__ssprint_r+0x20>
 8007bbc:	45b3      	cmp	fp, r6
 8007bbe:	d32d      	bcc.n	8007c1c <__ssprint_r+0x94>
 8007bc0:	89a2      	ldrh	r2, [r4, #12]
 8007bc2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007bc6:	d029      	beq.n	8007c1c <__ssprint_r+0x94>
 8007bc8:	6921      	ldr	r1, [r4, #16]
 8007bca:	6965      	ldr	r5, [r4, #20]
 8007bcc:	eba0 0901 	sub.w	r9, r0, r1
 8007bd0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007bd4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007bd8:	f109 0001 	add.w	r0, r9, #1
 8007bdc:	106d      	asrs	r5, r5, #1
 8007bde:	4458      	add	r0, fp
 8007be0:	4285      	cmp	r5, r0
 8007be2:	bf38      	it	cc
 8007be4:	4605      	movcc	r5, r0
 8007be6:	0553      	lsls	r3, r2, #21
 8007be8:	d534      	bpl.n	8007c54 <__ssprint_r+0xcc>
 8007bea:	4629      	mov	r1, r5
 8007bec:	4640      	mov	r0, r8
 8007bee:	f7fc fd8d 	bl	800470c <_malloc_r>
 8007bf2:	4606      	mov	r6, r0
 8007bf4:	2800      	cmp	r0, #0
 8007bf6:	d038      	beq.n	8007c6a <__ssprint_r+0xe2>
 8007bf8:	464a      	mov	r2, r9
 8007bfa:	6921      	ldr	r1, [r4, #16]
 8007bfc:	f000 f862 	bl	8007cc4 <memcpy>
 8007c00:	89a2      	ldrh	r2, [r4, #12]
 8007c02:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 8007c06:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007c0a:	81a2      	strh	r2, [r4, #12]
 8007c0c:	6126      	str	r6, [r4, #16]
 8007c0e:	6165      	str	r5, [r4, #20]
 8007c10:	444e      	add	r6, r9
 8007c12:	eba5 0509 	sub.w	r5, r5, r9
 8007c16:	6026      	str	r6, [r4, #0]
 8007c18:	60a5      	str	r5, [r4, #8]
 8007c1a:	465e      	mov	r6, fp
 8007c1c:	455e      	cmp	r6, fp
 8007c1e:	bf28      	it	cs
 8007c20:	465e      	movcs	r6, fp
 8007c22:	4632      	mov	r2, r6
 8007c24:	4651      	mov	r1, sl
 8007c26:	6820      	ldr	r0, [r4, #0]
 8007c28:	f000 f82b 	bl	8007c82 <memmove>
 8007c2c:	68a2      	ldr	r2, [r4, #8]
 8007c2e:	1b92      	subs	r2, r2, r6
 8007c30:	60a2      	str	r2, [r4, #8]
 8007c32:	6822      	ldr	r2, [r4, #0]
 8007c34:	4432      	add	r2, r6
 8007c36:	6022      	str	r2, [r4, #0]
 8007c38:	68ba      	ldr	r2, [r7, #8]
 8007c3a:	eba2 030b 	sub.w	r3, r2, fp
 8007c3e:	44da      	add	sl, fp
 8007c40:	60bb      	str	r3, [r7, #8]
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d0aa      	beq.n	8007b9c <__ssprint_r+0x14>
 8007c46:	f04f 0b00 	mov.w	fp, #0
 8007c4a:	e7b2      	b.n	8007bb2 <__ssprint_r+0x2a>
 8007c4c:	f04f 0a00 	mov.w	sl, #0
 8007c50:	46d3      	mov	fp, sl
 8007c52:	e7ae      	b.n	8007bb2 <__ssprint_r+0x2a>
 8007c54:	462a      	mov	r2, r5
 8007c56:	4640      	mov	r0, r8
 8007c58:	f000 f8a8 	bl	8007dac <_realloc_r>
 8007c5c:	4606      	mov	r6, r0
 8007c5e:	2800      	cmp	r0, #0
 8007c60:	d1d4      	bne.n	8007c0c <__ssprint_r+0x84>
 8007c62:	6921      	ldr	r1, [r4, #16]
 8007c64:	4640      	mov	r0, r8
 8007c66:	f7fd f9a7 	bl	8004fb8 <_free_r>
 8007c6a:	230c      	movs	r3, #12
 8007c6c:	f8c8 3000 	str.w	r3, [r8]
 8007c70:	89a3      	ldrh	r3, [r4, #12]
 8007c72:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007c76:	81a3      	strh	r3, [r4, #12]
 8007c78:	2300      	movs	r3, #0
 8007c7a:	60bb      	str	r3, [r7, #8]
 8007c7c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007c80:	e78d      	b.n	8007b9e <__ssprint_r+0x16>

08007c82 <memmove>:
 8007c82:	4288      	cmp	r0, r1
 8007c84:	b510      	push	{r4, lr}
 8007c86:	eb01 0402 	add.w	r4, r1, r2
 8007c8a:	d902      	bls.n	8007c92 <memmove+0x10>
 8007c8c:	4284      	cmp	r4, r0
 8007c8e:	4623      	mov	r3, r4
 8007c90:	d807      	bhi.n	8007ca2 <memmove+0x20>
 8007c92:	1e43      	subs	r3, r0, #1
 8007c94:	42a1      	cmp	r1, r4
 8007c96:	d008      	beq.n	8007caa <memmove+0x28>
 8007c98:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007c9c:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007ca0:	e7f8      	b.n	8007c94 <memmove+0x12>
 8007ca2:	4402      	add	r2, r0
 8007ca4:	4601      	mov	r1, r0
 8007ca6:	428a      	cmp	r2, r1
 8007ca8:	d100      	bne.n	8007cac <memmove+0x2a>
 8007caa:	bd10      	pop	{r4, pc}
 8007cac:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007cb0:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007cb4:	e7f7      	b.n	8007ca6 <memmove+0x24>
	...

08007cb8 <__locale_mb_cur_max>:
 8007cb8:	4b01      	ldr	r3, [pc, #4]	; (8007cc0 <__locale_mb_cur_max+0x8>)
 8007cba:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
 8007cbe:	4770      	bx	lr
 8007cc0:	20000550 	.word	0x20000550

08007cc4 <memcpy>:
 8007cc4:	440a      	add	r2, r1
 8007cc6:	4291      	cmp	r1, r2
 8007cc8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8007ccc:	d100      	bne.n	8007cd0 <memcpy+0xc>
 8007cce:	4770      	bx	lr
 8007cd0:	b510      	push	{r4, lr}
 8007cd2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007cd6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007cda:	4291      	cmp	r1, r2
 8007cdc:	d1f9      	bne.n	8007cd2 <memcpy+0xe>
 8007cde:	bd10      	pop	{r4, pc}

08007ce0 <__assert_func>:
 8007ce0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007ce2:	4614      	mov	r4, r2
 8007ce4:	461a      	mov	r2, r3
 8007ce6:	4b09      	ldr	r3, [pc, #36]	; (8007d0c <__assert_func+0x2c>)
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	4605      	mov	r5, r0
 8007cec:	68d8      	ldr	r0, [r3, #12]
 8007cee:	b14c      	cbz	r4, 8007d04 <__assert_func+0x24>
 8007cf0:	4b07      	ldr	r3, [pc, #28]	; (8007d10 <__assert_func+0x30>)
 8007cf2:	9100      	str	r1, [sp, #0]
 8007cf4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007cf8:	4906      	ldr	r1, [pc, #24]	; (8007d14 <__assert_func+0x34>)
 8007cfa:	462b      	mov	r3, r5
 8007cfc:	f000 fa0c 	bl	8008118 <fiprintf>
 8007d00:	f001 f92d 	bl	8008f5e <abort>
 8007d04:	4b04      	ldr	r3, [pc, #16]	; (8007d18 <__assert_func+0x38>)
 8007d06:	461c      	mov	r4, r3
 8007d08:	e7f3      	b.n	8007cf2 <__assert_func+0x12>
 8007d0a:	bf00      	nop
 8007d0c:	20000548 	.word	0x20000548
 8007d10:	08009496 	.word	0x08009496
 8007d14:	080094a3 	.word	0x080094a3
 8007d18:	080094d1 	.word	0x080094d1

08007d1c <_calloc_r>:
 8007d1c:	b538      	push	{r3, r4, r5, lr}
 8007d1e:	fba1 1502 	umull	r1, r5, r1, r2
 8007d22:	b92d      	cbnz	r5, 8007d30 <_calloc_r+0x14>
 8007d24:	f7fc fcf2 	bl	800470c <_malloc_r>
 8007d28:	4604      	mov	r4, r0
 8007d2a:	b938      	cbnz	r0, 8007d3c <_calloc_r+0x20>
 8007d2c:	4620      	mov	r0, r4
 8007d2e:	bd38      	pop	{r3, r4, r5, pc}
 8007d30:	f7fd f8a4 	bl	8004e7c <__errno>
 8007d34:	230c      	movs	r3, #12
 8007d36:	6003      	str	r3, [r0, #0]
 8007d38:	2400      	movs	r4, #0
 8007d3a:	e7f7      	b.n	8007d2c <_calloc_r+0x10>
 8007d3c:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8007d40:	f022 0203 	bic.w	r2, r2, #3
 8007d44:	3a04      	subs	r2, #4
 8007d46:	2a24      	cmp	r2, #36	; 0x24
 8007d48:	d819      	bhi.n	8007d7e <_calloc_r+0x62>
 8007d4a:	2a13      	cmp	r2, #19
 8007d4c:	d915      	bls.n	8007d7a <_calloc_r+0x5e>
 8007d4e:	2a1b      	cmp	r2, #27
 8007d50:	e9c0 5500 	strd	r5, r5, [r0]
 8007d54:	d806      	bhi.n	8007d64 <_calloc_r+0x48>
 8007d56:	f100 0308 	add.w	r3, r0, #8
 8007d5a:	2200      	movs	r2, #0
 8007d5c:	e9c3 2200 	strd	r2, r2, [r3]
 8007d60:	609a      	str	r2, [r3, #8]
 8007d62:	e7e3      	b.n	8007d2c <_calloc_r+0x10>
 8007d64:	2a24      	cmp	r2, #36	; 0x24
 8007d66:	e9c0 5502 	strd	r5, r5, [r0, #8]
 8007d6a:	bf11      	iteee	ne
 8007d6c:	f100 0310 	addne.w	r3, r0, #16
 8007d70:	6105      	streq	r5, [r0, #16]
 8007d72:	f100 0318 	addeq.w	r3, r0, #24
 8007d76:	6145      	streq	r5, [r0, #20]
 8007d78:	e7ef      	b.n	8007d5a <_calloc_r+0x3e>
 8007d7a:	4603      	mov	r3, r0
 8007d7c:	e7ed      	b.n	8007d5a <_calloc_r+0x3e>
 8007d7e:	4629      	mov	r1, r5
 8007d80:	f7fd f81d 	bl	8004dbe <memset>
 8007d84:	e7d2      	b.n	8007d2c <_calloc_r+0x10>

08007d86 <__ascii_mbtowc>:
 8007d86:	b082      	sub	sp, #8
 8007d88:	b901      	cbnz	r1, 8007d8c <__ascii_mbtowc+0x6>
 8007d8a:	a901      	add	r1, sp, #4
 8007d8c:	b142      	cbz	r2, 8007da0 <__ascii_mbtowc+0x1a>
 8007d8e:	b14b      	cbz	r3, 8007da4 <__ascii_mbtowc+0x1e>
 8007d90:	7813      	ldrb	r3, [r2, #0]
 8007d92:	600b      	str	r3, [r1, #0]
 8007d94:	7812      	ldrb	r2, [r2, #0]
 8007d96:	1e10      	subs	r0, r2, #0
 8007d98:	bf18      	it	ne
 8007d9a:	2001      	movne	r0, #1
 8007d9c:	b002      	add	sp, #8
 8007d9e:	4770      	bx	lr
 8007da0:	4610      	mov	r0, r2
 8007da2:	e7fb      	b.n	8007d9c <__ascii_mbtowc+0x16>
 8007da4:	f06f 0001 	mvn.w	r0, #1
 8007da8:	e7f8      	b.n	8007d9c <__ascii_mbtowc+0x16>
	...

08007dac <_realloc_r>:
 8007dac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007db0:	4682      	mov	sl, r0
 8007db2:	460c      	mov	r4, r1
 8007db4:	b929      	cbnz	r1, 8007dc2 <_realloc_r+0x16>
 8007db6:	4611      	mov	r1, r2
 8007db8:	b003      	add	sp, #12
 8007dba:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007dbe:	f7fc bca5 	b.w	800470c <_malloc_r>
 8007dc2:	9201      	str	r2, [sp, #4]
 8007dc4:	f7fc fedc 	bl	8004b80 <__malloc_lock>
 8007dc8:	9a01      	ldr	r2, [sp, #4]
 8007dca:	f854 5c04 	ldr.w	r5, [r4, #-4]
 8007dce:	f102 080b 	add.w	r8, r2, #11
 8007dd2:	f1b8 0f16 	cmp.w	r8, #22
 8007dd6:	d90b      	bls.n	8007df0 <_realloc_r+0x44>
 8007dd8:	f038 0807 	bics.w	r8, r8, #7
 8007ddc:	d50a      	bpl.n	8007df4 <_realloc_r+0x48>
 8007dde:	230c      	movs	r3, #12
 8007de0:	f8ca 3000 	str.w	r3, [sl]
 8007de4:	f04f 0b00 	mov.w	fp, #0
 8007de8:	4658      	mov	r0, fp
 8007dea:	b003      	add	sp, #12
 8007dec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007df0:	f04f 0810 	mov.w	r8, #16
 8007df4:	4590      	cmp	r8, r2
 8007df6:	d3f2      	bcc.n	8007dde <_realloc_r+0x32>
 8007df8:	f025 0603 	bic.w	r6, r5, #3
 8007dfc:	45b0      	cmp	r8, r6
 8007dfe:	f1a4 0908 	sub.w	r9, r4, #8
 8007e02:	f340 8170 	ble.w	80080e6 <_realloc_r+0x33a>
 8007e06:	499c      	ldr	r1, [pc, #624]	; (8008078 <_realloc_r+0x2cc>)
 8007e08:	f8d1 c008 	ldr.w	ip, [r1, #8]
 8007e0c:	eb09 0306 	add.w	r3, r9, r6
 8007e10:	459c      	cmp	ip, r3
 8007e12:	6859      	ldr	r1, [r3, #4]
 8007e14:	d005      	beq.n	8007e22 <_realloc_r+0x76>
 8007e16:	f021 0001 	bic.w	r0, r1, #1
 8007e1a:	4418      	add	r0, r3
 8007e1c:	6840      	ldr	r0, [r0, #4]
 8007e1e:	07c7      	lsls	r7, r0, #31
 8007e20:	d447      	bmi.n	8007eb2 <_realloc_r+0x106>
 8007e22:	f021 0103 	bic.w	r1, r1, #3
 8007e26:	459c      	cmp	ip, r3
 8007e28:	eb06 0701 	add.w	r7, r6, r1
 8007e2c:	d119      	bne.n	8007e62 <_realloc_r+0xb6>
 8007e2e:	f108 0010 	add.w	r0, r8, #16
 8007e32:	42b8      	cmp	r0, r7
 8007e34:	dc3f      	bgt.n	8007eb6 <_realloc_r+0x10a>
 8007e36:	eb09 0308 	add.w	r3, r9, r8
 8007e3a:	4a8f      	ldr	r2, [pc, #572]	; (8008078 <_realloc_r+0x2cc>)
 8007e3c:	eba7 0708 	sub.w	r7, r7, r8
 8007e40:	f047 0701 	orr.w	r7, r7, #1
 8007e44:	6093      	str	r3, [r2, #8]
 8007e46:	605f      	str	r7, [r3, #4]
 8007e48:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8007e4c:	f003 0301 	and.w	r3, r3, #1
 8007e50:	ea43 0308 	orr.w	r3, r3, r8
 8007e54:	f844 3c04 	str.w	r3, [r4, #-4]
 8007e58:	4650      	mov	r0, sl
 8007e5a:	f7fc fe97 	bl	8004b8c <__malloc_unlock>
 8007e5e:	46a3      	mov	fp, r4
 8007e60:	e7c2      	b.n	8007de8 <_realloc_r+0x3c>
 8007e62:	45b8      	cmp	r8, r7
 8007e64:	dc27      	bgt.n	8007eb6 <_realloc_r+0x10a>
 8007e66:	e9d3 3202 	ldrd	r3, r2, [r3, #8]
 8007e6a:	60da      	str	r2, [r3, #12]
 8007e6c:	6093      	str	r3, [r2, #8]
 8007e6e:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8007e72:	eba7 0008 	sub.w	r0, r7, r8
 8007e76:	280f      	cmp	r0, #15
 8007e78:	f003 0301 	and.w	r3, r3, #1
 8007e7c:	eb09 0207 	add.w	r2, r9, r7
 8007e80:	f240 8133 	bls.w	80080ea <_realloc_r+0x33e>
 8007e84:	eb09 0108 	add.w	r1, r9, r8
 8007e88:	ea48 0303 	orr.w	r3, r8, r3
 8007e8c:	f040 0001 	orr.w	r0, r0, #1
 8007e90:	f8c9 3004 	str.w	r3, [r9, #4]
 8007e94:	6048      	str	r0, [r1, #4]
 8007e96:	6853      	ldr	r3, [r2, #4]
 8007e98:	f043 0301 	orr.w	r3, r3, #1
 8007e9c:	6053      	str	r3, [r2, #4]
 8007e9e:	3108      	adds	r1, #8
 8007ea0:	4650      	mov	r0, sl
 8007ea2:	f7fd f889 	bl	8004fb8 <_free_r>
 8007ea6:	4650      	mov	r0, sl
 8007ea8:	f7fc fe70 	bl	8004b8c <__malloc_unlock>
 8007eac:	f109 0b08 	add.w	fp, r9, #8
 8007eb0:	e79a      	b.n	8007de8 <_realloc_r+0x3c>
 8007eb2:	2100      	movs	r1, #0
 8007eb4:	460b      	mov	r3, r1
 8007eb6:	07e8      	lsls	r0, r5, #31
 8007eb8:	f100 80c6 	bmi.w	8008048 <_realloc_r+0x29c>
 8007ebc:	f854 5c08 	ldr.w	r5, [r4, #-8]
 8007ec0:	eba9 0505 	sub.w	r5, r9, r5
 8007ec4:	6868      	ldr	r0, [r5, #4]
 8007ec6:	f020 0003 	bic.w	r0, r0, #3
 8007eca:	eb00 0b06 	add.w	fp, r0, r6
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	f000 8086 	beq.w	8007fe0 <_realloc_r+0x234>
 8007ed4:	459c      	cmp	ip, r3
 8007ed6:	eb01 070b 	add.w	r7, r1, fp
 8007eda:	d149      	bne.n	8007f70 <_realloc_r+0x1c4>
 8007edc:	f108 0310 	add.w	r3, r8, #16
 8007ee0:	42bb      	cmp	r3, r7
 8007ee2:	dc7d      	bgt.n	8007fe0 <_realloc_r+0x234>
 8007ee4:	46ab      	mov	fp, r5
 8007ee6:	68eb      	ldr	r3, [r5, #12]
 8007ee8:	f85b 2f08 	ldr.w	r2, [fp, #8]!
 8007eec:	60d3      	str	r3, [r2, #12]
 8007eee:	609a      	str	r2, [r3, #8]
 8007ef0:	1f32      	subs	r2, r6, #4
 8007ef2:	2a24      	cmp	r2, #36	; 0x24
 8007ef4:	d837      	bhi.n	8007f66 <_realloc_r+0x1ba>
 8007ef6:	2a13      	cmp	r2, #19
 8007ef8:	d933      	bls.n	8007f62 <_realloc_r+0x1b6>
 8007efa:	6823      	ldr	r3, [r4, #0]
 8007efc:	60ab      	str	r3, [r5, #8]
 8007efe:	6863      	ldr	r3, [r4, #4]
 8007f00:	60eb      	str	r3, [r5, #12]
 8007f02:	2a1b      	cmp	r2, #27
 8007f04:	d81b      	bhi.n	8007f3e <_realloc_r+0x192>
 8007f06:	3408      	adds	r4, #8
 8007f08:	f105 0310 	add.w	r3, r5, #16
 8007f0c:	6822      	ldr	r2, [r4, #0]
 8007f0e:	601a      	str	r2, [r3, #0]
 8007f10:	6862      	ldr	r2, [r4, #4]
 8007f12:	605a      	str	r2, [r3, #4]
 8007f14:	68a2      	ldr	r2, [r4, #8]
 8007f16:	609a      	str	r2, [r3, #8]
 8007f18:	eb05 0308 	add.w	r3, r5, r8
 8007f1c:	4a56      	ldr	r2, [pc, #344]	; (8008078 <_realloc_r+0x2cc>)
 8007f1e:	eba7 0708 	sub.w	r7, r7, r8
 8007f22:	f047 0701 	orr.w	r7, r7, #1
 8007f26:	6093      	str	r3, [r2, #8]
 8007f28:	605f      	str	r7, [r3, #4]
 8007f2a:	686b      	ldr	r3, [r5, #4]
 8007f2c:	f003 0301 	and.w	r3, r3, #1
 8007f30:	ea43 0308 	orr.w	r3, r3, r8
 8007f34:	606b      	str	r3, [r5, #4]
 8007f36:	4650      	mov	r0, sl
 8007f38:	f7fc fe28 	bl	8004b8c <__malloc_unlock>
 8007f3c:	e754      	b.n	8007de8 <_realloc_r+0x3c>
 8007f3e:	68a3      	ldr	r3, [r4, #8]
 8007f40:	612b      	str	r3, [r5, #16]
 8007f42:	68e3      	ldr	r3, [r4, #12]
 8007f44:	616b      	str	r3, [r5, #20]
 8007f46:	2a24      	cmp	r2, #36	; 0x24
 8007f48:	bf01      	itttt	eq
 8007f4a:	6923      	ldreq	r3, [r4, #16]
 8007f4c:	61ab      	streq	r3, [r5, #24]
 8007f4e:	6962      	ldreq	r2, [r4, #20]
 8007f50:	61ea      	streq	r2, [r5, #28]
 8007f52:	bf19      	ittee	ne
 8007f54:	3410      	addne	r4, #16
 8007f56:	f105 0318 	addne.w	r3, r5, #24
 8007f5a:	f105 0320 	addeq.w	r3, r5, #32
 8007f5e:	3418      	addeq	r4, #24
 8007f60:	e7d4      	b.n	8007f0c <_realloc_r+0x160>
 8007f62:	465b      	mov	r3, fp
 8007f64:	e7d2      	b.n	8007f0c <_realloc_r+0x160>
 8007f66:	4621      	mov	r1, r4
 8007f68:	4658      	mov	r0, fp
 8007f6a:	f7ff fe8a 	bl	8007c82 <memmove>
 8007f6e:	e7d3      	b.n	8007f18 <_realloc_r+0x16c>
 8007f70:	45b8      	cmp	r8, r7
 8007f72:	dc35      	bgt.n	8007fe0 <_realloc_r+0x234>
 8007f74:	e9d3 3202 	ldrd	r3, r2, [r3, #8]
 8007f78:	4628      	mov	r0, r5
 8007f7a:	60da      	str	r2, [r3, #12]
 8007f7c:	6093      	str	r3, [r2, #8]
 8007f7e:	f850 2f08 	ldr.w	r2, [r0, #8]!
 8007f82:	68eb      	ldr	r3, [r5, #12]
 8007f84:	60d3      	str	r3, [r2, #12]
 8007f86:	609a      	str	r2, [r3, #8]
 8007f88:	1f32      	subs	r2, r6, #4
 8007f8a:	2a24      	cmp	r2, #36	; 0x24
 8007f8c:	d824      	bhi.n	8007fd8 <_realloc_r+0x22c>
 8007f8e:	2a13      	cmp	r2, #19
 8007f90:	d908      	bls.n	8007fa4 <_realloc_r+0x1f8>
 8007f92:	6823      	ldr	r3, [r4, #0]
 8007f94:	60ab      	str	r3, [r5, #8]
 8007f96:	6863      	ldr	r3, [r4, #4]
 8007f98:	60eb      	str	r3, [r5, #12]
 8007f9a:	2a1b      	cmp	r2, #27
 8007f9c:	d80a      	bhi.n	8007fb4 <_realloc_r+0x208>
 8007f9e:	3408      	adds	r4, #8
 8007fa0:	f105 0010 	add.w	r0, r5, #16
 8007fa4:	6823      	ldr	r3, [r4, #0]
 8007fa6:	6003      	str	r3, [r0, #0]
 8007fa8:	6863      	ldr	r3, [r4, #4]
 8007faa:	6043      	str	r3, [r0, #4]
 8007fac:	68a3      	ldr	r3, [r4, #8]
 8007fae:	6083      	str	r3, [r0, #8]
 8007fb0:	46a9      	mov	r9, r5
 8007fb2:	e75c      	b.n	8007e6e <_realloc_r+0xc2>
 8007fb4:	68a3      	ldr	r3, [r4, #8]
 8007fb6:	612b      	str	r3, [r5, #16]
 8007fb8:	68e3      	ldr	r3, [r4, #12]
 8007fba:	616b      	str	r3, [r5, #20]
 8007fbc:	2a24      	cmp	r2, #36	; 0x24
 8007fbe:	bf01      	itttt	eq
 8007fc0:	6923      	ldreq	r3, [r4, #16]
 8007fc2:	61ab      	streq	r3, [r5, #24]
 8007fc4:	6963      	ldreq	r3, [r4, #20]
 8007fc6:	61eb      	streq	r3, [r5, #28]
 8007fc8:	bf19      	ittee	ne
 8007fca:	3410      	addne	r4, #16
 8007fcc:	f105 0018 	addne.w	r0, r5, #24
 8007fd0:	f105 0020 	addeq.w	r0, r5, #32
 8007fd4:	3418      	addeq	r4, #24
 8007fd6:	e7e5      	b.n	8007fa4 <_realloc_r+0x1f8>
 8007fd8:	4621      	mov	r1, r4
 8007fda:	f7ff fe52 	bl	8007c82 <memmove>
 8007fde:	e7e7      	b.n	8007fb0 <_realloc_r+0x204>
 8007fe0:	45d8      	cmp	r8, fp
 8007fe2:	dc31      	bgt.n	8008048 <_realloc_r+0x29c>
 8007fe4:	4628      	mov	r0, r5
 8007fe6:	68eb      	ldr	r3, [r5, #12]
 8007fe8:	f850 2f08 	ldr.w	r2, [r0, #8]!
 8007fec:	60d3      	str	r3, [r2, #12]
 8007fee:	609a      	str	r2, [r3, #8]
 8007ff0:	1f32      	subs	r2, r6, #4
 8007ff2:	2a24      	cmp	r2, #36	; 0x24
 8007ff4:	d824      	bhi.n	8008040 <_realloc_r+0x294>
 8007ff6:	2a13      	cmp	r2, #19
 8007ff8:	d908      	bls.n	800800c <_realloc_r+0x260>
 8007ffa:	6823      	ldr	r3, [r4, #0]
 8007ffc:	60ab      	str	r3, [r5, #8]
 8007ffe:	6863      	ldr	r3, [r4, #4]
 8008000:	60eb      	str	r3, [r5, #12]
 8008002:	2a1b      	cmp	r2, #27
 8008004:	d80a      	bhi.n	800801c <_realloc_r+0x270>
 8008006:	3408      	adds	r4, #8
 8008008:	f105 0010 	add.w	r0, r5, #16
 800800c:	6823      	ldr	r3, [r4, #0]
 800800e:	6003      	str	r3, [r0, #0]
 8008010:	6863      	ldr	r3, [r4, #4]
 8008012:	6043      	str	r3, [r0, #4]
 8008014:	68a3      	ldr	r3, [r4, #8]
 8008016:	6083      	str	r3, [r0, #8]
 8008018:	465f      	mov	r7, fp
 800801a:	e7c9      	b.n	8007fb0 <_realloc_r+0x204>
 800801c:	68a3      	ldr	r3, [r4, #8]
 800801e:	612b      	str	r3, [r5, #16]
 8008020:	68e3      	ldr	r3, [r4, #12]
 8008022:	616b      	str	r3, [r5, #20]
 8008024:	2a24      	cmp	r2, #36	; 0x24
 8008026:	bf01      	itttt	eq
 8008028:	6923      	ldreq	r3, [r4, #16]
 800802a:	61ab      	streq	r3, [r5, #24]
 800802c:	6963      	ldreq	r3, [r4, #20]
 800802e:	61eb      	streq	r3, [r5, #28]
 8008030:	bf19      	ittee	ne
 8008032:	3410      	addne	r4, #16
 8008034:	f105 0018 	addne.w	r0, r5, #24
 8008038:	f105 0020 	addeq.w	r0, r5, #32
 800803c:	3418      	addeq	r4, #24
 800803e:	e7e5      	b.n	800800c <_realloc_r+0x260>
 8008040:	4621      	mov	r1, r4
 8008042:	f7ff fe1e 	bl	8007c82 <memmove>
 8008046:	e7e7      	b.n	8008018 <_realloc_r+0x26c>
 8008048:	4611      	mov	r1, r2
 800804a:	4650      	mov	r0, sl
 800804c:	f7fc fb5e 	bl	800470c <_malloc_r>
 8008050:	4683      	mov	fp, r0
 8008052:	2800      	cmp	r0, #0
 8008054:	f43f af6f 	beq.w	8007f36 <_realloc_r+0x18a>
 8008058:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800805c:	f023 0301 	bic.w	r3, r3, #1
 8008060:	444b      	add	r3, r9
 8008062:	f1a0 0208 	sub.w	r2, r0, #8
 8008066:	4293      	cmp	r3, r2
 8008068:	d108      	bne.n	800807c <_realloc_r+0x2d0>
 800806a:	f850 7c04 	ldr.w	r7, [r0, #-4]
 800806e:	f027 0703 	bic.w	r7, r7, #3
 8008072:	4437      	add	r7, r6
 8008074:	e6fb      	b.n	8007e6e <_realloc_r+0xc2>
 8008076:	bf00      	nop
 8008078:	2000000c 	.word	0x2000000c
 800807c:	1f32      	subs	r2, r6, #4
 800807e:	2a24      	cmp	r2, #36	; 0x24
 8008080:	d82d      	bhi.n	80080de <_realloc_r+0x332>
 8008082:	2a13      	cmp	r2, #19
 8008084:	d928      	bls.n	80080d8 <_realloc_r+0x32c>
 8008086:	6823      	ldr	r3, [r4, #0]
 8008088:	6003      	str	r3, [r0, #0]
 800808a:	6863      	ldr	r3, [r4, #4]
 800808c:	6043      	str	r3, [r0, #4]
 800808e:	2a1b      	cmp	r2, #27
 8008090:	d80e      	bhi.n	80080b0 <_realloc_r+0x304>
 8008092:	f104 0208 	add.w	r2, r4, #8
 8008096:	f100 0308 	add.w	r3, r0, #8
 800809a:	6811      	ldr	r1, [r2, #0]
 800809c:	6019      	str	r1, [r3, #0]
 800809e:	6851      	ldr	r1, [r2, #4]
 80080a0:	6059      	str	r1, [r3, #4]
 80080a2:	6892      	ldr	r2, [r2, #8]
 80080a4:	609a      	str	r2, [r3, #8]
 80080a6:	4621      	mov	r1, r4
 80080a8:	4650      	mov	r0, sl
 80080aa:	f7fc ff85 	bl	8004fb8 <_free_r>
 80080ae:	e742      	b.n	8007f36 <_realloc_r+0x18a>
 80080b0:	68a3      	ldr	r3, [r4, #8]
 80080b2:	6083      	str	r3, [r0, #8]
 80080b4:	68e3      	ldr	r3, [r4, #12]
 80080b6:	60c3      	str	r3, [r0, #12]
 80080b8:	2a24      	cmp	r2, #36	; 0x24
 80080ba:	bf01      	itttt	eq
 80080bc:	6923      	ldreq	r3, [r4, #16]
 80080be:	6103      	streq	r3, [r0, #16]
 80080c0:	6961      	ldreq	r1, [r4, #20]
 80080c2:	6141      	streq	r1, [r0, #20]
 80080c4:	bf19      	ittee	ne
 80080c6:	f104 0210 	addne.w	r2, r4, #16
 80080ca:	f100 0310 	addne.w	r3, r0, #16
 80080ce:	f104 0218 	addeq.w	r2, r4, #24
 80080d2:	f100 0318 	addeq.w	r3, r0, #24
 80080d6:	e7e0      	b.n	800809a <_realloc_r+0x2ee>
 80080d8:	4603      	mov	r3, r0
 80080da:	4622      	mov	r2, r4
 80080dc:	e7dd      	b.n	800809a <_realloc_r+0x2ee>
 80080de:	4621      	mov	r1, r4
 80080e0:	f7ff fdcf 	bl	8007c82 <memmove>
 80080e4:	e7df      	b.n	80080a6 <_realloc_r+0x2fa>
 80080e6:	4637      	mov	r7, r6
 80080e8:	e6c1      	b.n	8007e6e <_realloc_r+0xc2>
 80080ea:	431f      	orrs	r7, r3
 80080ec:	f8c9 7004 	str.w	r7, [r9, #4]
 80080f0:	6853      	ldr	r3, [r2, #4]
 80080f2:	f043 0301 	orr.w	r3, r3, #1
 80080f6:	6053      	str	r3, [r2, #4]
 80080f8:	e6d5      	b.n	8007ea6 <_realloc_r+0xfa>
 80080fa:	bf00      	nop

080080fc <__ascii_wctomb>:
 80080fc:	b149      	cbz	r1, 8008112 <__ascii_wctomb+0x16>
 80080fe:	2aff      	cmp	r2, #255	; 0xff
 8008100:	bf85      	ittet	hi
 8008102:	238a      	movhi	r3, #138	; 0x8a
 8008104:	6003      	strhi	r3, [r0, #0]
 8008106:	700a      	strbls	r2, [r1, #0]
 8008108:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800810c:	bf98      	it	ls
 800810e:	2001      	movls	r0, #1
 8008110:	4770      	bx	lr
 8008112:	4608      	mov	r0, r1
 8008114:	4770      	bx	lr
	...

08008118 <fiprintf>:
 8008118:	b40e      	push	{r1, r2, r3}
 800811a:	b503      	push	{r0, r1, lr}
 800811c:	4601      	mov	r1, r0
 800811e:	ab03      	add	r3, sp, #12
 8008120:	4805      	ldr	r0, [pc, #20]	; (8008138 <fiprintf+0x20>)
 8008122:	f853 2b04 	ldr.w	r2, [r3], #4
 8008126:	6800      	ldr	r0, [r0, #0]
 8008128:	9301      	str	r3, [sp, #4]
 800812a:	f000 f839 	bl	80081a0 <_vfiprintf_r>
 800812e:	b002      	add	sp, #8
 8008130:	f85d eb04 	ldr.w	lr, [sp], #4
 8008134:	b003      	add	sp, #12
 8008136:	4770      	bx	lr
 8008138:	20000548 	.word	0x20000548

0800813c <__sprint_r>:
 800813c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008140:	6893      	ldr	r3, [r2, #8]
 8008142:	4680      	mov	r8, r0
 8008144:	460f      	mov	r7, r1
 8008146:	4614      	mov	r4, r2
 8008148:	b343      	cbz	r3, 800819c <__sprint_r+0x60>
 800814a:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 800814c:	049d      	lsls	r5, r3, #18
 800814e:	d522      	bpl.n	8008196 <__sprint_r+0x5a>
 8008150:	6815      	ldr	r5, [r2, #0]
 8008152:	3508      	adds	r5, #8
 8008154:	e955 b602 	ldrd	fp, r6, [r5, #-8]
 8008158:	f04f 0900 	mov.w	r9, #0
 800815c:	ea4f 0a96 	mov.w	sl, r6, lsr #2
 8008160:	45ca      	cmp	sl, r9
 8008162:	dc0d      	bgt.n	8008180 <__sprint_r+0x44>
 8008164:	68a3      	ldr	r3, [r4, #8]
 8008166:	f026 0603 	bic.w	r6, r6, #3
 800816a:	1b98      	subs	r0, r3, r6
 800816c:	60a0      	str	r0, [r4, #8]
 800816e:	3508      	adds	r5, #8
 8008170:	2800      	cmp	r0, #0
 8008172:	d1ef      	bne.n	8008154 <__sprint_r+0x18>
 8008174:	2300      	movs	r3, #0
 8008176:	60a3      	str	r3, [r4, #8]
 8008178:	2300      	movs	r3, #0
 800817a:	6063      	str	r3, [r4, #4]
 800817c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008180:	f85b 1029 	ldr.w	r1, [fp, r9, lsl #2]
 8008184:	463a      	mov	r2, r7
 8008186:	4640      	mov	r0, r8
 8008188:	f000 febf 	bl	8008f0a <_fputwc_r>
 800818c:	1c43      	adds	r3, r0, #1
 800818e:	d0f1      	beq.n	8008174 <__sprint_r+0x38>
 8008190:	f109 0901 	add.w	r9, r9, #1
 8008194:	e7e4      	b.n	8008160 <__sprint_r+0x24>
 8008196:	f000 fcd5 	bl	8008b44 <__sfvwrite_r>
 800819a:	e7eb      	b.n	8008174 <__sprint_r+0x38>
 800819c:	4618      	mov	r0, r3
 800819e:	e7eb      	b.n	8008178 <__sprint_r+0x3c>

080081a0 <_vfiprintf_r>:
 80081a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081a4:	ed2d 8b02 	vpush	{d8}
 80081a8:	b0bb      	sub	sp, #236	; 0xec
 80081aa:	460f      	mov	r7, r1
 80081ac:	9201      	str	r2, [sp, #4]
 80081ae:	461d      	mov	r5, r3
 80081b0:	461c      	mov	r4, r3
 80081b2:	4681      	mov	r9, r0
 80081b4:	b118      	cbz	r0, 80081be <_vfiprintf_r+0x1e>
 80081b6:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80081b8:	b90b      	cbnz	r3, 80081be <_vfiprintf_r+0x1e>
 80081ba:	f7fc fd67 	bl	8004c8c <__sinit>
 80081be:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80081c0:	07d8      	lsls	r0, r3, #31
 80081c2:	d405      	bmi.n	80081d0 <_vfiprintf_r+0x30>
 80081c4:	89bb      	ldrh	r3, [r7, #12]
 80081c6:	0599      	lsls	r1, r3, #22
 80081c8:	d402      	bmi.n	80081d0 <_vfiprintf_r+0x30>
 80081ca:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80081cc:	f7fc fe82 	bl	8004ed4 <__retarget_lock_acquire_recursive>
 80081d0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80081d4:	049a      	lsls	r2, r3, #18
 80081d6:	d406      	bmi.n	80081e6 <_vfiprintf_r+0x46>
 80081d8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80081dc:	81bb      	strh	r3, [r7, #12]
 80081de:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80081e0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80081e4:	667b      	str	r3, [r7, #100]	; 0x64
 80081e6:	89bb      	ldrh	r3, [r7, #12]
 80081e8:	071e      	lsls	r6, r3, #28
 80081ea:	d501      	bpl.n	80081f0 <_vfiprintf_r+0x50>
 80081ec:	693b      	ldr	r3, [r7, #16]
 80081ee:	b9bb      	cbnz	r3, 8008220 <_vfiprintf_r+0x80>
 80081f0:	4639      	mov	r1, r7
 80081f2:	4648      	mov	r0, r9
 80081f4:	f000 fdf0 	bl	8008dd8 <__swsetup_r>
 80081f8:	b190      	cbz	r0, 8008220 <_vfiprintf_r+0x80>
 80081fa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80081fc:	07d8      	lsls	r0, r3, #31
 80081fe:	d508      	bpl.n	8008212 <_vfiprintf_r+0x72>
 8008200:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008204:	9302      	str	r3, [sp, #8]
 8008206:	9802      	ldr	r0, [sp, #8]
 8008208:	b03b      	add	sp, #236	; 0xec
 800820a:	ecbd 8b02 	vpop	{d8}
 800820e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008212:	89bb      	ldrh	r3, [r7, #12]
 8008214:	0599      	lsls	r1, r3, #22
 8008216:	d4f3      	bmi.n	8008200 <_vfiprintf_r+0x60>
 8008218:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800821a:	f7fc fe5c 	bl	8004ed6 <__retarget_lock_release_recursive>
 800821e:	e7ef      	b.n	8008200 <_vfiprintf_r+0x60>
 8008220:	89bb      	ldrh	r3, [r7, #12]
 8008222:	f003 021a 	and.w	r2, r3, #26
 8008226:	2a0a      	cmp	r2, #10
 8008228:	d116      	bne.n	8008258 <_vfiprintf_r+0xb8>
 800822a:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800822e:	2a00      	cmp	r2, #0
 8008230:	db12      	blt.n	8008258 <_vfiprintf_r+0xb8>
 8008232:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8008234:	07d2      	lsls	r2, r2, #31
 8008236:	d404      	bmi.n	8008242 <_vfiprintf_r+0xa2>
 8008238:	059e      	lsls	r6, r3, #22
 800823a:	d402      	bmi.n	8008242 <_vfiprintf_r+0xa2>
 800823c:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800823e:	f7fc fe4a 	bl	8004ed6 <__retarget_lock_release_recursive>
 8008242:	9a01      	ldr	r2, [sp, #4]
 8008244:	462b      	mov	r3, r5
 8008246:	4639      	mov	r1, r7
 8008248:	4648      	mov	r0, r9
 800824a:	b03b      	add	sp, #236	; 0xec
 800824c:	ecbd 8b02 	vpop	{d8}
 8008250:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008254:	f000 bc36 	b.w	8008ac4 <__sbprintf>
 8008258:	2300      	movs	r3, #0
 800825a:	e9cd 330f 	strd	r3, r3, [sp, #60]	; 0x3c
 800825e:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8008262:	ae11      	add	r6, sp, #68	; 0x44
 8008264:	ee08 3a10 	vmov	s16, r3
 8008268:	960e      	str	r6, [sp, #56]	; 0x38
 800826a:	9307      	str	r3, [sp, #28]
 800826c:	9302      	str	r3, [sp, #8]
 800826e:	9b01      	ldr	r3, [sp, #4]
 8008270:	461d      	mov	r5, r3
 8008272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008276:	b10a      	cbz	r2, 800827c <_vfiprintf_r+0xdc>
 8008278:	2a25      	cmp	r2, #37	; 0x25
 800827a:	d1f9      	bne.n	8008270 <_vfiprintf_r+0xd0>
 800827c:	9b01      	ldr	r3, [sp, #4]
 800827e:	ebb5 0803 	subs.w	r8, r5, r3
 8008282:	d00d      	beq.n	80082a0 <_vfiprintf_r+0x100>
 8008284:	e9c6 3800 	strd	r3, r8, [r6]
 8008288:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800828a:	4443      	add	r3, r8
 800828c:	9310      	str	r3, [sp, #64]	; 0x40
 800828e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008290:	3301      	adds	r3, #1
 8008292:	2b07      	cmp	r3, #7
 8008294:	930f      	str	r3, [sp, #60]	; 0x3c
 8008296:	dc76      	bgt.n	8008386 <_vfiprintf_r+0x1e6>
 8008298:	3608      	adds	r6, #8
 800829a:	9b02      	ldr	r3, [sp, #8]
 800829c:	4443      	add	r3, r8
 800829e:	9302      	str	r3, [sp, #8]
 80082a0:	782b      	ldrb	r3, [r5, #0]
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	f000 83d0 	beq.w	8008a48 <_vfiprintf_r+0x8a8>
 80082a8:	2300      	movs	r3, #0
 80082aa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80082ae:	3501      	adds	r5, #1
 80082b0:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
 80082b4:	9200      	str	r2, [sp, #0]
 80082b6:	9303      	str	r3, [sp, #12]
 80082b8:	469a      	mov	sl, r3
 80082ba:	462a      	mov	r2, r5
 80082bc:	f812 3b01 	ldrb.w	r3, [r2], #1
 80082c0:	9201      	str	r2, [sp, #4]
 80082c2:	f1a3 0220 	sub.w	r2, r3, #32
 80082c6:	2a5a      	cmp	r2, #90	; 0x5a
 80082c8:	f200 831c 	bhi.w	8008904 <_vfiprintf_r+0x764>
 80082cc:	e8df f012 	tbh	[pc, r2, lsl #1]
 80082d0:	031a007e 	.word	0x031a007e
 80082d4:	0086031a 	.word	0x0086031a
 80082d8:	031a031a 	.word	0x031a031a
 80082dc:	0065031a 	.word	0x0065031a
 80082e0:	031a031a 	.word	0x031a031a
 80082e4:	00930089 	.word	0x00930089
 80082e8:	0090031a 	.word	0x0090031a
 80082ec:	031a0095 	.word	0x031a0095
 80082f0:	00b300b0 	.word	0x00b300b0
 80082f4:	00b300b3 	.word	0x00b300b3
 80082f8:	00b300b3 	.word	0x00b300b3
 80082fc:	00b300b3 	.word	0x00b300b3
 8008300:	00b300b3 	.word	0x00b300b3
 8008304:	031a031a 	.word	0x031a031a
 8008308:	031a031a 	.word	0x031a031a
 800830c:	031a031a 	.word	0x031a031a
 8008310:	031a031a 	.word	0x031a031a
 8008314:	00dd031a 	.word	0x00dd031a
 8008318:	031a00eb 	.word	0x031a00eb
 800831c:	031a031a 	.word	0x031a031a
 8008320:	031a031a 	.word	0x031a031a
 8008324:	031a031a 	.word	0x031a031a
 8008328:	031a031a 	.word	0x031a031a
 800832c:	013b031a 	.word	0x013b031a
 8008330:	031a031a 	.word	0x031a031a
 8008334:	0180031a 	.word	0x0180031a
 8008338:	025e031a 	.word	0x025e031a
 800833c:	031a031a 	.word	0x031a031a
 8008340:	031a027e 	.word	0x031a027e
 8008344:	031a031a 	.word	0x031a031a
 8008348:	031a031a 	.word	0x031a031a
 800834c:	031a031a 	.word	0x031a031a
 8008350:	031a031a 	.word	0x031a031a
 8008354:	00dd031a 	.word	0x00dd031a
 8008358:	031a00ed 	.word	0x031a00ed
 800835c:	031a031a 	.word	0x031a031a
 8008360:	00ed00c3 	.word	0x00ed00c3
 8008364:	031a00d7 	.word	0x031a00d7
 8008368:	031a00d0 	.word	0x031a00d0
 800836c:	013d0119 	.word	0x013d0119
 8008370:	00d70172 	.word	0x00d70172
 8008374:	0180031a 	.word	0x0180031a
 8008378:	0260007c 	.word	0x0260007c
 800837c:	031a031a 	.word	0x031a031a
 8008380:	031a029a 	.word	0x031a029a
 8008384:	007c      	.short	0x007c
 8008386:	aa0e      	add	r2, sp, #56	; 0x38
 8008388:	4639      	mov	r1, r7
 800838a:	4648      	mov	r0, r9
 800838c:	f7ff fed6 	bl	800813c <__sprint_r>
 8008390:	2800      	cmp	r0, #0
 8008392:	f040 8338 	bne.w	8008a06 <_vfiprintf_r+0x866>
 8008396:	ae11      	add	r6, sp, #68	; 0x44
 8008398:	e77f      	b.n	800829a <_vfiprintf_r+0xfa>
 800839a:	4648      	mov	r0, r9
 800839c:	f7fe f9d8 	bl	8006750 <_localeconv_r>
 80083a0:	6843      	ldr	r3, [r0, #4]
 80083a2:	4618      	mov	r0, r3
 80083a4:	ee08 3a10 	vmov	s16, r3
 80083a8:	f7f7 ff3a 	bl	8000220 <strlen>
 80083ac:	9007      	str	r0, [sp, #28]
 80083ae:	4648      	mov	r0, r9
 80083b0:	f7fe f9ce 	bl	8006750 <_localeconv_r>
 80083b4:	6883      	ldr	r3, [r0, #8]
 80083b6:	9306      	str	r3, [sp, #24]
 80083b8:	9b07      	ldr	r3, [sp, #28]
 80083ba:	b12b      	cbz	r3, 80083c8 <_vfiprintf_r+0x228>
 80083bc:	9b06      	ldr	r3, [sp, #24]
 80083be:	b11b      	cbz	r3, 80083c8 <_vfiprintf_r+0x228>
 80083c0:	781b      	ldrb	r3, [r3, #0]
 80083c2:	b10b      	cbz	r3, 80083c8 <_vfiprintf_r+0x228>
 80083c4:	f44a 6a80 	orr.w	sl, sl, #1024	; 0x400
 80083c8:	9d01      	ldr	r5, [sp, #4]
 80083ca:	e776      	b.n	80082ba <_vfiprintf_r+0x11a>
 80083cc:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d1f9      	bne.n	80083c8 <_vfiprintf_r+0x228>
 80083d4:	2320      	movs	r3, #32
 80083d6:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
 80083da:	e7f5      	b.n	80083c8 <_vfiprintf_r+0x228>
 80083dc:	f04a 0a01 	orr.w	sl, sl, #1
 80083e0:	e7f2      	b.n	80083c8 <_vfiprintf_r+0x228>
 80083e2:	f854 3b04 	ldr.w	r3, [r4], #4
 80083e6:	9303      	str	r3, [sp, #12]
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	daed      	bge.n	80083c8 <_vfiprintf_r+0x228>
 80083ec:	425b      	negs	r3, r3
 80083ee:	9303      	str	r3, [sp, #12]
 80083f0:	f04a 0a04 	orr.w	sl, sl, #4
 80083f4:	e7e8      	b.n	80083c8 <_vfiprintf_r+0x228>
 80083f6:	232b      	movs	r3, #43	; 0x2b
 80083f8:	e7ed      	b.n	80083d6 <_vfiprintf_r+0x236>
 80083fa:	9a01      	ldr	r2, [sp, #4]
 80083fc:	f812 3b01 	ldrb.w	r3, [r2], #1
 8008400:	2b2a      	cmp	r3, #42	; 0x2a
 8008402:	d112      	bne.n	800842a <_vfiprintf_r+0x28a>
 8008404:	f854 3b04 	ldr.w	r3, [r4], #4
 8008408:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800840c:	e9cd 3200 	strd	r3, r2, [sp]
 8008410:	e7da      	b.n	80083c8 <_vfiprintf_r+0x228>
 8008412:	9b00      	ldr	r3, [sp, #0]
 8008414:	200a      	movs	r0, #10
 8008416:	fb00 1303 	mla	r3, r0, r3, r1
 800841a:	9300      	str	r3, [sp, #0]
 800841c:	f812 3b01 	ldrb.w	r3, [r2], #1
 8008420:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8008424:	2909      	cmp	r1, #9
 8008426:	d9f4      	bls.n	8008412 <_vfiprintf_r+0x272>
 8008428:	e74a      	b.n	80082c0 <_vfiprintf_r+0x120>
 800842a:	2100      	movs	r1, #0
 800842c:	9100      	str	r1, [sp, #0]
 800842e:	e7f7      	b.n	8008420 <_vfiprintf_r+0x280>
 8008430:	f04a 0a80 	orr.w	sl, sl, #128	; 0x80
 8008434:	e7c8      	b.n	80083c8 <_vfiprintf_r+0x228>
 8008436:	2100      	movs	r1, #0
 8008438:	9a01      	ldr	r2, [sp, #4]
 800843a:	9103      	str	r1, [sp, #12]
 800843c:	9903      	ldr	r1, [sp, #12]
 800843e:	3b30      	subs	r3, #48	; 0x30
 8008440:	200a      	movs	r0, #10
 8008442:	fb00 3301 	mla	r3, r0, r1, r3
 8008446:	9303      	str	r3, [sp, #12]
 8008448:	f812 3b01 	ldrb.w	r3, [r2], #1
 800844c:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8008450:	2909      	cmp	r1, #9
 8008452:	d9f3      	bls.n	800843c <_vfiprintf_r+0x29c>
 8008454:	e734      	b.n	80082c0 <_vfiprintf_r+0x120>
 8008456:	9b01      	ldr	r3, [sp, #4]
 8008458:	781b      	ldrb	r3, [r3, #0]
 800845a:	2b68      	cmp	r3, #104	; 0x68
 800845c:	bf01      	itttt	eq
 800845e:	9b01      	ldreq	r3, [sp, #4]
 8008460:	3301      	addeq	r3, #1
 8008462:	9301      	streq	r3, [sp, #4]
 8008464:	f44a 7a00 	orreq.w	sl, sl, #512	; 0x200
 8008468:	bf18      	it	ne
 800846a:	f04a 0a40 	orrne.w	sl, sl, #64	; 0x40
 800846e:	e7ab      	b.n	80083c8 <_vfiprintf_r+0x228>
 8008470:	9b01      	ldr	r3, [sp, #4]
 8008472:	781b      	ldrb	r3, [r3, #0]
 8008474:	2b6c      	cmp	r3, #108	; 0x6c
 8008476:	d105      	bne.n	8008484 <_vfiprintf_r+0x2e4>
 8008478:	9b01      	ldr	r3, [sp, #4]
 800847a:	3301      	adds	r3, #1
 800847c:	9301      	str	r3, [sp, #4]
 800847e:	f04a 0a20 	orr.w	sl, sl, #32
 8008482:	e7a1      	b.n	80083c8 <_vfiprintf_r+0x228>
 8008484:	f04a 0a10 	orr.w	sl, sl, #16
 8008488:	e79e      	b.n	80083c8 <_vfiprintf_r+0x228>
 800848a:	46a0      	mov	r8, r4
 800848c:	f858 3b04 	ldr.w	r3, [r8], #4
 8008490:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
 8008494:	2300      	movs	r3, #0
 8008496:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
 800849a:	2201      	movs	r2, #1
 800849c:	9200      	str	r2, [sp, #0]
 800849e:	461d      	mov	r5, r3
 80084a0:	f10d 0b84 	add.w	fp, sp, #132	; 0x84
 80084a4:	e0a9      	b.n	80085fa <_vfiprintf_r+0x45a>
 80084a6:	f04a 0a10 	orr.w	sl, sl, #16
 80084aa:	f01a 0f20 	tst.w	sl, #32
 80084ae:	d011      	beq.n	80084d4 <_vfiprintf_r+0x334>
 80084b0:	3407      	adds	r4, #7
 80084b2:	f024 0307 	bic.w	r3, r4, #7
 80084b6:	4698      	mov	r8, r3
 80084b8:	685d      	ldr	r5, [r3, #4]
 80084ba:	f858 4b08 	ldr.w	r4, [r8], #8
 80084be:	2d00      	cmp	r5, #0
 80084c0:	da06      	bge.n	80084d0 <_vfiprintf_r+0x330>
 80084c2:	4264      	negs	r4, r4
 80084c4:	f04f 032d 	mov.w	r3, #45	; 0x2d
 80084c8:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
 80084cc:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
 80084d0:	2301      	movs	r3, #1
 80084d2:	e04a      	b.n	800856a <_vfiprintf_r+0x3ca>
 80084d4:	46a0      	mov	r8, r4
 80084d6:	f01a 0f10 	tst.w	sl, #16
 80084da:	f858 5b04 	ldr.w	r5, [r8], #4
 80084de:	d002      	beq.n	80084e6 <_vfiprintf_r+0x346>
 80084e0:	462c      	mov	r4, r5
 80084e2:	17ed      	asrs	r5, r5, #31
 80084e4:	e7eb      	b.n	80084be <_vfiprintf_r+0x31e>
 80084e6:	f01a 0f40 	tst.w	sl, #64	; 0x40
 80084ea:	d003      	beq.n	80084f4 <_vfiprintf_r+0x354>
 80084ec:	b22c      	sxth	r4, r5
 80084ee:	f345 35c0 	sbfx	r5, r5, #15, #1
 80084f2:	e7e4      	b.n	80084be <_vfiprintf_r+0x31e>
 80084f4:	f41a 7f00 	tst.w	sl, #512	; 0x200
 80084f8:	d0f2      	beq.n	80084e0 <_vfiprintf_r+0x340>
 80084fa:	b26c      	sxtb	r4, r5
 80084fc:	f345 15c0 	sbfx	r5, r5, #7, #1
 8008500:	e7dd      	b.n	80084be <_vfiprintf_r+0x31e>
 8008502:	f01a 0f20 	tst.w	sl, #32
 8008506:	f104 0804 	add.w	r8, r4, #4
 800850a:	d007      	beq.n	800851c <_vfiprintf_r+0x37c>
 800850c:	9a02      	ldr	r2, [sp, #8]
 800850e:	6823      	ldr	r3, [r4, #0]
 8008510:	9902      	ldr	r1, [sp, #8]
 8008512:	17d2      	asrs	r2, r2, #31
 8008514:	e9c3 1200 	strd	r1, r2, [r3]
 8008518:	4644      	mov	r4, r8
 800851a:	e6a8      	b.n	800826e <_vfiprintf_r+0xce>
 800851c:	f01a 0f10 	tst.w	sl, #16
 8008520:	d003      	beq.n	800852a <_vfiprintf_r+0x38a>
 8008522:	6823      	ldr	r3, [r4, #0]
 8008524:	9a02      	ldr	r2, [sp, #8]
 8008526:	601a      	str	r2, [r3, #0]
 8008528:	e7f6      	b.n	8008518 <_vfiprintf_r+0x378>
 800852a:	f01a 0f40 	tst.w	sl, #64	; 0x40
 800852e:	d003      	beq.n	8008538 <_vfiprintf_r+0x398>
 8008530:	6823      	ldr	r3, [r4, #0]
 8008532:	9a02      	ldr	r2, [sp, #8]
 8008534:	801a      	strh	r2, [r3, #0]
 8008536:	e7ef      	b.n	8008518 <_vfiprintf_r+0x378>
 8008538:	f41a 7f00 	tst.w	sl, #512	; 0x200
 800853c:	d0f1      	beq.n	8008522 <_vfiprintf_r+0x382>
 800853e:	6823      	ldr	r3, [r4, #0]
 8008540:	9a02      	ldr	r2, [sp, #8]
 8008542:	701a      	strb	r2, [r3, #0]
 8008544:	e7e8      	b.n	8008518 <_vfiprintf_r+0x378>
 8008546:	f04a 0a10 	orr.w	sl, sl, #16
 800854a:	f01a 0320 	ands.w	r3, sl, #32
 800854e:	d01f      	beq.n	8008590 <_vfiprintf_r+0x3f0>
 8008550:	3407      	adds	r4, #7
 8008552:	f024 0307 	bic.w	r3, r4, #7
 8008556:	4698      	mov	r8, r3
 8008558:	685d      	ldr	r5, [r3, #4]
 800855a:	f858 4b08 	ldr.w	r4, [r8], #8
 800855e:	f42a 6a80 	bic.w	sl, sl, #1024	; 0x400
 8008562:	2300      	movs	r3, #0
 8008564:	2200      	movs	r2, #0
 8008566:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
 800856a:	9a00      	ldr	r2, [sp, #0]
 800856c:	3201      	adds	r2, #1
 800856e:	f000 8278 	beq.w	8008a62 <_vfiprintf_r+0x8c2>
 8008572:	f02a 0280 	bic.w	r2, sl, #128	; 0x80
 8008576:	9204      	str	r2, [sp, #16]
 8008578:	ea54 0205 	orrs.w	r2, r4, r5
 800857c:	f040 8277 	bne.w	8008a6e <_vfiprintf_r+0x8ce>
 8008580:	9a00      	ldr	r2, [sp, #0]
 8008582:	2a00      	cmp	r2, #0
 8008584:	f000 81b3 	beq.w	80088ee <_vfiprintf_r+0x74e>
 8008588:	2b01      	cmp	r3, #1
 800858a:	f040 8273 	bne.w	8008a74 <_vfiprintf_r+0x8d4>
 800858e:	e151      	b.n	8008834 <_vfiprintf_r+0x694>
 8008590:	46a0      	mov	r8, r4
 8008592:	f01a 0510 	ands.w	r5, sl, #16
 8008596:	f858 4b04 	ldr.w	r4, [r8], #4
 800859a:	d001      	beq.n	80085a0 <_vfiprintf_r+0x400>
 800859c:	461d      	mov	r5, r3
 800859e:	e7de      	b.n	800855e <_vfiprintf_r+0x3be>
 80085a0:	f01a 0340 	ands.w	r3, sl, #64	; 0x40
 80085a4:	d001      	beq.n	80085aa <_vfiprintf_r+0x40a>
 80085a6:	b2a4      	uxth	r4, r4
 80085a8:	e7d9      	b.n	800855e <_vfiprintf_r+0x3be>
 80085aa:	f41a 7500 	ands.w	r5, sl, #512	; 0x200
 80085ae:	d0d6      	beq.n	800855e <_vfiprintf_r+0x3be>
 80085b0:	b2e4      	uxtb	r4, r4
 80085b2:	e7f3      	b.n	800859c <_vfiprintf_r+0x3fc>
 80085b4:	46a0      	mov	r8, r4
 80085b6:	f647 0330 	movw	r3, #30768	; 0x7830
 80085ba:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 80085be:	f858 4b04 	ldr.w	r4, [r8], #4
 80085c2:	4b9f      	ldr	r3, [pc, #636]	; (8008840 <_vfiprintf_r+0x6a0>)
 80085c4:	9305      	str	r3, [sp, #20]
 80085c6:	2500      	movs	r5, #0
 80085c8:	f04a 0a02 	orr.w	sl, sl, #2
 80085cc:	2302      	movs	r3, #2
 80085ce:	e7c9      	b.n	8008564 <_vfiprintf_r+0x3c4>
 80085d0:	9b00      	ldr	r3, [sp, #0]
 80085d2:	46a0      	mov	r8, r4
 80085d4:	2500      	movs	r5, #0
 80085d6:	1c5c      	adds	r4, r3, #1
 80085d8:	f858 bb04 	ldr.w	fp, [r8], #4
 80085dc:	f88d 5033 	strb.w	r5, [sp, #51]	; 0x33
 80085e0:	f000 80cf 	beq.w	8008782 <_vfiprintf_r+0x5e2>
 80085e4:	461a      	mov	r2, r3
 80085e6:	4629      	mov	r1, r5
 80085e8:	4658      	mov	r0, fp
 80085ea:	f7f7 fe21 	bl	8000230 <memchr>
 80085ee:	2800      	cmp	r0, #0
 80085f0:	f000 8192 	beq.w	8008918 <_vfiprintf_r+0x778>
 80085f4:	eba0 030b 	sub.w	r3, r0, fp
 80085f8:	9300      	str	r3, [sp, #0]
 80085fa:	9b00      	ldr	r3, [sp, #0]
 80085fc:	f89d 2033 	ldrb.w	r2, [sp, #51]	; 0x33
 8008600:	42ab      	cmp	r3, r5
 8008602:	bfb8      	it	lt
 8008604:	462b      	movlt	r3, r5
 8008606:	9304      	str	r3, [sp, #16]
 8008608:	b10a      	cbz	r2, 800860e <_vfiprintf_r+0x46e>
 800860a:	3301      	adds	r3, #1
 800860c:	9304      	str	r3, [sp, #16]
 800860e:	f01a 0302 	ands.w	r3, sl, #2
 8008612:	9308      	str	r3, [sp, #32]
 8008614:	bf1e      	ittt	ne
 8008616:	9b04      	ldrne	r3, [sp, #16]
 8008618:	3302      	addne	r3, #2
 800861a:	9304      	strne	r3, [sp, #16]
 800861c:	f01a 0384 	ands.w	r3, sl, #132	; 0x84
 8008620:	9309      	str	r3, [sp, #36]	; 0x24
 8008622:	d11f      	bne.n	8008664 <_vfiprintf_r+0x4c4>
 8008624:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 8008628:	1a9c      	subs	r4, r3, r2
 800862a:	2c00      	cmp	r4, #0
 800862c:	dd1a      	ble.n	8008664 <_vfiprintf_r+0x4c4>
 800862e:	4b85      	ldr	r3, [pc, #532]	; (8008844 <_vfiprintf_r+0x6a4>)
 8008630:	6033      	str	r3, [r6, #0]
 8008632:	e9dd 2c0f 	ldrd	r2, ip, [sp, #60]	; 0x3c
 8008636:	2c10      	cmp	r4, #16
 8008638:	f102 0201 	add.w	r2, r2, #1
 800863c:	f106 0008 	add.w	r0, r6, #8
 8008640:	f300 816c 	bgt.w	800891c <_vfiprintf_r+0x77c>
 8008644:	6074      	str	r4, [r6, #4]
 8008646:	2a07      	cmp	r2, #7
 8008648:	4464      	add	r4, ip
 800864a:	e9cd 240f 	strd	r2, r4, [sp, #60]	; 0x3c
 800864e:	f340 8178 	ble.w	8008942 <_vfiprintf_r+0x7a2>
 8008652:	aa0e      	add	r2, sp, #56	; 0x38
 8008654:	4639      	mov	r1, r7
 8008656:	4648      	mov	r0, r9
 8008658:	f7ff fd70 	bl	800813c <__sprint_r>
 800865c:	2800      	cmp	r0, #0
 800865e:	f040 81d2 	bne.w	8008a06 <_vfiprintf_r+0x866>
 8008662:	ae11      	add	r6, sp, #68	; 0x44
 8008664:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
 8008668:	e9dd 210f 	ldrd	r2, r1, [sp, #60]	; 0x3c
 800866c:	b160      	cbz	r0, 8008688 <_vfiprintf_r+0x4e8>
 800866e:	f10d 0033 	add.w	r0, sp, #51	; 0x33
 8008672:	3201      	adds	r2, #1
 8008674:	6030      	str	r0, [r6, #0]
 8008676:	2001      	movs	r0, #1
 8008678:	4401      	add	r1, r0
 800867a:	2a07      	cmp	r2, #7
 800867c:	e9cd 210f 	strd	r2, r1, [sp, #60]	; 0x3c
 8008680:	6070      	str	r0, [r6, #4]
 8008682:	f300 8160 	bgt.w	8008946 <_vfiprintf_r+0x7a6>
 8008686:	3608      	adds	r6, #8
 8008688:	9b08      	ldr	r3, [sp, #32]
 800868a:	e9dd 210f 	ldrd	r2, r1, [sp, #60]	; 0x3c
 800868e:	b15b      	cbz	r3, 80086a8 <_vfiprintf_r+0x508>
 8008690:	a80d      	add	r0, sp, #52	; 0x34
 8008692:	3201      	adds	r2, #1
 8008694:	6030      	str	r0, [r6, #0]
 8008696:	2002      	movs	r0, #2
 8008698:	4401      	add	r1, r0
 800869a:	2a07      	cmp	r2, #7
 800869c:	e9cd 210f 	strd	r2, r1, [sp, #60]	; 0x3c
 80086a0:	6070      	str	r0, [r6, #4]
 80086a2:	f300 8159 	bgt.w	8008958 <_vfiprintf_r+0x7b8>
 80086a6:	3608      	adds	r6, #8
 80086a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80086aa:	2b80      	cmp	r3, #128	; 0x80
 80086ac:	d11f      	bne.n	80086ee <_vfiprintf_r+0x54e>
 80086ae:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 80086b2:	1a9c      	subs	r4, r3, r2
 80086b4:	2c00      	cmp	r4, #0
 80086b6:	dd1a      	ble.n	80086ee <_vfiprintf_r+0x54e>
 80086b8:	4b63      	ldr	r3, [pc, #396]	; (8008848 <_vfiprintf_r+0x6a8>)
 80086ba:	6033      	str	r3, [r6, #0]
 80086bc:	e9dd 2c0f 	ldrd	r2, ip, [sp, #60]	; 0x3c
 80086c0:	2c10      	cmp	r4, #16
 80086c2:	f102 0201 	add.w	r2, r2, #1
 80086c6:	f106 0008 	add.w	r0, r6, #8
 80086ca:	f300 814e 	bgt.w	800896a <_vfiprintf_r+0x7ca>
 80086ce:	6074      	str	r4, [r6, #4]
 80086d0:	2a07      	cmp	r2, #7
 80086d2:	4464      	add	r4, ip
 80086d4:	e9cd 240f 	strd	r2, r4, [sp, #60]	; 0x3c
 80086d8:	f340 815a 	ble.w	8008990 <_vfiprintf_r+0x7f0>
 80086dc:	aa0e      	add	r2, sp, #56	; 0x38
 80086de:	4639      	mov	r1, r7
 80086e0:	4648      	mov	r0, r9
 80086e2:	f7ff fd2b 	bl	800813c <__sprint_r>
 80086e6:	2800      	cmp	r0, #0
 80086e8:	f040 818d 	bne.w	8008a06 <_vfiprintf_r+0x866>
 80086ec:	ae11      	add	r6, sp, #68	; 0x44
 80086ee:	9b00      	ldr	r3, [sp, #0]
 80086f0:	1aec      	subs	r4, r5, r3
 80086f2:	2c00      	cmp	r4, #0
 80086f4:	dd1b      	ble.n	800872e <_vfiprintf_r+0x58e>
 80086f6:	4d54      	ldr	r5, [pc, #336]	; (8008848 <_vfiprintf_r+0x6a8>)
 80086f8:	2310      	movs	r3, #16
 80086fa:	e9dd 210f 	ldrd	r2, r1, [sp, #60]	; 0x3c
 80086fe:	2c10      	cmp	r4, #16
 8008700:	f102 0201 	add.w	r2, r2, #1
 8008704:	f106 0008 	add.w	r0, r6, #8
 8008708:	6035      	str	r5, [r6, #0]
 800870a:	f300 8143 	bgt.w	8008994 <_vfiprintf_r+0x7f4>
 800870e:	6074      	str	r4, [r6, #4]
 8008710:	2a07      	cmp	r2, #7
 8008712:	440c      	add	r4, r1
 8008714:	e9cd 240f 	strd	r2, r4, [sp, #60]	; 0x3c
 8008718:	f340 814d 	ble.w	80089b6 <_vfiprintf_r+0x816>
 800871c:	aa0e      	add	r2, sp, #56	; 0x38
 800871e:	4639      	mov	r1, r7
 8008720:	4648      	mov	r0, r9
 8008722:	f7ff fd0b 	bl	800813c <__sprint_r>
 8008726:	2800      	cmp	r0, #0
 8008728:	f040 816d 	bne.w	8008a06 <_vfiprintf_r+0x866>
 800872c:	ae11      	add	r6, sp, #68	; 0x44
 800872e:	9b00      	ldr	r3, [sp, #0]
 8008730:	9a00      	ldr	r2, [sp, #0]
 8008732:	6073      	str	r3, [r6, #4]
 8008734:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008736:	f8c6 b000 	str.w	fp, [r6]
 800873a:	4413      	add	r3, r2
 800873c:	9310      	str	r3, [sp, #64]	; 0x40
 800873e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008740:	3301      	adds	r3, #1
 8008742:	2b07      	cmp	r3, #7
 8008744:	930f      	str	r3, [sp, #60]	; 0x3c
 8008746:	f300 8138 	bgt.w	80089ba <_vfiprintf_r+0x81a>
 800874a:	f106 0308 	add.w	r3, r6, #8
 800874e:	f01a 0f04 	tst.w	sl, #4
 8008752:	f040 813a 	bne.w	80089ca <_vfiprintf_r+0x82a>
 8008756:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800875a:	9904      	ldr	r1, [sp, #16]
 800875c:	428a      	cmp	r2, r1
 800875e:	bfac      	ite	ge
 8008760:	189b      	addge	r3, r3, r2
 8008762:	185b      	addlt	r3, r3, r1
 8008764:	9302      	str	r3, [sp, #8]
 8008766:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008768:	b13b      	cbz	r3, 800877a <_vfiprintf_r+0x5da>
 800876a:	aa0e      	add	r2, sp, #56	; 0x38
 800876c:	4639      	mov	r1, r7
 800876e:	4648      	mov	r0, r9
 8008770:	f7ff fce4 	bl	800813c <__sprint_r>
 8008774:	2800      	cmp	r0, #0
 8008776:	f040 8146 	bne.w	8008a06 <_vfiprintf_r+0x866>
 800877a:	2300      	movs	r3, #0
 800877c:	930f      	str	r3, [sp, #60]	; 0x3c
 800877e:	ae11      	add	r6, sp, #68	; 0x44
 8008780:	e6ca      	b.n	8008518 <_vfiprintf_r+0x378>
 8008782:	4658      	mov	r0, fp
 8008784:	f7f7 fd4c 	bl	8000220 <strlen>
 8008788:	9000      	str	r0, [sp, #0]
 800878a:	e736      	b.n	80085fa <_vfiprintf_r+0x45a>
 800878c:	f04a 0a10 	orr.w	sl, sl, #16
 8008790:	f01a 0320 	ands.w	r3, sl, #32
 8008794:	d008      	beq.n	80087a8 <_vfiprintf_r+0x608>
 8008796:	3407      	adds	r4, #7
 8008798:	f024 0307 	bic.w	r3, r4, #7
 800879c:	4698      	mov	r8, r3
 800879e:	685d      	ldr	r5, [r3, #4]
 80087a0:	f858 4b08 	ldr.w	r4, [r8], #8
 80087a4:	2301      	movs	r3, #1
 80087a6:	e6dd      	b.n	8008564 <_vfiprintf_r+0x3c4>
 80087a8:	46a0      	mov	r8, r4
 80087aa:	f01a 0510 	ands.w	r5, sl, #16
 80087ae:	f858 4b04 	ldr.w	r4, [r8], #4
 80087b2:	d001      	beq.n	80087b8 <_vfiprintf_r+0x618>
 80087b4:	461d      	mov	r5, r3
 80087b6:	e7f5      	b.n	80087a4 <_vfiprintf_r+0x604>
 80087b8:	f01a 0340 	ands.w	r3, sl, #64	; 0x40
 80087bc:	d001      	beq.n	80087c2 <_vfiprintf_r+0x622>
 80087be:	b2a4      	uxth	r4, r4
 80087c0:	e7f0      	b.n	80087a4 <_vfiprintf_r+0x604>
 80087c2:	f41a 7500 	ands.w	r5, sl, #512	; 0x200
 80087c6:	d0ed      	beq.n	80087a4 <_vfiprintf_r+0x604>
 80087c8:	b2e4      	uxtb	r4, r4
 80087ca:	e7f3      	b.n	80087b4 <_vfiprintf_r+0x614>
 80087cc:	4a1f      	ldr	r2, [pc, #124]	; (800884c <_vfiprintf_r+0x6ac>)
 80087ce:	9205      	str	r2, [sp, #20]
 80087d0:	f01a 0220 	ands.w	r2, sl, #32
 80087d4:	d018      	beq.n	8008808 <_vfiprintf_r+0x668>
 80087d6:	3407      	adds	r4, #7
 80087d8:	f024 0207 	bic.w	r2, r4, #7
 80087dc:	4690      	mov	r8, r2
 80087de:	6855      	ldr	r5, [r2, #4]
 80087e0:	f858 4b08 	ldr.w	r4, [r8], #8
 80087e4:	f01a 0f01 	tst.w	sl, #1
 80087e8:	d009      	beq.n	80087fe <_vfiprintf_r+0x65e>
 80087ea:	ea54 0205 	orrs.w	r2, r4, r5
 80087ee:	bf1f      	itttt	ne
 80087f0:	2230      	movne	r2, #48	; 0x30
 80087f2:	f88d 2034 	strbne.w	r2, [sp, #52]	; 0x34
 80087f6:	f88d 3035 	strbne.w	r3, [sp, #53]	; 0x35
 80087fa:	f04a 0a02 	orrne.w	sl, sl, #2
 80087fe:	f42a 6a80 	bic.w	sl, sl, #1024	; 0x400
 8008802:	e6e3      	b.n	80085cc <_vfiprintf_r+0x42c>
 8008804:	4a0e      	ldr	r2, [pc, #56]	; (8008840 <_vfiprintf_r+0x6a0>)
 8008806:	e7e2      	b.n	80087ce <_vfiprintf_r+0x62e>
 8008808:	46a0      	mov	r8, r4
 800880a:	f01a 0510 	ands.w	r5, sl, #16
 800880e:	f858 4b04 	ldr.w	r4, [r8], #4
 8008812:	d001      	beq.n	8008818 <_vfiprintf_r+0x678>
 8008814:	4615      	mov	r5, r2
 8008816:	e7e5      	b.n	80087e4 <_vfiprintf_r+0x644>
 8008818:	f01a 0240 	ands.w	r2, sl, #64	; 0x40
 800881c:	d001      	beq.n	8008822 <_vfiprintf_r+0x682>
 800881e:	b2a4      	uxth	r4, r4
 8008820:	e7e0      	b.n	80087e4 <_vfiprintf_r+0x644>
 8008822:	f41a 7500 	ands.w	r5, sl, #512	; 0x200
 8008826:	d0dd      	beq.n	80087e4 <_vfiprintf_r+0x644>
 8008828:	b2e4      	uxtb	r4, r4
 800882a:	e7f3      	b.n	8008814 <_vfiprintf_r+0x674>
 800882c:	2c0a      	cmp	r4, #10
 800882e:	f175 0300 	sbcs.w	r3, r5, #0
 8008832:	d20d      	bcs.n	8008850 <_vfiprintf_r+0x6b0>
 8008834:	3430      	adds	r4, #48	; 0x30
 8008836:	f88d 40e7 	strb.w	r4, [sp, #231]	; 0xe7
 800883a:	f10d 0be7 	add.w	fp, sp, #231	; 0xe7
 800883e:	e135      	b.n	8008aac <_vfiprintf_r+0x90c>
 8008840:	08009278 	.word	0x08009278
 8008844:	080095d3 	.word	0x080095d3
 8008848:	080095e3 	.word	0x080095e3
 800884c:	08009289 	.word	0x08009289
 8008850:	ab3a      	add	r3, sp, #232	; 0xe8
 8008852:	9308      	str	r3, [sp, #32]
 8008854:	9b04      	ldr	r3, [sp, #16]
 8008856:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800885a:	f04f 0a00 	mov.w	sl, #0
 800885e:	9309      	str	r3, [sp, #36]	; 0x24
 8008860:	220a      	movs	r2, #10
 8008862:	2300      	movs	r3, #0
 8008864:	4620      	mov	r0, r4
 8008866:	4629      	mov	r1, r5
 8008868:	f7f8 f9c6 	bl	8000bf8 <__aeabi_uldivmod>
 800886c:	9b08      	ldr	r3, [sp, #32]
 800886e:	3230      	adds	r2, #48	; 0x30
 8008870:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
 8008874:	f803 2c01 	strb.w	r2, [r3, #-1]
 8008878:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800887a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800887e:	f10a 0a01 	add.w	sl, sl, #1
 8008882:	b1d3      	cbz	r3, 80088ba <_vfiprintf_r+0x71a>
 8008884:	9b06      	ldr	r3, [sp, #24]
 8008886:	781a      	ldrb	r2, [r3, #0]
 8008888:	4552      	cmp	r2, sl
 800888a:	d116      	bne.n	80088ba <_vfiprintf_r+0x71a>
 800888c:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8008890:	d013      	beq.n	80088ba <_vfiprintf_r+0x71a>
 8008892:	2c0a      	cmp	r4, #10
 8008894:	f175 0200 	sbcs.w	r2, r5, #0
 8008898:	d30f      	bcc.n	80088ba <_vfiprintf_r+0x71a>
 800889a:	9b07      	ldr	r3, [sp, #28]
 800889c:	ebab 0b03 	sub.w	fp, fp, r3
 80088a0:	461a      	mov	r2, r3
 80088a2:	ee18 1a10 	vmov	r1, s16
 80088a6:	4658      	mov	r0, fp
 80088a8:	f7fd ff3f 	bl	800672a <strncpy>
 80088ac:	9b06      	ldr	r3, [sp, #24]
 80088ae:	785a      	ldrb	r2, [r3, #1]
 80088b0:	b16a      	cbz	r2, 80088ce <_vfiprintf_r+0x72e>
 80088b2:	3301      	adds	r3, #1
 80088b4:	9306      	str	r3, [sp, #24]
 80088b6:	f04f 0a00 	mov.w	sl, #0
 80088ba:	2c0a      	cmp	r4, #10
 80088bc:	f175 0500 	sbcs.w	r5, r5, #0
 80088c0:	f0c0 80f4 	bcc.w	8008aac <_vfiprintf_r+0x90c>
 80088c4:	e9dd 450a 	ldrd	r4, r5, [sp, #40]	; 0x28
 80088c8:	f8cd b020 	str.w	fp, [sp, #32]
 80088cc:	e7c8      	b.n	8008860 <_vfiprintf_r+0x6c0>
 80088ce:	4692      	mov	sl, r2
 80088d0:	e7f3      	b.n	80088ba <_vfiprintf_r+0x71a>
 80088d2:	f004 020f 	and.w	r2, r4, #15
 80088d6:	9b05      	ldr	r3, [sp, #20]
 80088d8:	0924      	lsrs	r4, r4, #4
 80088da:	5c9a      	ldrb	r2, [r3, r2]
 80088dc:	f80b 2d01 	strb.w	r2, [fp, #-1]!
 80088e0:	ea44 7405 	orr.w	r4, r4, r5, lsl #28
 80088e4:	092d      	lsrs	r5, r5, #4
 80088e6:	ea54 0205 	orrs.w	r2, r4, r5
 80088ea:	d1f2      	bne.n	80088d2 <_vfiprintf_r+0x732>
 80088ec:	e0de      	b.n	8008aac <_vfiprintf_r+0x90c>
 80088ee:	b933      	cbnz	r3, 80088fe <_vfiprintf_r+0x75e>
 80088f0:	f01a 0f01 	tst.w	sl, #1
 80088f4:	d003      	beq.n	80088fe <_vfiprintf_r+0x75e>
 80088f6:	2330      	movs	r3, #48	; 0x30
 80088f8:	f88d 30e7 	strb.w	r3, [sp, #231]	; 0xe7
 80088fc:	e79d      	b.n	800883a <_vfiprintf_r+0x69a>
 80088fe:	f10d 0be8 	add.w	fp, sp, #232	; 0xe8
 8008902:	e0d3      	b.n	8008aac <_vfiprintf_r+0x90c>
 8008904:	2b00      	cmp	r3, #0
 8008906:	f000 809f 	beq.w	8008a48 <_vfiprintf_r+0x8a8>
 800890a:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
 800890e:	2300      	movs	r3, #0
 8008910:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
 8008914:	46a0      	mov	r8, r4
 8008916:	e5c0      	b.n	800849a <_vfiprintf_r+0x2fa>
 8008918:	4605      	mov	r5, r0
 800891a:	e66e      	b.n	80085fa <_vfiprintf_r+0x45a>
 800891c:	2110      	movs	r1, #16
 800891e:	6071      	str	r1, [r6, #4]
 8008920:	2a07      	cmp	r2, #7
 8008922:	4461      	add	r1, ip
 8008924:	e9cd 210f 	strd	r2, r1, [sp, #60]	; 0x3c
 8008928:	dd08      	ble.n	800893c <_vfiprintf_r+0x79c>
 800892a:	aa0e      	add	r2, sp, #56	; 0x38
 800892c:	4639      	mov	r1, r7
 800892e:	4648      	mov	r0, r9
 8008930:	f7ff fc04 	bl	800813c <__sprint_r>
 8008934:	2800      	cmp	r0, #0
 8008936:	d166      	bne.n	8008a06 <_vfiprintf_r+0x866>
 8008938:	4b60      	ldr	r3, [pc, #384]	; (8008abc <_vfiprintf_r+0x91c>)
 800893a:	a811      	add	r0, sp, #68	; 0x44
 800893c:	3c10      	subs	r4, #16
 800893e:	4606      	mov	r6, r0
 8008940:	e676      	b.n	8008630 <_vfiprintf_r+0x490>
 8008942:	4606      	mov	r6, r0
 8008944:	e68e      	b.n	8008664 <_vfiprintf_r+0x4c4>
 8008946:	aa0e      	add	r2, sp, #56	; 0x38
 8008948:	4639      	mov	r1, r7
 800894a:	4648      	mov	r0, r9
 800894c:	f7ff fbf6 	bl	800813c <__sprint_r>
 8008950:	2800      	cmp	r0, #0
 8008952:	d158      	bne.n	8008a06 <_vfiprintf_r+0x866>
 8008954:	ae11      	add	r6, sp, #68	; 0x44
 8008956:	e697      	b.n	8008688 <_vfiprintf_r+0x4e8>
 8008958:	aa0e      	add	r2, sp, #56	; 0x38
 800895a:	4639      	mov	r1, r7
 800895c:	4648      	mov	r0, r9
 800895e:	f7ff fbed 	bl	800813c <__sprint_r>
 8008962:	2800      	cmp	r0, #0
 8008964:	d14f      	bne.n	8008a06 <_vfiprintf_r+0x866>
 8008966:	ae11      	add	r6, sp, #68	; 0x44
 8008968:	e69e      	b.n	80086a8 <_vfiprintf_r+0x508>
 800896a:	2110      	movs	r1, #16
 800896c:	6071      	str	r1, [r6, #4]
 800896e:	2a07      	cmp	r2, #7
 8008970:	4461      	add	r1, ip
 8008972:	e9cd 210f 	strd	r2, r1, [sp, #60]	; 0x3c
 8008976:	dd08      	ble.n	800898a <_vfiprintf_r+0x7ea>
 8008978:	aa0e      	add	r2, sp, #56	; 0x38
 800897a:	4639      	mov	r1, r7
 800897c:	4648      	mov	r0, r9
 800897e:	f7ff fbdd 	bl	800813c <__sprint_r>
 8008982:	2800      	cmp	r0, #0
 8008984:	d13f      	bne.n	8008a06 <_vfiprintf_r+0x866>
 8008986:	4b4e      	ldr	r3, [pc, #312]	; (8008ac0 <_vfiprintf_r+0x920>)
 8008988:	a811      	add	r0, sp, #68	; 0x44
 800898a:	3c10      	subs	r4, #16
 800898c:	4606      	mov	r6, r0
 800898e:	e694      	b.n	80086ba <_vfiprintf_r+0x51a>
 8008990:	4606      	mov	r6, r0
 8008992:	e6ac      	b.n	80086ee <_vfiprintf_r+0x54e>
 8008994:	3110      	adds	r1, #16
 8008996:	2a07      	cmp	r2, #7
 8008998:	e9cd 210f 	strd	r2, r1, [sp, #60]	; 0x3c
 800899c:	6073      	str	r3, [r6, #4]
 800899e:	dd07      	ble.n	80089b0 <_vfiprintf_r+0x810>
 80089a0:	aa0e      	add	r2, sp, #56	; 0x38
 80089a2:	4639      	mov	r1, r7
 80089a4:	4648      	mov	r0, r9
 80089a6:	f7ff fbc9 	bl	800813c <__sprint_r>
 80089aa:	bb60      	cbnz	r0, 8008a06 <_vfiprintf_r+0x866>
 80089ac:	a811      	add	r0, sp, #68	; 0x44
 80089ae:	2310      	movs	r3, #16
 80089b0:	3c10      	subs	r4, #16
 80089b2:	4606      	mov	r6, r0
 80089b4:	e6a1      	b.n	80086fa <_vfiprintf_r+0x55a>
 80089b6:	4606      	mov	r6, r0
 80089b8:	e6b9      	b.n	800872e <_vfiprintf_r+0x58e>
 80089ba:	aa0e      	add	r2, sp, #56	; 0x38
 80089bc:	4639      	mov	r1, r7
 80089be:	4648      	mov	r0, r9
 80089c0:	f7ff fbbc 	bl	800813c <__sprint_r>
 80089c4:	b9f8      	cbnz	r0, 8008a06 <_vfiprintf_r+0x866>
 80089c6:	ab11      	add	r3, sp, #68	; 0x44
 80089c8:	e6c1      	b.n	800874e <_vfiprintf_r+0x5ae>
 80089ca:	e9dd 2103 	ldrd	r2, r1, [sp, #12]
 80089ce:	1a54      	subs	r4, r2, r1
 80089d0:	2c00      	cmp	r4, #0
 80089d2:	f77f aec0 	ble.w	8008756 <_vfiprintf_r+0x5b6>
 80089d6:	4d39      	ldr	r5, [pc, #228]	; (8008abc <_vfiprintf_r+0x91c>)
 80089d8:	2610      	movs	r6, #16
 80089da:	e9dd 210f 	ldrd	r2, r1, [sp, #60]	; 0x3c
 80089de:	2c10      	cmp	r4, #16
 80089e0:	f102 0201 	add.w	r2, r2, #1
 80089e4:	601d      	str	r5, [r3, #0]
 80089e6:	dc1d      	bgt.n	8008a24 <_vfiprintf_r+0x884>
 80089e8:	605c      	str	r4, [r3, #4]
 80089ea:	2a07      	cmp	r2, #7
 80089ec:	440c      	add	r4, r1
 80089ee:	e9cd 240f 	strd	r2, r4, [sp, #60]	; 0x3c
 80089f2:	f77f aeb0 	ble.w	8008756 <_vfiprintf_r+0x5b6>
 80089f6:	aa0e      	add	r2, sp, #56	; 0x38
 80089f8:	4639      	mov	r1, r7
 80089fa:	4648      	mov	r0, r9
 80089fc:	f7ff fb9e 	bl	800813c <__sprint_r>
 8008a00:	2800      	cmp	r0, #0
 8008a02:	f43f aea8 	beq.w	8008756 <_vfiprintf_r+0x5b6>
 8008a06:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008a08:	07d9      	lsls	r1, r3, #31
 8008a0a:	d405      	bmi.n	8008a18 <_vfiprintf_r+0x878>
 8008a0c:	89bb      	ldrh	r3, [r7, #12]
 8008a0e:	059a      	lsls	r2, r3, #22
 8008a10:	d402      	bmi.n	8008a18 <_vfiprintf_r+0x878>
 8008a12:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8008a14:	f7fc fa5f 	bl	8004ed6 <__retarget_lock_release_recursive>
 8008a18:	89bb      	ldrh	r3, [r7, #12]
 8008a1a:	065b      	lsls	r3, r3, #25
 8008a1c:	f57f abf3 	bpl.w	8008206 <_vfiprintf_r+0x66>
 8008a20:	f7ff bbee 	b.w	8008200 <_vfiprintf_r+0x60>
 8008a24:	3110      	adds	r1, #16
 8008a26:	2a07      	cmp	r2, #7
 8008a28:	e9cd 210f 	strd	r2, r1, [sp, #60]	; 0x3c
 8008a2c:	605e      	str	r6, [r3, #4]
 8008a2e:	dc02      	bgt.n	8008a36 <_vfiprintf_r+0x896>
 8008a30:	3308      	adds	r3, #8
 8008a32:	3c10      	subs	r4, #16
 8008a34:	e7d1      	b.n	80089da <_vfiprintf_r+0x83a>
 8008a36:	aa0e      	add	r2, sp, #56	; 0x38
 8008a38:	4639      	mov	r1, r7
 8008a3a:	4648      	mov	r0, r9
 8008a3c:	f7ff fb7e 	bl	800813c <__sprint_r>
 8008a40:	2800      	cmp	r0, #0
 8008a42:	d1e0      	bne.n	8008a06 <_vfiprintf_r+0x866>
 8008a44:	ab11      	add	r3, sp, #68	; 0x44
 8008a46:	e7f4      	b.n	8008a32 <_vfiprintf_r+0x892>
 8008a48:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008a4a:	b913      	cbnz	r3, 8008a52 <_vfiprintf_r+0x8b2>
 8008a4c:	2300      	movs	r3, #0
 8008a4e:	930f      	str	r3, [sp, #60]	; 0x3c
 8008a50:	e7d9      	b.n	8008a06 <_vfiprintf_r+0x866>
 8008a52:	aa0e      	add	r2, sp, #56	; 0x38
 8008a54:	4639      	mov	r1, r7
 8008a56:	4648      	mov	r0, r9
 8008a58:	f7ff fb70 	bl	800813c <__sprint_r>
 8008a5c:	2800      	cmp	r0, #0
 8008a5e:	d0f5      	beq.n	8008a4c <_vfiprintf_r+0x8ac>
 8008a60:	e7d1      	b.n	8008a06 <_vfiprintf_r+0x866>
 8008a62:	ea54 0205 	orrs.w	r2, r4, r5
 8008a66:	f8cd a010 	str.w	sl, [sp, #16]
 8008a6a:	f43f ad8d 	beq.w	8008588 <_vfiprintf_r+0x3e8>
 8008a6e:	2b01      	cmp	r3, #1
 8008a70:	f43f aedc 	beq.w	800882c <_vfiprintf_r+0x68c>
 8008a74:	2b02      	cmp	r3, #2
 8008a76:	f10d 0be8 	add.w	fp, sp, #232	; 0xe8
 8008a7a:	f43f af2a 	beq.w	80088d2 <_vfiprintf_r+0x732>
 8008a7e:	f004 0207 	and.w	r2, r4, #7
 8008a82:	08e4      	lsrs	r4, r4, #3
 8008a84:	ea44 7445 	orr.w	r4, r4, r5, lsl #29
 8008a88:	08ed      	lsrs	r5, r5, #3
 8008a8a:	3230      	adds	r2, #48	; 0x30
 8008a8c:	ea54 0005 	orrs.w	r0, r4, r5
 8008a90:	4659      	mov	r1, fp
 8008a92:	f80b 2d01 	strb.w	r2, [fp, #-1]!
 8008a96:	d1f2      	bne.n	8008a7e <_vfiprintf_r+0x8de>
 8008a98:	9b04      	ldr	r3, [sp, #16]
 8008a9a:	07d8      	lsls	r0, r3, #31
 8008a9c:	d506      	bpl.n	8008aac <_vfiprintf_r+0x90c>
 8008a9e:	2a30      	cmp	r2, #48	; 0x30
 8008aa0:	d004      	beq.n	8008aac <_vfiprintf_r+0x90c>
 8008aa2:	2230      	movs	r2, #48	; 0x30
 8008aa4:	f80b 2c01 	strb.w	r2, [fp, #-1]
 8008aa8:	f1a1 0b02 	sub.w	fp, r1, #2
 8008aac:	ab3a      	add	r3, sp, #232	; 0xe8
 8008aae:	eba3 030b 	sub.w	r3, r3, fp
 8008ab2:	9d00      	ldr	r5, [sp, #0]
 8008ab4:	f8dd a010 	ldr.w	sl, [sp, #16]
 8008ab8:	9300      	str	r3, [sp, #0]
 8008aba:	e59e      	b.n	80085fa <_vfiprintf_r+0x45a>
 8008abc:	080095d3 	.word	0x080095d3
 8008ac0:	080095e3 	.word	0x080095e3

08008ac4 <__sbprintf>:
 8008ac4:	b570      	push	{r4, r5, r6, lr}
 8008ac6:	460c      	mov	r4, r1
 8008ac8:	8989      	ldrh	r1, [r1, #12]
 8008aca:	f5ad 6d8e 	sub.w	sp, sp, #1136	; 0x470
 8008ace:	f021 0102 	bic.w	r1, r1, #2
 8008ad2:	f8ad 1014 	strh.w	r1, [sp, #20]
 8008ad6:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8008ad8:	911b      	str	r1, [sp, #108]	; 0x6c
 8008ada:	89e1      	ldrh	r1, [r4, #14]
 8008adc:	f8ad 1016 	strh.w	r1, [sp, #22]
 8008ae0:	69e1      	ldr	r1, [r4, #28]
 8008ae2:	9109      	str	r1, [sp, #36]	; 0x24
 8008ae4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8008ae6:	910b      	str	r1, [sp, #44]	; 0x2c
 8008ae8:	a91c      	add	r1, sp, #112	; 0x70
 8008aea:	9102      	str	r1, [sp, #8]
 8008aec:	9106      	str	r1, [sp, #24]
 8008aee:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8008af2:	4606      	mov	r6, r0
 8008af4:	9104      	str	r1, [sp, #16]
 8008af6:	9107      	str	r1, [sp, #28]
 8008af8:	a818      	add	r0, sp, #96	; 0x60
 8008afa:	2100      	movs	r1, #0
 8008afc:	e9cd 3200 	strd	r3, r2, [sp]
 8008b00:	9108      	str	r1, [sp, #32]
 8008b02:	f7fc f9e5 	bl	8004ed0 <__retarget_lock_init_recursive>
 8008b06:	e9dd 3200 	ldrd	r3, r2, [sp]
 8008b0a:	a902      	add	r1, sp, #8
 8008b0c:	4630      	mov	r0, r6
 8008b0e:	f7ff fb47 	bl	80081a0 <_vfiprintf_r>
 8008b12:	1e05      	subs	r5, r0, #0
 8008b14:	db07      	blt.n	8008b26 <__sbprintf+0x62>
 8008b16:	a902      	add	r1, sp, #8
 8008b18:	4630      	mov	r0, r6
 8008b1a:	f7fd fde1 	bl	80066e0 <_fflush_r>
 8008b1e:	2800      	cmp	r0, #0
 8008b20:	bf18      	it	ne
 8008b22:	f04f 35ff 	movne.w	r5, #4294967295	; 0xffffffff
 8008b26:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 8008b2a:	9818      	ldr	r0, [sp, #96]	; 0x60
 8008b2c:	065b      	lsls	r3, r3, #25
 8008b2e:	bf42      	ittt	mi
 8008b30:	89a3      	ldrhmi	r3, [r4, #12]
 8008b32:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
 8008b36:	81a3      	strhmi	r3, [r4, #12]
 8008b38:	f7fc f9cb 	bl	8004ed2 <__retarget_lock_close_recursive>
 8008b3c:	4628      	mov	r0, r5
 8008b3e:	f50d 6d8e 	add.w	sp, sp, #1136	; 0x470
 8008b42:	bd70      	pop	{r4, r5, r6, pc}

08008b44 <__sfvwrite_r>:
 8008b44:	6893      	ldr	r3, [r2, #8]
 8008b46:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b4a:	4606      	mov	r6, r0
 8008b4c:	460c      	mov	r4, r1
 8008b4e:	4691      	mov	r9, r2
 8008b50:	b91b      	cbnz	r3, 8008b5a <__sfvwrite_r+0x16>
 8008b52:	2000      	movs	r0, #0
 8008b54:	b003      	add	sp, #12
 8008b56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b5a:	898b      	ldrh	r3, [r1, #12]
 8008b5c:	0718      	lsls	r0, r3, #28
 8008b5e:	d54f      	bpl.n	8008c00 <__sfvwrite_r+0xbc>
 8008b60:	690b      	ldr	r3, [r1, #16]
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d04c      	beq.n	8008c00 <__sfvwrite_r+0xbc>
 8008b66:	89a3      	ldrh	r3, [r4, #12]
 8008b68:	f8d9 8000 	ldr.w	r8, [r9]
 8008b6c:	f013 0702 	ands.w	r7, r3, #2
 8008b70:	d16b      	bne.n	8008c4a <__sfvwrite_r+0x106>
 8008b72:	f013 0301 	ands.w	r3, r3, #1
 8008b76:	f000 809b 	beq.w	8008cb0 <__sfvwrite_r+0x16c>
 8008b7a:	4638      	mov	r0, r7
 8008b7c:	46ba      	mov	sl, r7
 8008b7e:	46bb      	mov	fp, r7
 8008b80:	f1bb 0f00 	cmp.w	fp, #0
 8008b84:	f000 8102 	beq.w	8008d8c <__sfvwrite_r+0x248>
 8008b88:	b950      	cbnz	r0, 8008ba0 <__sfvwrite_r+0x5c>
 8008b8a:	465a      	mov	r2, fp
 8008b8c:	210a      	movs	r1, #10
 8008b8e:	4650      	mov	r0, sl
 8008b90:	f7f7 fb4e 	bl	8000230 <memchr>
 8008b94:	2800      	cmp	r0, #0
 8008b96:	f000 80ff 	beq.w	8008d98 <__sfvwrite_r+0x254>
 8008b9a:	3001      	adds	r0, #1
 8008b9c:	eba0 070a 	sub.w	r7, r0, sl
 8008ba0:	6820      	ldr	r0, [r4, #0]
 8008ba2:	6921      	ldr	r1, [r4, #16]
 8008ba4:	68a5      	ldr	r5, [r4, #8]
 8008ba6:	6963      	ldr	r3, [r4, #20]
 8008ba8:	455f      	cmp	r7, fp
 8008baa:	463a      	mov	r2, r7
 8008bac:	bf28      	it	cs
 8008bae:	465a      	movcs	r2, fp
 8008bb0:	4288      	cmp	r0, r1
 8008bb2:	f240 80f4 	bls.w	8008d9e <__sfvwrite_r+0x25a>
 8008bb6:	441d      	add	r5, r3
 8008bb8:	42aa      	cmp	r2, r5
 8008bba:	f340 80f0 	ble.w	8008d9e <__sfvwrite_r+0x25a>
 8008bbe:	4651      	mov	r1, sl
 8008bc0:	462a      	mov	r2, r5
 8008bc2:	f7ff f85e 	bl	8007c82 <memmove>
 8008bc6:	6823      	ldr	r3, [r4, #0]
 8008bc8:	442b      	add	r3, r5
 8008bca:	6023      	str	r3, [r4, #0]
 8008bcc:	4621      	mov	r1, r4
 8008bce:	4630      	mov	r0, r6
 8008bd0:	f7fd fd86 	bl	80066e0 <_fflush_r>
 8008bd4:	2800      	cmp	r0, #0
 8008bd6:	d166      	bne.n	8008ca6 <__sfvwrite_r+0x162>
 8008bd8:	1b7f      	subs	r7, r7, r5
 8008bda:	f040 80f8 	bne.w	8008dce <__sfvwrite_r+0x28a>
 8008bde:	4621      	mov	r1, r4
 8008be0:	4630      	mov	r0, r6
 8008be2:	f7fd fd7d 	bl	80066e0 <_fflush_r>
 8008be6:	2800      	cmp	r0, #0
 8008be8:	d15d      	bne.n	8008ca6 <__sfvwrite_r+0x162>
 8008bea:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8008bee:	1b5b      	subs	r3, r3, r5
 8008bf0:	44aa      	add	sl, r5
 8008bf2:	ebab 0b05 	sub.w	fp, fp, r5
 8008bf6:	f8c9 3008 	str.w	r3, [r9, #8]
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d1c0      	bne.n	8008b80 <__sfvwrite_r+0x3c>
 8008bfe:	e7a8      	b.n	8008b52 <__sfvwrite_r+0xe>
 8008c00:	4621      	mov	r1, r4
 8008c02:	4630      	mov	r0, r6
 8008c04:	f000 f8e8 	bl	8008dd8 <__swsetup_r>
 8008c08:	2800      	cmp	r0, #0
 8008c0a:	d0ac      	beq.n	8008b66 <__sfvwrite_r+0x22>
 8008c0c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008c10:	e7a0      	b.n	8008b54 <__sfvwrite_r+0x10>
 8008c12:	e9d8 a500 	ldrd	sl, r5, [r8]
 8008c16:	f108 0808 	add.w	r8, r8, #8
 8008c1a:	f8d4 b024 	ldr.w	fp, [r4, #36]	; 0x24
 8008c1e:	69e1      	ldr	r1, [r4, #28]
 8008c20:	2d00      	cmp	r5, #0
 8008c22:	d0f6      	beq.n	8008c12 <__sfvwrite_r+0xce>
 8008c24:	42bd      	cmp	r5, r7
 8008c26:	462b      	mov	r3, r5
 8008c28:	4652      	mov	r2, sl
 8008c2a:	bf28      	it	cs
 8008c2c:	463b      	movcs	r3, r7
 8008c2e:	4630      	mov	r0, r6
 8008c30:	47d8      	blx	fp
 8008c32:	2800      	cmp	r0, #0
 8008c34:	dd37      	ble.n	8008ca6 <__sfvwrite_r+0x162>
 8008c36:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8008c3a:	1a1b      	subs	r3, r3, r0
 8008c3c:	4482      	add	sl, r0
 8008c3e:	1a2d      	subs	r5, r5, r0
 8008c40:	f8c9 3008 	str.w	r3, [r9, #8]
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d1e8      	bne.n	8008c1a <__sfvwrite_r+0xd6>
 8008c48:	e783      	b.n	8008b52 <__sfvwrite_r+0xe>
 8008c4a:	f04f 0a00 	mov.w	sl, #0
 8008c4e:	4f61      	ldr	r7, [pc, #388]	; (8008dd4 <__sfvwrite_r+0x290>)
 8008c50:	4655      	mov	r5, sl
 8008c52:	e7e2      	b.n	8008c1a <__sfvwrite_r+0xd6>
 8008c54:	e9d8 7a00 	ldrd	r7, sl, [r8]
 8008c58:	f108 0808 	add.w	r8, r8, #8
 8008c5c:	6820      	ldr	r0, [r4, #0]
 8008c5e:	68a2      	ldr	r2, [r4, #8]
 8008c60:	f1ba 0f00 	cmp.w	sl, #0
 8008c64:	d0f6      	beq.n	8008c54 <__sfvwrite_r+0x110>
 8008c66:	89a3      	ldrh	r3, [r4, #12]
 8008c68:	0599      	lsls	r1, r3, #22
 8008c6a:	d563      	bpl.n	8008d34 <__sfvwrite_r+0x1f0>
 8008c6c:	4552      	cmp	r2, sl
 8008c6e:	d836      	bhi.n	8008cde <__sfvwrite_r+0x19a>
 8008c70:	f413 6f90 	tst.w	r3, #1152	; 0x480
 8008c74:	d033      	beq.n	8008cde <__sfvwrite_r+0x19a>
 8008c76:	6921      	ldr	r1, [r4, #16]
 8008c78:	6965      	ldr	r5, [r4, #20]
 8008c7a:	eba0 0b01 	sub.w	fp, r0, r1
 8008c7e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008c82:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008c86:	f10b 0201 	add.w	r2, fp, #1
 8008c8a:	106d      	asrs	r5, r5, #1
 8008c8c:	4452      	add	r2, sl
 8008c8e:	4295      	cmp	r5, r2
 8008c90:	bf38      	it	cc
 8008c92:	4615      	movcc	r5, r2
 8008c94:	055b      	lsls	r3, r3, #21
 8008c96:	d53d      	bpl.n	8008d14 <__sfvwrite_r+0x1d0>
 8008c98:	4629      	mov	r1, r5
 8008c9a:	4630      	mov	r0, r6
 8008c9c:	f7fb fd36 	bl	800470c <_malloc_r>
 8008ca0:	b948      	cbnz	r0, 8008cb6 <__sfvwrite_r+0x172>
 8008ca2:	230c      	movs	r3, #12
 8008ca4:	6033      	str	r3, [r6, #0]
 8008ca6:	89a3      	ldrh	r3, [r4, #12]
 8008ca8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008cac:	81a3      	strh	r3, [r4, #12]
 8008cae:	e7ad      	b.n	8008c0c <__sfvwrite_r+0xc8>
 8008cb0:	461f      	mov	r7, r3
 8008cb2:	469a      	mov	sl, r3
 8008cb4:	e7d2      	b.n	8008c5c <__sfvwrite_r+0x118>
 8008cb6:	465a      	mov	r2, fp
 8008cb8:	6921      	ldr	r1, [r4, #16]
 8008cba:	9001      	str	r0, [sp, #4]
 8008cbc:	f7ff f802 	bl	8007cc4 <memcpy>
 8008cc0:	89a2      	ldrh	r2, [r4, #12]
 8008cc2:	9b01      	ldr	r3, [sp, #4]
 8008cc4:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 8008cc8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008ccc:	81a2      	strh	r2, [r4, #12]
 8008cce:	6123      	str	r3, [r4, #16]
 8008cd0:	6165      	str	r5, [r4, #20]
 8008cd2:	445b      	add	r3, fp
 8008cd4:	eba5 050b 	sub.w	r5, r5, fp
 8008cd8:	6023      	str	r3, [r4, #0]
 8008cda:	4652      	mov	r2, sl
 8008cdc:	60a5      	str	r5, [r4, #8]
 8008cde:	4552      	cmp	r2, sl
 8008ce0:	bf28      	it	cs
 8008ce2:	4652      	movcs	r2, sl
 8008ce4:	6820      	ldr	r0, [r4, #0]
 8008ce6:	9201      	str	r2, [sp, #4]
 8008ce8:	4639      	mov	r1, r7
 8008cea:	f7fe ffca 	bl	8007c82 <memmove>
 8008cee:	68a3      	ldr	r3, [r4, #8]
 8008cf0:	9a01      	ldr	r2, [sp, #4]
 8008cf2:	1a9b      	subs	r3, r3, r2
 8008cf4:	60a3      	str	r3, [r4, #8]
 8008cf6:	6823      	ldr	r3, [r4, #0]
 8008cf8:	4413      	add	r3, r2
 8008cfa:	4655      	mov	r5, sl
 8008cfc:	6023      	str	r3, [r4, #0]
 8008cfe:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8008d02:	1b5b      	subs	r3, r3, r5
 8008d04:	442f      	add	r7, r5
 8008d06:	ebaa 0a05 	sub.w	sl, sl, r5
 8008d0a:	f8c9 3008 	str.w	r3, [r9, #8]
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d1a4      	bne.n	8008c5c <__sfvwrite_r+0x118>
 8008d12:	e71e      	b.n	8008b52 <__sfvwrite_r+0xe>
 8008d14:	462a      	mov	r2, r5
 8008d16:	4630      	mov	r0, r6
 8008d18:	f7ff f848 	bl	8007dac <_realloc_r>
 8008d1c:	4603      	mov	r3, r0
 8008d1e:	2800      	cmp	r0, #0
 8008d20:	d1d5      	bne.n	8008cce <__sfvwrite_r+0x18a>
 8008d22:	6921      	ldr	r1, [r4, #16]
 8008d24:	4630      	mov	r0, r6
 8008d26:	f7fc f947 	bl	8004fb8 <_free_r>
 8008d2a:	89a3      	ldrh	r3, [r4, #12]
 8008d2c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008d30:	81a3      	strh	r3, [r4, #12]
 8008d32:	e7b6      	b.n	8008ca2 <__sfvwrite_r+0x15e>
 8008d34:	6923      	ldr	r3, [r4, #16]
 8008d36:	4283      	cmp	r3, r0
 8008d38:	d302      	bcc.n	8008d40 <__sfvwrite_r+0x1fc>
 8008d3a:	6961      	ldr	r1, [r4, #20]
 8008d3c:	4551      	cmp	r1, sl
 8008d3e:	d915      	bls.n	8008d6c <__sfvwrite_r+0x228>
 8008d40:	4552      	cmp	r2, sl
 8008d42:	bf28      	it	cs
 8008d44:	4652      	movcs	r2, sl
 8008d46:	4639      	mov	r1, r7
 8008d48:	4615      	mov	r5, r2
 8008d4a:	f7fe ff9a 	bl	8007c82 <memmove>
 8008d4e:	68a3      	ldr	r3, [r4, #8]
 8008d50:	6822      	ldr	r2, [r4, #0]
 8008d52:	1b5b      	subs	r3, r3, r5
 8008d54:	442a      	add	r2, r5
 8008d56:	60a3      	str	r3, [r4, #8]
 8008d58:	6022      	str	r2, [r4, #0]
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d1cf      	bne.n	8008cfe <__sfvwrite_r+0x1ba>
 8008d5e:	4621      	mov	r1, r4
 8008d60:	4630      	mov	r0, r6
 8008d62:	f7fd fcbd 	bl	80066e0 <_fflush_r>
 8008d66:	2800      	cmp	r0, #0
 8008d68:	d0c9      	beq.n	8008cfe <__sfvwrite_r+0x1ba>
 8008d6a:	e79c      	b.n	8008ca6 <__sfvwrite_r+0x162>
 8008d6c:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8008d70:	459a      	cmp	sl, r3
 8008d72:	bf38      	it	cc
 8008d74:	4653      	movcc	r3, sl
 8008d76:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8008d78:	fb93 f3f1 	sdiv	r3, r3, r1
 8008d7c:	463a      	mov	r2, r7
 8008d7e:	434b      	muls	r3, r1
 8008d80:	4630      	mov	r0, r6
 8008d82:	69e1      	ldr	r1, [r4, #28]
 8008d84:	47a8      	blx	r5
 8008d86:	1e05      	subs	r5, r0, #0
 8008d88:	dcb9      	bgt.n	8008cfe <__sfvwrite_r+0x1ba>
 8008d8a:	e78c      	b.n	8008ca6 <__sfvwrite_r+0x162>
 8008d8c:	e9d8 ab00 	ldrd	sl, fp, [r8]
 8008d90:	2000      	movs	r0, #0
 8008d92:	f108 0808 	add.w	r8, r8, #8
 8008d96:	e6f3      	b.n	8008b80 <__sfvwrite_r+0x3c>
 8008d98:	f10b 0701 	add.w	r7, fp, #1
 8008d9c:	e700      	b.n	8008ba0 <__sfvwrite_r+0x5c>
 8008d9e:	4293      	cmp	r3, r2
 8008da0:	dc08      	bgt.n	8008db4 <__sfvwrite_r+0x270>
 8008da2:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8008da4:	69e1      	ldr	r1, [r4, #28]
 8008da6:	4652      	mov	r2, sl
 8008da8:	4630      	mov	r0, r6
 8008daa:	47a8      	blx	r5
 8008dac:	1e05      	subs	r5, r0, #0
 8008dae:	f73f af13 	bgt.w	8008bd8 <__sfvwrite_r+0x94>
 8008db2:	e778      	b.n	8008ca6 <__sfvwrite_r+0x162>
 8008db4:	4651      	mov	r1, sl
 8008db6:	9201      	str	r2, [sp, #4]
 8008db8:	f7fe ff63 	bl	8007c82 <memmove>
 8008dbc:	9a01      	ldr	r2, [sp, #4]
 8008dbe:	68a3      	ldr	r3, [r4, #8]
 8008dc0:	1a9b      	subs	r3, r3, r2
 8008dc2:	60a3      	str	r3, [r4, #8]
 8008dc4:	6823      	ldr	r3, [r4, #0]
 8008dc6:	4413      	add	r3, r2
 8008dc8:	6023      	str	r3, [r4, #0]
 8008dca:	4615      	mov	r5, r2
 8008dcc:	e704      	b.n	8008bd8 <__sfvwrite_r+0x94>
 8008dce:	2001      	movs	r0, #1
 8008dd0:	e70b      	b.n	8008bea <__sfvwrite_r+0xa6>
 8008dd2:	bf00      	nop
 8008dd4:	7ffffc00 	.word	0x7ffffc00

08008dd8 <__swsetup_r>:
 8008dd8:	b538      	push	{r3, r4, r5, lr}
 8008dda:	4b2a      	ldr	r3, [pc, #168]	; (8008e84 <__swsetup_r+0xac>)
 8008ddc:	4605      	mov	r5, r0
 8008dde:	6818      	ldr	r0, [r3, #0]
 8008de0:	460c      	mov	r4, r1
 8008de2:	b118      	cbz	r0, 8008dec <__swsetup_r+0x14>
 8008de4:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8008de6:	b90b      	cbnz	r3, 8008dec <__swsetup_r+0x14>
 8008de8:	f7fb ff50 	bl	8004c8c <__sinit>
 8008dec:	89a3      	ldrh	r3, [r4, #12]
 8008dee:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008df2:	0718      	lsls	r0, r3, #28
 8008df4:	d422      	bmi.n	8008e3c <__swsetup_r+0x64>
 8008df6:	06d9      	lsls	r1, r3, #27
 8008df8:	d407      	bmi.n	8008e0a <__swsetup_r+0x32>
 8008dfa:	2309      	movs	r3, #9
 8008dfc:	602b      	str	r3, [r5, #0]
 8008dfe:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008e02:	81a3      	strh	r3, [r4, #12]
 8008e04:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008e08:	e034      	b.n	8008e74 <__swsetup_r+0x9c>
 8008e0a:	0758      	lsls	r0, r3, #29
 8008e0c:	d512      	bpl.n	8008e34 <__swsetup_r+0x5c>
 8008e0e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8008e10:	b141      	cbz	r1, 8008e24 <__swsetup_r+0x4c>
 8008e12:	f104 0340 	add.w	r3, r4, #64	; 0x40
 8008e16:	4299      	cmp	r1, r3
 8008e18:	d002      	beq.n	8008e20 <__swsetup_r+0x48>
 8008e1a:	4628      	mov	r0, r5
 8008e1c:	f7fc f8cc 	bl	8004fb8 <_free_r>
 8008e20:	2300      	movs	r3, #0
 8008e22:	6323      	str	r3, [r4, #48]	; 0x30
 8008e24:	89a3      	ldrh	r3, [r4, #12]
 8008e26:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008e2a:	81a3      	strh	r3, [r4, #12]
 8008e2c:	2300      	movs	r3, #0
 8008e2e:	6063      	str	r3, [r4, #4]
 8008e30:	6923      	ldr	r3, [r4, #16]
 8008e32:	6023      	str	r3, [r4, #0]
 8008e34:	89a3      	ldrh	r3, [r4, #12]
 8008e36:	f043 0308 	orr.w	r3, r3, #8
 8008e3a:	81a3      	strh	r3, [r4, #12]
 8008e3c:	6923      	ldr	r3, [r4, #16]
 8008e3e:	b94b      	cbnz	r3, 8008e54 <__swsetup_r+0x7c>
 8008e40:	89a3      	ldrh	r3, [r4, #12]
 8008e42:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008e46:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008e4a:	d003      	beq.n	8008e54 <__swsetup_r+0x7c>
 8008e4c:	4621      	mov	r1, r4
 8008e4e:	4628      	mov	r0, r5
 8008e50:	f000 f8ca 	bl	8008fe8 <__smakebuf_r>
 8008e54:	89a0      	ldrh	r0, [r4, #12]
 8008e56:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008e5a:	f010 0301 	ands.w	r3, r0, #1
 8008e5e:	d00a      	beq.n	8008e76 <__swsetup_r+0x9e>
 8008e60:	2300      	movs	r3, #0
 8008e62:	60a3      	str	r3, [r4, #8]
 8008e64:	6963      	ldr	r3, [r4, #20]
 8008e66:	425b      	negs	r3, r3
 8008e68:	61a3      	str	r3, [r4, #24]
 8008e6a:	6923      	ldr	r3, [r4, #16]
 8008e6c:	b943      	cbnz	r3, 8008e80 <__swsetup_r+0xa8>
 8008e6e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008e72:	d1c4      	bne.n	8008dfe <__swsetup_r+0x26>
 8008e74:	bd38      	pop	{r3, r4, r5, pc}
 8008e76:	0781      	lsls	r1, r0, #30
 8008e78:	bf58      	it	pl
 8008e7a:	6963      	ldrpl	r3, [r4, #20]
 8008e7c:	60a3      	str	r3, [r4, #8]
 8008e7e:	e7f4      	b.n	8008e6a <__swsetup_r+0x92>
 8008e80:	2000      	movs	r0, #0
 8008e82:	e7f7      	b.n	8008e74 <__swsetup_r+0x9c>
 8008e84:	20000548 	.word	0x20000548

08008e88 <__fputwc>:
 8008e88:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008e8c:	4680      	mov	r8, r0
 8008e8e:	460e      	mov	r6, r1
 8008e90:	4615      	mov	r5, r2
 8008e92:	f7fe ff11 	bl	8007cb8 <__locale_mb_cur_max>
 8008e96:	2801      	cmp	r0, #1
 8008e98:	d11c      	bne.n	8008ed4 <__fputwc+0x4c>
 8008e9a:	1e73      	subs	r3, r6, #1
 8008e9c:	2bfe      	cmp	r3, #254	; 0xfe
 8008e9e:	d819      	bhi.n	8008ed4 <__fputwc+0x4c>
 8008ea0:	f88d 6004 	strb.w	r6, [sp, #4]
 8008ea4:	4604      	mov	r4, r0
 8008ea6:	2700      	movs	r7, #0
 8008ea8:	f10d 0904 	add.w	r9, sp, #4
 8008eac:	42a7      	cmp	r7, r4
 8008eae:	d020      	beq.n	8008ef2 <__fputwc+0x6a>
 8008eb0:	68ab      	ldr	r3, [r5, #8]
 8008eb2:	f817 1009 	ldrb.w	r1, [r7, r9]
 8008eb6:	3b01      	subs	r3, #1
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	60ab      	str	r3, [r5, #8]
 8008ebc:	da04      	bge.n	8008ec8 <__fputwc+0x40>
 8008ebe:	69aa      	ldr	r2, [r5, #24]
 8008ec0:	4293      	cmp	r3, r2
 8008ec2:	db1a      	blt.n	8008efa <__fputwc+0x72>
 8008ec4:	290a      	cmp	r1, #10
 8008ec6:	d018      	beq.n	8008efa <__fputwc+0x72>
 8008ec8:	682b      	ldr	r3, [r5, #0]
 8008eca:	1c5a      	adds	r2, r3, #1
 8008ecc:	602a      	str	r2, [r5, #0]
 8008ece:	7019      	strb	r1, [r3, #0]
 8008ed0:	3701      	adds	r7, #1
 8008ed2:	e7eb      	b.n	8008eac <__fputwc+0x24>
 8008ed4:	a901      	add	r1, sp, #4
 8008ed6:	f105 035c 	add.w	r3, r5, #92	; 0x5c
 8008eda:	4632      	mov	r2, r6
 8008edc:	4640      	mov	r0, r8
 8008ede:	f000 f845 	bl	8008f6c <_wcrtomb_r>
 8008ee2:	1c41      	adds	r1, r0, #1
 8008ee4:	4604      	mov	r4, r0
 8008ee6:	d1de      	bne.n	8008ea6 <__fputwc+0x1e>
 8008ee8:	89ab      	ldrh	r3, [r5, #12]
 8008eea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008eee:	81ab      	strh	r3, [r5, #12]
 8008ef0:	4606      	mov	r6, r0
 8008ef2:	4630      	mov	r0, r6
 8008ef4:	b003      	add	sp, #12
 8008ef6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008efa:	462a      	mov	r2, r5
 8008efc:	4640      	mov	r0, r8
 8008efe:	f000 f8af 	bl	8009060 <__swbuf_r>
 8008f02:	1c42      	adds	r2, r0, #1
 8008f04:	d1e4      	bne.n	8008ed0 <__fputwc+0x48>
 8008f06:	4606      	mov	r6, r0
 8008f08:	e7f3      	b.n	8008ef2 <__fputwc+0x6a>

08008f0a <_fputwc_r>:
 8008f0a:	6e53      	ldr	r3, [r2, #100]	; 0x64
 8008f0c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008f0e:	4614      	mov	r4, r2
 8008f10:	07da      	lsls	r2, r3, #31
 8008f12:	4605      	mov	r5, r0
 8008f14:	d407      	bmi.n	8008f26 <_fputwc_r+0x1c>
 8008f16:	89a3      	ldrh	r3, [r4, #12]
 8008f18:	059b      	lsls	r3, r3, #22
 8008f1a:	d404      	bmi.n	8008f26 <_fputwc_r+0x1c>
 8008f1c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008f1e:	9101      	str	r1, [sp, #4]
 8008f20:	f7fb ffd8 	bl	8004ed4 <__retarget_lock_acquire_recursive>
 8008f24:	9901      	ldr	r1, [sp, #4]
 8008f26:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008f2a:	0498      	lsls	r0, r3, #18
 8008f2c:	d406      	bmi.n	8008f3c <_fputwc_r+0x32>
 8008f2e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8008f32:	81a3      	strh	r3, [r4, #12]
 8008f34:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008f36:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8008f3a:	6663      	str	r3, [r4, #100]	; 0x64
 8008f3c:	4622      	mov	r2, r4
 8008f3e:	4628      	mov	r0, r5
 8008f40:	f7ff ffa2 	bl	8008e88 <__fputwc>
 8008f44:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008f46:	07da      	lsls	r2, r3, #31
 8008f48:	4605      	mov	r5, r0
 8008f4a:	d405      	bmi.n	8008f58 <_fputwc_r+0x4e>
 8008f4c:	89a3      	ldrh	r3, [r4, #12]
 8008f4e:	059b      	lsls	r3, r3, #22
 8008f50:	d402      	bmi.n	8008f58 <_fputwc_r+0x4e>
 8008f52:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008f54:	f7fb ffbf 	bl	8004ed6 <__retarget_lock_release_recursive>
 8008f58:	4628      	mov	r0, r5
 8008f5a:	b003      	add	sp, #12
 8008f5c:	bd30      	pop	{r4, r5, pc}

08008f5e <abort>:
 8008f5e:	b508      	push	{r3, lr}
 8008f60:	2006      	movs	r0, #6
 8008f62:	f000 f8ef 	bl	8009144 <raise>
 8008f66:	2001      	movs	r0, #1
 8008f68:	f7f8 fa6e 	bl	8001448 <_exit>

08008f6c <_wcrtomb_r>:
 8008f6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008f6e:	4c09      	ldr	r4, [pc, #36]	; (8008f94 <_wcrtomb_r+0x28>)
 8008f70:	b085      	sub	sp, #20
 8008f72:	f8d4 70e0 	ldr.w	r7, [r4, #224]	; 0xe0
 8008f76:	4605      	mov	r5, r0
 8008f78:	461e      	mov	r6, r3
 8008f7a:	b909      	cbnz	r1, 8008f80 <_wcrtomb_r+0x14>
 8008f7c:	460a      	mov	r2, r1
 8008f7e:	a901      	add	r1, sp, #4
 8008f80:	47b8      	blx	r7
 8008f82:	1c43      	adds	r3, r0, #1
 8008f84:	bf01      	itttt	eq
 8008f86:	2300      	moveq	r3, #0
 8008f88:	6033      	streq	r3, [r6, #0]
 8008f8a:	238a      	moveq	r3, #138	; 0x8a
 8008f8c:	602b      	streq	r3, [r5, #0]
 8008f8e:	b005      	add	sp, #20
 8008f90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008f92:	bf00      	nop
 8008f94:	20000550 	.word	0x20000550

08008f98 <__swhatbuf_r>:
 8008f98:	b570      	push	{r4, r5, r6, lr}
 8008f9a:	460c      	mov	r4, r1
 8008f9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008fa0:	2900      	cmp	r1, #0
 8008fa2:	b096      	sub	sp, #88	; 0x58
 8008fa4:	4615      	mov	r5, r2
 8008fa6:	461e      	mov	r6, r3
 8008fa8:	da07      	bge.n	8008fba <__swhatbuf_r+0x22>
 8008faa:	89a1      	ldrh	r1, [r4, #12]
 8008fac:	f011 0180 	ands.w	r1, r1, #128	; 0x80
 8008fb0:	d017      	beq.n	8008fe2 <__swhatbuf_r+0x4a>
 8008fb2:	2100      	movs	r1, #0
 8008fb4:	2340      	movs	r3, #64	; 0x40
 8008fb6:	4608      	mov	r0, r1
 8008fb8:	e00f      	b.n	8008fda <__swhatbuf_r+0x42>
 8008fba:	466a      	mov	r2, sp
 8008fbc:	f000 f8ca 	bl	8009154 <_fstat_r>
 8008fc0:	2800      	cmp	r0, #0
 8008fc2:	dbf2      	blt.n	8008faa <__swhatbuf_r+0x12>
 8008fc4:	9901      	ldr	r1, [sp, #4]
 8008fc6:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8008fca:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8008fce:	4259      	negs	r1, r3
 8008fd0:	4159      	adcs	r1, r3
 8008fd2:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8008fd6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008fda:	6031      	str	r1, [r6, #0]
 8008fdc:	602b      	str	r3, [r5, #0]
 8008fde:	b016      	add	sp, #88	; 0x58
 8008fe0:	bd70      	pop	{r4, r5, r6, pc}
 8008fe2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008fe6:	e7e6      	b.n	8008fb6 <__swhatbuf_r+0x1e>

08008fe8 <__smakebuf_r>:
 8008fe8:	898b      	ldrh	r3, [r1, #12]
 8008fea:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008fec:	079d      	lsls	r5, r3, #30
 8008fee:	4606      	mov	r6, r0
 8008ff0:	460c      	mov	r4, r1
 8008ff2:	d507      	bpl.n	8009004 <__smakebuf_r+0x1c>
 8008ff4:	f104 0343 	add.w	r3, r4, #67	; 0x43
 8008ff8:	6023      	str	r3, [r4, #0]
 8008ffa:	6123      	str	r3, [r4, #16]
 8008ffc:	2301      	movs	r3, #1
 8008ffe:	6163      	str	r3, [r4, #20]
 8009000:	b002      	add	sp, #8
 8009002:	bd70      	pop	{r4, r5, r6, pc}
 8009004:	ab01      	add	r3, sp, #4
 8009006:	466a      	mov	r2, sp
 8009008:	f7ff ffc6 	bl	8008f98 <__swhatbuf_r>
 800900c:	9900      	ldr	r1, [sp, #0]
 800900e:	4605      	mov	r5, r0
 8009010:	4630      	mov	r0, r6
 8009012:	f7fb fb7b 	bl	800470c <_malloc_r>
 8009016:	b948      	cbnz	r0, 800902c <__smakebuf_r+0x44>
 8009018:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800901c:	059a      	lsls	r2, r3, #22
 800901e:	d4ef      	bmi.n	8009000 <__smakebuf_r+0x18>
 8009020:	f023 0303 	bic.w	r3, r3, #3
 8009024:	f043 0302 	orr.w	r3, r3, #2
 8009028:	81a3      	strh	r3, [r4, #12]
 800902a:	e7e3      	b.n	8008ff4 <__smakebuf_r+0xc>
 800902c:	89a3      	ldrh	r3, [r4, #12]
 800902e:	6020      	str	r0, [r4, #0]
 8009030:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009034:	81a3      	strh	r3, [r4, #12]
 8009036:	9b00      	ldr	r3, [sp, #0]
 8009038:	6163      	str	r3, [r4, #20]
 800903a:	9b01      	ldr	r3, [sp, #4]
 800903c:	6120      	str	r0, [r4, #16]
 800903e:	b15b      	cbz	r3, 8009058 <__smakebuf_r+0x70>
 8009040:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009044:	4630      	mov	r0, r6
 8009046:	f000 f897 	bl	8009178 <_isatty_r>
 800904a:	b128      	cbz	r0, 8009058 <__smakebuf_r+0x70>
 800904c:	89a3      	ldrh	r3, [r4, #12]
 800904e:	f023 0303 	bic.w	r3, r3, #3
 8009052:	f043 0301 	orr.w	r3, r3, #1
 8009056:	81a3      	strh	r3, [r4, #12]
 8009058:	89a3      	ldrh	r3, [r4, #12]
 800905a:	431d      	orrs	r5, r3
 800905c:	81a5      	strh	r5, [r4, #12]
 800905e:	e7cf      	b.n	8009000 <__smakebuf_r+0x18>

08009060 <__swbuf_r>:
 8009060:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009062:	460e      	mov	r6, r1
 8009064:	4614      	mov	r4, r2
 8009066:	4605      	mov	r5, r0
 8009068:	b118      	cbz	r0, 8009072 <__swbuf_r+0x12>
 800906a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800906c:	b90b      	cbnz	r3, 8009072 <__swbuf_r+0x12>
 800906e:	f7fb fe0d 	bl	8004c8c <__sinit>
 8009072:	69a3      	ldr	r3, [r4, #24]
 8009074:	60a3      	str	r3, [r4, #8]
 8009076:	89a3      	ldrh	r3, [r4, #12]
 8009078:	0719      	lsls	r1, r3, #28
 800907a:	d529      	bpl.n	80090d0 <__swbuf_r+0x70>
 800907c:	6923      	ldr	r3, [r4, #16]
 800907e:	b33b      	cbz	r3, 80090d0 <__swbuf_r+0x70>
 8009080:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009084:	b2f6      	uxtb	r6, r6
 8009086:	049a      	lsls	r2, r3, #18
 8009088:	4637      	mov	r7, r6
 800908a:	d52a      	bpl.n	80090e2 <__swbuf_r+0x82>
 800908c:	6823      	ldr	r3, [r4, #0]
 800908e:	6922      	ldr	r2, [r4, #16]
 8009090:	1a98      	subs	r0, r3, r2
 8009092:	6963      	ldr	r3, [r4, #20]
 8009094:	4283      	cmp	r3, r0
 8009096:	dc04      	bgt.n	80090a2 <__swbuf_r+0x42>
 8009098:	4621      	mov	r1, r4
 800909a:	4628      	mov	r0, r5
 800909c:	f7fd fb20 	bl	80066e0 <_fflush_r>
 80090a0:	b9e0      	cbnz	r0, 80090dc <__swbuf_r+0x7c>
 80090a2:	68a3      	ldr	r3, [r4, #8]
 80090a4:	3b01      	subs	r3, #1
 80090a6:	60a3      	str	r3, [r4, #8]
 80090a8:	6823      	ldr	r3, [r4, #0]
 80090aa:	1c5a      	adds	r2, r3, #1
 80090ac:	6022      	str	r2, [r4, #0]
 80090ae:	701e      	strb	r6, [r3, #0]
 80090b0:	6962      	ldr	r2, [r4, #20]
 80090b2:	1c43      	adds	r3, r0, #1
 80090b4:	429a      	cmp	r2, r3
 80090b6:	d004      	beq.n	80090c2 <__swbuf_r+0x62>
 80090b8:	89a3      	ldrh	r3, [r4, #12]
 80090ba:	07db      	lsls	r3, r3, #31
 80090bc:	d506      	bpl.n	80090cc <__swbuf_r+0x6c>
 80090be:	2e0a      	cmp	r6, #10
 80090c0:	d104      	bne.n	80090cc <__swbuf_r+0x6c>
 80090c2:	4621      	mov	r1, r4
 80090c4:	4628      	mov	r0, r5
 80090c6:	f7fd fb0b 	bl	80066e0 <_fflush_r>
 80090ca:	b938      	cbnz	r0, 80090dc <__swbuf_r+0x7c>
 80090cc:	4638      	mov	r0, r7
 80090ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80090d0:	4621      	mov	r1, r4
 80090d2:	4628      	mov	r0, r5
 80090d4:	f7ff fe80 	bl	8008dd8 <__swsetup_r>
 80090d8:	2800      	cmp	r0, #0
 80090da:	d0d1      	beq.n	8009080 <__swbuf_r+0x20>
 80090dc:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80090e0:	e7f4      	b.n	80090cc <__swbuf_r+0x6c>
 80090e2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80090e6:	81a3      	strh	r3, [r4, #12]
 80090e8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80090ea:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80090ee:	6663      	str	r3, [r4, #100]	; 0x64
 80090f0:	e7cc      	b.n	800908c <__swbuf_r+0x2c>

080090f2 <_raise_r>:
 80090f2:	291f      	cmp	r1, #31
 80090f4:	b538      	push	{r3, r4, r5, lr}
 80090f6:	4604      	mov	r4, r0
 80090f8:	460d      	mov	r5, r1
 80090fa:	d904      	bls.n	8009106 <_raise_r+0x14>
 80090fc:	2316      	movs	r3, #22
 80090fe:	6003      	str	r3, [r0, #0]
 8009100:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009104:	bd38      	pop	{r3, r4, r5, pc}
 8009106:	f8d0 2118 	ldr.w	r2, [r0, #280]	; 0x118
 800910a:	b112      	cbz	r2, 8009112 <_raise_r+0x20>
 800910c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009110:	b94b      	cbnz	r3, 8009126 <_raise_r+0x34>
 8009112:	4620      	mov	r0, r4
 8009114:	f000 f852 	bl	80091bc <_getpid_r>
 8009118:	462a      	mov	r2, r5
 800911a:	4601      	mov	r1, r0
 800911c:	4620      	mov	r0, r4
 800911e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009122:	f000 b839 	b.w	8009198 <_kill_r>
 8009126:	2b01      	cmp	r3, #1
 8009128:	d00a      	beq.n	8009140 <_raise_r+0x4e>
 800912a:	1c59      	adds	r1, r3, #1
 800912c:	d103      	bne.n	8009136 <_raise_r+0x44>
 800912e:	2316      	movs	r3, #22
 8009130:	6003      	str	r3, [r0, #0]
 8009132:	2001      	movs	r0, #1
 8009134:	e7e6      	b.n	8009104 <_raise_r+0x12>
 8009136:	2400      	movs	r4, #0
 8009138:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800913c:	4628      	mov	r0, r5
 800913e:	4798      	blx	r3
 8009140:	2000      	movs	r0, #0
 8009142:	e7df      	b.n	8009104 <_raise_r+0x12>

08009144 <raise>:
 8009144:	4b02      	ldr	r3, [pc, #8]	; (8009150 <raise+0xc>)
 8009146:	4601      	mov	r1, r0
 8009148:	6818      	ldr	r0, [r3, #0]
 800914a:	f7ff bfd2 	b.w	80090f2 <_raise_r>
 800914e:	bf00      	nop
 8009150:	20000548 	.word	0x20000548

08009154 <_fstat_r>:
 8009154:	b538      	push	{r3, r4, r5, lr}
 8009156:	4d07      	ldr	r5, [pc, #28]	; (8009174 <_fstat_r+0x20>)
 8009158:	2300      	movs	r3, #0
 800915a:	4604      	mov	r4, r0
 800915c:	4608      	mov	r0, r1
 800915e:	4611      	mov	r1, r2
 8009160:	602b      	str	r3, [r5, #0]
 8009162:	f7f8 f9a4 	bl	80014ae <_fstat>
 8009166:	1c43      	adds	r3, r0, #1
 8009168:	d102      	bne.n	8009170 <_fstat_r+0x1c>
 800916a:	682b      	ldr	r3, [r5, #0]
 800916c:	b103      	cbz	r3, 8009170 <_fstat_r+0x1c>
 800916e:	6023      	str	r3, [r4, #0]
 8009170:	bd38      	pop	{r3, r4, r5, pc}
 8009172:	bf00      	nop
 8009174:	20000b78 	.word	0x20000b78

08009178 <_isatty_r>:
 8009178:	b538      	push	{r3, r4, r5, lr}
 800917a:	4d06      	ldr	r5, [pc, #24]	; (8009194 <_isatty_r+0x1c>)
 800917c:	2300      	movs	r3, #0
 800917e:	4604      	mov	r4, r0
 8009180:	4608      	mov	r0, r1
 8009182:	602b      	str	r3, [r5, #0]
 8009184:	f7f8 f9a3 	bl	80014ce <_isatty>
 8009188:	1c43      	adds	r3, r0, #1
 800918a:	d102      	bne.n	8009192 <_isatty_r+0x1a>
 800918c:	682b      	ldr	r3, [r5, #0]
 800918e:	b103      	cbz	r3, 8009192 <_isatty_r+0x1a>
 8009190:	6023      	str	r3, [r4, #0]
 8009192:	bd38      	pop	{r3, r4, r5, pc}
 8009194:	20000b78 	.word	0x20000b78

08009198 <_kill_r>:
 8009198:	b538      	push	{r3, r4, r5, lr}
 800919a:	4d07      	ldr	r5, [pc, #28]	; (80091b8 <_kill_r+0x20>)
 800919c:	2300      	movs	r3, #0
 800919e:	4604      	mov	r4, r0
 80091a0:	4608      	mov	r0, r1
 80091a2:	4611      	mov	r1, r2
 80091a4:	602b      	str	r3, [r5, #0]
 80091a6:	f7f8 f93f 	bl	8001428 <_kill>
 80091aa:	1c43      	adds	r3, r0, #1
 80091ac:	d102      	bne.n	80091b4 <_kill_r+0x1c>
 80091ae:	682b      	ldr	r3, [r5, #0]
 80091b0:	b103      	cbz	r3, 80091b4 <_kill_r+0x1c>
 80091b2:	6023      	str	r3, [r4, #0]
 80091b4:	bd38      	pop	{r3, r4, r5, pc}
 80091b6:	bf00      	nop
 80091b8:	20000b78 	.word	0x20000b78

080091bc <_getpid_r>:
 80091bc:	f7f8 b92c 	b.w	8001418 <_getpid>

080091c0 <_init>:
 80091c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091c2:	bf00      	nop
 80091c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80091c6:	bc08      	pop	{r3}
 80091c8:	469e      	mov	lr, r3
 80091ca:	4770      	bx	lr

080091cc <_fini>:
 80091cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091ce:	bf00      	nop
 80091d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80091d2:	bc08      	pop	{r3}
 80091d4:	469e      	mov	lr, r3
 80091d6:	4770      	bx	lr
